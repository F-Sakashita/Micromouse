
Test_ICM-20602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005140  08005140  00015140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005428  08005428  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005430  08005430  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001d8  0800560c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  0800560c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007930  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ee  00000000  00000000  00027b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  00029528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  00029da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e937  00000000  00000000  0002a530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000677d  00000000  00000000  00048e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a55a2  00000000  00000000  0004f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4b86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000f4c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005124 	.word	0x08005124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08005124 	.word	0x08005124

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_SYSTICK_EnableIT+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <LL_SYSTICK_EnableIT+0x1c>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <SystickTimer_Interrupt>:

#define SYSTICKTIMER_MS_PER_COUNT	(1)		//1Countが何msecかを定義(1ms以上)

//割り込み関数用タイマーカウント関数
void SystickTimer_Interrupt(void)
{
 8000f08:	b490      	push	{r4, r7}
 8000f0a:	af00      	add	r7, sp, #0
	__u64SystickTimeCount += SYSTICKTIMER_MS_PER_COUNT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystickTimer_Interrupt+0x20>)
 8000f0e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f12:	1c4b      	adds	r3, r1, #1
 8000f14:	f142 0400 	adc.w	r4, r2, #0
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <SystickTimer_Interrupt+0x20>)
 8000f1a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc90      	pop	{r4, r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001f8 	.word	0x200001f8

08000f2c <SystickTimer_EnableInterrupt>:

//割り込み有効
void SystickTimer_EnableInterrupt(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8000f30:	f7ff ffda 	bl	8000ee8 <LL_SYSTICK_EnableIT>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SystickTimer_SetSamplingTime>:
	LL_SYSTICK_DisableIT();
}

//サンプリングタイムの設定
void SystickTimer_SetSamplingTime(uint16_t u16SamplingTimeMs)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	if(0u == u16SamplingTimeMs){
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <SystickTimer_SetSamplingTime+0x18>
		//0指定の場合はデフォルト値を設定
		__u16SamplingTimeMs = SYSTICKTIMER_DEFAULT_SAMPLING_TIME_MS;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystickTimer_SetSamplingTime+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	801a      	strh	r2, [r3, #0]
	}else{
		__u16SamplingTimeMs = u16SamplingTimeMs;
	}
}
 8000f4e:	e002      	b.n	8000f56 <SystickTimer_SetSamplingTime+0x1e>
		__u16SamplingTimeMs = u16SamplingTimeMs;
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <SystickTimer_SetSamplingTime+0x2c>)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	8013      	strh	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001f4 	.word	0x200001f4

08000f68 <SystickTimer_IsSamplingTimeElapsed>:
//サンプリングタイムの経過判定
bool SystickTimer_IsSamplingTimeElapsed(void)
{
 8000f68:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
	//常に0以下の場合はFalseを即Return
	if(__u64SystickTimeCount <= 0u){
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <SystickTimer_IsSamplingTimeElapsed+0x64>)
 8000f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f76:	4323      	orrs	r3, r4
 8000f78:	d101      	bne.n	8000f7e <SystickTimer_IsSamplingTimeElapsed+0x16>
		return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e020      	b.n	8000fc0 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	static uint64_t u64LastTimeMs = 0;
	uint64_t u64CurrentTimeMs = __u64SystickTimeCount;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <SystickTimer_IsSamplingTimeElapsed+0x64>)
 8000f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f84:	e9c7 3400 	strd	r3, r4, [r7]

	if(__u16SamplingTimeMs <= u64CurrentTimeMs - u64LastTimeMs){
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <SystickTimer_IsSamplingTimeElapsed+0x68>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f04f 0400 	mov.w	r4, #0
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8000f94:	e9d2 bc00 	ldrd	fp, ip, [r2]
 8000f98:	e9d7 5600 	ldrd	r5, r6, [r7]
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	ebb1 010b 	subs.w	r1, r1, fp
 8000fa4:	eb62 020c 	sbc.w	r2, r2, ip
 8000fa8:	42a2      	cmp	r2, r4
 8000faa:	bf08      	it	eq
 8000fac:	4299      	cmpeq	r1, r3
 8000fae:	d306      	bcc.n	8000fbe <SystickTimer_IsSamplingTimeElapsed+0x56>
		u64LastTimeMs = u64CurrentTimeMs;
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8000fb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000fb6:	e9c2 3400 	strd	r3, r4, [r2]
		return true;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	return false;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8000fca:	4770      	bx	lr
 8000fcc:	200001f8 	.word	0x200001f8
 8000fd0:	200001f4 	.word	0x200001f4
 8000fd4:	20000200 	.word	0x20000200

08000fd8 <SystickTimer_GetTimeMS>:

//起動時からの時間取得 [ms]
uint64_t SystickTimer_GetTimeMS(void)
{
 8000fd8:	b490      	push	{r4, r7}
 8000fda:	af00      	add	r7, sp, #0
	return __u64SystickTimeCount;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <SystickTimer_GetTimeMS+0x14>)
 8000fde:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc90      	pop	{r4, r7}
 8000fea:	4770      	bx	lr
 8000fec:	200001f8 	.word	0x200001f8

08000ff0 <SystickTimer_IsTimeElapsed>:
	LL_mDelay(u32DelayMs);
}

//指定時間経過
bool SystickTimer_IsTimeElapsed(uint64_t u64StartTimeMs ,uint32_t u32IntervalMs)
{
 8000ff0:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
	if((uint64_t)u32IntervalMs <= SystickTimer_GetTimeMS() - u64StartTimeMs){
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	461c      	mov	r4, r3
 8001002:	f04f 0500 	mov.w	r5, #0
 8001006:	f7ff ffe7 	bl	8000fd8 <SystickTimer_GetTimeMS>
 800100a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800100e:	1a80      	subs	r0, r0, r2
 8001010:	eb61 0103 	sbc.w	r1, r1, r3
 8001014:	4683      	mov	fp, r0
 8001016:	468c      	mov	ip, r1
 8001018:	45ac      	cmp	ip, r5
 800101a:	bf08      	it	eq
 800101c:	45a3      	cmpeq	fp, r4
 800101e:	d301      	bcc.n	8001024 <SystickTimer_IsTimeElapsed+0x34>
		return true;
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <SystickTimer_IsTimeElapsed+0x36>
	}
	return false;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}

08001030 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800

08001060 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <LL_SYSCFG_SetEXTISource+0x58>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3302      	adds	r3, #2
 8001072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	43db      	mvns	r3, r3
 800107c:	ea02 0103 	and.w	r1, r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	fa03 f202 	lsl.w	r2, r3, r2
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <LL_SYSCFG_SetEXTISource+0x58>)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	430a      	orrs	r2, r1
 80010a6:	3302      	adds	r3, #2
 80010a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40013800 	.word	0x40013800

080010bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	613b      	str	r3, [r7, #16]
  return result;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2103      	movs	r1, #3
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	61bb      	str	r3, [r7, #24]
  return result;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800111a:	b480      	push	{r7}
 800111c:	b089      	sub	sp, #36	; 0x24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	613b      	str	r3, [r7, #16]
  return result;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2103      	movs	r1, #3
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	401a      	ands	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	61bb      	str	r3, [r7, #24]
  return result;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	431a      	orrs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	60da      	str	r2, [r3, #12]
}
 800116c:	bf00      	nop
 800116e:	3724      	adds	r7, #36	; 0x24
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011b8:	2004      	movs	r0, #4
 80011ba:	f7ff ff39 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011be:	2080      	movs	r0, #128	; 0x80
 80011c0:	f7ff ff36 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff33 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff ff30 	bl	8001030 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 80011d0:	2101      	movs	r1, #1
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_GPIO_Init+0xc8>)
 80011d4:	f7ff ffd0 	bl	8001178 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80011d8:	2120      	movs	r1, #32
 80011da:	4822      	ldr	r0, [pc, #136]	; (8001264 <MX_GPIO_Init+0xcc>)
 80011dc:	f7ff ffcc 	bl	8001178 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80011e0:	4921      	ldr	r1, [pc, #132]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff ff3c 	bl	8001060 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011f6:	2302      	movs	r3, #2
 80011f8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fdbc 	bl	8001d7c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <MX_GPIO_Init+0xc8>)
 800120c:	f7ff ff85 	bl	800111a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_GPIO_Init+0xc8>)
 8001218:	f7ff ff50 	bl	80010bc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800121c:	2301      	movs	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001220:	2301      	movs	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <MX_GPIO_Init+0xc8>)
 8001236:	f000 ff22 	bl	800207e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800123a:	2320      	movs	r3, #32
 800123c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800123e:	2301      	movs	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0xcc>)
 8001254:	f000 ff13 	bl	800207e <LL_GPIO_Init>

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020800 	.word	0x40020800
 8001264:	40020000 	.word	0x40020000
 8001268:	00f00003 	.word	0x00f00003

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LL_RCC_HSI_Enable+0x1c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <LL_RCC_HSI_Enable+0x1c>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LL_RCC_HSI_IsReady+0x20>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40023800 	.word	0x40023800

080012f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4904      	ldr	r1, [pc, #16]	; (8001320 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <LL_RCC_SetSysClkSource+0x24>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 0203 	bic.w	r2, r3, #3
 8001334:	4904      	ldr	r1, [pc, #16]	; (8001348 <LL_RCC_SetSysClkSource+0x24>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4313      	orrs	r3, r2
 800133a:	608b      	str	r3, [r1, #8]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800

0800134c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <LL_RCC_GetSysClkSource+0x18>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 030c 	and.w	r3, r3, #12
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <LL_RCC_SetAHBPrescaler+0x24>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	4904      	ldr	r1, [pc, #16]	; (800138c <LL_RCC_SetAHBPrescaler+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023800 	.word	0x40023800

08001390 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a0:	4904      	ldr	r1, [pc, #16]	; (80013b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40023800 	.word	0x40023800

080013b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800

080013e0 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <LL_RCC_SetTIMPrescaler+0x28>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013f2:	4905      	ldr	r1, [pc, #20]	; (8001408 <LL_RCC_SetTIMPrescaler+0x28>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800

0800140c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <LL_RCC_PLL_Enable+0x1c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <LL_RCC_PLL_Enable+0x1c>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <LL_RCC_PLL_IsReady+0x24>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8001468:	4013      	ands	r3, r2
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	0192      	lsls	r2, r2, #6
 8001474:	430a      	orrs	r2, r1
 8001476:	490c      	ldr	r1, [pc, #48]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001484:	4908      	ldr	r1, [pc, #32]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800
 80014ac:	ffbf8000 	.word	0xffbf8000

080014b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80014c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800

080014e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <LL_APB2_GRP1_EnableClock+0x2c>)
 80014f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800

08001510 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <LL_FLASH_SetLatency+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 020f 	bic.w	r2, r3, #15
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <LL_FLASH_SetLatency+0x24>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40023c00 	.word	0x40023c00

08001538 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_FLASH_GetLatency+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <LL_PWR_EnableOverDriveMode+0x1c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <LL_PWR_EnableOverDriveMode+0x1c>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000

08001574 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001584:	4904      	ldr	r1, [pc, #16]	; (8001598 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40007000 	.word	0x40007000

0800159c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	405a      	eors	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	615a      	str	r2, [r3, #20]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80015c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015ca:	f7ff ff89 	bl	80014e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80015ce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80015d2:	f7ff ff6d 	bl	80014b0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d6:	2007      	movs	r0, #7
 80015d8:	f7ff fe48 	bl	800126c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f830 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e0:	f7ff fdda 	bl	8001198 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015e4:	f000 faa2 	bl	8001b2c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015e8:	f000 f8ca 	bl	8001780 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SystickTimer_EnableInterrupt();
 80015ec:	f7ff fc9e 	bl	8000f2c <SystickTimer_EnableInterrupt>
  SystickTimer_SetSamplingTime(5u);
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7ff fca1 	bl	8000f38 <SystickTimer_SetSamplingTime>

  uint64_t u64StartTimeMs = SystickTimer_GetTimeMS();
 80015f6:	f7ff fcef 	bl	8000fd8 <SystickTimer_GetTimeMS>
 80015fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(SystickTimer_IsSamplingTimeElapsed()){
 80015fe:	f7ff fcb3 	bl	8000f68 <SystickTimer_IsSamplingTimeElapsed>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0fa      	beq.n	80015fe <main+0x3e>
		  if(SystickTimer_IsTimeElapsed(u64StartTimeMs, 500)){
 8001608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800160c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001610:	f7ff fcee 	bl	8000ff0 <SystickTimer_IsTimeElapsed>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f1      	beq.n	80015fe <main+0x3e>
			  u64StartTimeMs = SystickTimer_GetTimeMS();
 800161a:	f7ff fcdd 	bl	8000fd8 <SystickTimer_GetTimeMS>
 800161e:	e9c7 0100 	strd	r0, r1, [r7]
			  printf("Oppai!, %d\n", (int)u64StartTimeMs);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <main+0x78>)
 8001628:	f001 feb0 	bl	800338c <iprintf>

			  LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800162c:	2120      	movs	r1, #32
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <main+0x7c>)
 8001630:	f7ff ffb4 	bl	800159c <LL_GPIO_TogglePin>
	  if(SystickTimer_IsSamplingTimeElapsed()){
 8001634:	e7e3      	b.n	80015fe <main+0x3e>
 8001636:	bf00      	nop
 8001638:	08005140 	.word	0x08005140
 800163c:	40020000 	.word	0x40020000

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001644:	2005      	movs	r0, #5
 8001646:	f7ff ff63 	bl	8001510 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800164a:	bf00      	nop
 800164c:	f7ff ff74 	bl	8001538 <LL_FLASH_GetLatency>
 8001650:	4603      	mov	r3, r0
 8001652:	2b05      	cmp	r3, #5
 8001654:	d1fa      	bne.n	800164c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001656:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800165a:	f7ff ff8b 	bl	8001574 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800165e:	f7ff ff79 	bl	8001554 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001662:	2010      	movs	r0, #16
 8001664:	f7ff fe48 	bl	80012f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001668:	f7ff fe24 	bl	80012b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800166c:	bf00      	nop
 800166e:	f7ff fe31 	bl	80012d4 <LL_RCC_HSI_IsReady>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d1fa      	bne.n	800166e <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 8001678:	2300      	movs	r3, #0
 800167a:	22b4      	movs	r2, #180	; 0xb4
 800167c:	2108      	movs	r1, #8
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fee8 	bl	8001454 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001684:	f7ff fec2 	bl	800140c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001688:	bf00      	nop
 800168a:	f7ff fecf 	bl	800142c <LL_RCC_PLL_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d1fa      	bne.n	800168a <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fe67 	bl	8001368 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800169a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800169e:	f7ff fe77 	bl	8001390 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80016a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016a6:	f7ff fe87 	bl	80013b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fe3a 	bl	8001324 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80016b0:	bf00      	nop
 80016b2:	f7ff fe4b 	bl	800134c <LL_RCC_GetSysClkSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d1fa      	bne.n	80016b2 <SystemClock_Config+0x72>
  {

  }
  LL_Init1msTick(180000000);
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <SystemClock_Config+0x94>)
 80016be:	f001 f9b9 	bl	8002a34 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <SystemClock_Config+0x94>)
 80016c4:	f001 f9c4 	bl	8002a50 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fe89 	bl	80013e0 <LL_RCC_SetTIMPrescaler>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0aba9500 	.word	0x0aba9500

080016d8 <__io_putchar>:

/* USER CODE BEGIN 4 */
void __io_putchar(uint8_t u8WriteData)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(DEBUG_PRINTF_USART_TYPEDEF, u8WriteData);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <__io_putchar+0x1c>)
 80016e8:	f000 fa70 	bl	8001bcc <USART_TransmitByte>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004400 	.word	0x40004400

080016f8 <LL_AHB1_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800170e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40023800 	.word	0x40023800

08001728 <LL_APB1_GRP1_EnableClock>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 800173e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40023800 	.word	0x40023800

08001758 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0210 	bic.w	r2, r3, #16
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	605a      	str	r2, [r3, #4]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	; 0x40
 8001784:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	2228      	movs	r2, #40	; 0x28
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f001 f998 	bl	8002ac4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80017a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a8:	f7ff ffbe 	bl	8001728 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80017ac:	2004      	movs	r0, #4
 80017ae:	f7ff ffa3 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7ff ffa0 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC1   ------> SPI2_MOSI
  PC2   ------> SPI2_MISO
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80017b8:	2302      	movs	r3, #2
 80017ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017bc:	2302      	movs	r3, #2
 80017be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4824      	ldr	r0, [pc, #144]	; (8001868 <MX_SPI2_Init+0xe8>)
 80017d6:	f000 fc52 	bl	800207e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80017da:	2304      	movs	r3, #4
 80017dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017de:	2302      	movs	r3, #2
 80017e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80017ee:	2305      	movs	r3, #5
 80017f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_SPI2_Init+0xe8>)
 80017f8:	f000 fc41 	bl	800207e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001800:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001802:	2302      	movs	r3, #2
 8001804:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001812:	2305      	movs	r3, #5
 8001814:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_SPI2_Init+0xec>)
 800181c:	f000 fc2f 	bl	800207e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001824:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001828:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800182e:	2302      	movs	r3, #2
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800183c:	2310      	movs	r3, #16
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001848:	230a      	movs	r3, #10
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4619      	mov	r1, r3
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_SPI2_Init+0xf0>)
 8001854:	f000 fe1f 	bl	8002496 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001858:	2100      	movs	r1, #0
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_SPI2_Init+0xf0>)
 800185c:	f7ff ff7c 	bl	8001758 <LL_SPI_SetStandard>

}
 8001860:	bf00      	nop
 8001862:	3740      	adds	r7, #64	; 0x40
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020800 	.word	0x40020800
 800186c:	40020400 	.word	0x40020400
 8001870:	40003800 	.word	0x40003800

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickTimer_Interrupt();
 80018c0:	f7ff fb22 	bl	8000f08 <SystickTimer_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
	}

return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fedb 	bl	80016d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
	}
	return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001962:	605a      	str	r2, [r3, #4]
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_isatty>:

int _isatty(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f001 f84c 	bl	8002a70 <__errno>
 80019d8:	4602      	mov	r2, r0
 80019da:	230c      	movs	r3, #12
 80019dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20020000 	.word	0x20020000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	20000208 	.word	0x20000208
 8001a0c:	20000218 	.word	0x20000218

08001a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <SystemInit+0x28>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <SystemInit+0x28>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SystemInit+0x28>)
 8001a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <LL_AHB1_GRP1_EnableClock>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40023800 	.word	0x40023800

08001a6c <LL_APB1_GRP1_EnableClock>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023800 	.word	0x40023800

08001a9c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	615a      	str	r2, [r3, #20]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b5a:	f7ff ff87 	bl	8001a6c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ff6c 	bl	8001a3c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b64:	230c      	movs	r3, #12
 8001b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <MX_USART2_UART_Init+0x98>)
 8001b82:	f000 fa7c 	bl	800207e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001b86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b8a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <MX_USART2_UART_Init+0x9c>)
 8001bac:	f000 fea8 	bl	8002900 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x9c>)
 8001bb2:	f7ff ff83 	bl	8001abc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_USART2_UART_Init+0x9c>)
 8001bb8:	f7ff ff70 	bl	8001a9c <LL_USART_Enable>

}
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40004400 	.word	0x40004400

08001bcc <USART_TransmitByte>:

/* USER CODE BEGIN 1 */
void USART_TransmitByte(LL_USART_InitTypeDef *pUSARTx, uint8_t u8WriteData)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
	LL_USART_TransmitData8(pUSARTx, u8WriteData);
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff96 	bl	8001b0e <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TXE(pUSARTx));
 8001be2:	bf00      	nop
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff7f 	bl	8001ae8 <LL_USART_IsActiveFlag_TXE>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f9      	beq.n	8001be4 <USART_TransmitByte+0x18>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bfe:	e003      	b.n	8001c08 <LoopCopyDataInit>

08001c00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c06:	3104      	adds	r1, #4

08001c08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c10:	d3f6      	bcc.n	8001c00 <CopyDataInit>
  ldr  r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c14:	e002      	b.n	8001c1c <LoopFillZerobss>

08001c16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c18:	f842 3b04 	str.w	r3, [r2], #4

08001c1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c20:	d3f9      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c22:	f7ff fef5 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f000 ff29 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7ff fcc9 	bl	80015c0 <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c34:	08005438 	.word	0x08005438
  ldr  r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c3c:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8001c40:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001c44:	20000218 	.word	0x20000218

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]

}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4904      	ldr	r1, [pc, #16]	; (8001d04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]

}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60cb      	str	r3, [r1, #12]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	791b      	ldrb	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d060      	beq.n	8001e52 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d067      	beq.n	8001e68 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	795b      	ldrb	r3, [r3, #5]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d00e      	beq.n	8001dbe <LL_EXTI_Init+0x42>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d017      	beq.n	8001dd4 <LL_EXTI_Init+0x58>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d120      	bne.n	8001dea <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff85 	bl	8001cbc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff48 	bl	8001c4c <LL_EXTI_EnableIT_0_31>
          break;
 8001dbc:	e018      	b.n	8001df0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff54 	bl	8001c70 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff63 	bl	8001c98 <LL_EXTI_EnableEvent_0_31>
          break;
 8001dd2:	e00d      	b.n	8001df0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff37 	bl	8001c4c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff58 	bl	8001c98 <LL_EXTI_EnableEvent_0_31>
          break;
 8001de8:	e002      	b.n	8001df0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
          break;
 8001dee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	799b      	ldrb	r3, [r3, #6]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d037      	beq.n	8001e68 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d00e      	beq.n	8001e1e <LL_EXTI_Init+0xa2>
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <LL_EXTI_Init+0xb8>
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d120      	bne.n	8001e4a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffa1 	bl	8001d54 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff64 	bl	8001ce4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e1c:	e025      	b.n	8001e6a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff70 	bl	8001d08 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff7f 	bl	8001d30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e32:	e01a      	b.n	8001e6a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff53 	bl	8001ce4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff74 	bl	8001d30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e48:	e00f      	b.n	8001e6a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
            break;
 8001e4e:	bf00      	nop
 8001e50:	e00b      	b.n	8001e6a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff0a 	bl	8001c70 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff2b 	bl	8001cbc <LL_EXTI_DisableEvent_0_31>
 8001e66:	e000      	b.n	8001e6a <LL_EXTI_Init+0xee>
      }
 8001e68:	bf00      	nop
  }
  return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <LL_GPIO_SetPinMode>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	613b      	str	r3, [r7, #16]
  return result;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	61bb      	str	r3, [r7, #24]
  return result;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_GPIO_SetPinOutputType>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_GPIO_SetPinSpeed>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	b089      	sub	sp, #36	; 0x24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	613b      	str	r3, [r7, #16]
  return result;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2103      	movs	r1, #3
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	401a      	ands	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	61bb      	str	r3, [r7, #24]
  return result;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_GPIO_SetPinPull>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	613b      	str	r3, [r7, #16]
  return result;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2103      	movs	r1, #3
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	401a      	ands	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	61bb      	str	r3, [r7, #24]
  return result;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	60da      	str	r2, [r3, #12]
}
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_GPIO_SetAFPin_0_7>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b089      	sub	sp, #36	; 0x24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	613b      	str	r3, [r7, #16]
  return result;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	401a      	ands	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	61bb      	str	r3, [r7, #24]
  return result;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	621a      	str	r2, [r3, #32]
}
 8002010:	bf00      	nop
 8002012:	3724      	adds	r7, #36	; 0x24
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_GPIO_SetAFPin_8_15>:
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	613b      	str	r3, [r7, #16]
  return result;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	210f      	movs	r1, #15
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	61bb      	str	r3, [r7, #24]
  return result;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002072:	bf00      	nop
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b088      	sub	sp, #32
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	613b      	str	r3, [r7, #16]
  return result;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020a8:	e050      	b.n	800214c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d042      	beq.n	8002146 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d003      	beq.n	80020d0 <LL_GPIO_Init+0x52>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d10d      	bne.n	80020ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	461a      	mov	r2, r3
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff12 	bl	8001f02 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	69b9      	ldr	r1, [r7, #24]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fef3 	bl	8001ed2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	461a      	mov	r2, r3
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff33 	bl	8001f60 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d11a      	bne.n	8002138 <LL_GPIO_Init+0xba>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	60bb      	str	r3, [r7, #8]
  return result;
 800210e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b07      	cmp	r3, #7
 8002118:	d807      	bhi.n	800212a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	461a      	mov	r2, r3
 8002120:	69b9      	ldr	r1, [r7, #24]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff4b 	bl	8001fbe <LL_GPIO_SetAFPin_0_7>
 8002128:	e006      	b.n	8002138 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	461a      	mov	r2, r3
 8002130:	69b9      	ldr	r1, [r7, #24]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff72 	bl	800201c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	461a      	mov	r2, r3
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fe97 	bl	8001e74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1a7      	bne.n	80020aa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <LL_RCC_GetSysClkSource>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <LL_RCC_GetSysClkSource+0x18>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <LL_RCC_GetAHBPrescaler>:
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <LL_RCC_GetAHBPrescaler+0x18>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <LL_RCC_GetAPB1Prescaler>:
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <LL_RCC_GetAPB2Prescaler>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <LL_RCC_PLL_GetMainSource+0x18>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <LL_RCC_PLL_GetN+0x18>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40023800 	.word	0x40023800

0800220c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <LL_RCC_PLL_GetP+0x18>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <LL_RCC_PLL_GetR+0x18>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <LL_RCC_PLL_GetDivider+0x18>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002268:	f000 f820 	bl	80022ac <RCC_GetSystemClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f85c 	bl	8002334 <RCC_GetHCLKClockFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f86a 	bl	8002360 <RCC_GetPCLK1ClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f876 	bl	8002388 <RCC_GetPCLK2ClockFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60da      	str	r2, [r3, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80022b6:	f7ff ff55 	bl	8002164 <LL_RCC_GetSysClkSource>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d82d      	bhi.n	800231c <RCC_GetSystemClockFreq+0x70>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <RCC_GetSystemClockFreq+0x1c>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	0800231d 	.word	0x0800231d
 80022d0:	0800231d 	.word	0x0800231d
 80022d4:	0800231d 	.word	0x0800231d
 80022d8:	08002303 	.word	0x08002303
 80022dc:	0800231d 	.word	0x0800231d
 80022e0:	0800231d 	.word	0x0800231d
 80022e4:	0800231d 	.word	0x0800231d
 80022e8:	08002309 	.word	0x08002309
 80022ec:	0800231d 	.word	0x0800231d
 80022f0:	0800231d 	.word	0x0800231d
 80022f4:	0800231d 	.word	0x0800231d
 80022f8:	08002313 	.word	0x08002313
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <RCC_GetSystemClockFreq+0x80>)
 80022fe:	607b      	str	r3, [r7, #4]
      break;
 8002300:	e00f      	b.n	8002322 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <RCC_GetSystemClockFreq+0x84>)
 8002304:	607b      	str	r3, [r7, #4]
      break;
 8002306:	e00c      	b.n	8002322 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002308:	2008      	movs	r0, #8
 800230a:	f000 f851 	bl	80023b0 <RCC_PLL_GetFreqDomain_SYS>
 800230e:	6078      	str	r0, [r7, #4]
      break;
 8002310:	e007      	b.n	8002322 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8002312:	200c      	movs	r0, #12
 8002314:	f000 f84c 	bl	80023b0 <RCC_PLL_GetFreqDomain_SYS>
 8002318:	6078      	str	r0, [r7, #4]
      break;
 800231a:	e002      	b.n	8002322 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <RCC_GetSystemClockFreq+0x80>)
 800231e:	607b      	str	r3, [r7, #4]
      break;
 8002320:	bf00      	nop
  }

  return frequency;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	00f42400 	.word	0x00f42400
 8002330:	007a1200 	.word	0x007a1200

08002334 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800233c:	f7ff ff20 	bl	8002180 <LL_RCC_GetAHBPrescaler>
 8002340:	4603      	mov	r3, r0
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <RCC_GetHCLKClockFreq+0x28>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	40d3      	lsrs	r3, r2
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	0800514c 	.word	0x0800514c

08002360 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002368:	f7ff ff18 	bl	800219c <LL_RCC_GetAPB1Prescaler>
 800236c:	4603      	mov	r3, r0
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <RCC_GetPCLK1ClockFreq+0x24>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	461a      	mov	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	40d3      	lsrs	r3, r2
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	0800515c 	.word	0x0800515c

08002388 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002390:	f7ff ff12 	bl	80021b8 <LL_RCC_GetAPB2Prescaler>
 8002394:	4603      	mov	r3, r0
 8002396:	0b5b      	lsrs	r3, r3, #13
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <RCC_GetPCLK2ClockFreq+0x24>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	40d3      	lsrs	r3, r2
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	0800515c 	.word	0x0800515c

080023b0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80023c4:	f7ff ff06 	bl	80021d4 <LL_RCC_PLL_GetMainSource>
 80023c8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80023d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d4:	d003      	beq.n	80023de <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80023d6:	e005      	b.n	80023e4 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80023da:	617b      	str	r3, [r7, #20]
      break;
 80023dc:	e005      	b.n	80023ea <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	e002      	b.n	80023ea <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80023e6:	617b      	str	r3, [r7, #20]
      break;
 80023e8:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d114      	bne.n	800241a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80023f0:	f7ff ff28 	bl	8002244 <LL_RCC_PLL_GetDivider>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fbb3 f4f2 	udiv	r4, r3, r2
 80023fc:	f7ff fef8 	bl	80021f0 <LL_RCC_PLL_GetN>
 8002400:	4603      	mov	r3, r0
 8002402:	fb03 f404 	mul.w	r4, r3, r4
 8002406:	f7ff ff01 	bl	800220c <LL_RCC_PLL_GetP>
 800240a:	4603      	mov	r3, r0
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fbb4 f3f3 	udiv	r3, r4, r3
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e011      	b.n	800243e <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800241a:	f7ff ff13 	bl	8002244 <LL_RCC_PLL_GetDivider>
 800241e:	4602      	mov	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fbb3 f4f2 	udiv	r4, r3, r2
 8002426:	f7ff fee3 	bl	80021f0 <LL_RCC_PLL_GetN>
 800242a:	4603      	mov	r3, r0
 800242c:	fb03 f404 	mul.w	r4, r3, r4
 8002430:	f7ff fefa 	bl	8002228 <LL_RCC_PLL_GetR>
 8002434:	4603      	mov	r3, r0
 8002436:	0f1b      	lsrs	r3, r3, #28
 8002438:	fbb4 f3f3 	udiv	r3, r4, r3
 800243c:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <LL_SPI_IsEnabled>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d101      	bne.n	8002468 <LL_SPI_IsEnabled+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_SPI_IsEnabled+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffd3 	bl	8002450 <LL_SPI_IsEnabled>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d139      	bne.n	8002524 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	4311      	orrs	r1, r2
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	68d2      	ldr	r2, [r2, #12]
 80024d0:	4311      	orrs	r1, r2
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6912      	ldr	r2, [r2, #16]
 80024d6:	4311      	orrs	r1, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	6952      	ldr	r2, [r2, #20]
 80024dc:	4311      	orrs	r1, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6992      	ldr	r2, [r2, #24]
 80024e2:	4311      	orrs	r1, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	69d2      	ldr	r2, [r2, #28]
 80024e8:	4311      	orrs	r1, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6a12      	ldr	r2, [r2, #32]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0204 	bic.w	r2, r3, #4
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	d105      	bne.n	8002520 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffab 	bl	8002476 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	61da      	str	r2, [r3, #28]
  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <LL_USART_IsEnabled>:
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_USART_SetStopBitsLength>:
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	611a      	str	r2, [r3, #16]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_USART_SetHWFlowCtrl>:
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <LL_USART_SetBaudRate>:
{
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c6:	f040 80c1 	bne.w	800274c <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	461d      	mov	r5, r3
 80025ce:	f04f 0600 	mov.w	r6, #0
 80025d2:	46a8      	mov	r8, r5
 80025d4:	46b1      	mov	r9, r6
 80025d6:	eb18 0308 	adds.w	r3, r8, r8
 80025da:	eb49 0409 	adc.w	r4, r9, r9
 80025de:	4698      	mov	r8, r3
 80025e0:	46a1      	mov	r9, r4
 80025e2:	eb18 0805 	adds.w	r8, r8, r5
 80025e6:	eb49 0906 	adc.w	r9, r9, r6
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025fe:	4688      	mov	r8, r1
 8002600:	4691      	mov	r9, r2
 8002602:	eb18 0005 	adds.w	r0, r8, r5
 8002606:	eb49 0106 	adc.w	r1, r9, r6
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	461d      	mov	r5, r3
 800260e:	f04f 0600 	mov.w	r6, #0
 8002612:	196b      	adds	r3, r5, r5
 8002614:	eb46 0406 	adc.w	r4, r6, r6
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	f7fe fae4 	bl	8000be8 <__aeabi_uldivmod>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	461a      	mov	r2, r3
 8002626:	4bb5      	ldr	r3, [pc, #724]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 8002628:	fba3 2302 	umull	r2, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b29b      	uxth	r3, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	fa1f f883 	uxth.w	r8, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	461d      	mov	r5, r3
 800263a:	f04f 0600 	mov.w	r6, #0
 800263e:	46a9      	mov	r9, r5
 8002640:	46b2      	mov	sl, r6
 8002642:	eb19 0309 	adds.w	r3, r9, r9
 8002646:	eb4a 040a 	adc.w	r4, sl, sl
 800264a:	4699      	mov	r9, r3
 800264c:	46a2      	mov	sl, r4
 800264e:	eb19 0905 	adds.w	r9, r9, r5
 8002652:	eb4a 0a06 	adc.w	sl, sl, r6
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002662:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002666:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800266a:	4689      	mov	r9, r1
 800266c:	4692      	mov	sl, r2
 800266e:	eb19 0005 	adds.w	r0, r9, r5
 8002672:	eb4a 0106 	adc.w	r1, sl, r6
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	461d      	mov	r5, r3
 800267a:	f04f 0600 	mov.w	r6, #0
 800267e:	196b      	adds	r3, r5, r5
 8002680:	eb46 0406 	adc.w	r4, r6, r6
 8002684:	461a      	mov	r2, r3
 8002686:	4623      	mov	r3, r4
 8002688:	f7fe faae 	bl	8000be8 <__aeabi_uldivmod>
 800268c:	4603      	mov	r3, r0
 800268e:	460c      	mov	r4, r1
 8002690:	461a      	mov	r2, r3
 8002692:	4b9a      	ldr	r3, [pc, #616]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a95      	ldr	r2, [pc, #596]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4443      	add	r3, r8
 80026bc:	fa1f f883 	uxth.w	r8, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	461d      	mov	r5, r3
 80026c4:	f04f 0600 	mov.w	r6, #0
 80026c8:	46a9      	mov	r9, r5
 80026ca:	46b2      	mov	sl, r6
 80026cc:	eb19 0309 	adds.w	r3, r9, r9
 80026d0:	eb4a 040a 	adc.w	r4, sl, sl
 80026d4:	4699      	mov	r9, r3
 80026d6:	46a2      	mov	sl, r4
 80026d8:	eb19 0905 	adds.w	r9, r9, r5
 80026dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f4:	4689      	mov	r9, r1
 80026f6:	4692      	mov	sl, r2
 80026f8:	eb19 0005 	adds.w	r0, r9, r5
 80026fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	461d      	mov	r5, r3
 8002704:	f04f 0600 	mov.w	r6, #0
 8002708:	196b      	adds	r3, r5, r5
 800270a:	eb46 0406 	adc.w	r4, r6, r6
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fe fa69 	bl	8000be8 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	461a      	mov	r2, r3
 800271c:	4b77      	ldr	r3, [pc, #476]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2164      	movs	r1, #100	; 0x64
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	3332      	adds	r3, #50	; 0x32
 8002730:	4a72      	ldr	r2, [pc, #456]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	b29b      	uxth	r3, r3
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	b29b      	uxth	r3, r3
 8002740:	4443      	add	r3, r8
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
}
 800274a:	e0d2      	b.n	80028f2 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	469a      	mov	sl, r3
 8002750:	f04f 0b00 	mov.w	fp, #0
 8002754:	46d0      	mov	r8, sl
 8002756:	46d9      	mov	r9, fp
 8002758:	eb18 0308 	adds.w	r3, r8, r8
 800275c:	eb49 0409 	adc.w	r4, r9, r9
 8002760:	4698      	mov	r8, r3
 8002762:	46a1      	mov	r9, r4
 8002764:	eb18 080a 	adds.w	r8, r8, sl
 8002768:	eb49 090b 	adc.w	r9, r9, fp
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002778:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800277c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002780:	4688      	mov	r8, r1
 8002782:	4691      	mov	r9, r2
 8002784:	eb1a 0508 	adds.w	r5, sl, r8
 8002788:	eb4b 0609 	adc.w	r6, fp, r9
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	0094      	lsls	r4, r2, #2
 800279e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027a2:	008b      	lsls	r3, r1, #2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	4628      	mov	r0, r5
 80027aa:	4631      	mov	r1, r6
 80027ac:	f7fe fa1c 	bl	8000be8 <__aeabi_uldivmod>
 80027b0:	4603      	mov	r3, r0
 80027b2:	460c      	mov	r4, r1
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b51      	ldr	r3, [pc, #324]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 80027b8:	fba3 2302 	umull	r2, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b29b      	uxth	r3, r3
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	fa1f f883 	uxth.w	r8, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	469b      	mov	fp, r3
 80027ca:	f04f 0c00 	mov.w	ip, #0
 80027ce:	46d9      	mov	r9, fp
 80027d0:	46e2      	mov	sl, ip
 80027d2:	eb19 0309 	adds.w	r3, r9, r9
 80027d6:	eb4a 040a 	adc.w	r4, sl, sl
 80027da:	4699      	mov	r9, r3
 80027dc:	46a2      	mov	sl, r4
 80027de:	eb19 090b 	adds.w	r9, r9, fp
 80027e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027fa:	4689      	mov	r9, r1
 80027fc:	4692      	mov	sl, r2
 80027fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002802:	eb4c 060a 	adc.w	r6, ip, sl
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	0094      	lsls	r4, r2, #2
 8002818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800281c:	008b      	lsls	r3, r1, #2
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	4628      	mov	r0, r5
 8002824:	4631      	mov	r1, r6
 8002826:	f7fe f9df 	bl	8000be8 <__aeabi_uldivmod>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	461a      	mov	r2, r3
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2164      	movs	r1, #100	; 0x64
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b29b      	uxth	r3, r3
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	b29b      	uxth	r3, r3
 8002854:	4443      	add	r3, r8
 8002856:	fa1f f883 	uxth.w	r8, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	469b      	mov	fp, r3
 800285e:	f04f 0c00 	mov.w	ip, #0
 8002862:	46d9      	mov	r9, fp
 8002864:	46e2      	mov	sl, ip
 8002866:	eb19 0309 	adds.w	r3, r9, r9
 800286a:	eb4a 040a 	adc.w	r4, sl, sl
 800286e:	4699      	mov	r9, r3
 8002870:	46a2      	mov	sl, r4
 8002872:	eb19 090b 	adds.w	r9, r9, fp
 8002876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800288a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800288e:	4689      	mov	r9, r1
 8002890:	4692      	mov	sl, r2
 8002892:	eb1b 0509 	adds.w	r5, fp, r9
 8002896:	eb4c 060a 	adc.w	r6, ip, sl
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	0094      	lsls	r4, r2, #2
 80028ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	4623      	mov	r3, r4
 80028b6:	4628      	mov	r0, r5
 80028b8:	4631      	mov	r1, r6
 80028ba:	f7fe f995 	bl	8000be8 <__aeabi_uldivmod>
 80028be:	4603      	mov	r3, r0
 80028c0:	460c      	mov	r4, r1
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2164      	movs	r1, #100	; 0x64
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <LL_USART_SetBaudRate+0x34c>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4443      	add	r3, r8
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	609a      	str	r2, [r3, #8]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fc:	51eb851f 	.word	0x51eb851f

08002900 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fe11 	bl	800253a <LL_USART_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d15e      	bne.n	80029dc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002926:	f023 030c 	bic.w	r3, r3, #12
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6851      	ldr	r1, [r2, #4]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	6912      	ldr	r2, [r2, #16]
 8002938:	4311      	orrs	r1, r2
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	6992      	ldr	r2, [r2, #24]
 800293e:	430a      	orrs	r2, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fe08 	bl	8002562 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fe15 	bl	8002588 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fc7c 	bl	8002260 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <LL_USART_Init+0xe8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d102      	bne.n	8002976 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e021      	b.n	80029ba <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <LL_USART_Init+0xec>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d102      	bne.n	8002984 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e01a      	b.n	80029ba <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <LL_USART_Init+0xf0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d102      	bne.n	8002992 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e013      	b.n	80029ba <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <LL_USART_Init+0xf4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d102      	bne.n	80029a0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e00c      	b.n	80029ba <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <LL_USART_Init+0xf8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d102      	bne.n	80029ae <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e005      	b.n	80029ba <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <LL_USART_Init+0xfc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fdea 	bl	80025b0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40011000 	.word	0x40011000
 80029ec:	40004400 	.word	0x40004400
 80029f0:	40004800 	.word	0x40004800
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40004c00 	.word	0x40004c00
 80029fc:	40005000 	.word	0x40005000

08002a00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <LL_InitTick+0x30>)
 8002a14:	3b01      	subs	r3, #1
 8002a16:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <LL_InitTick+0x30>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <LL_InitTick+0x30>)
 8002a20:	2205      	movs	r2, #5
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffdd 	bl	8002a00 <LL_InitTick>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <LL_SetSystemCoreClock+0x1c>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <__errno>:
 8002a70:	4b01      	ldr	r3, [pc, #4]	; (8002a78 <__errno+0x8>)
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000004 	.word	0x20000004

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4e0d      	ldr	r6, [pc, #52]	; (8002ab4 <__libc_init_array+0x38>)
 8002a80:	4c0d      	ldr	r4, [pc, #52]	; (8002ab8 <__libc_init_array+0x3c>)
 8002a82:	1ba4      	subs	r4, r4, r6
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	2500      	movs	r5, #0
 8002a88:	42a5      	cmp	r5, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	4e0b      	ldr	r6, [pc, #44]	; (8002abc <__libc_init_array+0x40>)
 8002a8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ac0 <__libc_init_array+0x44>)
 8002a90:	f002 fb48 	bl	8005124 <_init>
 8002a94:	1ba4      	subs	r4, r4, r6
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	2500      	movs	r5, #0
 8002a9a:	42a5      	cmp	r5, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa4:	4798      	blx	r3
 8002aa6:	3501      	adds	r5, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aae:	4798      	blx	r3
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	08005430 	.word	0x08005430
 8002ab8:	08005430 	.word	0x08005430
 8002abc:	08005430 	.word	0x08005430
 8002ac0:	08005434 	.word	0x08005434

08002ac4 <memset>:
 8002ac4:	4402      	add	r2, r0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <__cvt>:
 8002ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	ec55 4b10 	vmov	r4, r5, d0
 8002adc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002ade:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	460e      	mov	r6, r1
 8002ae6:	4691      	mov	r9, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	bfb8      	it	lt
 8002aec:	4622      	movlt	r2, r4
 8002aee:	462b      	mov	r3, r5
 8002af0:	f027 0720 	bic.w	r7, r7, #32
 8002af4:	bfbb      	ittet	lt
 8002af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002afa:	461d      	movlt	r5, r3
 8002afc:	2300      	movge	r3, #0
 8002afe:	232d      	movlt	r3, #45	; 0x2d
 8002b00:	bfb8      	it	lt
 8002b02:	4614      	movlt	r4, r2
 8002b04:	2f46      	cmp	r7, #70	; 0x46
 8002b06:	700b      	strb	r3, [r1, #0]
 8002b08:	d004      	beq.n	8002b14 <__cvt+0x40>
 8002b0a:	2f45      	cmp	r7, #69	; 0x45
 8002b0c:	d100      	bne.n	8002b10 <__cvt+0x3c>
 8002b0e:	3601      	adds	r6, #1
 8002b10:	2102      	movs	r1, #2
 8002b12:	e000      	b.n	8002b16 <__cvt+0x42>
 8002b14:	2103      	movs	r1, #3
 8002b16:	ab03      	add	r3, sp, #12
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	ab02      	add	r3, sp, #8
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4632      	mov	r2, r6
 8002b20:	4653      	mov	r3, sl
 8002b22:	ec45 4b10 	vmov	d0, r4, r5
 8002b26:	f000 fcd7 	bl	80034d8 <_dtoa_r>
 8002b2a:	2f47      	cmp	r7, #71	; 0x47
 8002b2c:	4680      	mov	r8, r0
 8002b2e:	d102      	bne.n	8002b36 <__cvt+0x62>
 8002b30:	f019 0f01 	tst.w	r9, #1
 8002b34:	d026      	beq.n	8002b84 <__cvt+0xb0>
 8002b36:	2f46      	cmp	r7, #70	; 0x46
 8002b38:	eb08 0906 	add.w	r9, r8, r6
 8002b3c:	d111      	bne.n	8002b62 <__cvt+0x8e>
 8002b3e:	f898 3000 	ldrb.w	r3, [r8]
 8002b42:	2b30      	cmp	r3, #48	; 0x30
 8002b44:	d10a      	bne.n	8002b5c <__cvt+0x88>
 8002b46:	2200      	movs	r2, #0
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 8002b52:	b918      	cbnz	r0, 8002b5c <__cvt+0x88>
 8002b54:	f1c6 0601 	rsb	r6, r6, #1
 8002b58:	f8ca 6000 	str.w	r6, [sl]
 8002b5c:	f8da 3000 	ldr.w	r3, [sl]
 8002b60:	4499      	add	r9, r3
 8002b62:	2200      	movs	r2, #0
 8002b64:	2300      	movs	r3, #0
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd ffcd 	bl	8000b08 <__aeabi_dcmpeq>
 8002b6e:	b938      	cbnz	r0, 8002b80 <__cvt+0xac>
 8002b70:	2230      	movs	r2, #48	; 0x30
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	454b      	cmp	r3, r9
 8002b76:	d205      	bcs.n	8002b84 <__cvt+0xb0>
 8002b78:	1c59      	adds	r1, r3, #1
 8002b7a:	9103      	str	r1, [sp, #12]
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e7f8      	b.n	8002b72 <__cvt+0x9e>
 8002b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b84:	9b03      	ldr	r3, [sp, #12]
 8002b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b88:	eba3 0308 	sub.w	r3, r3, r8
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	b004      	add	sp, #16
 8002b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b96 <__exponent>:
 8002b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	bfba      	itte	lt
 8002b9e:	4249      	neglt	r1, r1
 8002ba0:	232d      	movlt	r3, #45	; 0x2d
 8002ba2:	232b      	movge	r3, #43	; 0x2b
 8002ba4:	2909      	cmp	r1, #9
 8002ba6:	f804 2b02 	strb.w	r2, [r4], #2
 8002baa:	7043      	strb	r3, [r0, #1]
 8002bac:	dd20      	ble.n	8002bf0 <__exponent+0x5a>
 8002bae:	f10d 0307 	add.w	r3, sp, #7
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	260a      	movs	r6, #10
 8002bb6:	fb91 f5f6 	sdiv	r5, r1, r6
 8002bba:	fb06 1115 	mls	r1, r6, r5, r1
 8002bbe:	3130      	adds	r1, #48	; 0x30
 8002bc0:	2d09      	cmp	r5, #9
 8002bc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002bc6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002bca:	4629      	mov	r1, r5
 8002bcc:	dc09      	bgt.n	8002be2 <__exponent+0x4c>
 8002bce:	3130      	adds	r1, #48	; 0x30
 8002bd0:	3b02      	subs	r3, #2
 8002bd2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002bd6:	42bb      	cmp	r3, r7
 8002bd8:	4622      	mov	r2, r4
 8002bda:	d304      	bcc.n	8002be6 <__exponent+0x50>
 8002bdc:	1a10      	subs	r0, r2, r0
 8002bde:	b003      	add	sp, #12
 8002be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be2:	4613      	mov	r3, r2
 8002be4:	e7e7      	b.n	8002bb6 <__exponent+0x20>
 8002be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bea:	f804 2b01 	strb.w	r2, [r4], #1
 8002bee:	e7f2      	b.n	8002bd6 <__exponent+0x40>
 8002bf0:	2330      	movs	r3, #48	; 0x30
 8002bf2:	4419      	add	r1, r3
 8002bf4:	7083      	strb	r3, [r0, #2]
 8002bf6:	1d02      	adds	r2, r0, #4
 8002bf8:	70c1      	strb	r1, [r0, #3]
 8002bfa:	e7ef      	b.n	8002bdc <__exponent+0x46>

08002bfc <_printf_float>:
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	b08d      	sub	sp, #52	; 0x34
 8002c02:	460c      	mov	r4, r1
 8002c04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002c08:	4616      	mov	r6, r2
 8002c0a:	461f      	mov	r7, r3
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	f001 fae5 	bl	80041dc <_localeconv_r>
 8002c12:	6803      	ldr	r3, [r0, #0]
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fafa 	bl	8000210 <strlen>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c20:	f8d8 3000 	ldr.w	r3, [r8]
 8002c24:	9005      	str	r0, [sp, #20]
 8002c26:	3307      	adds	r3, #7
 8002c28:	f023 0307 	bic.w	r3, r3, #7
 8002c2c:	f103 0208 	add.w	r2, r3, #8
 8002c30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002c34:	f8d4 b000 	ldr.w	fp, [r4]
 8002c38:	f8c8 2000 	str.w	r2, [r8]
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c44:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002c48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c4c:	9307      	str	r3, [sp, #28]
 8002c4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c56:	4ba7      	ldr	r3, [pc, #668]	; (8002ef4 <_printf_float+0x2f8>)
 8002c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c5c:	f7fd ff86 	bl	8000b6c <__aeabi_dcmpun>
 8002c60:	bb70      	cbnz	r0, 8002cc0 <_printf_float+0xc4>
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c66:	4ba3      	ldr	r3, [pc, #652]	; (8002ef4 <_printf_float+0x2f8>)
 8002c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c6c:	f7fd ff60 	bl	8000b30 <__aeabi_dcmple>
 8002c70:	bb30      	cbnz	r0, 8002cc0 <_printf_float+0xc4>
 8002c72:	2200      	movs	r2, #0
 8002c74:	2300      	movs	r3, #0
 8002c76:	4640      	mov	r0, r8
 8002c78:	4649      	mov	r1, r9
 8002c7a:	f7fd ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8002c7e:	b110      	cbz	r0, 8002c86 <_printf_float+0x8a>
 8002c80:	232d      	movs	r3, #45	; 0x2d
 8002c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c86:	4a9c      	ldr	r2, [pc, #624]	; (8002ef8 <_printf_float+0x2fc>)
 8002c88:	4b9c      	ldr	r3, [pc, #624]	; (8002efc <_printf_float+0x300>)
 8002c8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c8e:	bf8c      	ite	hi
 8002c90:	4690      	movhi	r8, r2
 8002c92:	4698      	movls	r8, r3
 8002c94:	2303      	movs	r3, #3
 8002c96:	f02b 0204 	bic.w	r2, fp, #4
 8002c9a:	6123      	str	r3, [r4, #16]
 8002c9c:	6022      	str	r2, [r4, #0]
 8002c9e:	f04f 0900 	mov.w	r9, #0
 8002ca2:	9700      	str	r7, [sp, #0]
 8002ca4:	4633      	mov	r3, r6
 8002ca6:	aa0b      	add	r2, sp, #44	; 0x2c
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4628      	mov	r0, r5
 8002cac:	f000 f9e6 	bl	800307c <_printf_common>
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	f040 808d 	bne.w	8002dd0 <_printf_float+0x1d4>
 8002cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cba:	b00d      	add	sp, #52	; 0x34
 8002cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	4640      	mov	r0, r8
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	f7fd ff50 	bl	8000b6c <__aeabi_dcmpun>
 8002ccc:	b110      	cbz	r0, 8002cd4 <_printf_float+0xd8>
 8002cce:	4a8c      	ldr	r2, [pc, #560]	; (8002f00 <_printf_float+0x304>)
 8002cd0:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <_printf_float+0x308>)
 8002cd2:	e7da      	b.n	8002c8a <_printf_float+0x8e>
 8002cd4:	6861      	ldr	r1, [r4, #4]
 8002cd6:	1c4b      	adds	r3, r1, #1
 8002cd8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002cdc:	a80a      	add	r0, sp, #40	; 0x28
 8002cde:	d13e      	bne.n	8002d5e <_printf_float+0x162>
 8002ce0:	2306      	movs	r3, #6
 8002ce2:	6063      	str	r3, [r4, #4]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002cea:	ab09      	add	r3, sp, #36	; 0x24
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	ec49 8b10 	vmov	d0, r8, r9
 8002cf2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002cf6:	6022      	str	r2, [r4, #0]
 8002cf8:	f8cd a004 	str.w	sl, [sp, #4]
 8002cfc:	6861      	ldr	r1, [r4, #4]
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f7ff fee8 	bl	8002ad4 <__cvt>
 8002d04:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002d08:	2b47      	cmp	r3, #71	; 0x47
 8002d0a:	4680      	mov	r8, r0
 8002d0c:	d109      	bne.n	8002d22 <_printf_float+0x126>
 8002d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d10:	1cd8      	adds	r0, r3, #3
 8002d12:	db02      	blt.n	8002d1a <_printf_float+0x11e>
 8002d14:	6862      	ldr	r2, [r4, #4]
 8002d16:	4293      	cmp	r3, r2
 8002d18:	dd47      	ble.n	8002daa <_printf_float+0x1ae>
 8002d1a:	f1aa 0a02 	sub.w	sl, sl, #2
 8002d1e:	fa5f fa8a 	uxtb.w	sl, sl
 8002d22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d28:	d824      	bhi.n	8002d74 <_printf_float+0x178>
 8002d2a:	3901      	subs	r1, #1
 8002d2c:	4652      	mov	r2, sl
 8002d2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d32:	9109      	str	r1, [sp, #36]	; 0x24
 8002d34:	f7ff ff2f 	bl	8002b96 <__exponent>
 8002d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d3a:	1813      	adds	r3, r2, r0
 8002d3c:	2a01      	cmp	r2, #1
 8002d3e:	4681      	mov	r9, r0
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	dc02      	bgt.n	8002d4a <_printf_float+0x14e>
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	07d1      	lsls	r1, r2, #31
 8002d48:	d501      	bpl.n	8002d4e <_printf_float+0x152>
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	6123      	str	r3, [r4, #16]
 8002d4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0a5      	beq.n	8002ca2 <_printf_float+0xa6>
 8002d56:	232d      	movs	r3, #45	; 0x2d
 8002d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5c:	e7a1      	b.n	8002ca2 <_printf_float+0xa6>
 8002d5e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002d62:	f000 8177 	beq.w	8003054 <_printf_float+0x458>
 8002d66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002d6a:	d1bb      	bne.n	8002ce4 <_printf_float+0xe8>
 8002d6c:	2900      	cmp	r1, #0
 8002d6e:	d1b9      	bne.n	8002ce4 <_printf_float+0xe8>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e7b6      	b.n	8002ce2 <_printf_float+0xe6>
 8002d74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002d78:	d119      	bne.n	8002dae <_printf_float+0x1b2>
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	6863      	ldr	r3, [r4, #4]
 8002d7e:	dd0c      	ble.n	8002d9a <_printf_float+0x19e>
 8002d80:	6121      	str	r1, [r4, #16]
 8002d82:	b913      	cbnz	r3, 8002d8a <_printf_float+0x18e>
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	07d2      	lsls	r2, r2, #31
 8002d88:	d502      	bpl.n	8002d90 <_printf_float+0x194>
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	440b      	add	r3, r1
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d92:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d94:	f04f 0900 	mov.w	r9, #0
 8002d98:	e7d9      	b.n	8002d4e <_printf_float+0x152>
 8002d9a:	b913      	cbnz	r3, 8002da2 <_printf_float+0x1a6>
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	07d0      	lsls	r0, r2, #31
 8002da0:	d501      	bpl.n	8002da6 <_printf_float+0x1aa>
 8002da2:	3302      	adds	r3, #2
 8002da4:	e7f3      	b.n	8002d8e <_printf_float+0x192>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e7f1      	b.n	8002d8e <_printf_float+0x192>
 8002daa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002dae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002db2:	4293      	cmp	r3, r2
 8002db4:	db05      	blt.n	8002dc2 <_printf_float+0x1c6>
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	6123      	str	r3, [r4, #16]
 8002dba:	07d1      	lsls	r1, r2, #31
 8002dbc:	d5e8      	bpl.n	8002d90 <_printf_float+0x194>
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	e7e5      	b.n	8002d8e <_printf_float+0x192>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfd4      	ite	le
 8002dc6:	f1c3 0302 	rsble	r3, r3, #2
 8002dca:	2301      	movgt	r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	e7de      	b.n	8002d8e <_printf_float+0x192>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	055a      	lsls	r2, r3, #21
 8002dd4:	d407      	bmi.n	8002de6 <_printf_float+0x1ea>
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	4642      	mov	r2, r8
 8002dda:	4631      	mov	r1, r6
 8002ddc:	4628      	mov	r0, r5
 8002dde:	47b8      	blx	r7
 8002de0:	3001      	adds	r0, #1
 8002de2:	d12b      	bne.n	8002e3c <_printf_float+0x240>
 8002de4:	e767      	b.n	8002cb6 <_printf_float+0xba>
 8002de6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002dea:	f240 80dc 	bls.w	8002fa6 <_printf_float+0x3aa>
 8002dee:	2200      	movs	r2, #0
 8002df0:	2300      	movs	r3, #0
 8002df2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002df6:	f7fd fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d033      	beq.n	8002e66 <_printf_float+0x26a>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <_printf_float+0x30c>)
 8002e02:	4631      	mov	r1, r6
 8002e04:	4628      	mov	r0, r5
 8002e06:	47b8      	blx	r7
 8002e08:	3001      	adds	r0, #1
 8002e0a:	f43f af54 	beq.w	8002cb6 <_printf_float+0xba>
 8002e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	db02      	blt.n	8002e1c <_printf_float+0x220>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	07d8      	lsls	r0, r3, #31
 8002e1a:	d50f      	bpl.n	8002e3c <_printf_float+0x240>
 8002e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e20:	4631      	mov	r1, r6
 8002e22:	4628      	mov	r0, r5
 8002e24:	47b8      	blx	r7
 8002e26:	3001      	adds	r0, #1
 8002e28:	f43f af45 	beq.w	8002cb6 <_printf_float+0xba>
 8002e2c:	f04f 0800 	mov.w	r8, #0
 8002e30:	f104 091a 	add.w	r9, r4, #26
 8002e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4543      	cmp	r3, r8
 8002e3a:	dc09      	bgt.n	8002e50 <_printf_float+0x254>
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	079b      	lsls	r3, r3, #30
 8002e40:	f100 8103 	bmi.w	800304a <_printf_float+0x44e>
 8002e44:	68e0      	ldr	r0, [r4, #12]
 8002e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e48:	4298      	cmp	r0, r3
 8002e4a:	bfb8      	it	lt
 8002e4c:	4618      	movlt	r0, r3
 8002e4e:	e734      	b.n	8002cba <_printf_float+0xbe>
 8002e50:	2301      	movs	r3, #1
 8002e52:	464a      	mov	r2, r9
 8002e54:	4631      	mov	r1, r6
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b8      	blx	r7
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	f43f af2b 	beq.w	8002cb6 <_printf_float+0xba>
 8002e60:	f108 0801 	add.w	r8, r8, #1
 8002e64:	e7e6      	b.n	8002e34 <_printf_float+0x238>
 8002e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dc2b      	bgt.n	8002ec4 <_printf_float+0x2c8>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <_printf_float+0x30c>)
 8002e70:	4631      	mov	r1, r6
 8002e72:	4628      	mov	r0, r5
 8002e74:	47b8      	blx	r7
 8002e76:	3001      	adds	r0, #1
 8002e78:	f43f af1d 	beq.w	8002cb6 <_printf_float+0xba>
 8002e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e7e:	b923      	cbnz	r3, 8002e8a <_printf_float+0x28e>
 8002e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e82:	b913      	cbnz	r3, 8002e8a <_printf_float+0x28e>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	07d9      	lsls	r1, r3, #31
 8002e88:	d5d8      	bpl.n	8002e3c <_printf_float+0x240>
 8002e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4628      	mov	r0, r5
 8002e92:	47b8      	blx	r7
 8002e94:	3001      	adds	r0, #1
 8002e96:	f43f af0e 	beq.w	8002cb6 <_printf_float+0xba>
 8002e9a:	f04f 0900 	mov.w	r9, #0
 8002e9e:	f104 0a1a 	add.w	sl, r4, #26
 8002ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea4:	425b      	negs	r3, r3
 8002ea6:	454b      	cmp	r3, r9
 8002ea8:	dc01      	bgt.n	8002eae <_printf_float+0x2b2>
 8002eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eac:	e794      	b.n	8002dd8 <_printf_float+0x1dc>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	47b8      	blx	r7
 8002eb8:	3001      	adds	r0, #1
 8002eba:	f43f aefc 	beq.w	8002cb6 <_printf_float+0xba>
 8002ebe:	f109 0901 	add.w	r9, r9, #1
 8002ec2:	e7ee      	b.n	8002ea2 <_printf_float+0x2a6>
 8002ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bfa8      	it	ge
 8002ecc:	461a      	movge	r2, r3
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	4691      	mov	r9, r2
 8002ed2:	dd07      	ble.n	8002ee4 <_printf_float+0x2e8>
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4642      	mov	r2, r8
 8002eda:	4628      	mov	r0, r5
 8002edc:	47b8      	blx	r7
 8002ede:	3001      	adds	r0, #1
 8002ee0:	f43f aee9 	beq.w	8002cb6 <_printf_float+0xba>
 8002ee4:	f104 031a 	add.w	r3, r4, #26
 8002ee8:	f04f 0b00 	mov.w	fp, #0
 8002eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ef0:	9306      	str	r3, [sp, #24]
 8002ef2:	e015      	b.n	8002f20 <_printf_float+0x324>
 8002ef4:	7fefffff 	.word	0x7fefffff
 8002ef8:	0800516c 	.word	0x0800516c
 8002efc:	08005168 	.word	0x08005168
 8002f00:	08005174 	.word	0x08005174
 8002f04:	08005170 	.word	0x08005170
 8002f08:	08005178 	.word	0x08005178
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	9a06      	ldr	r2, [sp, #24]
 8002f10:	4631      	mov	r1, r6
 8002f12:	4628      	mov	r0, r5
 8002f14:	47b8      	blx	r7
 8002f16:	3001      	adds	r0, #1
 8002f18:	f43f aecd 	beq.w	8002cb6 <_printf_float+0xba>
 8002f1c:	f10b 0b01 	add.w	fp, fp, #1
 8002f20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f24:	ebaa 0309 	sub.w	r3, sl, r9
 8002f28:	455b      	cmp	r3, fp
 8002f2a:	dcef      	bgt.n	8002f0c <_printf_float+0x310>
 8002f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f30:	429a      	cmp	r2, r3
 8002f32:	44d0      	add	r8, sl
 8002f34:	db15      	blt.n	8002f62 <_printf_float+0x366>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	07da      	lsls	r2, r3, #31
 8002f3a:	d412      	bmi.n	8002f62 <_printf_float+0x366>
 8002f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f40:	eba3 020a 	sub.w	r2, r3, sl
 8002f44:	eba3 0a01 	sub.w	sl, r3, r1
 8002f48:	4592      	cmp	sl, r2
 8002f4a:	bfa8      	it	ge
 8002f4c:	4692      	movge	sl, r2
 8002f4e:	f1ba 0f00 	cmp.w	sl, #0
 8002f52:	dc0e      	bgt.n	8002f72 <_printf_float+0x376>
 8002f54:	f04f 0800 	mov.w	r8, #0
 8002f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002f5c:	f104 091a 	add.w	r9, r4, #26
 8002f60:	e019      	b.n	8002f96 <_printf_float+0x39a>
 8002f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	47b8      	blx	r7
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d1e5      	bne.n	8002f3c <_printf_float+0x340>
 8002f70:	e6a1      	b.n	8002cb6 <_printf_float+0xba>
 8002f72:	4653      	mov	r3, sl
 8002f74:	4642      	mov	r2, r8
 8002f76:	4631      	mov	r1, r6
 8002f78:	4628      	mov	r0, r5
 8002f7a:	47b8      	blx	r7
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d1e9      	bne.n	8002f54 <_printf_float+0x358>
 8002f80:	e699      	b.n	8002cb6 <_printf_float+0xba>
 8002f82:	2301      	movs	r3, #1
 8002f84:	464a      	mov	r2, r9
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	f43f ae92 	beq.w	8002cb6 <_printf_float+0xba>
 8002f92:	f108 0801 	add.w	r8, r8, #1
 8002f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	eba3 030a 	sub.w	r3, r3, sl
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	dcee      	bgt.n	8002f82 <_printf_float+0x386>
 8002fa4:	e74a      	b.n	8002e3c <_printf_float+0x240>
 8002fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fa8:	2a01      	cmp	r2, #1
 8002faa:	dc01      	bgt.n	8002fb0 <_printf_float+0x3b4>
 8002fac:	07db      	lsls	r3, r3, #31
 8002fae:	d53a      	bpl.n	8003026 <_printf_float+0x42a>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	47b8      	blx	r7
 8002fba:	3001      	adds	r0, #1
 8002fbc:	f43f ae7b 	beq.w	8002cb6 <_printf_float+0xba>
 8002fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fc4:	4631      	mov	r1, r6
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	47b8      	blx	r7
 8002fca:	3001      	adds	r0, #1
 8002fcc:	f108 0801 	add.w	r8, r8, #1
 8002fd0:	f43f ae71 	beq.w	8002cb6 <_printf_float+0xba>
 8002fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8002fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f7fd fd91 	bl	8000b08 <__aeabi_dcmpeq>
 8002fe6:	b9c8      	cbnz	r0, 800301c <_printf_float+0x420>
 8002fe8:	4653      	mov	r3, sl
 8002fea:	4642      	mov	r2, r8
 8002fec:	4631      	mov	r1, r6
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d10e      	bne.n	8003014 <_printf_float+0x418>
 8002ff6:	e65e      	b.n	8002cb6 <_printf_float+0xba>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	4652      	mov	r2, sl
 8002ffc:	4631      	mov	r1, r6
 8002ffe:	4628      	mov	r0, r5
 8003000:	47b8      	blx	r7
 8003002:	3001      	adds	r0, #1
 8003004:	f43f ae57 	beq.w	8002cb6 <_printf_float+0xba>
 8003008:	f108 0801 	add.w	r8, r8, #1
 800300c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	4543      	cmp	r3, r8
 8003012:	dcf1      	bgt.n	8002ff8 <_printf_float+0x3fc>
 8003014:	464b      	mov	r3, r9
 8003016:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800301a:	e6de      	b.n	8002dda <_printf_float+0x1de>
 800301c:	f04f 0800 	mov.w	r8, #0
 8003020:	f104 0a1a 	add.w	sl, r4, #26
 8003024:	e7f2      	b.n	800300c <_printf_float+0x410>
 8003026:	2301      	movs	r3, #1
 8003028:	e7df      	b.n	8002fea <_printf_float+0x3ee>
 800302a:	2301      	movs	r3, #1
 800302c:	464a      	mov	r2, r9
 800302e:	4631      	mov	r1, r6
 8003030:	4628      	mov	r0, r5
 8003032:	47b8      	blx	r7
 8003034:	3001      	adds	r0, #1
 8003036:	f43f ae3e 	beq.w	8002cb6 <_printf_float+0xba>
 800303a:	f108 0801 	add.w	r8, r8, #1
 800303e:	68e3      	ldr	r3, [r4, #12]
 8003040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	4543      	cmp	r3, r8
 8003046:	dcf0      	bgt.n	800302a <_printf_float+0x42e>
 8003048:	e6fc      	b.n	8002e44 <_printf_float+0x248>
 800304a:	f04f 0800 	mov.w	r8, #0
 800304e:	f104 0919 	add.w	r9, r4, #25
 8003052:	e7f4      	b.n	800303e <_printf_float+0x442>
 8003054:	2900      	cmp	r1, #0
 8003056:	f43f ae8b 	beq.w	8002d70 <_printf_float+0x174>
 800305a:	2300      	movs	r3, #0
 800305c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003060:	ab09      	add	r3, sp, #36	; 0x24
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	ec49 8b10 	vmov	d0, r8, r9
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	f8cd a004 	str.w	sl, [sp, #4]
 800306e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003072:	4628      	mov	r0, r5
 8003074:	f7ff fd2e 	bl	8002ad4 <__cvt>
 8003078:	4680      	mov	r8, r0
 800307a:	e648      	b.n	8002d0e <_printf_float+0x112>

0800307c <_printf_common>:
 800307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	4691      	mov	r9, r2
 8003082:	461f      	mov	r7, r3
 8003084:	688a      	ldr	r2, [r1, #8]
 8003086:	690b      	ldr	r3, [r1, #16]
 8003088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800308c:	4293      	cmp	r3, r2
 800308e:	bfb8      	it	lt
 8003090:	4613      	movlt	r3, r2
 8003092:	f8c9 3000 	str.w	r3, [r9]
 8003096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800309a:	4606      	mov	r6, r0
 800309c:	460c      	mov	r4, r1
 800309e:	b112      	cbz	r2, 80030a6 <_printf_common+0x2a>
 80030a0:	3301      	adds	r3, #1
 80030a2:	f8c9 3000 	str.w	r3, [r9]
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	0699      	lsls	r1, r3, #26
 80030aa:	bf42      	ittt	mi
 80030ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030b0:	3302      	addmi	r3, #2
 80030b2:	f8c9 3000 	strmi.w	r3, [r9]
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	f015 0506 	ands.w	r5, r5, #6
 80030bc:	d107      	bne.n	80030ce <_printf_common+0x52>
 80030be:	f104 0a19 	add.w	sl, r4, #25
 80030c2:	68e3      	ldr	r3, [r4, #12]
 80030c4:	f8d9 2000 	ldr.w	r2, [r9]
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	42ab      	cmp	r3, r5
 80030cc:	dc28      	bgt.n	8003120 <_printf_common+0xa4>
 80030ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	3300      	adds	r3, #0
 80030d6:	bf18      	it	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	0692      	lsls	r2, r2, #26
 80030dc:	d42d      	bmi.n	800313a <_printf_common+0xbe>
 80030de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030e2:	4639      	mov	r1, r7
 80030e4:	4630      	mov	r0, r6
 80030e6:	47c0      	blx	r8
 80030e8:	3001      	adds	r0, #1
 80030ea:	d020      	beq.n	800312e <_printf_common+0xb2>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	68e5      	ldr	r5, [r4, #12]
 80030f0:	f8d9 2000 	ldr.w	r2, [r9]
 80030f4:	f003 0306 	and.w	r3, r3, #6
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	bf08      	it	eq
 80030fc:	1aad      	subeq	r5, r5, r2
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	6922      	ldr	r2, [r4, #16]
 8003102:	bf0c      	ite	eq
 8003104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003108:	2500      	movne	r5, #0
 800310a:	4293      	cmp	r3, r2
 800310c:	bfc4      	itt	gt
 800310e:	1a9b      	subgt	r3, r3, r2
 8003110:	18ed      	addgt	r5, r5, r3
 8003112:	f04f 0900 	mov.w	r9, #0
 8003116:	341a      	adds	r4, #26
 8003118:	454d      	cmp	r5, r9
 800311a:	d11a      	bne.n	8003152 <_printf_common+0xd6>
 800311c:	2000      	movs	r0, #0
 800311e:	e008      	b.n	8003132 <_printf_common+0xb6>
 8003120:	2301      	movs	r3, #1
 8003122:	4652      	mov	r2, sl
 8003124:	4639      	mov	r1, r7
 8003126:	4630      	mov	r0, r6
 8003128:	47c0      	blx	r8
 800312a:	3001      	adds	r0, #1
 800312c:	d103      	bne.n	8003136 <_printf_common+0xba>
 800312e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003136:	3501      	adds	r5, #1
 8003138:	e7c3      	b.n	80030c2 <_printf_common+0x46>
 800313a:	18e1      	adds	r1, r4, r3
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	2030      	movs	r0, #48	; 0x30
 8003140:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003144:	4422      	add	r2, r4
 8003146:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800314a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800314e:	3302      	adds	r3, #2
 8003150:	e7c5      	b.n	80030de <_printf_common+0x62>
 8003152:	2301      	movs	r3, #1
 8003154:	4622      	mov	r2, r4
 8003156:	4639      	mov	r1, r7
 8003158:	4630      	mov	r0, r6
 800315a:	47c0      	blx	r8
 800315c:	3001      	adds	r0, #1
 800315e:	d0e6      	beq.n	800312e <_printf_common+0xb2>
 8003160:	f109 0901 	add.w	r9, r9, #1
 8003164:	e7d8      	b.n	8003118 <_printf_common+0x9c>
	...

08003168 <_printf_i>:
 8003168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800316c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003170:	460c      	mov	r4, r1
 8003172:	7e09      	ldrb	r1, [r1, #24]
 8003174:	b085      	sub	sp, #20
 8003176:	296e      	cmp	r1, #110	; 0x6e
 8003178:	4617      	mov	r7, r2
 800317a:	4606      	mov	r6, r0
 800317c:	4698      	mov	r8, r3
 800317e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003180:	f000 80b3 	beq.w	80032ea <_printf_i+0x182>
 8003184:	d822      	bhi.n	80031cc <_printf_i+0x64>
 8003186:	2963      	cmp	r1, #99	; 0x63
 8003188:	d036      	beq.n	80031f8 <_printf_i+0x90>
 800318a:	d80a      	bhi.n	80031a2 <_printf_i+0x3a>
 800318c:	2900      	cmp	r1, #0
 800318e:	f000 80b9 	beq.w	8003304 <_printf_i+0x19c>
 8003192:	2958      	cmp	r1, #88	; 0x58
 8003194:	f000 8083 	beq.w	800329e <_printf_i+0x136>
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031a0:	e032      	b.n	8003208 <_printf_i+0xa0>
 80031a2:	2964      	cmp	r1, #100	; 0x64
 80031a4:	d001      	beq.n	80031aa <_printf_i+0x42>
 80031a6:	2969      	cmp	r1, #105	; 0x69
 80031a8:	d1f6      	bne.n	8003198 <_printf_i+0x30>
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	0605      	lsls	r5, r0, #24
 80031b0:	f103 0104 	add.w	r1, r3, #4
 80031b4:	d52a      	bpl.n	800320c <_printf_i+0xa4>
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da03      	bge.n	80031c6 <_printf_i+0x5e>
 80031be:	222d      	movs	r2, #45	; 0x2d
 80031c0:	425b      	negs	r3, r3
 80031c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031c6:	486f      	ldr	r0, [pc, #444]	; (8003384 <_printf_i+0x21c>)
 80031c8:	220a      	movs	r2, #10
 80031ca:	e039      	b.n	8003240 <_printf_i+0xd8>
 80031cc:	2973      	cmp	r1, #115	; 0x73
 80031ce:	f000 809d 	beq.w	800330c <_printf_i+0x1a4>
 80031d2:	d808      	bhi.n	80031e6 <_printf_i+0x7e>
 80031d4:	296f      	cmp	r1, #111	; 0x6f
 80031d6:	d020      	beq.n	800321a <_printf_i+0xb2>
 80031d8:	2970      	cmp	r1, #112	; 0x70
 80031da:	d1dd      	bne.n	8003198 <_printf_i+0x30>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	f043 0320 	orr.w	r3, r3, #32
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	e003      	b.n	80031ee <_printf_i+0x86>
 80031e6:	2975      	cmp	r1, #117	; 0x75
 80031e8:	d017      	beq.n	800321a <_printf_i+0xb2>
 80031ea:	2978      	cmp	r1, #120	; 0x78
 80031ec:	d1d4      	bne.n	8003198 <_printf_i+0x30>
 80031ee:	2378      	movs	r3, #120	; 0x78
 80031f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031f4:	4864      	ldr	r0, [pc, #400]	; (8003388 <_printf_i+0x220>)
 80031f6:	e055      	b.n	80032a4 <_printf_i+0x13c>
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	1d19      	adds	r1, r3, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6011      	str	r1, [r2, #0]
 8003200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003208:	2301      	movs	r3, #1
 800320a:	e08c      	b.n	8003326 <_printf_i+0x1be>
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6011      	str	r1, [r2, #0]
 8003210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003214:	bf18      	it	ne
 8003216:	b21b      	sxthne	r3, r3
 8003218:	e7cf      	b.n	80031ba <_printf_i+0x52>
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	6825      	ldr	r5, [r4, #0]
 800321e:	1d18      	adds	r0, r3, #4
 8003220:	6010      	str	r0, [r2, #0]
 8003222:	0628      	lsls	r0, r5, #24
 8003224:	d501      	bpl.n	800322a <_printf_i+0xc2>
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	e002      	b.n	8003230 <_printf_i+0xc8>
 800322a:	0668      	lsls	r0, r5, #25
 800322c:	d5fb      	bpl.n	8003226 <_printf_i+0xbe>
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4854      	ldr	r0, [pc, #336]	; (8003384 <_printf_i+0x21c>)
 8003232:	296f      	cmp	r1, #111	; 0x6f
 8003234:	bf14      	ite	ne
 8003236:	220a      	movne	r2, #10
 8003238:	2208      	moveq	r2, #8
 800323a:	2100      	movs	r1, #0
 800323c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003240:	6865      	ldr	r5, [r4, #4]
 8003242:	60a5      	str	r5, [r4, #8]
 8003244:	2d00      	cmp	r5, #0
 8003246:	f2c0 8095 	blt.w	8003374 <_printf_i+0x20c>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	f021 0104 	bic.w	r1, r1, #4
 8003250:	6021      	str	r1, [r4, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d13d      	bne.n	80032d2 <_printf_i+0x16a>
 8003256:	2d00      	cmp	r5, #0
 8003258:	f040 808e 	bne.w	8003378 <_printf_i+0x210>
 800325c:	4665      	mov	r5, ip
 800325e:	2a08      	cmp	r2, #8
 8003260:	d10b      	bne.n	800327a <_printf_i+0x112>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	07db      	lsls	r3, r3, #31
 8003266:	d508      	bpl.n	800327a <_printf_i+0x112>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	6862      	ldr	r2, [r4, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	bfde      	ittt	le
 8003270:	2330      	movle	r3, #48	; 0x30
 8003272:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003276:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800327a:	ebac 0305 	sub.w	r3, ip, r5
 800327e:	6123      	str	r3, [r4, #16]
 8003280:	f8cd 8000 	str.w	r8, [sp]
 8003284:	463b      	mov	r3, r7
 8003286:	aa03      	add	r2, sp, #12
 8003288:	4621      	mov	r1, r4
 800328a:	4630      	mov	r0, r6
 800328c:	f7ff fef6 	bl	800307c <_printf_common>
 8003290:	3001      	adds	r0, #1
 8003292:	d14d      	bne.n	8003330 <_printf_i+0x1c8>
 8003294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003298:	b005      	add	sp, #20
 800329a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800329e:	4839      	ldr	r0, [pc, #228]	; (8003384 <_printf_i+0x21c>)
 80032a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	6821      	ldr	r1, [r4, #0]
 80032a8:	1d1d      	adds	r5, r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6015      	str	r5, [r2, #0]
 80032ae:	060a      	lsls	r2, r1, #24
 80032b0:	d50b      	bpl.n	80032ca <_printf_i+0x162>
 80032b2:	07ca      	lsls	r2, r1, #31
 80032b4:	bf44      	itt	mi
 80032b6:	f041 0120 	orrmi.w	r1, r1, #32
 80032ba:	6021      	strmi	r1, [r4, #0]
 80032bc:	b91b      	cbnz	r3, 80032c6 <_printf_i+0x15e>
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	f022 0220 	bic.w	r2, r2, #32
 80032c4:	6022      	str	r2, [r4, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	e7b7      	b.n	800323a <_printf_i+0xd2>
 80032ca:	064d      	lsls	r5, r1, #25
 80032cc:	bf48      	it	mi
 80032ce:	b29b      	uxthmi	r3, r3
 80032d0:	e7ef      	b.n	80032b2 <_printf_i+0x14a>
 80032d2:	4665      	mov	r5, ip
 80032d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80032d8:	fb02 3311 	mls	r3, r2, r1, r3
 80032dc:	5cc3      	ldrb	r3, [r0, r3]
 80032de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032e2:	460b      	mov	r3, r1
 80032e4:	2900      	cmp	r1, #0
 80032e6:	d1f5      	bne.n	80032d4 <_printf_i+0x16c>
 80032e8:	e7b9      	b.n	800325e <_printf_i+0xf6>
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	6825      	ldr	r5, [r4, #0]
 80032ee:	6961      	ldr	r1, [r4, #20]
 80032f0:	1d18      	adds	r0, r3, #4
 80032f2:	6010      	str	r0, [r2, #0]
 80032f4:	0628      	lsls	r0, r5, #24
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	d501      	bpl.n	80032fe <_printf_i+0x196>
 80032fa:	6019      	str	r1, [r3, #0]
 80032fc:	e002      	b.n	8003304 <_printf_i+0x19c>
 80032fe:	066a      	lsls	r2, r5, #25
 8003300:	d5fb      	bpl.n	80032fa <_printf_i+0x192>
 8003302:	8019      	strh	r1, [r3, #0]
 8003304:	2300      	movs	r3, #0
 8003306:	6123      	str	r3, [r4, #16]
 8003308:	4665      	mov	r5, ip
 800330a:	e7b9      	b.n	8003280 <_printf_i+0x118>
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	1d19      	adds	r1, r3, #4
 8003310:	6011      	str	r1, [r2, #0]
 8003312:	681d      	ldr	r5, [r3, #0]
 8003314:	6862      	ldr	r2, [r4, #4]
 8003316:	2100      	movs	r1, #0
 8003318:	4628      	mov	r0, r5
 800331a:	f7fc ff81 	bl	8000220 <memchr>
 800331e:	b108      	cbz	r0, 8003324 <_printf_i+0x1bc>
 8003320:	1b40      	subs	r0, r0, r5
 8003322:	6060      	str	r0, [r4, #4]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	6123      	str	r3, [r4, #16]
 8003328:	2300      	movs	r3, #0
 800332a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800332e:	e7a7      	b.n	8003280 <_printf_i+0x118>
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	462a      	mov	r2, r5
 8003334:	4639      	mov	r1, r7
 8003336:	4630      	mov	r0, r6
 8003338:	47c0      	blx	r8
 800333a:	3001      	adds	r0, #1
 800333c:	d0aa      	beq.n	8003294 <_printf_i+0x12c>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	079b      	lsls	r3, r3, #30
 8003342:	d413      	bmi.n	800336c <_printf_i+0x204>
 8003344:	68e0      	ldr	r0, [r4, #12]
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	4298      	cmp	r0, r3
 800334a:	bfb8      	it	lt
 800334c:	4618      	movlt	r0, r3
 800334e:	e7a3      	b.n	8003298 <_printf_i+0x130>
 8003350:	2301      	movs	r3, #1
 8003352:	464a      	mov	r2, r9
 8003354:	4639      	mov	r1, r7
 8003356:	4630      	mov	r0, r6
 8003358:	47c0      	blx	r8
 800335a:	3001      	adds	r0, #1
 800335c:	d09a      	beq.n	8003294 <_printf_i+0x12c>
 800335e:	3501      	adds	r5, #1
 8003360:	68e3      	ldr	r3, [r4, #12]
 8003362:	9a03      	ldr	r2, [sp, #12]
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	42ab      	cmp	r3, r5
 8003368:	dcf2      	bgt.n	8003350 <_printf_i+0x1e8>
 800336a:	e7eb      	b.n	8003344 <_printf_i+0x1dc>
 800336c:	2500      	movs	r5, #0
 800336e:	f104 0919 	add.w	r9, r4, #25
 8003372:	e7f5      	b.n	8003360 <_printf_i+0x1f8>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ac      	bne.n	80032d2 <_printf_i+0x16a>
 8003378:	7803      	ldrb	r3, [r0, #0]
 800337a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800337e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003382:	e76c      	b.n	800325e <_printf_i+0xf6>
 8003384:	0800517a 	.word	0x0800517a
 8003388:	0800518b 	.word	0x0800518b

0800338c <iprintf>:
 800338c:	b40f      	push	{r0, r1, r2, r3}
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <iprintf+0x2c>)
 8003390:	b513      	push	{r0, r1, r4, lr}
 8003392:	681c      	ldr	r4, [r3, #0]
 8003394:	b124      	cbz	r4, 80033a0 <iprintf+0x14>
 8003396:	69a3      	ldr	r3, [r4, #24]
 8003398:	b913      	cbnz	r3, 80033a0 <iprintf+0x14>
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fe94 	bl	80040c8 <__sinit>
 80033a0:	ab05      	add	r3, sp, #20
 80033a2:	9a04      	ldr	r2, [sp, #16]
 80033a4:	68a1      	ldr	r1, [r4, #8]
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	4620      	mov	r0, r4
 80033aa:	f001 faf3 	bl	8004994 <_vfiprintf_r>
 80033ae:	b002      	add	sp, #8
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	b004      	add	sp, #16
 80033b6:	4770      	bx	lr
 80033b8:	20000004 	.word	0x20000004

080033bc <quorem>:
 80033bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c0:	6903      	ldr	r3, [r0, #16]
 80033c2:	690c      	ldr	r4, [r1, #16]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	4680      	mov	r8, r0
 80033c8:	f2c0 8082 	blt.w	80034d0 <quorem+0x114>
 80033cc:	3c01      	subs	r4, #1
 80033ce:	f101 0714 	add.w	r7, r1, #20
 80033d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80033d6:	f100 0614 	add.w	r6, r0, #20
 80033da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80033de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80033e2:	eb06 030c 	add.w	r3, r6, ip
 80033e6:	3501      	adds	r5, #1
 80033e8:	eb07 090c 	add.w	r9, r7, ip
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80033f2:	b395      	cbz	r5, 800345a <quorem+0x9e>
 80033f4:	f04f 0a00 	mov.w	sl, #0
 80033f8:	4638      	mov	r0, r7
 80033fa:	46b6      	mov	lr, r6
 80033fc:	46d3      	mov	fp, sl
 80033fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8003402:	b293      	uxth	r3, r2
 8003404:	fb05 a303 	mla	r3, r5, r3, sl
 8003408:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800340c:	b29b      	uxth	r3, r3
 800340e:	ebab 0303 	sub.w	r3, fp, r3
 8003412:	0c12      	lsrs	r2, r2, #16
 8003414:	f8de b000 	ldr.w	fp, [lr]
 8003418:	fb05 a202 	mla	r2, r5, r2, sl
 800341c:	fa13 f38b 	uxtah	r3, r3, fp
 8003420:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003424:	fa1f fb82 	uxth.w	fp, r2
 8003428:	f8de 2000 	ldr.w	r2, [lr]
 800342c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003434:	b29b      	uxth	r3, r3
 8003436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800343a:	4581      	cmp	r9, r0
 800343c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003440:	f84e 3b04 	str.w	r3, [lr], #4
 8003444:	d2db      	bcs.n	80033fe <quorem+0x42>
 8003446:	f856 300c 	ldr.w	r3, [r6, ip]
 800344a:	b933      	cbnz	r3, 800345a <quorem+0x9e>
 800344c:	9b01      	ldr	r3, [sp, #4]
 800344e:	3b04      	subs	r3, #4
 8003450:	429e      	cmp	r6, r3
 8003452:	461a      	mov	r2, r3
 8003454:	d330      	bcc.n	80034b8 <quorem+0xfc>
 8003456:	f8c8 4010 	str.w	r4, [r8, #16]
 800345a:	4640      	mov	r0, r8
 800345c:	f001 f8f4 	bl	8004648 <__mcmp>
 8003460:	2800      	cmp	r0, #0
 8003462:	db25      	blt.n	80034b0 <quorem+0xf4>
 8003464:	3501      	adds	r5, #1
 8003466:	4630      	mov	r0, r6
 8003468:	f04f 0c00 	mov.w	ip, #0
 800346c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003470:	f8d0 e000 	ldr.w	lr, [r0]
 8003474:	b293      	uxth	r3, r2
 8003476:	ebac 0303 	sub.w	r3, ip, r3
 800347a:	0c12      	lsrs	r2, r2, #16
 800347c:	fa13 f38e 	uxtah	r3, r3, lr
 8003480:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003488:	b29b      	uxth	r3, r3
 800348a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800348e:	45b9      	cmp	r9, r7
 8003490:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003494:	f840 3b04 	str.w	r3, [r0], #4
 8003498:	d2e8      	bcs.n	800346c <quorem+0xb0>
 800349a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800349e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80034a2:	b92a      	cbnz	r2, 80034b0 <quorem+0xf4>
 80034a4:	3b04      	subs	r3, #4
 80034a6:	429e      	cmp	r6, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	d30b      	bcc.n	80034c4 <quorem+0x108>
 80034ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80034b0:	4628      	mov	r0, r5
 80034b2:	b003      	add	sp, #12
 80034b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	3b04      	subs	r3, #4
 80034bc:	2a00      	cmp	r2, #0
 80034be:	d1ca      	bne.n	8003456 <quorem+0x9a>
 80034c0:	3c01      	subs	r4, #1
 80034c2:	e7c5      	b.n	8003450 <quorem+0x94>
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	3b04      	subs	r3, #4
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	d1ef      	bne.n	80034ac <quorem+0xf0>
 80034cc:	3c01      	subs	r4, #1
 80034ce:	e7ea      	b.n	80034a6 <quorem+0xea>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e7ee      	b.n	80034b2 <quorem+0xf6>
 80034d4:	0000      	movs	r0, r0
	...

080034d8 <_dtoa_r>:
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	ec57 6b10 	vmov	r6, r7, d0
 80034e0:	b097      	sub	sp, #92	; 0x5c
 80034e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80034e4:	9106      	str	r1, [sp, #24]
 80034e6:	4604      	mov	r4, r0
 80034e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80034ea:	9312      	str	r3, [sp, #72]	; 0x48
 80034ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80034f0:	e9cd 6700 	strd	r6, r7, [sp]
 80034f4:	b93d      	cbnz	r5, 8003506 <_dtoa_r+0x2e>
 80034f6:	2010      	movs	r0, #16
 80034f8:	f000 fe7e 	bl	80041f8 <malloc>
 80034fc:	6260      	str	r0, [r4, #36]	; 0x24
 80034fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003502:	6005      	str	r5, [r0, #0]
 8003504:	60c5      	str	r5, [r0, #12]
 8003506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	b151      	cbz	r1, 8003522 <_dtoa_r+0x4a>
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	604a      	str	r2, [r1, #4]
 8003510:	2301      	movs	r3, #1
 8003512:	4093      	lsls	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
 8003516:	4620      	mov	r0, r4
 8003518:	f000 feb5 	bl	8004286 <_Bfree>
 800351c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	1e3b      	subs	r3, r7, #0
 8003524:	bfbb      	ittet	lt
 8003526:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800352a:	9301      	strlt	r3, [sp, #4]
 800352c:	2300      	movge	r3, #0
 800352e:	2201      	movlt	r2, #1
 8003530:	bfac      	ite	ge
 8003532:	f8c8 3000 	strge.w	r3, [r8]
 8003536:	f8c8 2000 	strlt.w	r2, [r8]
 800353a:	4baf      	ldr	r3, [pc, #700]	; (80037f8 <_dtoa_r+0x320>)
 800353c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003540:	ea33 0308 	bics.w	r3, r3, r8
 8003544:	d114      	bne.n	8003570 <_dtoa_r+0x98>
 8003546:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003548:	f242 730f 	movw	r3, #9999	; 0x270f
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	9b00      	ldr	r3, [sp, #0]
 8003550:	b923      	cbnz	r3, 800355c <_dtoa_r+0x84>
 8003552:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003556:	2800      	cmp	r0, #0
 8003558:	f000 8542 	beq.w	8003fe0 <_dtoa_r+0xb08>
 800355c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800355e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800380c <_dtoa_r+0x334>
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8544 	beq.w	8003ff0 <_dtoa_r+0xb18>
 8003568:	f10b 0303 	add.w	r3, fp, #3
 800356c:	f000 bd3e 	b.w	8003fec <_dtoa_r+0xb14>
 8003570:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003574:	2200      	movs	r2, #0
 8003576:	2300      	movs	r3, #0
 8003578:	4630      	mov	r0, r6
 800357a:	4639      	mov	r1, r7
 800357c:	f7fd fac4 	bl	8000b08 <__aeabi_dcmpeq>
 8003580:	4681      	mov	r9, r0
 8003582:	b168      	cbz	r0, 80035a0 <_dtoa_r+0xc8>
 8003584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003586:	2301      	movs	r3, #1
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8524 	beq.w	8003fda <_dtoa_r+0xb02>
 8003592:	4b9a      	ldr	r3, [pc, #616]	; (80037fc <_dtoa_r+0x324>)
 8003594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003596:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	f000 bd28 	b.w	8003ff0 <_dtoa_r+0xb18>
 80035a0:	aa14      	add	r2, sp, #80	; 0x50
 80035a2:	a915      	add	r1, sp, #84	; 0x54
 80035a4:	ec47 6b10 	vmov	d0, r6, r7
 80035a8:	4620      	mov	r0, r4
 80035aa:	f001 f8c4 	bl	8004736 <__d2b>
 80035ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80035b2:	9004      	str	r0, [sp, #16]
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	d07c      	beq.n	80036b2 <_dtoa_r+0x1da>
 80035b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80035bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80035c0:	46b2      	mov	sl, r6
 80035c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80035c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80035ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80035ce:	2200      	movs	r2, #0
 80035d0:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <_dtoa_r+0x328>)
 80035d2:	4650      	mov	r0, sl
 80035d4:	4659      	mov	r1, fp
 80035d6:	f7fc fe77 	bl	80002c8 <__aeabi_dsub>
 80035da:	a381      	add	r3, pc, #516	; (adr r3, 80037e0 <_dtoa_r+0x308>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f82a 	bl	8000638 <__aeabi_dmul>
 80035e4:	a380      	add	r3, pc, #512	; (adr r3, 80037e8 <_dtoa_r+0x310>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f7fc fe6f 	bl	80002cc <__adddf3>
 80035ee:	4606      	mov	r6, r0
 80035f0:	4628      	mov	r0, r5
 80035f2:	460f      	mov	r7, r1
 80035f4:	f7fc ffb6 	bl	8000564 <__aeabi_i2d>
 80035f8:	a37d      	add	r3, pc, #500	; (adr r3, 80037f0 <_dtoa_r+0x318>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fd f81b 	bl	8000638 <__aeabi_dmul>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4630      	mov	r0, r6
 8003608:	4639      	mov	r1, r7
 800360a:	f7fc fe5f 	bl	80002cc <__adddf3>
 800360e:	4606      	mov	r6, r0
 8003610:	460f      	mov	r7, r1
 8003612:	f7fd fac1 	bl	8000b98 <__aeabi_d2iz>
 8003616:	2200      	movs	r2, #0
 8003618:	4682      	mov	sl, r0
 800361a:	2300      	movs	r3, #0
 800361c:	4630      	mov	r0, r6
 800361e:	4639      	mov	r1, r7
 8003620:	f7fd fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8003624:	b148      	cbz	r0, 800363a <_dtoa_r+0x162>
 8003626:	4650      	mov	r0, sl
 8003628:	f7fc ff9c 	bl	8000564 <__aeabi_i2d>
 800362c:	4632      	mov	r2, r6
 800362e:	463b      	mov	r3, r7
 8003630:	f7fd fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8003634:	b908      	cbnz	r0, 800363a <_dtoa_r+0x162>
 8003636:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800363a:	f1ba 0f16 	cmp.w	sl, #22
 800363e:	d859      	bhi.n	80036f4 <_dtoa_r+0x21c>
 8003640:	4970      	ldr	r1, [pc, #448]	; (8003804 <_dtoa_r+0x32c>)
 8003642:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800364a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800364e:	f7fd fa83 	bl	8000b58 <__aeabi_dcmpgt>
 8003652:	2800      	cmp	r0, #0
 8003654:	d050      	beq.n	80036f8 <_dtoa_r+0x220>
 8003656:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800365a:	2300      	movs	r3, #0
 800365c:	930f      	str	r3, [sp, #60]	; 0x3c
 800365e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003660:	1b5d      	subs	r5, r3, r5
 8003662:	f1b5 0801 	subs.w	r8, r5, #1
 8003666:	bf49      	itett	mi
 8003668:	f1c5 0301 	rsbmi	r3, r5, #1
 800366c:	2300      	movpl	r3, #0
 800366e:	9305      	strmi	r3, [sp, #20]
 8003670:	f04f 0800 	movmi.w	r8, #0
 8003674:	bf58      	it	pl
 8003676:	9305      	strpl	r3, [sp, #20]
 8003678:	f1ba 0f00 	cmp.w	sl, #0
 800367c:	db3e      	blt.n	80036fc <_dtoa_r+0x224>
 800367e:	2300      	movs	r3, #0
 8003680:	44d0      	add	r8, sl
 8003682:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	9b06      	ldr	r3, [sp, #24]
 800368a:	2b09      	cmp	r3, #9
 800368c:	f200 8090 	bhi.w	80037b0 <_dtoa_r+0x2d8>
 8003690:	2b05      	cmp	r3, #5
 8003692:	bfc4      	itt	gt
 8003694:	3b04      	subgt	r3, #4
 8003696:	9306      	strgt	r3, [sp, #24]
 8003698:	9b06      	ldr	r3, [sp, #24]
 800369a:	f1a3 0302 	sub.w	r3, r3, #2
 800369e:	bfcc      	ite	gt
 80036a0:	2500      	movgt	r5, #0
 80036a2:	2501      	movle	r5, #1
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	f200 808f 	bhi.w	80037c8 <_dtoa_r+0x2f0>
 80036aa:	e8df f003 	tbb	[pc, r3]
 80036ae:	7f7d      	.short	0x7f7d
 80036b0:	7131      	.short	0x7131
 80036b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80036b6:	441d      	add	r5, r3
 80036b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80036bc:	2820      	cmp	r0, #32
 80036be:	dd13      	ble.n	80036e8 <_dtoa_r+0x210>
 80036c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80036c4:	9b00      	ldr	r3, [sp, #0]
 80036c6:	fa08 f800 	lsl.w	r8, r8, r0
 80036ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80036ce:	fa23 f000 	lsr.w	r0, r3, r0
 80036d2:	ea48 0000 	orr.w	r0, r8, r0
 80036d6:	f7fc ff35 	bl	8000544 <__aeabi_ui2d>
 80036da:	2301      	movs	r3, #1
 80036dc:	4682      	mov	sl, r0
 80036de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80036e2:	3d01      	subs	r5, #1
 80036e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80036e6:	e772      	b.n	80035ce <_dtoa_r+0xf6>
 80036e8:	9b00      	ldr	r3, [sp, #0]
 80036ea:	f1c0 0020 	rsb	r0, r0, #32
 80036ee:	fa03 f000 	lsl.w	r0, r3, r0
 80036f2:	e7f0      	b.n	80036d6 <_dtoa_r+0x1fe>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e7b1      	b.n	800365c <_dtoa_r+0x184>
 80036f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80036fa:	e7b0      	b.n	800365e <_dtoa_r+0x186>
 80036fc:	9b05      	ldr	r3, [sp, #20]
 80036fe:	eba3 030a 	sub.w	r3, r3, sl
 8003702:	9305      	str	r3, [sp, #20]
 8003704:	f1ca 0300 	rsb	r3, sl, #0
 8003708:	9307      	str	r3, [sp, #28]
 800370a:	2300      	movs	r3, #0
 800370c:	930e      	str	r3, [sp, #56]	; 0x38
 800370e:	e7bb      	b.n	8003688 <_dtoa_r+0x1b0>
 8003710:	2301      	movs	r3, #1
 8003712:	930a      	str	r3, [sp, #40]	; 0x28
 8003714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	dd59      	ble.n	80037ce <_dtoa_r+0x2f6>
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	4699      	mov	r9, r3
 800371e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003720:	2200      	movs	r2, #0
 8003722:	6072      	str	r2, [r6, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	f102 0014 	add.w	r0, r2, #20
 800372a:	4298      	cmp	r0, r3
 800372c:	6871      	ldr	r1, [r6, #4]
 800372e:	d953      	bls.n	80037d8 <_dtoa_r+0x300>
 8003730:	4620      	mov	r0, r4
 8003732:	f000 fd74 	bl	800421e <_Balloc>
 8003736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003738:	6030      	str	r0, [r6, #0]
 800373a:	f1b9 0f0e 	cmp.w	r9, #14
 800373e:	f8d3 b000 	ldr.w	fp, [r3]
 8003742:	f200 80e6 	bhi.w	8003912 <_dtoa_r+0x43a>
 8003746:	2d00      	cmp	r5, #0
 8003748:	f000 80e3 	beq.w	8003912 <_dtoa_r+0x43a>
 800374c:	ed9d 7b00 	vldr	d7, [sp]
 8003750:	f1ba 0f00 	cmp.w	sl, #0
 8003754:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003758:	dd74      	ble.n	8003844 <_dtoa_r+0x36c>
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <_dtoa_r+0x32c>)
 800375c:	f00a 030f 	and.w	r3, sl, #15
 8003760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003764:	ed93 7b00 	vldr	d7, [r3]
 8003768:	ea4f 162a 	mov.w	r6, sl, asr #4
 800376c:	06f0      	lsls	r0, r6, #27
 800376e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003772:	d565      	bpl.n	8003840 <_dtoa_r+0x368>
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <_dtoa_r+0x330>)
 8003776:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800377a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800377e:	f7fd f885 	bl	800088c <__aeabi_ddiv>
 8003782:	e9cd 0100 	strd	r0, r1, [sp]
 8003786:	f006 060f 	and.w	r6, r6, #15
 800378a:	2503      	movs	r5, #3
 800378c:	4f1e      	ldr	r7, [pc, #120]	; (8003808 <_dtoa_r+0x330>)
 800378e:	e04c      	b.n	800382a <_dtoa_r+0x352>
 8003790:	2301      	movs	r3, #1
 8003792:	930a      	str	r3, [sp, #40]	; 0x28
 8003794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003796:	4453      	add	r3, sl
 8003798:	f103 0901 	add.w	r9, r3, #1
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	464b      	mov	r3, r9
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bfb8      	it	lt
 80037a4:	2301      	movlt	r3, #1
 80037a6:	e7ba      	b.n	800371e <_dtoa_r+0x246>
 80037a8:	2300      	movs	r3, #0
 80037aa:	e7b2      	b.n	8003712 <_dtoa_r+0x23a>
 80037ac:	2300      	movs	r3, #0
 80037ae:	e7f0      	b.n	8003792 <_dtoa_r+0x2ba>
 80037b0:	2501      	movs	r5, #1
 80037b2:	2300      	movs	r3, #0
 80037b4:	9306      	str	r3, [sp, #24]
 80037b6:	950a      	str	r5, [sp, #40]	; 0x28
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	4699      	mov	r9, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	2312      	movs	r3, #18
 80037c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80037c6:	e7aa      	b.n	800371e <_dtoa_r+0x246>
 80037c8:	2301      	movs	r3, #1
 80037ca:	930a      	str	r3, [sp, #40]	; 0x28
 80037cc:	e7f4      	b.n	80037b8 <_dtoa_r+0x2e0>
 80037ce:	2301      	movs	r3, #1
 80037d0:	9302      	str	r3, [sp, #8]
 80037d2:	4699      	mov	r9, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	e7f5      	b.n	80037c4 <_dtoa_r+0x2ec>
 80037d8:	3101      	adds	r1, #1
 80037da:	6071      	str	r1, [r6, #4]
 80037dc:	0052      	lsls	r2, r2, #1
 80037de:	e7a2      	b.n	8003726 <_dtoa_r+0x24e>
 80037e0:	636f4361 	.word	0x636f4361
 80037e4:	3fd287a7 	.word	0x3fd287a7
 80037e8:	8b60c8b3 	.word	0x8b60c8b3
 80037ec:	3fc68a28 	.word	0x3fc68a28
 80037f0:	509f79fb 	.word	0x509f79fb
 80037f4:	3fd34413 	.word	0x3fd34413
 80037f8:	7ff00000 	.word	0x7ff00000
 80037fc:	08005179 	.word	0x08005179
 8003800:	3ff80000 	.word	0x3ff80000
 8003804:	08005238 	.word	0x08005238
 8003808:	08005210 	.word	0x08005210
 800380c:	080051a5 	.word	0x080051a5
 8003810:	07f1      	lsls	r1, r6, #31
 8003812:	d508      	bpl.n	8003826 <_dtoa_r+0x34e>
 8003814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800381c:	f7fc ff0c 	bl	8000638 <__aeabi_dmul>
 8003820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003824:	3501      	adds	r5, #1
 8003826:	1076      	asrs	r6, r6, #1
 8003828:	3708      	adds	r7, #8
 800382a:	2e00      	cmp	r6, #0
 800382c:	d1f0      	bne.n	8003810 <_dtoa_r+0x338>
 800382e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003836:	f7fd f829 	bl	800088c <__aeabi_ddiv>
 800383a:	e9cd 0100 	strd	r0, r1, [sp]
 800383e:	e01a      	b.n	8003876 <_dtoa_r+0x39e>
 8003840:	2502      	movs	r5, #2
 8003842:	e7a3      	b.n	800378c <_dtoa_r+0x2b4>
 8003844:	f000 80a0 	beq.w	8003988 <_dtoa_r+0x4b0>
 8003848:	f1ca 0600 	rsb	r6, sl, #0
 800384c:	4b9f      	ldr	r3, [pc, #636]	; (8003acc <_dtoa_r+0x5f4>)
 800384e:	4fa0      	ldr	r7, [pc, #640]	; (8003ad0 <_dtoa_r+0x5f8>)
 8003850:	f006 020f 	and.w	r2, r6, #15
 8003854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003860:	f7fc feea 	bl	8000638 <__aeabi_dmul>
 8003864:	e9cd 0100 	strd	r0, r1, [sp]
 8003868:	1136      	asrs	r6, r6, #4
 800386a:	2300      	movs	r3, #0
 800386c:	2502      	movs	r5, #2
 800386e:	2e00      	cmp	r6, #0
 8003870:	d17f      	bne.n	8003972 <_dtoa_r+0x49a>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e1      	bne.n	800383a <_dtoa_r+0x362>
 8003876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8087 	beq.w	800398c <_dtoa_r+0x4b4>
 800387e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003882:	2200      	movs	r2, #0
 8003884:	4b93      	ldr	r3, [pc, #588]	; (8003ad4 <_dtoa_r+0x5fc>)
 8003886:	4630      	mov	r0, r6
 8003888:	4639      	mov	r1, r7
 800388a:	f7fd f947 	bl	8000b1c <__aeabi_dcmplt>
 800388e:	2800      	cmp	r0, #0
 8003890:	d07c      	beq.n	800398c <_dtoa_r+0x4b4>
 8003892:	f1b9 0f00 	cmp.w	r9, #0
 8003896:	d079      	beq.n	800398c <_dtoa_r+0x4b4>
 8003898:	9b02      	ldr	r3, [sp, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	dd35      	ble.n	800390a <_dtoa_r+0x432>
 800389e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80038a2:	9308      	str	r3, [sp, #32]
 80038a4:	4639      	mov	r1, r7
 80038a6:	2200      	movs	r2, #0
 80038a8:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <_dtoa_r+0x600>)
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7fc fec4 	bl	8000638 <__aeabi_dmul>
 80038b0:	e9cd 0100 	strd	r0, r1, [sp]
 80038b4:	9f02      	ldr	r7, [sp, #8]
 80038b6:	3501      	adds	r5, #1
 80038b8:	4628      	mov	r0, r5
 80038ba:	f7fc fe53 	bl	8000564 <__aeabi_i2d>
 80038be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038c2:	f7fc feb9 	bl	8000638 <__aeabi_dmul>
 80038c6:	2200      	movs	r2, #0
 80038c8:	4b84      	ldr	r3, [pc, #528]	; (8003adc <_dtoa_r+0x604>)
 80038ca:	f7fc fcff 	bl	80002cc <__adddf3>
 80038ce:	4605      	mov	r5, r0
 80038d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80038d4:	2f00      	cmp	r7, #0
 80038d6:	d15d      	bne.n	8003994 <_dtoa_r+0x4bc>
 80038d8:	2200      	movs	r2, #0
 80038da:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <_dtoa_r+0x608>)
 80038dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038e0:	f7fc fcf2 	bl	80002c8 <__aeabi_dsub>
 80038e4:	462a      	mov	r2, r5
 80038e6:	4633      	mov	r3, r6
 80038e8:	e9cd 0100 	strd	r0, r1, [sp]
 80038ec:	f7fd f934 	bl	8000b58 <__aeabi_dcmpgt>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f040 8288 	bne.w	8003e06 <_dtoa_r+0x92e>
 80038f6:	462a      	mov	r2, r5
 80038f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80038fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003900:	f7fd f90c 	bl	8000b1c <__aeabi_dcmplt>
 8003904:	2800      	cmp	r0, #0
 8003906:	f040 827c 	bne.w	8003e02 <_dtoa_r+0x92a>
 800390a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800390e:	e9cd 2300 	strd	r2, r3, [sp]
 8003912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	f2c0 8150 	blt.w	8003bba <_dtoa_r+0x6e2>
 800391a:	f1ba 0f0e 	cmp.w	sl, #14
 800391e:	f300 814c 	bgt.w	8003bba <_dtoa_r+0x6e2>
 8003922:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <_dtoa_r+0x5f4>)
 8003924:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003928:	ed93 7b00 	vldr	d7, [r3]
 800392c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003934:	f280 80d8 	bge.w	8003ae8 <_dtoa_r+0x610>
 8003938:	f1b9 0f00 	cmp.w	r9, #0
 800393c:	f300 80d4 	bgt.w	8003ae8 <_dtoa_r+0x610>
 8003940:	f040 825e 	bne.w	8003e00 <_dtoa_r+0x928>
 8003944:	2200      	movs	r2, #0
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <_dtoa_r+0x608>)
 8003948:	ec51 0b17 	vmov	r0, r1, d7
 800394c:	f7fc fe74 	bl	8000638 <__aeabi_dmul>
 8003950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003954:	f7fd f8f6 	bl	8000b44 <__aeabi_dcmpge>
 8003958:	464f      	mov	r7, r9
 800395a:	464e      	mov	r6, r9
 800395c:	2800      	cmp	r0, #0
 800395e:	f040 8234 	bne.w	8003dca <_dtoa_r+0x8f2>
 8003962:	2331      	movs	r3, #49	; 0x31
 8003964:	f10b 0501 	add.w	r5, fp, #1
 8003968:	f88b 3000 	strb.w	r3, [fp]
 800396c:	f10a 0a01 	add.w	sl, sl, #1
 8003970:	e22f      	b.n	8003dd2 <_dtoa_r+0x8fa>
 8003972:	07f2      	lsls	r2, r6, #31
 8003974:	d505      	bpl.n	8003982 <_dtoa_r+0x4aa>
 8003976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800397a:	f7fc fe5d 	bl	8000638 <__aeabi_dmul>
 800397e:	3501      	adds	r5, #1
 8003980:	2301      	movs	r3, #1
 8003982:	1076      	asrs	r6, r6, #1
 8003984:	3708      	adds	r7, #8
 8003986:	e772      	b.n	800386e <_dtoa_r+0x396>
 8003988:	2502      	movs	r5, #2
 800398a:	e774      	b.n	8003876 <_dtoa_r+0x39e>
 800398c:	f8cd a020 	str.w	sl, [sp, #32]
 8003990:	464f      	mov	r7, r9
 8003992:	e791      	b.n	80038b8 <_dtoa_r+0x3e0>
 8003994:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <_dtoa_r+0x5f4>)
 8003996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800399a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800399e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d047      	beq.n	8003a34 <_dtoa_r+0x55c>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	2000      	movs	r0, #0
 80039aa:	494e      	ldr	r1, [pc, #312]	; (8003ae4 <_dtoa_r+0x60c>)
 80039ac:	f7fc ff6e 	bl	800088c <__aeabi_ddiv>
 80039b0:	462a      	mov	r2, r5
 80039b2:	4633      	mov	r3, r6
 80039b4:	f7fc fc88 	bl	80002c8 <__aeabi_dsub>
 80039b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039bc:	465d      	mov	r5, fp
 80039be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039c2:	f7fd f8e9 	bl	8000b98 <__aeabi_d2iz>
 80039c6:	4606      	mov	r6, r0
 80039c8:	f7fc fdcc 	bl	8000564 <__aeabi_i2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039d4:	f7fc fc78 	bl	80002c8 <__aeabi_dsub>
 80039d8:	3630      	adds	r6, #48	; 0x30
 80039da:	f805 6b01 	strb.w	r6, [r5], #1
 80039de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80039e2:	e9cd 0100 	strd	r0, r1, [sp]
 80039e6:	f7fd f899 	bl	8000b1c <__aeabi_dcmplt>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d163      	bne.n	8003ab6 <_dtoa_r+0x5de>
 80039ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039f2:	2000      	movs	r0, #0
 80039f4:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <_dtoa_r+0x5fc>)
 80039f6:	f7fc fc67 	bl	80002c8 <__aeabi_dsub>
 80039fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80039fe:	f7fd f88d 	bl	8000b1c <__aeabi_dcmplt>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	f040 80b7 	bne.w	8003b76 <_dtoa_r+0x69e>
 8003a08:	eba5 030b 	sub.w	r3, r5, fp
 8003a0c:	429f      	cmp	r7, r3
 8003a0e:	f77f af7c 	ble.w	800390a <_dtoa_r+0x432>
 8003a12:	2200      	movs	r2, #0
 8003a14:	4b30      	ldr	r3, [pc, #192]	; (8003ad8 <_dtoa_r+0x600>)
 8003a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a1a:	f7fc fe0d 	bl	8000638 <__aeabi_dmul>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003a24:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <_dtoa_r+0x600>)
 8003a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a2a:	f7fc fe05 	bl	8000638 <__aeabi_dmul>
 8003a2e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a32:	e7c4      	b.n	80039be <_dtoa_r+0x4e6>
 8003a34:	462a      	mov	r2, r5
 8003a36:	4633      	mov	r3, r6
 8003a38:	f7fc fdfe 	bl	8000638 <__aeabi_dmul>
 8003a3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003a40:	eb0b 0507 	add.w	r5, fp, r7
 8003a44:	465e      	mov	r6, fp
 8003a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a4a:	f7fd f8a5 	bl	8000b98 <__aeabi_d2iz>
 8003a4e:	4607      	mov	r7, r0
 8003a50:	f7fc fd88 	bl	8000564 <__aeabi_i2d>
 8003a54:	3730      	adds	r7, #48	; 0x30
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a5e:	f7fc fc33 	bl	80002c8 <__aeabi_dsub>
 8003a62:	f806 7b01 	strb.w	r7, [r6], #1
 8003a66:	42ae      	cmp	r6, r5
 8003a68:	e9cd 0100 	strd	r0, r1, [sp]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	d126      	bne.n	8003ac0 <_dtoa_r+0x5e8>
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <_dtoa_r+0x60c>)
 8003a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a78:	f7fc fc28 	bl	80002cc <__adddf3>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a84:	f7fd f868 	bl	8000b58 <__aeabi_dcmpgt>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d174      	bne.n	8003b76 <_dtoa_r+0x69e>
 8003a8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a90:	2000      	movs	r0, #0
 8003a92:	4914      	ldr	r1, [pc, #80]	; (8003ae4 <_dtoa_r+0x60c>)
 8003a94:	f7fc fc18 	bl	80002c8 <__aeabi_dsub>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aa0:	f7fd f83c 	bl	8000b1c <__aeabi_dcmplt>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	f43f af30 	beq.w	800390a <_dtoa_r+0x432>
 8003aaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003ab4:	d002      	beq.n	8003abc <_dtoa_r+0x5e4>
 8003ab6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003aba:	e04a      	b.n	8003b52 <_dtoa_r+0x67a>
 8003abc:	4615      	mov	r5, r2
 8003abe:	e7f4      	b.n	8003aaa <_dtoa_r+0x5d2>
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <_dtoa_r+0x600>)
 8003ac2:	f7fc fdb9 	bl	8000638 <__aeabi_dmul>
 8003ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8003aca:	e7bc      	b.n	8003a46 <_dtoa_r+0x56e>
 8003acc:	08005238 	.word	0x08005238
 8003ad0:	08005210 	.word	0x08005210
 8003ad4:	3ff00000 	.word	0x3ff00000
 8003ad8:	40240000 	.word	0x40240000
 8003adc:	401c0000 	.word	0x401c0000
 8003ae0:	40140000 	.word	0x40140000
 8003ae4:	3fe00000 	.word	0x3fe00000
 8003ae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003aec:	465d      	mov	r5, fp
 8003aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003af2:	4630      	mov	r0, r6
 8003af4:	4639      	mov	r1, r7
 8003af6:	f7fc fec9 	bl	800088c <__aeabi_ddiv>
 8003afa:	f7fd f84d 	bl	8000b98 <__aeabi_d2iz>
 8003afe:	4680      	mov	r8, r0
 8003b00:	f7fc fd30 	bl	8000564 <__aeabi_i2d>
 8003b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b08:	f7fc fd96 	bl	8000638 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4630      	mov	r0, r6
 8003b12:	4639      	mov	r1, r7
 8003b14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003b18:	f7fc fbd6 	bl	80002c8 <__aeabi_dsub>
 8003b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8003b20:	eba5 060b 	sub.w	r6, r5, fp
 8003b24:	45b1      	cmp	r9, r6
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	d139      	bne.n	8003ba0 <_dtoa_r+0x6c8>
 8003b2c:	f7fc fbce 	bl	80002cc <__adddf3>
 8003b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b34:	4606      	mov	r6, r0
 8003b36:	460f      	mov	r7, r1
 8003b38:	f7fd f80e 	bl	8000b58 <__aeabi_dcmpgt>
 8003b3c:	b9c8      	cbnz	r0, 8003b72 <_dtoa_r+0x69a>
 8003b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b42:	4630      	mov	r0, r6
 8003b44:	4639      	mov	r1, r7
 8003b46:	f7fc ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8003b4a:	b110      	cbz	r0, 8003b52 <_dtoa_r+0x67a>
 8003b4c:	f018 0f01 	tst.w	r8, #1
 8003b50:	d10f      	bne.n	8003b72 <_dtoa_r+0x69a>
 8003b52:	9904      	ldr	r1, [sp, #16]
 8003b54:	4620      	mov	r0, r4
 8003b56:	f000 fb96 	bl	8004286 <_Bfree>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b5e:	702b      	strb	r3, [r5, #0]
 8003b60:	f10a 0301 	add.w	r3, sl, #1
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8241 	beq.w	8003ff0 <_dtoa_r+0xb18>
 8003b6e:	601d      	str	r5, [r3, #0]
 8003b70:	e23e      	b.n	8003ff0 <_dtoa_r+0xb18>
 8003b72:	f8cd a020 	str.w	sl, [sp, #32]
 8003b76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b7a:	2a39      	cmp	r2, #57	; 0x39
 8003b7c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003b80:	d108      	bne.n	8003b94 <_dtoa_r+0x6bc>
 8003b82:	459b      	cmp	fp, r3
 8003b84:	d10a      	bne.n	8003b9c <_dtoa_r+0x6c4>
 8003b86:	9b08      	ldr	r3, [sp, #32]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	9308      	str	r3, [sp, #32]
 8003b8c:	2330      	movs	r3, #48	; 0x30
 8003b8e:	f88b 3000 	strb.w	r3, [fp]
 8003b92:	465b      	mov	r3, fp
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	3201      	adds	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e78c      	b.n	8003ab6 <_dtoa_r+0x5de>
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	e7ea      	b.n	8003b76 <_dtoa_r+0x69e>
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4b9b      	ldr	r3, [pc, #620]	; (8003e10 <_dtoa_r+0x938>)
 8003ba4:	f7fc fd48 	bl	8000638 <__aeabi_dmul>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2300      	movs	r3, #0
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	f7fc ffaa 	bl	8000b08 <__aeabi_dcmpeq>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d09a      	beq.n	8003aee <_dtoa_r+0x616>
 8003bb8:	e7cb      	b.n	8003b52 <_dtoa_r+0x67a>
 8003bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	f000 808b 	beq.w	8003cd8 <_dtoa_r+0x800>
 8003bc2:	9a06      	ldr	r2, [sp, #24]
 8003bc4:	2a01      	cmp	r2, #1
 8003bc6:	dc6e      	bgt.n	8003ca6 <_dtoa_r+0x7ce>
 8003bc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d067      	beq.n	8003c9e <_dtoa_r+0x7c6>
 8003bce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003bd2:	9f07      	ldr	r7, [sp, #28]
 8003bd4:	9d05      	ldr	r5, [sp, #20]
 8003bd6:	9a05      	ldr	r2, [sp, #20]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	441a      	add	r2, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	9205      	str	r2, [sp, #20]
 8003be0:	4498      	add	r8, r3
 8003be2:	f000 fbf0 	bl	80043c6 <__i2b>
 8003be6:	4606      	mov	r6, r0
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	dd0c      	ble.n	8003c06 <_dtoa_r+0x72e>
 8003bec:	f1b8 0f00 	cmp.w	r8, #0
 8003bf0:	dd09      	ble.n	8003c06 <_dtoa_r+0x72e>
 8003bf2:	4545      	cmp	r5, r8
 8003bf4:	9a05      	ldr	r2, [sp, #20]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	bfa8      	it	ge
 8003bfa:	4643      	movge	r3, r8
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	9205      	str	r2, [sp, #20]
 8003c00:	1aed      	subs	r5, r5, r3
 8003c02:	eba8 0803 	sub.w	r8, r8, r3
 8003c06:	9b07      	ldr	r3, [sp, #28]
 8003c08:	b1eb      	cbz	r3, 8003c46 <_dtoa_r+0x76e>
 8003c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d067      	beq.n	8003ce0 <_dtoa_r+0x808>
 8003c10:	b18f      	cbz	r7, 8003c36 <_dtoa_r+0x75e>
 8003c12:	4631      	mov	r1, r6
 8003c14:	463a      	mov	r2, r7
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 fc74 	bl	8004504 <__pow5mult>
 8003c1c:	9a04      	ldr	r2, [sp, #16]
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4606      	mov	r6, r0
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 fbd8 	bl	80043d8 <__multiply>
 8003c28:	9904      	ldr	r1, [sp, #16]
 8003c2a:	9008      	str	r0, [sp, #32]
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f000 fb2a 	bl	8004286 <_Bfree>
 8003c32:	9b08      	ldr	r3, [sp, #32]
 8003c34:	9304      	str	r3, [sp, #16]
 8003c36:	9b07      	ldr	r3, [sp, #28]
 8003c38:	1bda      	subs	r2, r3, r7
 8003c3a:	d004      	beq.n	8003c46 <_dtoa_r+0x76e>
 8003c3c:	9904      	ldr	r1, [sp, #16]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 fc60 	bl	8004504 <__pow5mult>
 8003c44:	9004      	str	r0, [sp, #16]
 8003c46:	2101      	movs	r1, #1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 fbbc 	bl	80043c6 <__i2b>
 8003c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c50:	4607      	mov	r7, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 81d0 	beq.w	8003ff8 <_dtoa_r+0xb20>
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 fc51 	bl	8004504 <__pow5mult>
 8003c62:	9b06      	ldr	r3, [sp, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	4607      	mov	r7, r0
 8003c68:	dc40      	bgt.n	8003cec <_dtoa_r+0x814>
 8003c6a:	9b00      	ldr	r3, [sp, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d139      	bne.n	8003ce4 <_dtoa_r+0x80c>
 8003c70:	9b01      	ldr	r3, [sp, #4]
 8003c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d136      	bne.n	8003ce8 <_dtoa_r+0x810>
 8003c7a:	9b01      	ldr	r3, [sp, #4]
 8003c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c80:	0d1b      	lsrs	r3, r3, #20
 8003c82:	051b      	lsls	r3, r3, #20
 8003c84:	b12b      	cbz	r3, 8003c92 <_dtoa_r+0x7ba>
 8003c86:	9b05      	ldr	r3, [sp, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	9305      	str	r3, [sp, #20]
 8003c8c:	f108 0801 	add.w	r8, r8, #1
 8003c90:	2301      	movs	r3, #1
 8003c92:	9307      	str	r3, [sp, #28]
 8003c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d12a      	bne.n	8003cf0 <_dtoa_r+0x818>
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	e030      	b.n	8003d00 <_dtoa_r+0x828>
 8003c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ca0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003ca4:	e795      	b.n	8003bd2 <_dtoa_r+0x6fa>
 8003ca6:	9b07      	ldr	r3, [sp, #28]
 8003ca8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8003cac:	42bb      	cmp	r3, r7
 8003cae:	bfbf      	itttt	lt
 8003cb0:	9b07      	ldrlt	r3, [sp, #28]
 8003cb2:	9707      	strlt	r7, [sp, #28]
 8003cb4:	1afa      	sublt	r2, r7, r3
 8003cb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003cb8:	bfbb      	ittet	lt
 8003cba:	189b      	addlt	r3, r3, r2
 8003cbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003cbe:	1bdf      	subge	r7, r3, r7
 8003cc0:	2700      	movlt	r7, #0
 8003cc2:	f1b9 0f00 	cmp.w	r9, #0
 8003cc6:	bfb5      	itete	lt
 8003cc8:	9b05      	ldrlt	r3, [sp, #20]
 8003cca:	9d05      	ldrge	r5, [sp, #20]
 8003ccc:	eba3 0509 	sublt.w	r5, r3, r9
 8003cd0:	464b      	movge	r3, r9
 8003cd2:	bfb8      	it	lt
 8003cd4:	2300      	movlt	r3, #0
 8003cd6:	e77e      	b.n	8003bd6 <_dtoa_r+0x6fe>
 8003cd8:	9f07      	ldr	r7, [sp, #28]
 8003cda:	9d05      	ldr	r5, [sp, #20]
 8003cdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003cde:	e783      	b.n	8003be8 <_dtoa_r+0x710>
 8003ce0:	9a07      	ldr	r2, [sp, #28]
 8003ce2:	e7ab      	b.n	8003c3c <_dtoa_r+0x764>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e7d4      	b.n	8003c92 <_dtoa_r+0x7ba>
 8003ce8:	9b00      	ldr	r3, [sp, #0]
 8003cea:	e7d2      	b.n	8003c92 <_dtoa_r+0x7ba>
 8003cec:	2300      	movs	r3, #0
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003cf6:	6918      	ldr	r0, [r3, #16]
 8003cf8:	f000 fb17 	bl	800432a <__hi0bits>
 8003cfc:	f1c0 0020 	rsb	r0, r0, #32
 8003d00:	4440      	add	r0, r8
 8003d02:	f010 001f 	ands.w	r0, r0, #31
 8003d06:	d047      	beq.n	8003d98 <_dtoa_r+0x8c0>
 8003d08:	f1c0 0320 	rsb	r3, r0, #32
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	dd3b      	ble.n	8003d88 <_dtoa_r+0x8b0>
 8003d10:	9b05      	ldr	r3, [sp, #20]
 8003d12:	f1c0 001c 	rsb	r0, r0, #28
 8003d16:	4403      	add	r3, r0
 8003d18:	9305      	str	r3, [sp, #20]
 8003d1a:	4405      	add	r5, r0
 8003d1c:	4480      	add	r8, r0
 8003d1e:	9b05      	ldr	r3, [sp, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	dd05      	ble.n	8003d30 <_dtoa_r+0x858>
 8003d24:	461a      	mov	r2, r3
 8003d26:	9904      	ldr	r1, [sp, #16]
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fc39 	bl	80045a0 <__lshift>
 8003d2e:	9004      	str	r0, [sp, #16]
 8003d30:	f1b8 0f00 	cmp.w	r8, #0
 8003d34:	dd05      	ble.n	8003d42 <_dtoa_r+0x86a>
 8003d36:	4639      	mov	r1, r7
 8003d38:	4642      	mov	r2, r8
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 fc30 	bl	80045a0 <__lshift>
 8003d40:	4607      	mov	r7, r0
 8003d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d44:	b353      	cbz	r3, 8003d9c <_dtoa_r+0x8c4>
 8003d46:	4639      	mov	r1, r7
 8003d48:	9804      	ldr	r0, [sp, #16]
 8003d4a:	f000 fc7d 	bl	8004648 <__mcmp>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	da24      	bge.n	8003d9c <_dtoa_r+0x8c4>
 8003d52:	2300      	movs	r3, #0
 8003d54:	220a      	movs	r2, #10
 8003d56:	9904      	ldr	r1, [sp, #16]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 faab 	bl	80042b4 <__multadd>
 8003d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d60:	9004      	str	r0, [sp, #16]
 8003d62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 814d 	beq.w	8004006 <_dtoa_r+0xb2e>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4631      	mov	r1, r6
 8003d70:	220a      	movs	r2, #10
 8003d72:	4620      	mov	r0, r4
 8003d74:	f000 fa9e 	bl	80042b4 <__multadd>
 8003d78:	9b02      	ldr	r3, [sp, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	4606      	mov	r6, r0
 8003d7e:	dc4f      	bgt.n	8003e20 <_dtoa_r+0x948>
 8003d80:	9b06      	ldr	r3, [sp, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	dd4c      	ble.n	8003e20 <_dtoa_r+0x948>
 8003d86:	e011      	b.n	8003dac <_dtoa_r+0x8d4>
 8003d88:	d0c9      	beq.n	8003d1e <_dtoa_r+0x846>
 8003d8a:	9a05      	ldr	r2, [sp, #20]
 8003d8c:	331c      	adds	r3, #28
 8003d8e:	441a      	add	r2, r3
 8003d90:	9205      	str	r2, [sp, #20]
 8003d92:	441d      	add	r5, r3
 8003d94:	4498      	add	r8, r3
 8003d96:	e7c2      	b.n	8003d1e <_dtoa_r+0x846>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	e7f6      	b.n	8003d8a <_dtoa_r+0x8b2>
 8003d9c:	f1b9 0f00 	cmp.w	r9, #0
 8003da0:	dc38      	bgt.n	8003e14 <_dtoa_r+0x93c>
 8003da2:	9b06      	ldr	r3, [sp, #24]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	dd35      	ble.n	8003e14 <_dtoa_r+0x93c>
 8003da8:	f8cd 9008 	str.w	r9, [sp, #8]
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	b963      	cbnz	r3, 8003dca <_dtoa_r+0x8f2>
 8003db0:	4639      	mov	r1, r7
 8003db2:	2205      	movs	r2, #5
 8003db4:	4620      	mov	r0, r4
 8003db6:	f000 fa7d 	bl	80042b4 <__multadd>
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	9804      	ldr	r0, [sp, #16]
 8003dc0:	f000 fc42 	bl	8004648 <__mcmp>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f73f adcc 	bgt.w	8003962 <_dtoa_r+0x48a>
 8003dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dcc:	465d      	mov	r5, fp
 8003dce:	ea6f 0a03 	mvn.w	sl, r3
 8003dd2:	f04f 0900 	mov.w	r9, #0
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 fa54 	bl	8004286 <_Bfree>
 8003dde:	2e00      	cmp	r6, #0
 8003de0:	f43f aeb7 	beq.w	8003b52 <_dtoa_r+0x67a>
 8003de4:	f1b9 0f00 	cmp.w	r9, #0
 8003de8:	d005      	beq.n	8003df6 <_dtoa_r+0x91e>
 8003dea:	45b1      	cmp	r9, r6
 8003dec:	d003      	beq.n	8003df6 <_dtoa_r+0x91e>
 8003dee:	4649      	mov	r1, r9
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 fa48 	bl	8004286 <_Bfree>
 8003df6:	4631      	mov	r1, r6
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 fa44 	bl	8004286 <_Bfree>
 8003dfe:	e6a8      	b.n	8003b52 <_dtoa_r+0x67a>
 8003e00:	2700      	movs	r7, #0
 8003e02:	463e      	mov	r6, r7
 8003e04:	e7e1      	b.n	8003dca <_dtoa_r+0x8f2>
 8003e06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003e0a:	463e      	mov	r6, r7
 8003e0c:	e5a9      	b.n	8003962 <_dtoa_r+0x48a>
 8003e0e:	bf00      	nop
 8003e10:	40240000 	.word	0x40240000
 8003e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e16:	f8cd 9008 	str.w	r9, [sp, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80fa 	beq.w	8004014 <_dtoa_r+0xb3c>
 8003e20:	2d00      	cmp	r5, #0
 8003e22:	dd05      	ble.n	8003e30 <_dtoa_r+0x958>
 8003e24:	4631      	mov	r1, r6
 8003e26:	462a      	mov	r2, r5
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fbb9 	bl	80045a0 <__lshift>
 8003e2e:	4606      	mov	r6, r0
 8003e30:	9b07      	ldr	r3, [sp, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04c      	beq.n	8003ed0 <_dtoa_r+0x9f8>
 8003e36:	6871      	ldr	r1, [r6, #4]
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 f9f0 	bl	800421e <_Balloc>
 8003e3e:	6932      	ldr	r2, [r6, #16]
 8003e40:	3202      	adds	r2, #2
 8003e42:	4605      	mov	r5, r0
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	f106 010c 	add.w	r1, r6, #12
 8003e4a:	300c      	adds	r0, #12
 8003e4c:	f000 f9dc 	bl	8004208 <memcpy>
 8003e50:	2201      	movs	r2, #1
 8003e52:	4629      	mov	r1, r5
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 fba3 	bl	80045a0 <__lshift>
 8003e5a:	9b00      	ldr	r3, [sp, #0]
 8003e5c:	f8cd b014 	str.w	fp, [sp, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	46b1      	mov	r9, r6
 8003e66:	9307      	str	r3, [sp, #28]
 8003e68:	4606      	mov	r6, r0
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	9804      	ldr	r0, [sp, #16]
 8003e6e:	f7ff faa5 	bl	80033bc <quorem>
 8003e72:	4649      	mov	r1, r9
 8003e74:	4605      	mov	r5, r0
 8003e76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003e7a:	9804      	ldr	r0, [sp, #16]
 8003e7c:	f000 fbe4 	bl	8004648 <__mcmp>
 8003e80:	4632      	mov	r2, r6
 8003e82:	9000      	str	r0, [sp, #0]
 8003e84:	4639      	mov	r1, r7
 8003e86:	4620      	mov	r0, r4
 8003e88:	f000 fbf8 	bl	800467c <__mdiff>
 8003e8c:	68c3      	ldr	r3, [r0, #12]
 8003e8e:	4602      	mov	r2, r0
 8003e90:	bb03      	cbnz	r3, 8003ed4 <_dtoa_r+0x9fc>
 8003e92:	4601      	mov	r1, r0
 8003e94:	9008      	str	r0, [sp, #32]
 8003e96:	9804      	ldr	r0, [sp, #16]
 8003e98:	f000 fbd6 	bl	8004648 <__mcmp>
 8003e9c:	9a08      	ldr	r2, [sp, #32]
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	9308      	str	r3, [sp, #32]
 8003ea6:	f000 f9ee 	bl	8004286 <_Bfree>
 8003eaa:	9b08      	ldr	r3, [sp, #32]
 8003eac:	b9a3      	cbnz	r3, 8003ed8 <_dtoa_r+0xa00>
 8003eae:	9a06      	ldr	r2, [sp, #24]
 8003eb0:	b992      	cbnz	r2, 8003ed8 <_dtoa_r+0xa00>
 8003eb2:	9a07      	ldr	r2, [sp, #28]
 8003eb4:	b982      	cbnz	r2, 8003ed8 <_dtoa_r+0xa00>
 8003eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eba:	d029      	beq.n	8003f10 <_dtoa_r+0xa38>
 8003ebc:	9b00      	ldr	r3, [sp, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dd01      	ble.n	8003ec6 <_dtoa_r+0x9ee>
 8003ec2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003ec6:	9b05      	ldr	r3, [sp, #20]
 8003ec8:	1c5d      	adds	r5, r3, #1
 8003eca:	f883 8000 	strb.w	r8, [r3]
 8003ece:	e782      	b.n	8003dd6 <_dtoa_r+0x8fe>
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	e7c2      	b.n	8003e5a <_dtoa_r+0x982>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e7e3      	b.n	8003ea0 <_dtoa_r+0x9c8>
 8003ed8:	9a00      	ldr	r2, [sp, #0]
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	db04      	blt.n	8003ee8 <_dtoa_r+0xa10>
 8003ede:	d125      	bne.n	8003f2c <_dtoa_r+0xa54>
 8003ee0:	9a06      	ldr	r2, [sp, #24]
 8003ee2:	bb1a      	cbnz	r2, 8003f2c <_dtoa_r+0xa54>
 8003ee4:	9a07      	ldr	r2, [sp, #28]
 8003ee6:	bb0a      	cbnz	r2, 8003f2c <_dtoa_r+0xa54>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	ddec      	ble.n	8003ec6 <_dtoa_r+0x9ee>
 8003eec:	2201      	movs	r2, #1
 8003eee:	9904      	ldr	r1, [sp, #16]
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fb55 	bl	80045a0 <__lshift>
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	9004      	str	r0, [sp, #16]
 8003efa:	f000 fba5 	bl	8004648 <__mcmp>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	dc03      	bgt.n	8003f0a <_dtoa_r+0xa32>
 8003f02:	d1e0      	bne.n	8003ec6 <_dtoa_r+0x9ee>
 8003f04:	f018 0f01 	tst.w	r8, #1
 8003f08:	d0dd      	beq.n	8003ec6 <_dtoa_r+0x9ee>
 8003f0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f0e:	d1d8      	bne.n	8003ec2 <_dtoa_r+0x9ea>
 8003f10:	9b05      	ldr	r3, [sp, #20]
 8003f12:	9a05      	ldr	r2, [sp, #20]
 8003f14:	1c5d      	adds	r5, r3, #1
 8003f16:	2339      	movs	r3, #57	; 0x39
 8003f18:	7013      	strb	r3, [r2, #0]
 8003f1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f1e:	2b39      	cmp	r3, #57	; 0x39
 8003f20:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003f24:	d04f      	beq.n	8003fc6 <_dtoa_r+0xaee>
 8003f26:	3301      	adds	r3, #1
 8003f28:	7013      	strb	r3, [r2, #0]
 8003f2a:	e754      	b.n	8003dd6 <_dtoa_r+0x8fe>
 8003f2c:	9a05      	ldr	r2, [sp, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f102 0501 	add.w	r5, r2, #1
 8003f34:	dd06      	ble.n	8003f44 <_dtoa_r+0xa6c>
 8003f36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f3a:	d0e9      	beq.n	8003f10 <_dtoa_r+0xa38>
 8003f3c:	f108 0801 	add.w	r8, r8, #1
 8003f40:	9b05      	ldr	r3, [sp, #20]
 8003f42:	e7c2      	b.n	8003eca <_dtoa_r+0x9f2>
 8003f44:	9a02      	ldr	r2, [sp, #8]
 8003f46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003f4a:	eba5 030b 	sub.w	r3, r5, fp
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d021      	beq.n	8003f96 <_dtoa_r+0xabe>
 8003f52:	2300      	movs	r3, #0
 8003f54:	220a      	movs	r2, #10
 8003f56:	9904      	ldr	r1, [sp, #16]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 f9ab 	bl	80042b4 <__multadd>
 8003f5e:	45b1      	cmp	r9, r6
 8003f60:	9004      	str	r0, [sp, #16]
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f04f 020a 	mov.w	r2, #10
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	d105      	bne.n	8003f7c <_dtoa_r+0xaa4>
 8003f70:	f000 f9a0 	bl	80042b4 <__multadd>
 8003f74:	4681      	mov	r9, r0
 8003f76:	4606      	mov	r6, r0
 8003f78:	9505      	str	r5, [sp, #20]
 8003f7a:	e776      	b.n	8003e6a <_dtoa_r+0x992>
 8003f7c:	f000 f99a 	bl	80042b4 <__multadd>
 8003f80:	4631      	mov	r1, r6
 8003f82:	4681      	mov	r9, r0
 8003f84:	2300      	movs	r3, #0
 8003f86:	220a      	movs	r2, #10
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f000 f993 	bl	80042b4 <__multadd>
 8003f8e:	4606      	mov	r6, r0
 8003f90:	e7f2      	b.n	8003f78 <_dtoa_r+0xaa0>
 8003f92:	f04f 0900 	mov.w	r9, #0
 8003f96:	2201      	movs	r2, #1
 8003f98:	9904      	ldr	r1, [sp, #16]
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f000 fb00 	bl	80045a0 <__lshift>
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	9004      	str	r0, [sp, #16]
 8003fa4:	f000 fb50 	bl	8004648 <__mcmp>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	dcb6      	bgt.n	8003f1a <_dtoa_r+0xa42>
 8003fac:	d102      	bne.n	8003fb4 <_dtoa_r+0xadc>
 8003fae:	f018 0f01 	tst.w	r8, #1
 8003fb2:	d1b2      	bne.n	8003f1a <_dtoa_r+0xa42>
 8003fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fb8:	2b30      	cmp	r3, #48	; 0x30
 8003fba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003fbe:	f47f af0a 	bne.w	8003dd6 <_dtoa_r+0x8fe>
 8003fc2:	4615      	mov	r5, r2
 8003fc4:	e7f6      	b.n	8003fb4 <_dtoa_r+0xadc>
 8003fc6:	4593      	cmp	fp, r2
 8003fc8:	d105      	bne.n	8003fd6 <_dtoa_r+0xafe>
 8003fca:	2331      	movs	r3, #49	; 0x31
 8003fcc:	f10a 0a01 	add.w	sl, sl, #1
 8003fd0:	f88b 3000 	strb.w	r3, [fp]
 8003fd4:	e6ff      	b.n	8003dd6 <_dtoa_r+0x8fe>
 8003fd6:	4615      	mov	r5, r2
 8003fd8:	e79f      	b.n	8003f1a <_dtoa_r+0xa42>
 8003fda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004040 <_dtoa_r+0xb68>
 8003fde:	e007      	b.n	8003ff0 <_dtoa_r+0xb18>
 8003fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004044 <_dtoa_r+0xb6c>
 8003fe6:	b11b      	cbz	r3, 8003ff0 <_dtoa_r+0xb18>
 8003fe8:	f10b 0308 	add.w	r3, fp, #8
 8003fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4658      	mov	r0, fp
 8003ff2:	b017      	add	sp, #92	; 0x5c
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	9b06      	ldr	r3, [sp, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f77f ae35 	ble.w	8003c6a <_dtoa_r+0x792>
 8004000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004002:	9307      	str	r3, [sp, #28]
 8004004:	e649      	b.n	8003c9a <_dtoa_r+0x7c2>
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dc03      	bgt.n	8004014 <_dtoa_r+0xb3c>
 800400c:	9b06      	ldr	r3, [sp, #24]
 800400e:	2b02      	cmp	r3, #2
 8004010:	f73f aecc 	bgt.w	8003dac <_dtoa_r+0x8d4>
 8004014:	465d      	mov	r5, fp
 8004016:	4639      	mov	r1, r7
 8004018:	9804      	ldr	r0, [sp, #16]
 800401a:	f7ff f9cf 	bl	80033bc <quorem>
 800401e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004022:	f805 8b01 	strb.w	r8, [r5], #1
 8004026:	9a02      	ldr	r2, [sp, #8]
 8004028:	eba5 030b 	sub.w	r3, r5, fp
 800402c:	429a      	cmp	r2, r3
 800402e:	ddb0      	ble.n	8003f92 <_dtoa_r+0xaba>
 8004030:	2300      	movs	r3, #0
 8004032:	220a      	movs	r2, #10
 8004034:	9904      	ldr	r1, [sp, #16]
 8004036:	4620      	mov	r0, r4
 8004038:	f000 f93c 	bl	80042b4 <__multadd>
 800403c:	9004      	str	r0, [sp, #16]
 800403e:	e7ea      	b.n	8004016 <_dtoa_r+0xb3e>
 8004040:	08005178 	.word	0x08005178
 8004044:	0800519c 	.word	0x0800519c

08004048 <std>:
 8004048:	2300      	movs	r3, #0
 800404a:	b510      	push	{r4, lr}
 800404c:	4604      	mov	r4, r0
 800404e:	e9c0 3300 	strd	r3, r3, [r0]
 8004052:	6083      	str	r3, [r0, #8]
 8004054:	8181      	strh	r1, [r0, #12]
 8004056:	6643      	str	r3, [r0, #100]	; 0x64
 8004058:	81c2      	strh	r2, [r0, #14]
 800405a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800405e:	6183      	str	r3, [r0, #24]
 8004060:	4619      	mov	r1, r3
 8004062:	2208      	movs	r2, #8
 8004064:	305c      	adds	r0, #92	; 0x5c
 8004066:	f7fe fd2d 	bl	8002ac4 <memset>
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <std+0x38>)
 800406c:	6263      	str	r3, [r4, #36]	; 0x24
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <std+0x3c>)
 8004070:	62a3      	str	r3, [r4, #40]	; 0x28
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <std+0x40>)
 8004074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <std+0x44>)
 8004078:	6224      	str	r4, [r4, #32]
 800407a:	6323      	str	r3, [r4, #48]	; 0x30
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	08004be1 	.word	0x08004be1
 8004084:	08004c03 	.word	0x08004c03
 8004088:	08004c3b 	.word	0x08004c3b
 800408c:	08004c5f 	.word	0x08004c5f

08004090 <_cleanup_r>:
 8004090:	4901      	ldr	r1, [pc, #4]	; (8004098 <_cleanup_r+0x8>)
 8004092:	f000 b885 	b.w	80041a0 <_fwalk_reent>
 8004096:	bf00      	nop
 8004098:	08004f39 	.word	0x08004f39

0800409c <__sfmoreglue>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	1e4a      	subs	r2, r1, #1
 80040a0:	2568      	movs	r5, #104	; 0x68
 80040a2:	4355      	muls	r5, r2
 80040a4:	460e      	mov	r6, r1
 80040a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040aa:	f000 fbef 	bl	800488c <_malloc_r>
 80040ae:	4604      	mov	r4, r0
 80040b0:	b140      	cbz	r0, 80040c4 <__sfmoreglue+0x28>
 80040b2:	2100      	movs	r1, #0
 80040b4:	e9c0 1600 	strd	r1, r6, [r0]
 80040b8:	300c      	adds	r0, #12
 80040ba:	60a0      	str	r0, [r4, #8]
 80040bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040c0:	f7fe fd00 	bl	8002ac4 <memset>
 80040c4:	4620      	mov	r0, r4
 80040c6:	bd70      	pop	{r4, r5, r6, pc}

080040c8 <__sinit>:
 80040c8:	6983      	ldr	r3, [r0, #24]
 80040ca:	b510      	push	{r4, lr}
 80040cc:	4604      	mov	r4, r0
 80040ce:	bb33      	cbnz	r3, 800411e <__sinit+0x56>
 80040d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80040d4:	6503      	str	r3, [r0, #80]	; 0x50
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <__sinit+0x58>)
 80040d8:	4a12      	ldr	r2, [pc, #72]	; (8004124 <__sinit+0x5c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6282      	str	r2, [r0, #40]	; 0x28
 80040de:	4298      	cmp	r0, r3
 80040e0:	bf04      	itt	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	6183      	streq	r3, [r0, #24]
 80040e6:	f000 f81f 	bl	8004128 <__sfp>
 80040ea:	6060      	str	r0, [r4, #4]
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 f81b 	bl	8004128 <__sfp>
 80040f2:	60a0      	str	r0, [r4, #8]
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 f817 	bl	8004128 <__sfp>
 80040fa:	2200      	movs	r2, #0
 80040fc:	60e0      	str	r0, [r4, #12]
 80040fe:	2104      	movs	r1, #4
 8004100:	6860      	ldr	r0, [r4, #4]
 8004102:	f7ff ffa1 	bl	8004048 <std>
 8004106:	2201      	movs	r2, #1
 8004108:	2109      	movs	r1, #9
 800410a:	68a0      	ldr	r0, [r4, #8]
 800410c:	f7ff ff9c 	bl	8004048 <std>
 8004110:	2202      	movs	r2, #2
 8004112:	2112      	movs	r1, #18
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	f7ff ff97 	bl	8004048 <std>
 800411a:	2301      	movs	r3, #1
 800411c:	61a3      	str	r3, [r4, #24]
 800411e:	bd10      	pop	{r4, pc}
 8004120:	08005164 	.word	0x08005164
 8004124:	08004091 	.word	0x08004091

08004128 <__sfp>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <__sfp+0x70>)
 800412c:	681e      	ldr	r6, [r3, #0]
 800412e:	69b3      	ldr	r3, [r6, #24]
 8004130:	4607      	mov	r7, r0
 8004132:	b913      	cbnz	r3, 800413a <__sfp+0x12>
 8004134:	4630      	mov	r0, r6
 8004136:	f7ff ffc7 	bl	80040c8 <__sinit>
 800413a:	3648      	adds	r6, #72	; 0x48
 800413c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	d503      	bpl.n	800414c <__sfp+0x24>
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	b133      	cbz	r3, 8004156 <__sfp+0x2e>
 8004148:	6836      	ldr	r6, [r6, #0]
 800414a:	e7f7      	b.n	800413c <__sfp+0x14>
 800414c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004150:	b16d      	cbz	r5, 800416e <__sfp+0x46>
 8004152:	3468      	adds	r4, #104	; 0x68
 8004154:	e7f4      	b.n	8004140 <__sfp+0x18>
 8004156:	2104      	movs	r1, #4
 8004158:	4638      	mov	r0, r7
 800415a:	f7ff ff9f 	bl	800409c <__sfmoreglue>
 800415e:	6030      	str	r0, [r6, #0]
 8004160:	2800      	cmp	r0, #0
 8004162:	d1f1      	bne.n	8004148 <__sfp+0x20>
 8004164:	230c      	movs	r3, #12
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4604      	mov	r4, r0
 800416a:	4620      	mov	r0, r4
 800416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <__sfp+0x74>)
 8004170:	6665      	str	r5, [r4, #100]	; 0x64
 8004172:	e9c4 5500 	strd	r5, r5, [r4]
 8004176:	60a5      	str	r5, [r4, #8]
 8004178:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800417c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004180:	2208      	movs	r2, #8
 8004182:	4629      	mov	r1, r5
 8004184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004188:	f7fe fc9c 	bl	8002ac4 <memset>
 800418c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004194:	e7e9      	b.n	800416a <__sfp+0x42>
 8004196:	bf00      	nop
 8004198:	08005164 	.word	0x08005164
 800419c:	ffff0001 	.word	0xffff0001

080041a0 <_fwalk_reent>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4680      	mov	r8, r0
 80041a6:	4689      	mov	r9, r1
 80041a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041ac:	2600      	movs	r6, #0
 80041ae:	b914      	cbnz	r4, 80041b6 <_fwalk_reent+0x16>
 80041b0:	4630      	mov	r0, r6
 80041b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80041ba:	3f01      	subs	r7, #1
 80041bc:	d501      	bpl.n	80041c2 <_fwalk_reent+0x22>
 80041be:	6824      	ldr	r4, [r4, #0]
 80041c0:	e7f5      	b.n	80041ae <_fwalk_reent+0xe>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d907      	bls.n	80041d8 <_fwalk_reent+0x38>
 80041c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041cc:	3301      	adds	r3, #1
 80041ce:	d003      	beq.n	80041d8 <_fwalk_reent+0x38>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4640      	mov	r0, r8
 80041d4:	47c8      	blx	r9
 80041d6:	4306      	orrs	r6, r0
 80041d8:	3568      	adds	r5, #104	; 0x68
 80041da:	e7ee      	b.n	80041ba <_fwalk_reent+0x1a>

080041dc <_localeconv_r>:
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <_localeconv_r+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a18      	ldr	r0, [r3, #32]
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <_localeconv_r+0x18>)
 80041e4:	2800      	cmp	r0, #0
 80041e6:	bf08      	it	eq
 80041e8:	4618      	moveq	r0, r3
 80041ea:	30f0      	adds	r0, #240	; 0xf0
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000004 	.word	0x20000004
 80041f4:	20000068 	.word	0x20000068

080041f8 <malloc>:
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <malloc+0xc>)
 80041fa:	4601      	mov	r1, r0
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f000 bb45 	b.w	800488c <_malloc_r>
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004

08004208 <memcpy>:
 8004208:	b510      	push	{r4, lr}
 800420a:	1e43      	subs	r3, r0, #1
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	d100      	bne.n	8004214 <memcpy+0xc>
 8004212:	bd10      	pop	{r4, pc}
 8004214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421c:	e7f7      	b.n	800420e <memcpy+0x6>

0800421e <_Balloc>:
 800421e:	b570      	push	{r4, r5, r6, lr}
 8004220:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004222:	4604      	mov	r4, r0
 8004224:	460e      	mov	r6, r1
 8004226:	b93d      	cbnz	r5, 8004238 <_Balloc+0x1a>
 8004228:	2010      	movs	r0, #16
 800422a:	f7ff ffe5 	bl	80041f8 <malloc>
 800422e:	6260      	str	r0, [r4, #36]	; 0x24
 8004230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004234:	6005      	str	r5, [r0, #0]
 8004236:	60c5      	str	r5, [r0, #12]
 8004238:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800423a:	68eb      	ldr	r3, [r5, #12]
 800423c:	b183      	cbz	r3, 8004260 <_Balloc+0x42>
 800423e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004246:	b9b8      	cbnz	r0, 8004278 <_Balloc+0x5a>
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f506 	lsl.w	r5, r1, r6
 800424e:	1d6a      	adds	r2, r5, #5
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fabe 	bl	80047d4 <_calloc_r>
 8004258:	b160      	cbz	r0, 8004274 <_Balloc+0x56>
 800425a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800425e:	e00e      	b.n	800427e <_Balloc+0x60>
 8004260:	2221      	movs	r2, #33	; 0x21
 8004262:	2104      	movs	r1, #4
 8004264:	4620      	mov	r0, r4
 8004266:	f000 fab5 	bl	80047d4 <_calloc_r>
 800426a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800426c:	60e8      	str	r0, [r5, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e4      	bne.n	800423e <_Balloc+0x20>
 8004274:	2000      	movs	r0, #0
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	6802      	ldr	r2, [r0, #0]
 800427a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800427e:	2300      	movs	r3, #0
 8004280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004284:	e7f7      	b.n	8004276 <_Balloc+0x58>

08004286 <_Bfree>:
 8004286:	b570      	push	{r4, r5, r6, lr}
 8004288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800428a:	4606      	mov	r6, r0
 800428c:	460d      	mov	r5, r1
 800428e:	b93c      	cbnz	r4, 80042a0 <_Bfree+0x1a>
 8004290:	2010      	movs	r0, #16
 8004292:	f7ff ffb1 	bl	80041f8 <malloc>
 8004296:	6270      	str	r0, [r6, #36]	; 0x24
 8004298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800429c:	6004      	str	r4, [r0, #0]
 800429e:	60c4      	str	r4, [r0, #12]
 80042a0:	b13d      	cbz	r5, 80042b2 <_Bfree+0x2c>
 80042a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042a4:	686a      	ldr	r2, [r5, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042ac:	6029      	str	r1, [r5, #0]
 80042ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042b2:	bd70      	pop	{r4, r5, r6, pc}

080042b4 <__multadd>:
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	690d      	ldr	r5, [r1, #16]
 80042ba:	461f      	mov	r7, r3
 80042bc:	4606      	mov	r6, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	f101 0c14 	add.w	ip, r1, #20
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8dc 0000 	ldr.w	r0, [ip]
 80042ca:	b281      	uxth	r1, r0
 80042cc:	fb02 7101 	mla	r1, r2, r1, r7
 80042d0:	0c0f      	lsrs	r7, r1, #16
 80042d2:	0c00      	lsrs	r0, r0, #16
 80042d4:	fb02 7000 	mla	r0, r2, r0, r7
 80042d8:	b289      	uxth	r1, r1
 80042da:	3301      	adds	r3, #1
 80042dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80042e0:	429d      	cmp	r5, r3
 80042e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80042e6:	f84c 1b04 	str.w	r1, [ip], #4
 80042ea:	dcec      	bgt.n	80042c6 <__multadd+0x12>
 80042ec:	b1d7      	cbz	r7, 8004324 <__multadd+0x70>
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	42ab      	cmp	r3, r5
 80042f2:	dc12      	bgt.n	800431a <__multadd+0x66>
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4630      	mov	r0, r6
 80042f8:	3101      	adds	r1, #1
 80042fa:	f7ff ff90 	bl	800421e <_Balloc>
 80042fe:	6922      	ldr	r2, [r4, #16]
 8004300:	3202      	adds	r2, #2
 8004302:	f104 010c 	add.w	r1, r4, #12
 8004306:	4680      	mov	r8, r0
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	300c      	adds	r0, #12
 800430c:	f7ff ff7c 	bl	8004208 <memcpy>
 8004310:	4621      	mov	r1, r4
 8004312:	4630      	mov	r0, r6
 8004314:	f7ff ffb7 	bl	8004286 <_Bfree>
 8004318:	4644      	mov	r4, r8
 800431a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800431e:	3501      	adds	r5, #1
 8004320:	615f      	str	r7, [r3, #20]
 8004322:	6125      	str	r5, [r4, #16]
 8004324:	4620      	mov	r0, r4
 8004326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800432a <__hi0bits>:
 800432a:	0c02      	lsrs	r2, r0, #16
 800432c:	0412      	lsls	r2, r2, #16
 800432e:	4603      	mov	r3, r0
 8004330:	b9b2      	cbnz	r2, 8004360 <__hi0bits+0x36>
 8004332:	0403      	lsls	r3, r0, #16
 8004334:	2010      	movs	r0, #16
 8004336:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800433a:	bf04      	itt	eq
 800433c:	021b      	lsleq	r3, r3, #8
 800433e:	3008      	addeq	r0, #8
 8004340:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004344:	bf04      	itt	eq
 8004346:	011b      	lsleq	r3, r3, #4
 8004348:	3004      	addeq	r0, #4
 800434a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800434e:	bf04      	itt	eq
 8004350:	009b      	lsleq	r3, r3, #2
 8004352:	3002      	addeq	r0, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	db06      	blt.n	8004366 <__hi0bits+0x3c>
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	d503      	bpl.n	8004364 <__hi0bits+0x3a>
 800435c:	3001      	adds	r0, #1
 800435e:	4770      	bx	lr
 8004360:	2000      	movs	r0, #0
 8004362:	e7e8      	b.n	8004336 <__hi0bits+0xc>
 8004364:	2020      	movs	r0, #32
 8004366:	4770      	bx	lr

08004368 <__lo0bits>:
 8004368:	6803      	ldr	r3, [r0, #0]
 800436a:	f013 0207 	ands.w	r2, r3, #7
 800436e:	4601      	mov	r1, r0
 8004370:	d00b      	beq.n	800438a <__lo0bits+0x22>
 8004372:	07da      	lsls	r2, r3, #31
 8004374:	d423      	bmi.n	80043be <__lo0bits+0x56>
 8004376:	0798      	lsls	r0, r3, #30
 8004378:	bf49      	itett	mi
 800437a:	085b      	lsrmi	r3, r3, #1
 800437c:	089b      	lsrpl	r3, r3, #2
 800437e:	2001      	movmi	r0, #1
 8004380:	600b      	strmi	r3, [r1, #0]
 8004382:	bf5c      	itt	pl
 8004384:	600b      	strpl	r3, [r1, #0]
 8004386:	2002      	movpl	r0, #2
 8004388:	4770      	bx	lr
 800438a:	b298      	uxth	r0, r3
 800438c:	b9a8      	cbnz	r0, 80043ba <__lo0bits+0x52>
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	2010      	movs	r0, #16
 8004392:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004396:	bf04      	itt	eq
 8004398:	0a1b      	lsreq	r3, r3, #8
 800439a:	3008      	addeq	r0, #8
 800439c:	071a      	lsls	r2, r3, #28
 800439e:	bf04      	itt	eq
 80043a0:	091b      	lsreq	r3, r3, #4
 80043a2:	3004      	addeq	r0, #4
 80043a4:	079a      	lsls	r2, r3, #30
 80043a6:	bf04      	itt	eq
 80043a8:	089b      	lsreq	r3, r3, #2
 80043aa:	3002      	addeq	r0, #2
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	d402      	bmi.n	80043b6 <__lo0bits+0x4e>
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	d006      	beq.n	80043c2 <__lo0bits+0x5a>
 80043b4:	3001      	adds	r0, #1
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	4770      	bx	lr
 80043ba:	4610      	mov	r0, r2
 80043bc:	e7e9      	b.n	8004392 <__lo0bits+0x2a>
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr
 80043c2:	2020      	movs	r0, #32
 80043c4:	4770      	bx	lr

080043c6 <__i2b>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	2101      	movs	r1, #1
 80043cc:	f7ff ff27 	bl	800421e <_Balloc>
 80043d0:	2201      	movs	r2, #1
 80043d2:	6144      	str	r4, [r0, #20]
 80043d4:	6102      	str	r2, [r0, #16]
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <__multiply>:
 80043d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	4614      	mov	r4, r2
 80043de:	690a      	ldr	r2, [r1, #16]
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bfb8      	it	lt
 80043e6:	460b      	movlt	r3, r1
 80043e8:	4688      	mov	r8, r1
 80043ea:	bfbc      	itt	lt
 80043ec:	46a0      	movlt	r8, r4
 80043ee:	461c      	movlt	r4, r3
 80043f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80043f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80043f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80043fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004400:	eb07 0609 	add.w	r6, r7, r9
 8004404:	42b3      	cmp	r3, r6
 8004406:	bfb8      	it	lt
 8004408:	3101      	addlt	r1, #1
 800440a:	f7ff ff08 	bl	800421e <_Balloc>
 800440e:	f100 0514 	add.w	r5, r0, #20
 8004412:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004416:	462b      	mov	r3, r5
 8004418:	2200      	movs	r2, #0
 800441a:	4573      	cmp	r3, lr
 800441c:	d316      	bcc.n	800444c <__multiply+0x74>
 800441e:	f104 0214 	add.w	r2, r4, #20
 8004422:	f108 0114 	add.w	r1, r8, #20
 8004426:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800442a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	9b00      	ldr	r3, [sp, #0]
 8004432:	9201      	str	r2, [sp, #4]
 8004434:	4293      	cmp	r3, r2
 8004436:	d80c      	bhi.n	8004452 <__multiply+0x7a>
 8004438:	2e00      	cmp	r6, #0
 800443a:	dd03      	ble.n	8004444 <__multiply+0x6c>
 800443c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05d      	beq.n	8004500 <__multiply+0x128>
 8004444:	6106      	str	r6, [r0, #16]
 8004446:	b003      	add	sp, #12
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444c:	f843 2b04 	str.w	r2, [r3], #4
 8004450:	e7e3      	b.n	800441a <__multiply+0x42>
 8004452:	f8b2 b000 	ldrh.w	fp, [r2]
 8004456:	f1bb 0f00 	cmp.w	fp, #0
 800445a:	d023      	beq.n	80044a4 <__multiply+0xcc>
 800445c:	4689      	mov	r9, r1
 800445e:	46ac      	mov	ip, r5
 8004460:	f04f 0800 	mov.w	r8, #0
 8004464:	f859 4b04 	ldr.w	r4, [r9], #4
 8004468:	f8dc a000 	ldr.w	sl, [ip]
 800446c:	b2a3      	uxth	r3, r4
 800446e:	fa1f fa8a 	uxth.w	sl, sl
 8004472:	fb0b a303 	mla	r3, fp, r3, sl
 8004476:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800447a:	f8dc 4000 	ldr.w	r4, [ip]
 800447e:	4443      	add	r3, r8
 8004480:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004484:	fb0b 840a 	mla	r4, fp, sl, r8
 8004488:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800448c:	46e2      	mov	sl, ip
 800448e:	b29b      	uxth	r3, r3
 8004490:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004494:	454f      	cmp	r7, r9
 8004496:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800449a:	f84a 3b04 	str.w	r3, [sl], #4
 800449e:	d82b      	bhi.n	80044f8 <__multiply+0x120>
 80044a0:	f8cc 8004 	str.w	r8, [ip, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
 80044a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80044aa:	3204      	adds	r2, #4
 80044ac:	f1ba 0f00 	cmp.w	sl, #0
 80044b0:	d020      	beq.n	80044f4 <__multiply+0x11c>
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	4689      	mov	r9, r1
 80044b6:	46a8      	mov	r8, r5
 80044b8:	f04f 0b00 	mov.w	fp, #0
 80044bc:	f8b9 c000 	ldrh.w	ip, [r9]
 80044c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80044c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80044c8:	445c      	add	r4, fp
 80044ca:	46c4      	mov	ip, r8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044d2:	f84c 3b04 	str.w	r3, [ip], #4
 80044d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80044da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	fb0a b303 	mla	r3, sl, r3, fp
 80044e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80044e8:	454f      	cmp	r7, r9
 80044ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80044ee:	d805      	bhi.n	80044fc <__multiply+0x124>
 80044f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80044f4:	3504      	adds	r5, #4
 80044f6:	e79b      	b.n	8004430 <__multiply+0x58>
 80044f8:	46d4      	mov	ip, sl
 80044fa:	e7b3      	b.n	8004464 <__multiply+0x8c>
 80044fc:	46e0      	mov	r8, ip
 80044fe:	e7dd      	b.n	80044bc <__multiply+0xe4>
 8004500:	3e01      	subs	r6, #1
 8004502:	e799      	b.n	8004438 <__multiply+0x60>

08004504 <__pow5mult>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4615      	mov	r5, r2
 800450a:	f012 0203 	ands.w	r2, r2, #3
 800450e:	4606      	mov	r6, r0
 8004510:	460f      	mov	r7, r1
 8004512:	d007      	beq.n	8004524 <__pow5mult+0x20>
 8004514:	3a01      	subs	r2, #1
 8004516:	4c21      	ldr	r4, [pc, #132]	; (800459c <__pow5mult+0x98>)
 8004518:	2300      	movs	r3, #0
 800451a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800451e:	f7ff fec9 	bl	80042b4 <__multadd>
 8004522:	4607      	mov	r7, r0
 8004524:	10ad      	asrs	r5, r5, #2
 8004526:	d035      	beq.n	8004594 <__pow5mult+0x90>
 8004528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800452a:	b93c      	cbnz	r4, 800453c <__pow5mult+0x38>
 800452c:	2010      	movs	r0, #16
 800452e:	f7ff fe63 	bl	80041f8 <malloc>
 8004532:	6270      	str	r0, [r6, #36]	; 0x24
 8004534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004538:	6004      	str	r4, [r0, #0]
 800453a:	60c4      	str	r4, [r0, #12]
 800453c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004544:	b94c      	cbnz	r4, 800455a <__pow5mult+0x56>
 8004546:	f240 2171 	movw	r1, #625	; 0x271
 800454a:	4630      	mov	r0, r6
 800454c:	f7ff ff3b 	bl	80043c6 <__i2b>
 8004550:	2300      	movs	r3, #0
 8004552:	f8c8 0008 	str.w	r0, [r8, #8]
 8004556:	4604      	mov	r4, r0
 8004558:	6003      	str	r3, [r0, #0]
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	07eb      	lsls	r3, r5, #31
 8004560:	d50a      	bpl.n	8004578 <__pow5mult+0x74>
 8004562:	4639      	mov	r1, r7
 8004564:	4622      	mov	r2, r4
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff ff36 	bl	80043d8 <__multiply>
 800456c:	4639      	mov	r1, r7
 800456e:	4681      	mov	r9, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff fe88 	bl	8004286 <_Bfree>
 8004576:	464f      	mov	r7, r9
 8004578:	106d      	asrs	r5, r5, #1
 800457a:	d00b      	beq.n	8004594 <__pow5mult+0x90>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	b938      	cbnz	r0, 8004590 <__pow5mult+0x8c>
 8004580:	4622      	mov	r2, r4
 8004582:	4621      	mov	r1, r4
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff ff27 	bl	80043d8 <__multiply>
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f8c0 8000 	str.w	r8, [r0]
 8004590:	4604      	mov	r4, r0
 8004592:	e7e4      	b.n	800455e <__pow5mult+0x5a>
 8004594:	4638      	mov	r0, r7
 8004596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459a:	bf00      	nop
 800459c:	08005300 	.word	0x08005300

080045a0 <__lshift>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	eb0a 0903 	add.w	r9, sl, r3
 80045b2:	68a3      	ldr	r3, [r4, #8]
 80045b4:	4607      	mov	r7, r0
 80045b6:	4616      	mov	r6, r2
 80045b8:	f109 0501 	add.w	r5, r9, #1
 80045bc:	42ab      	cmp	r3, r5
 80045be:	db32      	blt.n	8004626 <__lshift+0x86>
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff fe2c 	bl	800421e <_Balloc>
 80045c6:	2300      	movs	r3, #0
 80045c8:	4680      	mov	r8, r0
 80045ca:	f100 0114 	add.w	r1, r0, #20
 80045ce:	461a      	mov	r2, r3
 80045d0:	4553      	cmp	r3, sl
 80045d2:	db2b      	blt.n	800462c <__lshift+0x8c>
 80045d4:	6920      	ldr	r0, [r4, #16]
 80045d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045da:	f104 0314 	add.w	r3, r4, #20
 80045de:	f016 021f 	ands.w	r2, r6, #31
 80045e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045ea:	d025      	beq.n	8004638 <__lshift+0x98>
 80045ec:	f1c2 0e20 	rsb	lr, r2, #32
 80045f0:	2000      	movs	r0, #0
 80045f2:	681e      	ldr	r6, [r3, #0]
 80045f4:	468a      	mov	sl, r1
 80045f6:	4096      	lsls	r6, r2
 80045f8:	4330      	orrs	r0, r6
 80045fa:	f84a 0b04 	str.w	r0, [sl], #4
 80045fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8004602:	459c      	cmp	ip, r3
 8004604:	fa20 f00e 	lsr.w	r0, r0, lr
 8004608:	d814      	bhi.n	8004634 <__lshift+0x94>
 800460a:	6048      	str	r0, [r1, #4]
 800460c:	b108      	cbz	r0, 8004612 <__lshift+0x72>
 800460e:	f109 0502 	add.w	r5, r9, #2
 8004612:	3d01      	subs	r5, #1
 8004614:	4638      	mov	r0, r7
 8004616:	f8c8 5010 	str.w	r5, [r8, #16]
 800461a:	4621      	mov	r1, r4
 800461c:	f7ff fe33 	bl	8004286 <_Bfree>
 8004620:	4640      	mov	r0, r8
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	3101      	adds	r1, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	e7c7      	b.n	80045bc <__lshift+0x1c>
 800462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004630:	3301      	adds	r3, #1
 8004632:	e7cd      	b.n	80045d0 <__lshift+0x30>
 8004634:	4651      	mov	r1, sl
 8004636:	e7dc      	b.n	80045f2 <__lshift+0x52>
 8004638:	3904      	subs	r1, #4
 800463a:	f853 2b04 	ldr.w	r2, [r3], #4
 800463e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004642:	459c      	cmp	ip, r3
 8004644:	d8f9      	bhi.n	800463a <__lshift+0x9a>
 8004646:	e7e4      	b.n	8004612 <__lshift+0x72>

08004648 <__mcmp>:
 8004648:	6903      	ldr	r3, [r0, #16]
 800464a:	690a      	ldr	r2, [r1, #16]
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	b530      	push	{r4, r5, lr}
 8004650:	d10c      	bne.n	800466c <__mcmp+0x24>
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	3014      	adds	r0, #20
 8004656:	3114      	adds	r1, #20
 8004658:	1884      	adds	r4, r0, r2
 800465a:	4411      	add	r1, r2
 800465c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004664:	4295      	cmp	r5, r2
 8004666:	d003      	beq.n	8004670 <__mcmp+0x28>
 8004668:	d305      	bcc.n	8004676 <__mcmp+0x2e>
 800466a:	2301      	movs	r3, #1
 800466c:	4618      	mov	r0, r3
 800466e:	bd30      	pop	{r4, r5, pc}
 8004670:	42a0      	cmp	r0, r4
 8004672:	d3f3      	bcc.n	800465c <__mcmp+0x14>
 8004674:	e7fa      	b.n	800466c <__mcmp+0x24>
 8004676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467a:	e7f7      	b.n	800466c <__mcmp+0x24>

0800467c <__mdiff>:
 800467c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	460d      	mov	r5, r1
 8004682:	4607      	mov	r7, r0
 8004684:	4611      	mov	r1, r2
 8004686:	4628      	mov	r0, r5
 8004688:	4614      	mov	r4, r2
 800468a:	f7ff ffdd 	bl	8004648 <__mcmp>
 800468e:	1e06      	subs	r6, r0, #0
 8004690:	d108      	bne.n	80046a4 <__mdiff+0x28>
 8004692:	4631      	mov	r1, r6
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff fdc2 	bl	800421e <_Balloc>
 800469a:	2301      	movs	r3, #1
 800469c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	bfa4      	itt	ge
 80046a6:	4623      	movge	r3, r4
 80046a8:	462c      	movge	r4, r5
 80046aa:	4638      	mov	r0, r7
 80046ac:	6861      	ldr	r1, [r4, #4]
 80046ae:	bfa6      	itte	ge
 80046b0:	461d      	movge	r5, r3
 80046b2:	2600      	movge	r6, #0
 80046b4:	2601      	movlt	r6, #1
 80046b6:	f7ff fdb2 	bl	800421e <_Balloc>
 80046ba:	692b      	ldr	r3, [r5, #16]
 80046bc:	60c6      	str	r6, [r0, #12]
 80046be:	6926      	ldr	r6, [r4, #16]
 80046c0:	f105 0914 	add.w	r9, r5, #20
 80046c4:	f104 0214 	add.w	r2, r4, #20
 80046c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80046cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80046d0:	f100 0514 	add.w	r5, r0, #20
 80046d4:	f04f 0e00 	mov.w	lr, #0
 80046d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80046dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80046e0:	fa1e f18a 	uxtah	r1, lr, sl
 80046e4:	b2a3      	uxth	r3, r4
 80046e6:	1ac9      	subs	r1, r1, r3
 80046e8:	0c23      	lsrs	r3, r4, #16
 80046ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80046ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80046f2:	b289      	uxth	r1, r1
 80046f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80046f8:	45c8      	cmp	r8, r9
 80046fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80046fe:	4694      	mov	ip, r2
 8004700:	f845 3b04 	str.w	r3, [r5], #4
 8004704:	d8e8      	bhi.n	80046d8 <__mdiff+0x5c>
 8004706:	45bc      	cmp	ip, r7
 8004708:	d304      	bcc.n	8004714 <__mdiff+0x98>
 800470a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800470e:	b183      	cbz	r3, 8004732 <__mdiff+0xb6>
 8004710:	6106      	str	r6, [r0, #16]
 8004712:	e7c5      	b.n	80046a0 <__mdiff+0x24>
 8004714:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004718:	fa1e f381 	uxtah	r3, lr, r1
 800471c:	141a      	asrs	r2, r3, #16
 800471e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004722:	b29b      	uxth	r3, r3
 8004724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004728:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800472c:	f845 3b04 	str.w	r3, [r5], #4
 8004730:	e7e9      	b.n	8004706 <__mdiff+0x8a>
 8004732:	3e01      	subs	r6, #1
 8004734:	e7e9      	b.n	800470a <__mdiff+0x8e>

08004736 <__d2b>:
 8004736:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	2101      	movs	r1, #1
 800473e:	ec59 8b10 	vmov	r8, r9, d0
 8004742:	4615      	mov	r5, r2
 8004744:	f7ff fd6b 	bl	800421e <_Balloc>
 8004748:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800474c:	4607      	mov	r7, r0
 800474e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004752:	bb34      	cbnz	r4, 80047a2 <__d2b+0x6c>
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f1b8 0300 	subs.w	r3, r8, #0
 800475a:	d027      	beq.n	80047ac <__d2b+0x76>
 800475c:	a802      	add	r0, sp, #8
 800475e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004762:	f7ff fe01 	bl	8004368 <__lo0bits>
 8004766:	9900      	ldr	r1, [sp, #0]
 8004768:	b1f0      	cbz	r0, 80047a8 <__d2b+0x72>
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	f1c0 0320 	rsb	r3, r0, #32
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	430b      	orrs	r3, r1
 8004776:	40c2      	lsrs	r2, r0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	9201      	str	r2, [sp, #4]
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2102      	movne	r1, #2
 8004786:	2101      	moveq	r1, #1
 8004788:	6139      	str	r1, [r7, #16]
 800478a:	b1c4      	cbz	r4, 80047be <__d2b+0x88>
 800478c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004790:	4404      	add	r4, r0
 8004792:	6034      	str	r4, [r6, #0]
 8004794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004798:	6028      	str	r0, [r5, #0]
 800479a:	4638      	mov	r0, r7
 800479c:	b003      	add	sp, #12
 800479e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a6:	e7d5      	b.n	8004754 <__d2b+0x1e>
 80047a8:	6179      	str	r1, [r7, #20]
 80047aa:	e7e7      	b.n	800477c <__d2b+0x46>
 80047ac:	a801      	add	r0, sp, #4
 80047ae:	f7ff fddb 	bl	8004368 <__lo0bits>
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	2101      	movs	r1, #1
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	3020      	adds	r0, #32
 80047bc:	e7e5      	b.n	800478a <__d2b+0x54>
 80047be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80047c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047c6:	6030      	str	r0, [r6, #0]
 80047c8:	6918      	ldr	r0, [r3, #16]
 80047ca:	f7ff fdae 	bl	800432a <__hi0bits>
 80047ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80047d2:	e7e1      	b.n	8004798 <__d2b+0x62>

080047d4 <_calloc_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	fb02 f401 	mul.w	r4, r2, r1
 80047da:	4621      	mov	r1, r4
 80047dc:	f000 f856 	bl	800488c <_malloc_r>
 80047e0:	4605      	mov	r5, r0
 80047e2:	b118      	cbz	r0, 80047ec <_calloc_r+0x18>
 80047e4:	4622      	mov	r2, r4
 80047e6:	2100      	movs	r1, #0
 80047e8:	f7fe f96c 	bl	8002ac4 <memset>
 80047ec:	4628      	mov	r0, r5
 80047ee:	bd38      	pop	{r3, r4, r5, pc}

080047f0 <_free_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d045      	beq.n	8004884 <_free_r+0x94>
 80047f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fc:	1f0c      	subs	r4, r1, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	18e4      	addlt	r4, r4, r3
 8004804:	f000 fc4a 	bl	800509c <__malloc_lock>
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <_free_r+0x98>)
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	4610      	mov	r0, r2
 800480e:	b933      	cbnz	r3, 800481e <_free_r+0x2e>
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6014      	str	r4, [r2, #0]
 8004814:	4628      	mov	r0, r5
 8004816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800481a:	f000 bc40 	b.w	800509e <__malloc_unlock>
 800481e:	42a3      	cmp	r3, r4
 8004820:	d90c      	bls.n	800483c <_free_r+0x4c>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	1862      	adds	r2, r4, r1
 8004826:	4293      	cmp	r3, r2
 8004828:	bf04      	itt	eq
 800482a:	681a      	ldreq	r2, [r3, #0]
 800482c:	685b      	ldreq	r3, [r3, #4]
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	bf04      	itt	eq
 8004832:	1852      	addeq	r2, r2, r1
 8004834:	6022      	streq	r2, [r4, #0]
 8004836:	6004      	str	r4, [r0, #0]
 8004838:	e7ec      	b.n	8004814 <_free_r+0x24>
 800483a:	4613      	mov	r3, r2
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	b10a      	cbz	r2, 8004844 <_free_r+0x54>
 8004840:	42a2      	cmp	r2, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x4a>
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	1858      	adds	r0, r3, r1
 8004848:	42a0      	cmp	r0, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x74>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4401      	add	r1, r0
 8004850:	1858      	adds	r0, r3, r1
 8004852:	4282      	cmp	r2, r0
 8004854:	6019      	str	r1, [r3, #0]
 8004856:	d1dd      	bne.n	8004814 <_free_r+0x24>
 8004858:	6810      	ldr	r0, [r2, #0]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	4401      	add	r1, r0
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e7d7      	b.n	8004814 <_free_r+0x24>
 8004864:	d902      	bls.n	800486c <_free_r+0x7c>
 8004866:	230c      	movs	r3, #12
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	e7d3      	b.n	8004814 <_free_r+0x24>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428a      	cmp	r2, r1
 8004872:	bf04      	itt	eq
 8004874:	6811      	ldreq	r1, [r2, #0]
 8004876:	6852      	ldreq	r2, [r2, #4]
 8004878:	6062      	str	r2, [r4, #4]
 800487a:	bf04      	itt	eq
 800487c:	1809      	addeq	r1, r1, r0
 800487e:	6021      	streq	r1, [r4, #0]
 8004880:	605c      	str	r4, [r3, #4]
 8004882:	e7c7      	b.n	8004814 <_free_r+0x24>
 8004884:	bd38      	pop	{r3, r4, r5, pc}
 8004886:	bf00      	nop
 8004888:	2000020c 	.word	0x2000020c

0800488c <_malloc_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	1ccd      	adds	r5, r1, #3
 8004890:	f025 0503 	bic.w	r5, r5, #3
 8004894:	3508      	adds	r5, #8
 8004896:	2d0c      	cmp	r5, #12
 8004898:	bf38      	it	cc
 800489a:	250c      	movcc	r5, #12
 800489c:	2d00      	cmp	r5, #0
 800489e:	4606      	mov	r6, r0
 80048a0:	db01      	blt.n	80048a6 <_malloc_r+0x1a>
 80048a2:	42a9      	cmp	r1, r5
 80048a4:	d903      	bls.n	80048ae <_malloc_r+0x22>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	f000 fbf5 	bl	800509c <__malloc_lock>
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <_malloc_r+0xac>)
 80048b4:	6814      	ldr	r4, [r2, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	b991      	cbnz	r1, 80048e0 <_malloc_r+0x54>
 80048ba:	4c20      	ldr	r4, [pc, #128]	; (800493c <_malloc_r+0xb0>)
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	b91b      	cbnz	r3, 80048c8 <_malloc_r+0x3c>
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f97d 	bl	8004bc0 <_sbrk_r>
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	4629      	mov	r1, r5
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f978 	bl	8004bc0 <_sbrk_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d124      	bne.n	800491e <_malloc_r+0x92>
 80048d4:	230c      	movs	r3, #12
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 fbe0 	bl	800509e <__malloc_unlock>
 80048de:	e7e4      	b.n	80048aa <_malloc_r+0x1e>
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	1b5b      	subs	r3, r3, r5
 80048e4:	d418      	bmi.n	8004918 <_malloc_r+0x8c>
 80048e6:	2b0b      	cmp	r3, #11
 80048e8:	d90f      	bls.n	800490a <_malloc_r+0x7e>
 80048ea:	600b      	str	r3, [r1, #0]
 80048ec:	50cd      	str	r5, [r1, r3]
 80048ee:	18cc      	adds	r4, r1, r3
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 fbd4 	bl	800509e <__malloc_unlock>
 80048f6:	f104 000b 	add.w	r0, r4, #11
 80048fa:	1d23      	adds	r3, r4, #4
 80048fc:	f020 0007 	bic.w	r0, r0, #7
 8004900:	1ac3      	subs	r3, r0, r3
 8004902:	d0d3      	beq.n	80048ac <_malloc_r+0x20>
 8004904:	425a      	negs	r2, r3
 8004906:	50e2      	str	r2, [r4, r3]
 8004908:	e7d0      	b.n	80048ac <_malloc_r+0x20>
 800490a:	428c      	cmp	r4, r1
 800490c:	684b      	ldr	r3, [r1, #4]
 800490e:	bf16      	itet	ne
 8004910:	6063      	strne	r3, [r4, #4]
 8004912:	6013      	streq	r3, [r2, #0]
 8004914:	460c      	movne	r4, r1
 8004916:	e7eb      	b.n	80048f0 <_malloc_r+0x64>
 8004918:	460c      	mov	r4, r1
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	e7cc      	b.n	80048b8 <_malloc_r+0x2c>
 800491e:	1cc4      	adds	r4, r0, #3
 8004920:	f024 0403 	bic.w	r4, r4, #3
 8004924:	42a0      	cmp	r0, r4
 8004926:	d005      	beq.n	8004934 <_malloc_r+0xa8>
 8004928:	1a21      	subs	r1, r4, r0
 800492a:	4630      	mov	r0, r6
 800492c:	f000 f948 	bl	8004bc0 <_sbrk_r>
 8004930:	3001      	adds	r0, #1
 8004932:	d0cf      	beq.n	80048d4 <_malloc_r+0x48>
 8004934:	6025      	str	r5, [r4, #0]
 8004936:	e7db      	b.n	80048f0 <_malloc_r+0x64>
 8004938:	2000020c 	.word	0x2000020c
 800493c:	20000210 	.word	0x20000210

08004940 <__sfputc_r>:
 8004940:	6893      	ldr	r3, [r2, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	b410      	push	{r4}
 8004948:	6093      	str	r3, [r2, #8]
 800494a:	da08      	bge.n	800495e <__sfputc_r+0x1e>
 800494c:	6994      	ldr	r4, [r2, #24]
 800494e:	42a3      	cmp	r3, r4
 8004950:	db01      	blt.n	8004956 <__sfputc_r+0x16>
 8004952:	290a      	cmp	r1, #10
 8004954:	d103      	bne.n	800495e <__sfputc_r+0x1e>
 8004956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800495a:	f000 b985 	b.w	8004c68 <__swbuf_r>
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	1c58      	adds	r0, r3, #1
 8004962:	6010      	str	r0, [r2, #0]
 8004964:	7019      	strb	r1, [r3, #0]
 8004966:	4608      	mov	r0, r1
 8004968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800496c:	4770      	bx	lr

0800496e <__sfputs_r>:
 800496e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004970:	4606      	mov	r6, r0
 8004972:	460f      	mov	r7, r1
 8004974:	4614      	mov	r4, r2
 8004976:	18d5      	adds	r5, r2, r3
 8004978:	42ac      	cmp	r4, r5
 800497a:	d101      	bne.n	8004980 <__sfputs_r+0x12>
 800497c:	2000      	movs	r0, #0
 800497e:	e007      	b.n	8004990 <__sfputs_r+0x22>
 8004980:	463a      	mov	r2, r7
 8004982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff ffda 	bl	8004940 <__sfputc_r>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d1f3      	bne.n	8004978 <__sfputs_r+0xa>
 8004990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004994 <_vfiprintf_r>:
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	b09d      	sub	sp, #116	; 0x74
 800499c:	4617      	mov	r7, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	4606      	mov	r6, r0
 80049a2:	b118      	cbz	r0, 80049ac <_vfiprintf_r+0x18>
 80049a4:	6983      	ldr	r3, [r0, #24]
 80049a6:	b90b      	cbnz	r3, 80049ac <_vfiprintf_r+0x18>
 80049a8:	f7ff fb8e 	bl	80040c8 <__sinit>
 80049ac:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <_vfiprintf_r+0x20c>)
 80049ae:	429c      	cmp	r4, r3
 80049b0:	d158      	bne.n	8004a64 <_vfiprintf_r+0xd0>
 80049b2:	6874      	ldr	r4, [r6, #4]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	0718      	lsls	r0, r3, #28
 80049b8:	d55e      	bpl.n	8004a78 <_vfiprintf_r+0xe4>
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05b      	beq.n	8004a78 <_vfiprintf_r+0xe4>
 80049c0:	2300      	movs	r3, #0
 80049c2:	9309      	str	r3, [sp, #36]	; 0x24
 80049c4:	2320      	movs	r3, #32
 80049c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ca:	2330      	movs	r3, #48	; 0x30
 80049cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049d0:	9503      	str	r5, [sp, #12]
 80049d2:	f04f 0b01 	mov.w	fp, #1
 80049d6:	46b8      	mov	r8, r7
 80049d8:	4645      	mov	r5, r8
 80049da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049de:	b10b      	cbz	r3, 80049e4 <_vfiprintf_r+0x50>
 80049e0:	2b25      	cmp	r3, #37	; 0x25
 80049e2:	d154      	bne.n	8004a8e <_vfiprintf_r+0xfa>
 80049e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80049e8:	d00b      	beq.n	8004a02 <_vfiprintf_r+0x6e>
 80049ea:	4653      	mov	r3, sl
 80049ec:	463a      	mov	r2, r7
 80049ee:	4621      	mov	r1, r4
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7ff ffbc 	bl	800496e <__sfputs_r>
 80049f6:	3001      	adds	r0, #1
 80049f8:	f000 80c2 	beq.w	8004b80 <_vfiprintf_r+0x1ec>
 80049fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fe:	4453      	add	r3, sl
 8004a00:	9309      	str	r3, [sp, #36]	; 0x24
 8004a02:	f898 3000 	ldrb.w	r3, [r8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80ba 	beq.w	8004b80 <_vfiprintf_r+0x1ec>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a16:	9304      	str	r3, [sp, #16]
 8004a18:	9307      	str	r3, [sp, #28]
 8004a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a20:	46a8      	mov	r8, r5
 8004a22:	2205      	movs	r2, #5
 8004a24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a28:	485e      	ldr	r0, [pc, #376]	; (8004ba4 <_vfiprintf_r+0x210>)
 8004a2a:	f7fb fbf9 	bl	8000220 <memchr>
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	bb78      	cbnz	r0, 8004a92 <_vfiprintf_r+0xfe>
 8004a32:	06d9      	lsls	r1, r3, #27
 8004a34:	bf44      	itt	mi
 8004a36:	2220      	movmi	r2, #32
 8004a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a3c:	071a      	lsls	r2, r3, #28
 8004a3e:	bf44      	itt	mi
 8004a40:	222b      	movmi	r2, #43	; 0x2b
 8004a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a46:	782a      	ldrb	r2, [r5, #0]
 8004a48:	2a2a      	cmp	r2, #42	; 0x2a
 8004a4a:	d02a      	beq.n	8004aa2 <_vfiprintf_r+0x10e>
 8004a4c:	9a07      	ldr	r2, [sp, #28]
 8004a4e:	46a8      	mov	r8, r5
 8004a50:	2000      	movs	r0, #0
 8004a52:	250a      	movs	r5, #10
 8004a54:	4641      	mov	r1, r8
 8004a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5a:	3b30      	subs	r3, #48	; 0x30
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d969      	bls.n	8004b34 <_vfiprintf_r+0x1a0>
 8004a60:	b360      	cbz	r0, 8004abc <_vfiprintf_r+0x128>
 8004a62:	e024      	b.n	8004aae <_vfiprintf_r+0x11a>
 8004a64:	4b50      	ldr	r3, [pc, #320]	; (8004ba8 <_vfiprintf_r+0x214>)
 8004a66:	429c      	cmp	r4, r3
 8004a68:	d101      	bne.n	8004a6e <_vfiprintf_r+0xda>
 8004a6a:	68b4      	ldr	r4, [r6, #8]
 8004a6c:	e7a2      	b.n	80049b4 <_vfiprintf_r+0x20>
 8004a6e:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <_vfiprintf_r+0x218>)
 8004a70:	429c      	cmp	r4, r3
 8004a72:	bf08      	it	eq
 8004a74:	68f4      	ldreq	r4, [r6, #12]
 8004a76:	e79d      	b.n	80049b4 <_vfiprintf_r+0x20>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f000 f958 	bl	8004d30 <__swsetup_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d09d      	beq.n	80049c0 <_vfiprintf_r+0x2c>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a88:	b01d      	add	sp, #116	; 0x74
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	46a8      	mov	r8, r5
 8004a90:	e7a2      	b.n	80049d8 <_vfiprintf_r+0x44>
 8004a92:	4a44      	ldr	r2, [pc, #272]	; (8004ba4 <_vfiprintf_r+0x210>)
 8004a94:	1a80      	subs	r0, r0, r2
 8004a96:	fa0b f000 	lsl.w	r0, fp, r0
 8004a9a:	4318      	orrs	r0, r3
 8004a9c:	9004      	str	r0, [sp, #16]
 8004a9e:	4645      	mov	r5, r8
 8004aa0:	e7be      	b.n	8004a20 <_vfiprintf_r+0x8c>
 8004aa2:	9a03      	ldr	r2, [sp, #12]
 8004aa4:	1d11      	adds	r1, r2, #4
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	9103      	str	r1, [sp, #12]
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	db01      	blt.n	8004ab2 <_vfiprintf_r+0x11e>
 8004aae:	9207      	str	r2, [sp, #28]
 8004ab0:	e004      	b.n	8004abc <_vfiprintf_r+0x128>
 8004ab2:	4252      	negs	r2, r2
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	9207      	str	r2, [sp, #28]
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	f898 3000 	ldrb.w	r3, [r8]
 8004ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac2:	d10e      	bne.n	8004ae2 <_vfiprintf_r+0x14e>
 8004ac4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8004aca:	d138      	bne.n	8004b3e <_vfiprintf_r+0x1aa>
 8004acc:	9b03      	ldr	r3, [sp, #12]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	9203      	str	r2, [sp, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfb8      	it	lt
 8004ad8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004adc:	f108 0802 	add.w	r8, r8, #2
 8004ae0:	9305      	str	r3, [sp, #20]
 8004ae2:	4d33      	ldr	r5, [pc, #204]	; (8004bb0 <_vfiprintf_r+0x21c>)
 8004ae4:	f898 1000 	ldrb.w	r1, [r8]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7fb fb98 	bl	8000220 <memchr>
 8004af0:	b140      	cbz	r0, 8004b04 <_vfiprintf_r+0x170>
 8004af2:	2340      	movs	r3, #64	; 0x40
 8004af4:	1b40      	subs	r0, r0, r5
 8004af6:	fa03 f000 	lsl.w	r0, r3, r0
 8004afa:	9b04      	ldr	r3, [sp, #16]
 8004afc:	4303      	orrs	r3, r0
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	9304      	str	r3, [sp, #16]
 8004b04:	f898 1000 	ldrb.w	r1, [r8]
 8004b08:	482a      	ldr	r0, [pc, #168]	; (8004bb4 <_vfiprintf_r+0x220>)
 8004b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b0e:	2206      	movs	r2, #6
 8004b10:	f108 0701 	add.w	r7, r8, #1
 8004b14:	f7fb fb84 	bl	8000220 <memchr>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d037      	beq.n	8004b8c <_vfiprintf_r+0x1f8>
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <_vfiprintf_r+0x224>)
 8004b1e:	bb1b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x1d4>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	3307      	adds	r3, #7
 8004b24:	f023 0307 	bic.w	r3, r3, #7
 8004b28:	3308      	adds	r3, #8
 8004b2a:	9303      	str	r3, [sp, #12]
 8004b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2e:	444b      	add	r3, r9
 8004b30:	9309      	str	r3, [sp, #36]	; 0x24
 8004b32:	e750      	b.n	80049d6 <_vfiprintf_r+0x42>
 8004b34:	fb05 3202 	mla	r2, r5, r2, r3
 8004b38:	2001      	movs	r0, #1
 8004b3a:	4688      	mov	r8, r1
 8004b3c:	e78a      	b.n	8004a54 <_vfiprintf_r+0xc0>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f108 0801 	add.w	r8, r8, #1
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	4619      	mov	r1, r3
 8004b48:	250a      	movs	r5, #10
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b50:	3a30      	subs	r2, #48	; 0x30
 8004b52:	2a09      	cmp	r2, #9
 8004b54:	d903      	bls.n	8004b5e <_vfiprintf_r+0x1ca>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c3      	beq.n	8004ae2 <_vfiprintf_r+0x14e>
 8004b5a:	9105      	str	r1, [sp, #20]
 8004b5c:	e7c1      	b.n	8004ae2 <_vfiprintf_r+0x14e>
 8004b5e:	fb05 2101 	mla	r1, r5, r1, r2
 8004b62:	2301      	movs	r3, #1
 8004b64:	4680      	mov	r8, r0
 8004b66:	e7f0      	b.n	8004b4a <_vfiprintf_r+0x1b6>
 8004b68:	ab03      	add	r3, sp, #12
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <_vfiprintf_r+0x228>)
 8004b70:	a904      	add	r1, sp, #16
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7fe f842 	bl	8002bfc <_printf_float>
 8004b78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004b7c:	4681      	mov	r9, r0
 8004b7e:	d1d5      	bne.n	8004b2c <_vfiprintf_r+0x198>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	065b      	lsls	r3, r3, #25
 8004b84:	f53f af7e 	bmi.w	8004a84 <_vfiprintf_r+0xf0>
 8004b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b8a:	e77d      	b.n	8004a88 <_vfiprintf_r+0xf4>
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4622      	mov	r2, r4
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <_vfiprintf_r+0x228>)
 8004b94:	a904      	add	r1, sp, #16
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7fe fae6 	bl	8003168 <_printf_i>
 8004b9c:	e7ec      	b.n	8004b78 <_vfiprintf_r+0x1e4>
 8004b9e:	bf00      	nop
 8004ba0:	080051cc 	.word	0x080051cc
 8004ba4:	0800530c 	.word	0x0800530c
 8004ba8:	080051ec 	.word	0x080051ec
 8004bac:	080051ac 	.word	0x080051ac
 8004bb0:	08005312 	.word	0x08005312
 8004bb4:	08005316 	.word	0x08005316
 8004bb8:	08002bfd 	.word	0x08002bfd
 8004bbc:	0800496f 	.word	0x0800496f

08004bc0 <_sbrk_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4c06      	ldr	r4, [pc, #24]	; (8004bdc <_sbrk_r+0x1c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	f7fc feea 	bl	80019a4 <_sbrk>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_sbrk_r+0x1a>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_sbrk_r+0x1a>
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	20000214 	.word	0x20000214

08004be0 <__sread>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	460c      	mov	r4, r1
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	f000 fa5a 	bl	80050a0 <_read_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	bfab      	itete	ge
 8004bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf4:	181b      	addge	r3, r3, r0
 8004bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bfa:	bfac      	ite	ge
 8004bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bfe:	81a3      	strhlt	r3, [r4, #12]
 8004c00:	bd10      	pop	{r4, pc}

08004c02 <__swrite>:
 8004c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c06:	461f      	mov	r7, r3
 8004c08:	898b      	ldrh	r3, [r1, #12]
 8004c0a:	05db      	lsls	r3, r3, #23
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	4616      	mov	r6, r2
 8004c12:	d505      	bpl.n	8004c20 <__swrite+0x1e>
 8004c14:	2302      	movs	r3, #2
 8004c16:	2200      	movs	r2, #0
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	f000 f9b6 	bl	8004f8c <_lseek_r>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	463b      	mov	r3, r7
 8004c30:	4628      	mov	r0, r5
 8004c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c36:	f000 b869 	b.w	8004d0c <_write_r>

08004c3a <__sseek>:
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c42:	f000 f9a3 	bl	8004f8c <_lseek_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	bf15      	itete	ne
 8004c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c56:	81a3      	strheq	r3, [r4, #12]
 8004c58:	bf18      	it	ne
 8004c5a:	81a3      	strhne	r3, [r4, #12]
 8004c5c:	bd10      	pop	{r4, pc}

08004c5e <__sclose>:
 8004c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c62:	f000 b8d3 	b.w	8004e0c <_close_r>
	...

08004c68 <__swbuf_r>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	4605      	mov	r5, r0
 8004c70:	b118      	cbz	r0, 8004c7a <__swbuf_r+0x12>
 8004c72:	6983      	ldr	r3, [r0, #24]
 8004c74:	b90b      	cbnz	r3, 8004c7a <__swbuf_r+0x12>
 8004c76:	f7ff fa27 	bl	80040c8 <__sinit>
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <__swbuf_r+0x98>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d12a      	bne.n	8004cd6 <__swbuf_r+0x6e>
 8004c80:	686c      	ldr	r4, [r5, #4]
 8004c82:	69a3      	ldr	r3, [r4, #24]
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	071a      	lsls	r2, r3, #28
 8004c8a:	d52e      	bpl.n	8004cea <__swbuf_r+0x82>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	b363      	cbz	r3, 8004cea <__swbuf_r+0x82>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	1ac0      	subs	r0, r0, r3
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	b2f6      	uxtb	r6, r6
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	4637      	mov	r7, r6
 8004c9e:	dc04      	bgt.n	8004caa <__swbuf_r+0x42>
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 f948 	bl	8004f38 <_fflush_r>
 8004ca8:	bb28      	cbnz	r0, 8004cf6 <__swbuf_r+0x8e>
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60a3      	str	r3, [r4, #8]
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	6022      	str	r2, [r4, #0]
 8004cb6:	701e      	strb	r6, [r3, #0]
 8004cb8:	6963      	ldr	r3, [r4, #20]
 8004cba:	3001      	adds	r0, #1
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d004      	beq.n	8004cca <__swbuf_r+0x62>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	07db      	lsls	r3, r3, #31
 8004cc4:	d519      	bpl.n	8004cfa <__swbuf_r+0x92>
 8004cc6:	2e0a      	cmp	r6, #10
 8004cc8:	d117      	bne.n	8004cfa <__swbuf_r+0x92>
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f933 	bl	8004f38 <_fflush_r>
 8004cd2:	b190      	cbz	r0, 8004cfa <__swbuf_r+0x92>
 8004cd4:	e00f      	b.n	8004cf6 <__swbuf_r+0x8e>
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <__swbuf_r+0x9c>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d101      	bne.n	8004ce0 <__swbuf_r+0x78>
 8004cdc:	68ac      	ldr	r4, [r5, #8]
 8004cde:	e7d0      	b.n	8004c82 <__swbuf_r+0x1a>
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <__swbuf_r+0xa0>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	bf08      	it	eq
 8004ce6:	68ec      	ldreq	r4, [r5, #12]
 8004ce8:	e7cb      	b.n	8004c82 <__swbuf_r+0x1a>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f000 f81f 	bl	8004d30 <__swsetup_r>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d0cc      	beq.n	8004c90 <__swbuf_r+0x28>
 8004cf6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	080051cc 	.word	0x080051cc
 8004d04:	080051ec 	.word	0x080051ec
 8004d08:	080051ac 	.word	0x080051ac

08004d0c <_write_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4c07      	ldr	r4, [pc, #28]	; (8004d2c <_write_r+0x20>)
 8004d10:	4605      	mov	r5, r0
 8004d12:	4608      	mov	r0, r1
 8004d14:	4611      	mov	r1, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	6022      	str	r2, [r4, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fc fdf1 	bl	8001902 <_write>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_write_r+0x1e>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_write_r+0x1e>
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000214 	.word	0x20000214

08004d30 <__swsetup_r>:
 8004d30:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <__swsetup_r+0xcc>)
 8004d32:	b570      	push	{r4, r5, r6, lr}
 8004d34:	681d      	ldr	r5, [r3, #0]
 8004d36:	4606      	mov	r6, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	b125      	cbz	r5, 8004d46 <__swsetup_r+0x16>
 8004d3c:	69ab      	ldr	r3, [r5, #24]
 8004d3e:	b913      	cbnz	r3, 8004d46 <__swsetup_r+0x16>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f7ff f9c1 	bl	80040c8 <__sinit>
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <__swsetup_r+0xd0>)
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d10f      	bne.n	8004d6c <__swsetup_r+0x3c>
 8004d4c:	686c      	ldr	r4, [r5, #4]
 8004d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	0715      	lsls	r5, r2, #28
 8004d56:	d42c      	bmi.n	8004db2 <__swsetup_r+0x82>
 8004d58:	06d0      	lsls	r0, r2, #27
 8004d5a:	d411      	bmi.n	8004d80 <__swsetup_r+0x50>
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	6032      	str	r2, [r6, #0]
 8004d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6a:	e03e      	b.n	8004dea <__swsetup_r+0xba>
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <__swsetup_r+0xd4>)
 8004d6e:	429c      	cmp	r4, r3
 8004d70:	d101      	bne.n	8004d76 <__swsetup_r+0x46>
 8004d72:	68ac      	ldr	r4, [r5, #8]
 8004d74:	e7eb      	b.n	8004d4e <__swsetup_r+0x1e>
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <__swsetup_r+0xd8>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	bf08      	it	eq
 8004d7c:	68ec      	ldreq	r4, [r5, #12]
 8004d7e:	e7e6      	b.n	8004d4e <__swsetup_r+0x1e>
 8004d80:	0751      	lsls	r1, r2, #29
 8004d82:	d512      	bpl.n	8004daa <__swsetup_r+0x7a>
 8004d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d86:	b141      	cbz	r1, 8004d9a <__swsetup_r+0x6a>
 8004d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	d002      	beq.n	8004d96 <__swsetup_r+0x66>
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7ff fd2d 	bl	80047f0 <_free_r>
 8004d96:	2300      	movs	r3, #0
 8004d98:	6363      	str	r3, [r4, #52]	; 0x34
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	2300      	movs	r3, #0
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	b94b      	cbnz	r3, 8004dca <__swsetup_r+0x9a>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d003      	beq.n	8004dca <__swsetup_r+0x9a>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f917 	bl	8004ff8 <__smakebuf_r>
 8004dca:	89a2      	ldrh	r2, [r4, #12]
 8004dcc:	f012 0301 	ands.w	r3, r2, #1
 8004dd0:	d00c      	beq.n	8004dec <__swsetup_r+0xbc>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60a3      	str	r3, [r4, #8]
 8004dd6:	6963      	ldr	r3, [r4, #20]
 8004dd8:	425b      	negs	r3, r3
 8004dda:	61a3      	str	r3, [r4, #24]
 8004ddc:	6923      	ldr	r3, [r4, #16]
 8004dde:	b953      	cbnz	r3, 8004df6 <__swsetup_r+0xc6>
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004de8:	d1ba      	bne.n	8004d60 <__swsetup_r+0x30>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	0792      	lsls	r2, r2, #30
 8004dee:	bf58      	it	pl
 8004df0:	6963      	ldrpl	r3, [r4, #20]
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	e7f2      	b.n	8004ddc <__swsetup_r+0xac>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e7f7      	b.n	8004dea <__swsetup_r+0xba>
 8004dfa:	bf00      	nop
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	080051cc 	.word	0x080051cc
 8004e04:	080051ec 	.word	0x080051ec
 8004e08:	080051ac 	.word	0x080051ac

08004e0c <_close_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4c06      	ldr	r4, [pc, #24]	; (8004e28 <_close_r+0x1c>)
 8004e10:	2300      	movs	r3, #0
 8004e12:	4605      	mov	r5, r0
 8004e14:	4608      	mov	r0, r1
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	f7fc fd8f 	bl	800193a <_close>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_close_r+0x1a>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_close_r+0x1a>
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000214 	.word	0x20000214

08004e2c <__sflush_r>:
 8004e2c:	898a      	ldrh	r2, [r1, #12]
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	4605      	mov	r5, r0
 8004e34:	0710      	lsls	r0, r2, #28
 8004e36:	460c      	mov	r4, r1
 8004e38:	d458      	bmi.n	8004eec <__sflush_r+0xc0>
 8004e3a:	684b      	ldr	r3, [r1, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dc05      	bgt.n	8004e4c <__sflush_r+0x20>
 8004e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	dc02      	bgt.n	8004e4c <__sflush_r+0x20>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	d0f9      	beq.n	8004e46 <__sflush_r+0x1a>
 8004e52:	2300      	movs	r3, #0
 8004e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e58:	682f      	ldr	r7, [r5, #0]
 8004e5a:	6a21      	ldr	r1, [r4, #32]
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	d032      	beq.n	8004ec6 <__sflush_r+0x9a>
 8004e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	075a      	lsls	r2, r3, #29
 8004e66:	d505      	bpl.n	8004e74 <__sflush_r+0x48>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	1ac0      	subs	r0, r0, r3
 8004e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e6e:	b10b      	cbz	r3, 8004e74 <__sflush_r+0x48>
 8004e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e72:	1ac0      	subs	r0, r0, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	4602      	mov	r2, r0
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	6a21      	ldr	r1, [r4, #32]
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b0      	blx	r6
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	d106      	bne.n	8004e94 <__sflush_r+0x68>
 8004e86:	6829      	ldr	r1, [r5, #0]
 8004e88:	291d      	cmp	r1, #29
 8004e8a:	d848      	bhi.n	8004f1e <__sflush_r+0xf2>
 8004e8c:	4a29      	ldr	r2, [pc, #164]	; (8004f34 <__sflush_r+0x108>)
 8004e8e:	40ca      	lsrs	r2, r1
 8004e90:	07d6      	lsls	r6, r2, #31
 8004e92:	d544      	bpl.n	8004f1e <__sflush_r+0xf2>
 8004e94:	2200      	movs	r2, #0
 8004e96:	6062      	str	r2, [r4, #4]
 8004e98:	04d9      	lsls	r1, r3, #19
 8004e9a:	6922      	ldr	r2, [r4, #16]
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	d504      	bpl.n	8004eaa <__sflush_r+0x7e>
 8004ea0:	1c42      	adds	r2, r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <__sflush_r+0x7c>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b903      	cbnz	r3, 8004eaa <__sflush_r+0x7e>
 8004ea8:	6560      	str	r0, [r4, #84]	; 0x54
 8004eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eac:	602f      	str	r7, [r5, #0]
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d0c9      	beq.n	8004e46 <__sflush_r+0x1a>
 8004eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	d002      	beq.n	8004ec0 <__sflush_r+0x94>
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7ff fc98 	bl	80047f0 <_free_r>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	6360      	str	r0, [r4, #52]	; 0x34
 8004ec4:	e7c0      	b.n	8004e48 <__sflush_r+0x1c>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b0      	blx	r6
 8004ecc:	1c41      	adds	r1, r0, #1
 8004ece:	d1c8      	bne.n	8004e62 <__sflush_r+0x36>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0c5      	beq.n	8004e62 <__sflush_r+0x36>
 8004ed6:	2b1d      	cmp	r3, #29
 8004ed8:	d001      	beq.n	8004ede <__sflush_r+0xb2>
 8004eda:	2b16      	cmp	r3, #22
 8004edc:	d101      	bne.n	8004ee2 <__sflush_r+0xb6>
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	e7b1      	b.n	8004e46 <__sflush_r+0x1a>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	e7ad      	b.n	8004e48 <__sflush_r+0x1c>
 8004eec:	690f      	ldr	r7, [r1, #16]
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	d0a9      	beq.n	8004e46 <__sflush_r+0x1a>
 8004ef2:	0793      	lsls	r3, r2, #30
 8004ef4:	680e      	ldr	r6, [r1, #0]
 8004ef6:	bf08      	it	eq
 8004ef8:	694b      	ldreq	r3, [r1, #20]
 8004efa:	600f      	str	r7, [r1, #0]
 8004efc:	bf18      	it	ne
 8004efe:	2300      	movne	r3, #0
 8004f00:	eba6 0807 	sub.w	r8, r6, r7
 8004f04:	608b      	str	r3, [r1, #8]
 8004f06:	f1b8 0f00 	cmp.w	r8, #0
 8004f0a:	dd9c      	ble.n	8004e46 <__sflush_r+0x1a>
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	463a      	mov	r2, r7
 8004f10:	6a21      	ldr	r1, [r4, #32]
 8004f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b0      	blx	r6
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	dc06      	bgt.n	8004f2a <__sflush_r+0xfe>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f28:	e78e      	b.n	8004e48 <__sflush_r+0x1c>
 8004f2a:	4407      	add	r7, r0
 8004f2c:	eba8 0800 	sub.w	r8, r8, r0
 8004f30:	e7e9      	b.n	8004f06 <__sflush_r+0xda>
 8004f32:	bf00      	nop
 8004f34:	20400001 	.word	0x20400001

08004f38 <_fflush_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	b1db      	cbz	r3, 8004f7a <_fflush_r+0x42>
 8004f42:	b118      	cbz	r0, 8004f4c <_fflush_r+0x14>
 8004f44:	6983      	ldr	r3, [r0, #24]
 8004f46:	b90b      	cbnz	r3, 8004f4c <_fflush_r+0x14>
 8004f48:	f7ff f8be 	bl	80040c8 <__sinit>
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <_fflush_r+0x48>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d109      	bne.n	8004f66 <_fflush_r+0x2e>
 8004f52:	686c      	ldr	r4, [r5, #4]
 8004f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f58:	b17b      	cbz	r3, 8004f7a <_fflush_r+0x42>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f62:	f7ff bf63 	b.w	8004e2c <__sflush_r>
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <_fflush_r+0x4c>)
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	d101      	bne.n	8004f70 <_fflush_r+0x38>
 8004f6c:	68ac      	ldr	r4, [r5, #8]
 8004f6e:	e7f1      	b.n	8004f54 <_fflush_r+0x1c>
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <_fflush_r+0x50>)
 8004f72:	429c      	cmp	r4, r3
 8004f74:	bf08      	it	eq
 8004f76:	68ec      	ldreq	r4, [r5, #12]
 8004f78:	e7ec      	b.n	8004f54 <_fflush_r+0x1c>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	bd38      	pop	{r3, r4, r5, pc}
 8004f7e:	bf00      	nop
 8004f80:	080051cc 	.word	0x080051cc
 8004f84:	080051ec 	.word	0x080051ec
 8004f88:	080051ac 	.word	0x080051ac

08004f8c <_lseek_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4c07      	ldr	r4, [pc, #28]	; (8004fac <_lseek_r+0x20>)
 8004f90:	4605      	mov	r5, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	6022      	str	r2, [r4, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc fcf4 	bl	8001988 <_lseek>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_lseek_r+0x1e>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_lseek_r+0x1e>
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000214 	.word	0x20000214

08004fb0 <__swhatbuf_r>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	b096      	sub	sp, #88	; 0x58
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	461d      	mov	r5, r3
 8004fc0:	da07      	bge.n	8004fd2 <__swhatbuf_r+0x22>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	89b3      	ldrh	r3, [r6, #12]
 8004fc8:	061a      	lsls	r2, r3, #24
 8004fca:	d410      	bmi.n	8004fee <__swhatbuf_r+0x3e>
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	e00e      	b.n	8004ff0 <__swhatbuf_r+0x40>
 8004fd2:	466a      	mov	r2, sp
 8004fd4:	f000 f884 	bl	80050e0 <_fstat_r>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	dbf2      	blt.n	8004fc2 <__swhatbuf_r+0x12>
 8004fdc:	9a01      	ldr	r2, [sp, #4]
 8004fde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fe2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fe6:	425a      	negs	r2, r3
 8004fe8:	415a      	adcs	r2, r3
 8004fea:	602a      	str	r2, [r5, #0]
 8004fec:	e7ee      	b.n	8004fcc <__swhatbuf_r+0x1c>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	b016      	add	sp, #88	; 0x58
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}

08004ff8 <__smakebuf_r>:
 8004ff8:	898b      	ldrh	r3, [r1, #12]
 8004ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ffc:	079d      	lsls	r5, r3, #30
 8004ffe:	4606      	mov	r6, r0
 8005000:	460c      	mov	r4, r1
 8005002:	d507      	bpl.n	8005014 <__smakebuf_r+0x1c>
 8005004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	2301      	movs	r3, #1
 800500e:	6163      	str	r3, [r4, #20]
 8005010:	b002      	add	sp, #8
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	ab01      	add	r3, sp, #4
 8005016:	466a      	mov	r2, sp
 8005018:	f7ff ffca 	bl	8004fb0 <__swhatbuf_r>
 800501c:	9900      	ldr	r1, [sp, #0]
 800501e:	4605      	mov	r5, r0
 8005020:	4630      	mov	r0, r6
 8005022:	f7ff fc33 	bl	800488c <_malloc_r>
 8005026:	b948      	cbnz	r0, 800503c <__smakebuf_r+0x44>
 8005028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502c:	059a      	lsls	r2, r3, #22
 800502e:	d4ef      	bmi.n	8005010 <__smakebuf_r+0x18>
 8005030:	f023 0303 	bic.w	r3, r3, #3
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	e7e3      	b.n	8005004 <__smakebuf_r+0xc>
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <__smakebuf_r+0x7c>)
 800503e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	9b00      	ldr	r3, [sp, #0]
 800504c:	6163      	str	r3, [r4, #20]
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	6120      	str	r0, [r4, #16]
 8005052:	b15b      	cbz	r3, 800506c <__smakebuf_r+0x74>
 8005054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f853 	bl	8005104 <_isatty_r>
 800505e:	b128      	cbz	r0, 800506c <__smakebuf_r+0x74>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	431d      	orrs	r5, r3
 8005070:	81a5      	strh	r5, [r4, #12]
 8005072:	e7cd      	b.n	8005010 <__smakebuf_r+0x18>
 8005074:	08004091 	.word	0x08004091

08005078 <__ascii_mbtowc>:
 8005078:	b082      	sub	sp, #8
 800507a:	b901      	cbnz	r1, 800507e <__ascii_mbtowc+0x6>
 800507c:	a901      	add	r1, sp, #4
 800507e:	b142      	cbz	r2, 8005092 <__ascii_mbtowc+0x1a>
 8005080:	b14b      	cbz	r3, 8005096 <__ascii_mbtowc+0x1e>
 8005082:	7813      	ldrb	r3, [r2, #0]
 8005084:	600b      	str	r3, [r1, #0]
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	1c10      	adds	r0, r2, #0
 800508a:	bf18      	it	ne
 800508c:	2001      	movne	r0, #1
 800508e:	b002      	add	sp, #8
 8005090:	4770      	bx	lr
 8005092:	4610      	mov	r0, r2
 8005094:	e7fb      	b.n	800508e <__ascii_mbtowc+0x16>
 8005096:	f06f 0001 	mvn.w	r0, #1
 800509a:	e7f8      	b.n	800508e <__ascii_mbtowc+0x16>

0800509c <__malloc_lock>:
 800509c:	4770      	bx	lr

0800509e <__malloc_unlock>:
 800509e:	4770      	bx	lr

080050a0 <_read_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4c07      	ldr	r4, [pc, #28]	; (80050c0 <_read_r+0x20>)
 80050a4:	4605      	mov	r5, r0
 80050a6:	4608      	mov	r0, r1
 80050a8:	4611      	mov	r1, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	6022      	str	r2, [r4, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f7fc fc0a 	bl	80018c8 <_read>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_read_r+0x1e>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	b103      	cbz	r3, 80050be <_read_r+0x1e>
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	20000214 	.word	0x20000214

080050c4 <__ascii_wctomb>:
 80050c4:	b149      	cbz	r1, 80050da <__ascii_wctomb+0x16>
 80050c6:	2aff      	cmp	r2, #255	; 0xff
 80050c8:	bf85      	ittet	hi
 80050ca:	238a      	movhi	r3, #138	; 0x8a
 80050cc:	6003      	strhi	r3, [r0, #0]
 80050ce:	700a      	strbls	r2, [r1, #0]
 80050d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80050d4:	bf98      	it	ls
 80050d6:	2001      	movls	r0, #1
 80050d8:	4770      	bx	lr
 80050da:	4608      	mov	r0, r1
 80050dc:	4770      	bx	lr
	...

080050e0 <_fstat_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4c07      	ldr	r4, [pc, #28]	; (8005100 <_fstat_r+0x20>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4605      	mov	r5, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	f7fc fc30 	bl	8001952 <_fstat>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d102      	bne.n	80050fc <_fstat_r+0x1c>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	b103      	cbz	r3, 80050fc <_fstat_r+0x1c>
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000214 	.word	0x20000214

08005104 <_isatty_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4c06      	ldr	r4, [pc, #24]	; (8005120 <_isatty_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4605      	mov	r5, r0
 800510c:	4608      	mov	r0, r1
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	f7fc fc2f 	bl	8001972 <_isatty>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_isatty_r+0x1a>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	b103      	cbz	r3, 800511e <_isatty_r+0x1a>
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20000214 	.word	0x20000214

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
