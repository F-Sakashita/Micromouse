
Test_ICM-20602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08005d40  08005d40  00015d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006090  08006090  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006098  08006098  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001d8  08006274  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08006274  00020218  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afbc  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002054  00000000  00000000  0002b1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002d218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a00  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b95  00000000  00000000  0004fe70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a99de  00000000  00000000  00057a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001013e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  00101460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d28 	.word	0x08005d28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08005d28 	.word	0x08005d28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	d1ed      	bne.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_uldivmod>:
 8000e04:	b953      	cbnz	r3, 8000e1c <__aeabi_uldivmod+0x18>
 8000e06:	b94a      	cbnz	r2, 8000e1c <__aeabi_uldivmod+0x18>
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf08      	it	eq
 8000e0c:	2800      	cmpeq	r0, #0
 8000e0e:	bf1c      	itt	ne
 8000e10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e18:	f000 b972 	b.w	8001100 <__aeabi_idiv0>
 8000e1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e24:	f000 f806 	bl	8000e34 <__udivmoddi4>
 8000e28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e30:	b004      	add	sp, #16
 8000e32:	4770      	bx	lr

08000e34 <__udivmoddi4>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	9e08      	ldr	r6, [sp, #32]
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4688      	mov	r8, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d14b      	bne.n	8000eda <__udivmoddi4+0xa6>
 8000e42:	428a      	cmp	r2, r1
 8000e44:	4615      	mov	r5, r2
 8000e46:	d967      	bls.n	8000f18 <__udivmoddi4+0xe4>
 8000e48:	fab2 f282 	clz	r2, r2
 8000e4c:	b14a      	cbz	r2, 8000e62 <__udivmoddi4+0x2e>
 8000e4e:	f1c2 0720 	rsb	r7, r2, #32
 8000e52:	fa01 f302 	lsl.w	r3, r1, r2
 8000e56:	fa20 f707 	lsr.w	r7, r0, r7
 8000e5a:	4095      	lsls	r5, r2
 8000e5c:	ea47 0803 	orr.w	r8, r7, r3
 8000e60:	4094      	lsls	r4, r2
 8000e62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000e6c:	fa1f fc85 	uxth.w	ip, r5
 8000e70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000e74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e78:	fb07 f10c 	mul.w	r1, r7, ip
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x60>
 8000e80:	18eb      	adds	r3, r5, r3
 8000e82:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e86:	f080 811b 	bcs.w	80010c0 <__udivmoddi4+0x28c>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 8118 	bls.w	80010c0 <__udivmoddi4+0x28c>
 8000e90:	3f02      	subs	r7, #2
 8000e92:	442b      	add	r3, r5
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ea8:	45a4      	cmp	ip, r4
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x8c>
 8000eac:	192c      	adds	r4, r5, r4
 8000eae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eb2:	f080 8107 	bcs.w	80010c4 <__udivmoddi4+0x290>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	f240 8104 	bls.w	80010c4 <__udivmoddi4+0x290>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	442c      	add	r4, r5
 8000ec0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ec4:	eba4 040c 	sub.w	r4, r4, ip
 8000ec8:	2700      	movs	r7, #0
 8000eca:	b11e      	cbz	r6, 8000ed4 <__udivmoddi4+0xa0>
 8000ecc:	40d4      	lsrs	r4, r2
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ed4:	4639      	mov	r1, r7
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d909      	bls.n	8000ef2 <__udivmoddi4+0xbe>
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	f000 80eb 	beq.w	80010ba <__udivmoddi4+0x286>
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e9c6 0100 	strd	r0, r1, [r6]
 8000eea:	4638      	mov	r0, r7
 8000eec:	4639      	mov	r1, r7
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	fab3 f783 	clz	r7, r3
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	d147      	bne.n	8000f8a <__udivmoddi4+0x156>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d302      	bcc.n	8000f04 <__udivmoddi4+0xd0>
 8000efe:	4282      	cmp	r2, r0
 8000f00:	f200 80fa 	bhi.w	80010f8 <__udivmoddi4+0x2c4>
 8000f04:	1a84      	subs	r4, r0, r2
 8000f06:	eb61 0303 	sbc.w	r3, r1, r3
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	4698      	mov	r8, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d0e0      	beq.n	8000ed4 <__udivmoddi4+0xa0>
 8000f12:	e9c6 4800 	strd	r4, r8, [r6]
 8000f16:	e7dd      	b.n	8000ed4 <__udivmoddi4+0xa0>
 8000f18:	b902      	cbnz	r2, 8000f1c <__udivmoddi4+0xe8>
 8000f1a:	deff      	udf	#255	; 0xff
 8000f1c:	fab2 f282 	clz	r2, r2
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	f040 808f 	bne.w	8001044 <__udivmoddi4+0x210>
 8000f26:	1b49      	subs	r1, r1, r5
 8000f28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2c:	fa1f f885 	uxth.w	r8, r5
 8000f30:	2701      	movs	r7, #1
 8000f32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f36:	0c23      	lsrs	r3, r4, #16
 8000f38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f40:	fb08 f10c 	mul.w	r1, r8, ip
 8000f44:	4299      	cmp	r1, r3
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x124>
 8000f48:	18eb      	adds	r3, r5, r3
 8000f4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x122>
 8000f50:	4299      	cmp	r1, r3
 8000f52:	f200 80cd 	bhi.w	80010f0 <__udivmoddi4+0x2bc>
 8000f56:	4684      	mov	ip, r0
 8000f58:	1a59      	subs	r1, r3, r1
 8000f5a:	b2a3      	uxth	r3, r4
 8000f5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000f64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f68:	fb08 f800 	mul.w	r8, r8, r0
 8000f6c:	45a0      	cmp	r8, r4
 8000f6e:	d907      	bls.n	8000f80 <__udivmoddi4+0x14c>
 8000f70:	192c      	adds	r4, r5, r4
 8000f72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f76:	d202      	bcs.n	8000f7e <__udivmoddi4+0x14a>
 8000f78:	45a0      	cmp	r8, r4
 8000f7a:	f200 80b6 	bhi.w	80010ea <__udivmoddi4+0x2b6>
 8000f7e:	4618      	mov	r0, r3
 8000f80:	eba4 0408 	sub.w	r4, r4, r8
 8000f84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f88:	e79f      	b.n	8000eca <__udivmoddi4+0x96>
 8000f8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000f8e:	40bb      	lsls	r3, r7
 8000f90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f98:	fa01 f407 	lsl.w	r4, r1, r7
 8000f9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000fa0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000fa4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000fa8:	4325      	orrs	r5, r4
 8000faa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000fae:	0c2c      	lsrs	r4, r5, #16
 8000fb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000fb4:	fa1f fa8e 	uxth.w	sl, lr
 8000fb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000fbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000fc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000fca:	d90b      	bls.n	8000fe4 <__udivmoddi4+0x1b0>
 8000fcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000fd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fd4:	f080 8087 	bcs.w	80010e6 <__udivmoddi4+0x2b2>
 8000fd8:	429c      	cmp	r4, r3
 8000fda:	f240 8084 	bls.w	80010e6 <__udivmoddi4+0x2b2>
 8000fde:	f1a9 0902 	sub.w	r9, r9, #2
 8000fe2:	4473      	add	r3, lr
 8000fe4:	1b1b      	subs	r3, r3, r4
 8000fe6:	b2ad      	uxth	r5, r5
 8000fe8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fec:	fb08 3310 	mls	r3, r8, r0, r3
 8000ff0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ff4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ff8:	45a2      	cmp	sl, r4
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x1da>
 8000ffc:	eb1e 0404 	adds.w	r4, lr, r4
 8001000:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001004:	d26b      	bcs.n	80010de <__udivmoddi4+0x2aa>
 8001006:	45a2      	cmp	sl, r4
 8001008:	d969      	bls.n	80010de <__udivmoddi4+0x2aa>
 800100a:	3802      	subs	r0, #2
 800100c:	4474      	add	r4, lr
 800100e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001012:	fba0 8902 	umull	r8, r9, r0, r2
 8001016:	eba4 040a 	sub.w	r4, r4, sl
 800101a:	454c      	cmp	r4, r9
 800101c:	46c2      	mov	sl, r8
 800101e:	464b      	mov	r3, r9
 8001020:	d354      	bcc.n	80010cc <__udivmoddi4+0x298>
 8001022:	d051      	beq.n	80010c8 <__udivmoddi4+0x294>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d069      	beq.n	80010fc <__udivmoddi4+0x2c8>
 8001028:	ebb1 050a 	subs.w	r5, r1, sl
 800102c:	eb64 0403 	sbc.w	r4, r4, r3
 8001030:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001034:	40fd      	lsrs	r5, r7
 8001036:	40fc      	lsrs	r4, r7
 8001038:	ea4c 0505 	orr.w	r5, ip, r5
 800103c:	e9c6 5400 	strd	r5, r4, [r6]
 8001040:	2700      	movs	r7, #0
 8001042:	e747      	b.n	8000ed4 <__udivmoddi4+0xa0>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f703 	lsr.w	r7, r0, r3
 800104c:	4095      	lsls	r5, r2
 800104e:	fa01 f002 	lsl.w	r0, r1, r2
 8001052:	fa21 f303 	lsr.w	r3, r1, r3
 8001056:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800105a:	4338      	orrs	r0, r7
 800105c:	0c01      	lsrs	r1, r0, #16
 800105e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001062:	fa1f f885 	uxth.w	r8, r5
 8001066:	fb0e 3317 	mls	r3, lr, r7, r3
 800106a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800106e:	fb07 f308 	mul.w	r3, r7, r8
 8001072:	428b      	cmp	r3, r1
 8001074:	fa04 f402 	lsl.w	r4, r4, r2
 8001078:	d907      	bls.n	800108a <__udivmoddi4+0x256>
 800107a:	1869      	adds	r1, r5, r1
 800107c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001080:	d22f      	bcs.n	80010e2 <__udivmoddi4+0x2ae>
 8001082:	428b      	cmp	r3, r1
 8001084:	d92d      	bls.n	80010e2 <__udivmoddi4+0x2ae>
 8001086:	3f02      	subs	r7, #2
 8001088:	4429      	add	r1, r5
 800108a:	1acb      	subs	r3, r1, r3
 800108c:	b281      	uxth	r1, r0
 800108e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001092:	fb0e 3310 	mls	r3, lr, r0, r3
 8001096:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800109a:	fb00 f308 	mul.w	r3, r0, r8
 800109e:	428b      	cmp	r3, r1
 80010a0:	d907      	bls.n	80010b2 <__udivmoddi4+0x27e>
 80010a2:	1869      	adds	r1, r5, r1
 80010a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80010a8:	d217      	bcs.n	80010da <__udivmoddi4+0x2a6>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d915      	bls.n	80010da <__udivmoddi4+0x2a6>
 80010ae:	3802      	subs	r0, #2
 80010b0:	4429      	add	r1, r5
 80010b2:	1ac9      	subs	r1, r1, r3
 80010b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010b8:	e73b      	b.n	8000f32 <__udivmoddi4+0xfe>
 80010ba:	4637      	mov	r7, r6
 80010bc:	4630      	mov	r0, r6
 80010be:	e709      	b.n	8000ed4 <__udivmoddi4+0xa0>
 80010c0:	4607      	mov	r7, r0
 80010c2:	e6e7      	b.n	8000e94 <__udivmoddi4+0x60>
 80010c4:	4618      	mov	r0, r3
 80010c6:	e6fb      	b.n	8000ec0 <__udivmoddi4+0x8c>
 80010c8:	4541      	cmp	r1, r8
 80010ca:	d2ab      	bcs.n	8001024 <__udivmoddi4+0x1f0>
 80010cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80010d0:	eb69 020e 	sbc.w	r2, r9, lr
 80010d4:	3801      	subs	r0, #1
 80010d6:	4613      	mov	r3, r2
 80010d8:	e7a4      	b.n	8001024 <__udivmoddi4+0x1f0>
 80010da:	4660      	mov	r0, ip
 80010dc:	e7e9      	b.n	80010b2 <__udivmoddi4+0x27e>
 80010de:	4618      	mov	r0, r3
 80010e0:	e795      	b.n	800100e <__udivmoddi4+0x1da>
 80010e2:	4667      	mov	r7, ip
 80010e4:	e7d1      	b.n	800108a <__udivmoddi4+0x256>
 80010e6:	4681      	mov	r9, r0
 80010e8:	e77c      	b.n	8000fe4 <__udivmoddi4+0x1b0>
 80010ea:	3802      	subs	r0, #2
 80010ec:	442c      	add	r4, r5
 80010ee:	e747      	b.n	8000f80 <__udivmoddi4+0x14c>
 80010f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010f4:	442b      	add	r3, r5
 80010f6:	e72f      	b.n	8000f58 <__udivmoddi4+0x124>
 80010f8:	4638      	mov	r0, r7
 80010fa:	e708      	b.n	8000f0e <__udivmoddi4+0xda>
 80010fc:	4637      	mov	r7, r6
 80010fe:	e6e9      	b.n	8000ed4 <__udivmoddi4+0xa0>

08001100 <__aeabi_idiv0>:
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>:
		AccelFullScaleMode_t enScaleMode;
		float	fLSB_per_G;
	}AccelFullScale_t;


	int16_t ConvertHLDataTo16Bits(uint8_t ucHighData, uint8_t ucLowData){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
 8001110:	4613      	mov	r3, r2
 8001112:	70bb      	strb	r3, [r7, #2]
		return (((int16_t)ucHighData << 8) | ((int16_t)ucLowData));
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	78bb      	ldrb	r3, [r7, #2]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
	}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>:

	float ConvertRawDataToFloat(int16_t sRawData, float fScaleFactor){
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	460b      	mov	r3, r1
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	817b      	strh	r3, [r7, #10]
		if(fScaleFactor == 0.0){
 800113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d102      	bne.n	8001152 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x22>
			return 0.0;
 800114c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001178 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x48>
 8001150:	e009      	b.n	8001166 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x36>
		}
		return ((float)sRawData / fScaleFactor);		//value[LSB] / (LSB/unit) = unit
 8001152:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001166:	ee16 3a90 	vmov	r3, s13
	}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000

0800117c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b02      	cmp	r3, #2
 800122e:	d101      	bne.n	8001234 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	b2db      	uxtb	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	330c      	adds	r3, #12
 800126c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_ZN9ICM_20602C1ENS_10CommMode_tE>:
/*
 * Public member function
 */

//Constructor
ICM_20602::ICM_20602(ICM_20602::CommMode_t enCommMode)
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
{
	this->enCommMode = enCommMode;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	701a      	strb	r2, [r3, #0]

	enGyroScaleMode = EN_GYRO_FULLSCALE_PM250DPS;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]
	enAccelScaleMode = EN_ACCEL_FULLSCALE_PM2G;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	709a      	strb	r2, [r3, #2]
	bIsConnected = false;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	70da      	strb	r2, [r3, #3]

	ucGyroConfigValue		= 0x00;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	711a      	strb	r2, [r3, #4]
	ucAccelConfigValue		= 0x00;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	715a      	strb	r2, [r3, #5]
	ucAccelConfig2Value		= 0x00;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	719a      	strb	r2, [r3, #6]
	ucGyroConfigValueOld	= 0x00;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld	= 0x00;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld	= 0x00;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	725a      	strb	r2, [r3, #9]

	stGyroRawData.sValueX = 0x0000;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY = 0x0000;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ = 0x0000;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	81da      	strh	r2, [r3, #14]
	stAccelRawData.sValueX = 0x0000;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY = 0x0000;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ = 0x0000;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	829a      	strh	r2, [r3, #20]
	stGyroDPS.fValueX = 0.0f;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = 0.0f;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = 0.0f;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
	stAccelG.fValueX = 0.0f;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = 0.0f;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = 0.0f;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>:
{
	//do nothing
}

bool ICM_20602::SetSPIPort(SPI_TypeDef *pSPIx, GPIO_TypeDef *pSPI_CS_GPIOx, uint32_t SPI_CS_PINx)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	603b      	str	r3, [r7, #0]
	if(ICM_20602::EN_COMM_MODE_SPI != enCommMode){
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x1a>
		return false;
 8001340:	2300      	movs	r3, #0
 8001342:	e01e      	b.n	8001382 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}

	if(NULL == pSPIx){
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x24>
		return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e019      	b.n	8001382 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPIx = pSPIx;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c

	if(NULL == pSPI_CS_GPIOx){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x34>
		return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e011      	b.n	8001382 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPI_CS_GPIOx = pSPI_CS_GPIOx;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
	this->ui_SPI_CS_PINx = SPI_CS_PINx;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44

	LL_GPIO_SetOutputPin(this->pSPI_CS_GPIOx, this->ui_SPI_CS_PINx);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7ff ff01 	bl	800117c <LL_GPIO_SetOutputPin>
	LL_SPI_Disable(pSPIx);
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f7ff ff2b 	bl	80011d6 <LL_SPI_Disable>

	return true;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN9ICM_206025SetupEv>:
{
	return true;
}

void ICM_20602::Setup()
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	SystickTimer_DelayMS(500);
 8001392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001396:	f000 fb5d 	bl	8001a54 <SystickTimer_DelayMS>
	LL_SPI_Enable(pSPIx);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff09 	bl	80011b6 <LL_SPI_Enable>

	if(WHO_AM_I_VALUE == ReadRegister(EN_REG_ADDR_WHO_AM_I)){
 80013a4:	2175      	movs	r1, #117	; 0x75
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f9ed 	bl	8001786 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <_ZN9ICM_206025SetupEv+0x3a>
		bIsConnected = true;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	70da      	strb	r2, [r3, #3]
 80013c2:	e002      	b.n	80013ca <_ZN9ICM_206025SetupEv+0x40>
	}else{
		bIsConnected = false;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));

#endif
	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x80);	//b10000000 = Device Reset
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	216b      	movs	r1, #107	; 0x6b
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9b9 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f000 fb3d 	bl	8001a54 <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x01);	//b00000001 = Auto Selects the best available clock source
 80013da:	2201      	movs	r2, #1
 80013dc:	216b      	movs	r1, #107	; 0x6b
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f9b1 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 80013e4:	2032      	movs	r0, #50	; 0x32
 80013e6:	f000 fb35 	bl	8001a54 <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_2, 0x00);	//b00000000 = Gyro and Accelerometer are all enabled
 80013ea:	2200      	movs	r2, #0
 80013ec:	216c      	movs	r1, #108	; 0x6c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f9a9 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 80013f4:	2032      	movs	r0, #50	; 0x32
 80013f6:	f000 fb2d 	bl	8001a54 <SystickTimer_DelayMS>

	//WriteRegister(EN_REG_ADDR_I2C_IF, 0x40);		//SPI mode only
	//SystickTimer_DelayMS(50);

	SetGyroFullScale(EN_GYRO_FULLSCALE_PM2000DPS);	//Set Gyro Full Scale : ±2000 dps
 80013fa:	2103      	movs	r1, #3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8ac 	bl	800155a <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>
	SetAccelFullScale(EN_ACCEL_FULLSCALE_PM16G);	//Set Accel Full Scale : ±16 G
 8001402:	2103      	movs	r1, #3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f8d3 	bl	80015b0 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>
	SetGyroConfig();	//Gyro FullScale
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f96e 	bl	80016ec <_ZN9ICM_2060213SetGyroConfigEv>
	SetAccelConfig();	//Accle FullScale
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f97a 	bl	800170a <_ZN9ICM_2060214SetAccelConfigEv>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_ZN9ICM_206026UpdateEv>:
bool ICM_20602::IsConnected()
{
	return bIsConnected;
}
void ICM_20602::Update()
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	uint8_t ucGyroRawDataHL[6] = {0x00};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	809a      	strh	r2, [r3, #4]
	uint8_t ucAccelRawDataHL[6] = {0x00};
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	809a      	strh	r2, [r3, #4]

	if(ucGyroConfigValue != ucGyroConfigValueOld){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	791a      	ldrb	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	79db      	ldrb	r3, [r3, #7]
 8001442:	429a      	cmp	r2, r3
 8001444:	d002      	beq.n	800144c <_ZN9ICM_206026UpdateEv+0x2e>
		SetGyroConfig();
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f950 	bl	80016ec <_ZN9ICM_2060213SetGyroConfigEv>
	}
	if(ucAccelConfigValue != ucAccelConfigValueOld){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	795a      	ldrb	r2, [r3, #5]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7a1b      	ldrb	r3, [r3, #8]
 8001454:	429a      	cmp	r2, r3
 8001456:	d002      	beq.n	800145e <_ZN9ICM_206026UpdateEv+0x40>
		SetAccelConfig();
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f956 	bl	800170a <_ZN9ICM_2060214SetAccelConfigEv>
	}
	if(ucAccelConfig2Value != ucAccelConfig2ValueOld){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	799a      	ldrb	r2, [r3, #6]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7a5b      	ldrb	r3, [r3, #9]
 8001466:	429a      	cmp	r2, r3
 8001468:	d002      	beq.n	8001470 <_ZN9ICM_206026UpdateEv+0x52>
		SetAccelConfig2();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f95c 	bl	8001728 <_ZN9ICM_2060215SetAccelConfig2Ev>
	}

	//Read Gyro Raw Data
	ReadRegister(EN_REG_ADDR_GYRO_XOUT_H, ucGyroRawDataHL, 6);
 8001470:	f107 0210 	add.w	r2, r7, #16
 8001474:	2306      	movs	r3, #6
 8001476:	2143      	movs	r1, #67	; 0x43
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9a5 	bl	80017c8 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Read Accel Raw Data
	ReadRegister(EN_REG_ADDR_ACCEL_XOUT_H, ucAccelRawDataHL, 6);
 800147e:	f107 0208 	add.w	r2, r7, #8
 8001482:	2306      	movs	r3, #6
 8001484:	213b      	movs	r1, #59	; 0x3b
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f99e 	bl	80017c8 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Convert HL data to 16bits data
	stGyroRawData.sValueX	= ConvertHLDataTo16Bits(ucGyroRawDataHL[0], ucGyroRawDataHL[1]);
 800148c:	7c3b      	ldrb	r3, [r7, #16]
 800148e:	7c7a      	ldrb	r2, [r7, #17]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe36 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY	= ConvertHLDataTo16Bits(ucGyroRawDataHL[2], ucGyroRawDataHL[3]);
 80014a0:	7cbb      	ldrb	r3, [r7, #18]
 80014a2:	7cfa      	ldrb	r2, [r7, #19]
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fe2c 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ	= ConvertHLDataTo16Bits(ucGyroRawDataHL[4], ucGyroRawDataHL[5]);
 80014b4:	7d3b      	ldrb	r3, [r7, #20]
 80014b6:	7d7a      	ldrb	r2, [r7, #21]
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fe22 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	81da      	strh	r2, [r3, #14]

	stAccelRawData.sValueX	= ConvertHLDataTo16Bits(ucAccelRawDataHL[0], ucAccelRawDataHL[1]);
 80014c8:	7a3b      	ldrb	r3, [r7, #8]
 80014ca:	7a7a      	ldrb	r2, [r7, #9]
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fe18 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY	= ConvertHLDataTo16Bits(ucAccelRawDataHL[2], ucAccelRawDataHL[3]);
 80014dc:	7abb      	ldrb	r3, [r7, #10]
 80014de:	7afa      	ldrb	r2, [r7, #11]
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe0e 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ	= ConvertHLDataTo16Bits(ucAccelRawDataHL[4], ucAccelRawDataHL[5]);
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	7b7a      	ldrb	r2, [r7, #13]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fe04 	bl	8001104 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	829a      	strh	r2, [r3, #20]

	ScaleConvert();
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f87f 	bl	8001608 <_ZN9ICM_2060212ScaleConvertEv>

	//Old Config Value update
	ucGyroConfigValueOld = ucGyroConfigValue;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	791a      	ldrb	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld = ucAccelConfigValue;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	795a      	ldrb	r2, [r3, #5]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld = ucAccelConfig2Value;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799a      	ldrb	r2, [r3, #6]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	725a      	strb	r2, [r3, #9]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));
#endif
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_ZN9ICM_2060214GetGyroRawDataEv>:
const ICM_20602::Coord_t& ICM_20602::GetAccelG()
{
	return (const Coord_t&)stAccelG;
}
const ICM_20602::RawData_t& ICM_20602::GetGyroRawData()
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return (const RawData_t&)stGyroRawData;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	330a      	adds	r3, #10
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_ZN9ICM_2060215GetAccelRawDataEv>:
const ICM_20602::RawData_t& ICM_20602::GetAccelRawData()
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return (const RawData_t&)stAccelRawData;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3310      	adds	r3, #16
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>:

//
void ICM_20602::SetGyroFullScale(GyroFullScaleMode_t enScaleMode)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_GYRO_FULLSCALE_PM250DPS || enScaleMode > EN_GYRO_FULLSCALE_PM2000DPS){
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d81b      	bhi.n	80015a4 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4a>
		return;
	}

	enGyroScaleMode = enScaleMode;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	705a      	strb	r2, [r3, #1]

	if(EN_GYRO_FULLSCALE_PM250DPS == enGyroScaleMode){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d107      	bne.n	800158a <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x30>
		ucGyroConfigValue = ucGyroConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	f023 0318 	bic.w	r3, r3, #24
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	711a      	strb	r2, [r3, #4]
 8001588:	e00d      	b.n	80015a6 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
	}else{
		ucGyroConfigValue = ucGyroConfigValue | ((uint8_t)enGyroScaleMode << 3);	//3bitシフトし，OR
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	791b      	ldrb	r3, [r3, #4]
 800158e:	b25a      	sxtb	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	711a      	strb	r2, [r3, #4]
 80015a2:	e000      	b.n	80015a6 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
		return;
 80015a4:	bf00      	nop
	}
}
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>:

//
void ICM_20602::SetAccelFullScale(AccelFullScaleMode_t enScaleMode)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_ACCEL_FULLSCALE_PM2G || enScaleMode > EN_ACCEL_FULLSCALE_PM16G){
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d81b      	bhi.n	80015fa <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4a>
		return;
	}

	enAccelScaleMode = enScaleMode;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	709a      	strb	r2, [r3, #2]

	if(EN_ACCEL_FULLSCALE_PM2G == enAccelScaleMode){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x30>
		ucAccelConfigValue = ucAccelConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	795b      	ldrb	r3, [r3, #5]
 80015d4:	f023 0318 	bic.w	r3, r3, #24
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	715a      	strb	r2, [r3, #5]
 80015de:	e00d      	b.n	80015fc <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
	}else{
		ucAccelConfigValue = ucAccelConfigValue | ((uint8_t)enAccelScaleMode << 3);	//3bitシフトし，OR
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	715a      	strb	r2, [r3, #5]
 80015f8:	e000      	b.n	80015fc <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
		return;
 80015fa:	bf00      	nop
	}
}
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_ZN9ICM_2060212ScaleConvertEv>:
 * Private member function
 */

//
void ICM_20602::ScaleConvert()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	stGyroDPS.fValueX = ConvertRawDataToFloat(stGyroRawData.sValueX, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fd82 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 800162c:	4602      	mov	r2, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = ConvertRawDataToFloat(stGyroRawData.sValueY, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	4a29      	ldr	r2, [pc, #164]	; (80016e4 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd71 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = ConvertRawDataToFloat(stGyroRawData.sValueZ, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	3304      	adds	r3, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd60 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	621a      	str	r2, [r3, #32]

	stAccelG.fValueX = ConvertRawDataToFloat(stAccelRawData.sValueX, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fd4f 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = ConvertRawDataToFloat(stAccelRawData.sValueY, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	789b      	ldrb	r3, [r3, #2]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd3e 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 80016b4:	4602      	mov	r2, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = ConvertRawDataToFloat(stAccelRawData.sValueZ, stAccelScale[enAccelScaleMode].fLSB_per_G);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd2d 	bl	8001130 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 80016d6:	4602      	mov	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	08005d74 	.word	0x08005d74
 80016e8:	08005d94 	.word	0x08005d94

080016ec <_ZN9ICM_2060213SetGyroConfigEv>:

//
void ICM_20602::SetGyroConfig()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_GYRO_CONFIG, ucGyroConfigValue);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	461a      	mov	r2, r3
 80016fa:	211b      	movs	r1, #27
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f822 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZN9ICM_2060214SetAccelConfigEv>:

//
void ICM_20602::SetAccelConfig()
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG, ucAccelConfigValue);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	461a      	mov	r2, r3
 8001718:	211c      	movs	r1, #28
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f813 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN9ICM_2060215SetAccelConfig2Ev>:

//
void ICM_20602::SetAccelConfig2()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG_2, ucAccelConfig2Value);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	799b      	ldrb	r3, [r3, #6]
 8001734:	461a      	mov	r2, r3
 8001736:	211d      	movs	r1, #29
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f804 	bl	8001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>:

//レジスタ書き込み（1バイト）
void ICM_20602::WriteRegister(ICM_20602::RegisterAddress_t enAddr, uint8_t ucWriteData)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af02      	add	r7, sp, #8
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	4613      	mov	r3, r2
 8001754:	70bb      	strb	r3, [r7, #2]
	switch(enCommMode){
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x1e>
 800175e:	2b01      	cmp	r3, #1
 8001760:	d00c      	beq.n	800177c <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 8001762:	e00c      	b.n	800177e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		CommunicateSPIMode(EN_RW_MODE_WRITE, enAddr, &ucWriteData, NULL, 1);
 8001764:	1cb9      	adds	r1, r7, #2
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	2301      	movs	r3, #1
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	460b      	mov	r3, r1
 8001772:	2101      	movs	r1, #1
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f848 	bl	800180a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 800177a:	e000      	b.n	800177e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		break;
 800177c:	bf00      	nop
	}
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>:
	}
}


uint8_t ICM_20602::ReadRegister(ICM_20602::RegisterAddress_t enAddr)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af02      	add	r7, sp, #8
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
	uint8_t ucReadData = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
	switch(enCommMode){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x1e>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d00c      	beq.n	80017bc <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80017a2:	e00c      	b.n	80017be <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		CommunicateSPIMode(EN_RW_MODE_READ, enAddr, NULL, &ucReadData, 1);
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	f107 030f 	add.w	r3, r7, #15
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f828 	bl	800180a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 80017ba:	e000      	b.n	80017be <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		break;
 80017bc:	bf00      	nop
	}
	return ucReadData;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>:

void ICM_20602::ReadRegister(RegisterAddress_t enStartAddr, uint8_t *pReadData, uint16_t usLength)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
 80017d8:	4613      	mov	r3, r2
 80017da:	813b      	strh	r3, [r7, #8]
	switch(enCommMode){
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x22>
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d00b      	beq.n	8001800 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x38>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80017e8:	e00b      	b.n	8001802 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		CommunicateSPIMode(EN_RW_MODE_READ, enStartAddr, NULL, pReadData, usLength);
 80017ea:	7afa      	ldrb	r2, [r7, #11]
 80017ec:	893b      	ldrh	r3, [r7, #8]
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f806 	bl	800180a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 80017fe:	e000      	b.n	8001802 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		break;
 8001800:	bf00      	nop
	}
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>:


//
//ref : https://garberas.com/archives/1542
void ICM_20602::CommunicateSPIMode(RW_Mode_t mode, RegisterAddress_t enStartAddr, uint8_t *pTxData, uint8_t *pRxData, uint16_t usDataLength)
{
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	72fb      	strb	r3, [r7, #11]
 8001818:	4613      	mov	r3, r2
 800181a:	72bb      	strb	r3, [r7, #10]
	uint16_t usCount = usDataLength;
 800181c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800181e:	82fb      	strh	r3, [r7, #22]
	uint8_t ucAddress = 0x00;
 8001820:	2300      	movs	r3, #0
 8001822:	757b      	strb	r3, [r7, #21]

	//Chip Select
	LL_GPIO_ResetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fcb2 	bl	8001198 <LL_GPIO_ResetOutputPin>

	//MSB Setting
	switch(mode){
 8001834:	7afb      	ldrb	r3, [r7, #11]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x36>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d005      	beq.n	800184a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x40>
		break;
	case EN_RW_MODE_WRITE:
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
		break;
	default:
		return;		//設定外のため，即Return
 800183e:	e082      	b.n	8001946 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x13c>
		ucAddress = enStartAddr | 0x80;		//7bit目を1に設定
 8001840:	7abb      	ldrb	r3, [r7, #10]
 8001842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001846:	757b      	strb	r3, [r7, #21]
		break;
 8001848:	e004      	b.n	8001854 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x4a>
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
 800184a:	7abb      	ldrb	r3, [r7, #10]
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	757b      	strb	r3, [r7, #21]
		break;
 8001852:	bf00      	nop
		break;
	}

	//Address送信
	LL_SPI_TransmitData8(pSPIx, ucAddress);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	7d7a      	ldrb	r2, [r7, #21]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fcfd 	bl	800125c <LL_SPI_TransmitData8>
	while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx));
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fcd8 	bl	800121c <LL_SPI_IsActiveFlag_TXE>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d000      	beq.n	800187e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
 800187c:	e7f1      	b.n	8001862 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x58>
	while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fcb7 	bl	80011f6 <LL_SPI_IsActiveFlag_RXNE>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d000      	beq.n	800189a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x90>
 8001898:	e7f1      	b.n	800187e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
	LL_SPI_ReceiveData8(pSPIx); //Dummy Received
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fccf 	bl	8001242 <LL_SPI_ReceiveData8>

	//Data送受信
	while(0 < usCount){
 80018a4:	8afb      	ldrh	r3, [r7, #22]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d045      	beq.n	8001936 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x12c>
		//送信
		if(NULL != pTxData){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xba>
			LL_SPI_TransmitData8(pSPIx, *pTxData++);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff fccd 	bl	800125c <LL_SPI_TransmitData8>
 80018c2:	e005      	b.n	80018d0 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
		}else{
			LL_SPI_TransmitData8(pSPIx, 0x00);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fcc6 	bl	800125c <LL_SPI_TransmitData8>
		}
		while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx)){
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fca1 	bl	800121c <LL_SPI_IsActiveFlag_TXE>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d000      	beq.n	80018ec <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
 80018ea:	e7f1      	b.n	80018d0 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
			//送信完了待ち（送信バッファが空でない時）
			//※必要ならTimeout処理
		}
		while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx)){
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc80 	bl	80011f6 <LL_SPI_IsActiveFlag_RXNE>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d000      	beq.n	8001908 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xfe>
 8001906:	e7f1      	b.n	80018ec <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
			//受信完了待ち（受信バッファが空の時）
			//※必要ならTimeout処理
		}
		//受信
		if(NULL != pRxData){
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x11a>
			*pRxData++ = LL_SPI_ReceiveData8(pSPIx);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001912:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001914:	1c63      	adds	r3, r4, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
 8001918:	4610      	mov	r0, r2
 800191a:	f7ff fc92 	bl	8001242 <LL_SPI_ReceiveData8>
 800191e:	4603      	mov	r3, r0
 8001920:	7023      	strb	r3, [r4, #0]
 8001922:	e004      	b.n	800192e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x124>
		}else{
			LL_SPI_ReceiveData8(pSPIx);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fc8a 	bl	8001242 <LL_SPI_ReceiveData8>
		}
		usCount --;
 800192e:	8afb      	ldrh	r3, [r7, #22]
 8001930:	3b01      	subs	r3, #1
 8001932:	82fb      	strh	r3, [r7, #22]
	while(0 < usCount){
 8001934:	e7b6      	b.n	80018a4 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x9a>
	}
	//Chip Deselect
	LL_GPIO_SetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff fc1b 	bl	800117c <LL_GPIO_SetOutputPin>
}
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <LL_SYSTICK_EnableIT+0x1c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <LL_SYSTICK_EnableIT+0x1c>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <SystickTimer_Interrupt>:

#define SYSTICKTIMER_MS_PER_COUNT	(1)		//1Countが何msecかを定義(1ms以上)

//割り込み関数用タイマーカウント関数
void SystickTimer_Interrupt(void)
{
 800196c:	b490      	push	{r4, r7}
 800196e:	af00      	add	r7, sp, #0
	__u64SystickTimeCount += SYSTICKTIMER_MS_PER_COUNT;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystickTimer_Interrupt+0x20>)
 8001972:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001976:	1c4b      	adds	r3, r1, #1
 8001978:	f142 0400 	adc.w	r4, r2, #0
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <SystickTimer_Interrupt+0x20>)
 800197e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc90      	pop	{r4, r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	200001f8 	.word	0x200001f8

08001990 <SystickTimer_EnableInterrupt>:

//割り込み有効
void SystickTimer_EnableInterrupt(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8001994:	f7ff ffda 	bl	800194c <LL_SYSTICK_EnableIT>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <SystickTimer_SetSamplingTime>:
	LL_SYSTICK_DisableIT();
}

//サンプリングタイムの設定
void SystickTimer_SetSamplingTime(uint16_t u16SamplingTimeMs)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
	if(0u == u16SamplingTimeMs){
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <SystickTimer_SetSamplingTime+0x18>
		//0指定の場合はデフォルト値を設定
		__u16SamplingTimeMs = SYSTICKTIMER_DEFAULT_SAMPLING_TIME_MS;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystickTimer_SetSamplingTime+0x2c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	801a      	strh	r2, [r3, #0]
	}else{
		__u16SamplingTimeMs = u16SamplingTimeMs;
	}
}
 80019b2:	e002      	b.n	80019ba <SystickTimer_SetSamplingTime+0x1e>
		__u16SamplingTimeMs = u16SamplingTimeMs;
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <SystickTimer_SetSamplingTime+0x2c>)
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	8013      	strh	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200001f4 	.word	0x200001f4

080019cc <SystickTimer_IsSamplingTimeElapsed>:
//サンプリングタイムの経過判定
bool SystickTimer_IsSamplingTimeElapsed(void)
{
 80019cc:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
	//常に0以下の場合はFalseを即Return
	if(__u64SystickTimeCount <= 0u){
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 80019d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019da:	4323      	orrs	r3, r4
 80019dc:	d101      	bne.n	80019e2 <SystickTimer_IsSamplingTimeElapsed+0x16>
		return false;
 80019de:	2300      	movs	r3, #0
 80019e0:	e020      	b.n	8001a24 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	static uint64_t u64LastTimeMs = 0;
	uint64_t u64CurrentTimeMs = __u64SystickTimeCount;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 80019e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019e8:	e9c7 3400 	strd	r3, r4, [r7]

	if(__u16SamplingTimeMs <= u64CurrentTimeMs - u64LastTimeMs){
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <SystickTimer_IsSamplingTimeElapsed+0x68>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f04f 0400 	mov.w	r4, #0
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 80019f8:	e9d2 bc00 	ldrd	fp, ip, [r2]
 80019fc:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001a00:	4629      	mov	r1, r5
 8001a02:	4632      	mov	r2, r6
 8001a04:	ebb1 010b 	subs.w	r1, r1, fp
 8001a08:	eb62 020c 	sbc.w	r2, r2, ip
 8001a0c:	42a2      	cmp	r2, r4
 8001a0e:	bf08      	it	eq
 8001a10:	4299      	cmpeq	r1, r3
 8001a12:	d306      	bcc.n	8001a22 <SystickTimer_IsSamplingTimeElapsed+0x56>
		u64LastTimeMs = u64CurrentTimeMs;
 8001a14:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8001a16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a1a:	e9c2 3400 	strd	r3, r4, [r2]
		return true;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	return false;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8001a2e:	4770      	bx	lr
 8001a30:	200001f8 	.word	0x200001f8
 8001a34:	200001f4 	.word	0x200001f4
 8001a38:	20000200 	.word	0x20000200

08001a3c <SystickTimer_GetTimeMS>:

//起動時からの時間取得 [ms]
uint64_t SystickTimer_GetTimeMS(void)
{
 8001a3c:	b490      	push	{r4, r7}
 8001a3e:	af00      	add	r7, sp, #0
	return __u64SystickTimeCount;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <SystickTimer_GetTimeMS+0x14>)
 8001a42:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc90      	pop	{r4, r7}
 8001a4e:	4770      	bx	lr
 8001a50:	200001f8 	.word	0x200001f8

08001a54 <SystickTimer_DelayMS>:

//遅延 [ms]
void SystickTimer_DelayMS(uint32_t u32DelayMs)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	LL_mDelay(u32DelayMs);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 fdcb 	bl	80035f8 <LL_mDelay>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <SystickTimer_IsTimeElapsed>:

//指定時間経過
bool SystickTimer_IsTimeElapsed(uint64_t u64StartTimeMs ,uint32_t u32IntervalMs)
{
 8001a6a:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	if((uint64_t)u32IntervalMs <= SystickTimer_GetTimeMS() - u64StartTimeMs){
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	f04f 0500 	mov.w	r5, #0
 8001a80:	f7ff ffdc 	bl	8001a3c <SystickTimer_GetTimeMS>
 8001a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a88:	1a80      	subs	r0, r0, r2
 8001a8a:	eb61 0103 	sbc.w	r1, r1, r3
 8001a8e:	4683      	mov	fp, r0
 8001a90:	468c      	mov	ip, r1
 8001a92:	45ac      	cmp	ip, r5
 8001a94:	bf08      	it	eq
 8001a96:	45a3      	cmpeq	fp, r4
 8001a98:	d301      	bcc.n	8001a9e <SystickTimer_IsTimeElapsed+0x34>
		return true;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <SystickTimer_IsTimeElapsed+0x36>
	}
	return false;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}
	...

08001aac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023800 	.word	0x40023800

08001adc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <LL_SYSCFG_SetEXTISource+0x58>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	43db      	mvns	r3, r3
 8001af8:	ea02 0103 	and.w	r1, r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	fa03 f202 	lsl.w	r2, r3, r2
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <LL_SYSCFG_SetEXTISource+0x58>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	430a      	orrs	r2, r1
 8001b22:	3302      	adds	r3, #2
 8001b24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40013800 	.word	0x40013800

08001b38 <LL_GPIO_SetPinMode>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	613b      	str	r3, [r7, #16]
  return result;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2103      	movs	r1, #3
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	61bb      	str	r3, [r7, #24]
  return result;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_GPIO_SetPinPull>:
{
 8001b96:	b480      	push	{r7}
 8001b98:	b089      	sub	sp, #36	; 0x24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	613b      	str	r3, [r7, #16]
  return result;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	61bb      	str	r3, [r7, #24]
  return result;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	60da      	str	r2, [r3, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3724      	adds	r7, #36	; 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_GPIO_ResetOutputPin>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c34:	2004      	movs	r0, #4
 8001c36:	f7ff ff39 	bl	8001aac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001c3a:	2080      	movs	r0, #128	; 0x80
 8001c3c:	f7ff ff36 	bl	8001aac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff ff33 	bl	8001aac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7ff ff30 	bl	8001aac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4823      	ldr	r0, [pc, #140]	; (8001cdc <MX_GPIO_Init+0xc8>)
 8001c50:	f7ff ffd0 	bl	8001bf4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001c54:	2120      	movs	r1, #32
 8001c56:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <MX_GPIO_Init+0xcc>)
 8001c58:	f7ff ffcc 	bl	8001bf4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001c5c:	4921      	ldr	r1, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0xd0>)
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7ff ff3c 	bl	8001adc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c68:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c72:	2302      	movs	r3, #2
 8001c74:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c76:	f107 0318 	add.w	r3, r7, #24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fe52 	bl	8002924 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4815      	ldr	r0, [pc, #84]	; (8001cdc <MX_GPIO_Init+0xc8>)
 8001c88:	f7ff ff85 	bl	8001b96 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_GPIO_Init+0xc8>)
 8001c94:	f7ff ff50 	bl	8001b38 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <MX_GPIO_Init+0xc8>)
 8001cb2:	f000 ffb8 	bl	8002c26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_GPIO_Init+0xcc>)
 8001cd0:	f000 ffa9 	bl	8002c26 <LL_GPIO_Init>

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	00f00003 	.word	0x00f00003

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <LL_RCC_HSI_Enable+0x1c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <LL_RCC_HSI_Enable+0x1c>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <LL_RCC_HSI_IsReady+0x20>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40023800 	.word	0x40023800

08001d74 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <LL_RCC_SetSysClkSource+0x24>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 0203 	bic.w	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4904      	ldr	r1, [pc, #16]	; (8001dc4 <LL_RCC_SetSysClkSource+0x24>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <LL_RCC_GetSysClkSource+0x18>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4904      	ldr	r1, [pc, #16]	; (8001e08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800

08001e0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4904      	ldr	r1, [pc, #16]	; (8001e30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800

08001e34 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4904      	ldr	r1, [pc, #16]	; (8001e58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40023800 	.word	0x40023800

08001e5c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <LL_RCC_SetTIMPrescaler+0x28>)
 8001e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4904      	ldr	r1, [pc, #16]	; (8001e84 <LL_RCC_SetTIMPrescaler+0x28>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40023800 	.word	0x40023800

08001e88 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <LL_RCC_PLL_Enable+0x1c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <LL_RCC_PLL_Enable+0x1c>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <LL_RCC_PLL_IsReady+0x24>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	0192      	lsls	r2, r2, #6
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4904      	ldr	r1, [pc, #16]	; (8001f24 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40023800 	.word	0x40023800
 8001f28:	ffbf8000 	.word	0xffbf8000

08001f2c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4907      	ldr	r1, [pc, #28]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4013      	ands	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40023800 	.word	0x40023800

08001f5c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4907      	ldr	r1, [pc, #28]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40023800 	.word	0x40023800

08001f8c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <LL_FLASH_SetLatency+0x24>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 020f 	bic.w	r2, r3, #15
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <LL_FLASH_SetLatency+0x24>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <LL_FLASH_GetLatency+0x18>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <LL_PWR_EnableOverDriveMode+0x1c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <LL_PWR_EnableOverDriveMode+0x1c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000

08001ff0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4904      	ldr	r1, [pc, #16]	; (8002014 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40007000 	.word	0x40007000

08002018 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	405a      	eors	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	615a      	str	r2, [r3, #20]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800203c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002040:	b0a3      	sub	sp, #140	; 0x8c
 8002042:	af06      	add	r7, sp, #24

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002044:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002048:	f7ff ff88 	bl	8001f5c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800204c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002050:	f7ff ff6c 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002054:	2007      	movs	r0, #7
 8002056:	f7ff fe47 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205a:	f000 f8b1 	bl	80021c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205e:	f7ff fdd9 	bl	8001c14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002062:	f000 fb37 	bl	80026d4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002066:	f000 f95f 	bl	8002328 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SystickTimer_EnableInterrupt();
 800206a:	f7ff fc91 	bl	8001990 <SystickTimer_EnableInterrupt>
  SystickTimer_SetSamplingTime(5u);
 800206e:	2005      	movs	r0, #5
 8002070:	f7ff fc94 	bl	800199c <SystickTimer_SetSamplingTime>

  ICM_20602 ICM20602(ICM_20602::EN_COMM_MODE_SPI);
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f900 	bl	8001280 <_ZN9ICM_20602C1ENS_10CommMode_tE>
  ICM20602.SetSPIPort(SPI2, SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 8002080:	f107 0008 	add.w	r0, r7, #8
 8002084:	2301      	movs	r3, #1
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <main+0x170>)
 8002088:	4949      	ldr	r1, [pc, #292]	; (80021b0 <main+0x174>)
 800208a:	f7ff f94e 	bl	800132a <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>
  ICM20602.Setup();
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f979 	bl	800138a <_ZN9ICM_206025SetupEv>

  uint64_t u64LedTimeMs = SystickTimer_GetTimeMS();
 8002098:	f7ff fcd0 	bl	8001a3c <SystickTimer_GetTimeMS>
 800209c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
  uint64_t u64DebugTimeMs = SystickTimer_GetTimeMS();
 80020a0:	f7ff fccc 	bl	8001a3c <SystickTimer_GetTimeMS>
 80020a4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
  float fTimer = 0.0;
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(SystickTimer_IsSamplingTimeElapsed()){
 80020ae:	f7ff fc8d 	bl	80019cc <SystickTimer_IsSamplingTimeElapsed>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0fa      	beq.n	80020ae <main+0x72>
		  ICM20602.Update();
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f9ae 	bl	800141e <_ZN9ICM_206026UpdateEv>

		  if(SystickTimer_IsTimeElapsed(u64LedTimeMs, 500)){
 80020c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020ca:	f7ff fcce 	bl	8001a6a <SystickTimer_IsTimeElapsed>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <main+0xa8>
			  u64LedTimeMs = SystickTimer_GetTimeMS();
 80020d4:	f7ff fcb2 	bl	8001a3c <SystickTimer_GetTimeMS>
 80020d8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
			  LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020dc:	2120      	movs	r1, #32
 80020de:	4835      	ldr	r0, [pc, #212]	; (80021b4 <main+0x178>)
 80020e0:	f7ff ff9a 	bl	8002018 <LL_GPIO_TogglePin>
		  }

		  if(SystickTimer_IsTimeElapsed(u64DebugTimeMs, 50)){
 80020e4:	2232      	movs	r2, #50	; 0x32
 80020e6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020ea:	f7ff fcbe 	bl	8001a6a <SystickTimer_IsTimeElapsed>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0dc      	beq.n	80020ae <main+0x72>
			  u64DebugTimeMs = SystickTimer_GetTimeMS();
 80020f4:	f7ff fca2 	bl	8001a3c <SystickTimer_GetTimeMS>
 80020f8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
			  fTimer = (float)(SystickTimer_GetTimeMS())/1000.0f;
 80020fc:	f7ff fc9e 	bl	8001a3c <SystickTimer_GetTimeMS>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	f7fe fe36 	bl	8000d78 <__aeabi_ul2f>
 800210c:	ee06 0a90 	vmov	s13, r0
 8002110:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80021b8 <main+0x17c>
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002118:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 800211c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800211e:	f7fe fa33 	bl	8000588 <__aeabi_f2d>
 8002122:	4680      	mov	r8, r0
 8002124:	4689      	mov	r9, r1
						  fTimer,
						  ICM20602.GetGyroRawData().sValueX,
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f9fd 	bl	800152a <_ZN9ICM_2060214GetGyroRawDataEv>
 8002130:	4603      	mov	r3, r0
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 8002136:	461c      	mov	r4, r3
						  ICM20602.GetGyroRawData().sValueY,
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f9f4 	bl	800152a <_ZN9ICM_2060214GetGyroRawDataEv>
 8002142:	4603      	mov	r3, r0
 8002144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 8002148:	461d      	mov	r5, r3
						  ICM20602.GetGyroRawData().sValueZ,
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f9eb 	bl	800152a <_ZN9ICM_2060214GetGyroRawDataEv>
 8002154:	4603      	mov	r3, r0
 8002156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 800215a:	461e      	mov	r6, r3
						  ICM20602.GetAccelRawData().sValueX,
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f9ee 	bl	8001542 <_ZN9ICM_2060215GetAccelRawDataEv>
 8002166:	4603      	mov	r3, r0
 8002168:	f9b3 3000 	ldrsh.w	r3, [r3]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 800216c:	607b      	str	r3, [r7, #4]
						  ICM20602.GetAccelRawData().sValueY,
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9e5 	bl	8001542 <_ZN9ICM_2060215GetAccelRawDataEv>
 8002178:	4603      	mov	r3, r0
 800217a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 800217e:	603b      	str	r3, [r7, #0]
						  ICM20602.GetAccelRawData().sValueZ
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f9dc 	bl	8001542 <_ZN9ICM_2060215GetAccelRawDataEv>
 800218a:	4603      	mov	r3, r0
 800218c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			  printf("t,%6.2f,Gyro,X,%d,Y,%d,Z,%d,Accel,X,%d,Y,%d,Z,%d\n",
 8002190:	9305      	str	r3, [sp, #20]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	9204      	str	r2, [sp, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	9602      	str	r6, [sp, #8]
 800219c:	9501      	str	r5, [sp, #4]
 800219e:	9400      	str	r4, [sp, #0]
 80021a0:	4642      	mov	r2, r8
 80021a2:	464b      	mov	r3, r9
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <main+0x180>)
 80021a6:	f001 feed 	bl	8003f84 <iprintf>
	  if(SystickTimer_IsSamplingTimeElapsed()){
 80021aa:	e780      	b.n	80020ae <main+0x72>
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	447a0000 	.word	0x447a0000
 80021bc:	08005d40 	.word	0x08005d40

080021c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80021c4:	2005      	movs	r0, #5
 80021c6:	f7ff fee1 	bl	8001f8c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80021ca:	f7ff fef3 	bl	8001fb4 <LL_FLASH_GetLatency>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <_Z18SystemClock_Configv+0x20>
 80021de:	e7f4      	b.n	80021ca <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80021e0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80021e4:	f7ff ff04 	bl	8001ff0 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 80021e8:	f7ff fef2 	bl	8001fd0 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 80021ec:	2010      	movs	r0, #16
 80021ee:	f7ff fdc1 	bl	8001d74 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80021f2:	f7ff fd9d 	bl	8001d30 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80021f6:	f7ff fdab 	bl	8001d50 <LL_RCC_HSI_IsReady>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d000      	beq.n	800220c <_Z18SystemClock_Configv+0x4c>
 800220a:	e7f4      	b.n	80021f6 <_Z18SystemClock_Configv+0x36>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 800220c:	2300      	movs	r3, #0
 800220e:	22b4      	movs	r2, #180	; 0xb4
 8002210:	2108      	movs	r1, #8
 8002212:	2000      	movs	r0, #0
 8002214:	f7ff fe5c 	bl	8001ed0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002218:	f7ff fe36 	bl	8001e88 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800221c:	f7ff fe44 	bl	8001ea8 <LL_RCC_PLL_IsReady>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d000      	beq.n	8002232 <_Z18SystemClock_Configv+0x72>
 8002230:	e7f4      	b.n	800221c <_Z18SystemClock_Configv+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff fdd6 	bl	8001de4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8002238:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800223c:	f7ff fde6 	bl	8001e0c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002240:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002244:	f7ff fdf6 	bl	8001e34 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002248:	2002      	movs	r0, #2
 800224a:	f7ff fda9 	bl	8001da0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800224e:	f7ff fdbb 	bl	8001dc8 <LL_RCC_GetSysClkSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b08      	cmp	r3, #8
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d000      	beq.n	8002264 <_Z18SystemClock_Configv+0xa4>
 8002262:	e7f4      	b.n	800224e <_Z18SystemClock_Configv+0x8e>
  {

  }
  LL_Init1msTick(180000000);
 8002264:	4805      	ldr	r0, [pc, #20]	; (800227c <_Z18SystemClock_Configv+0xbc>)
 8002266:	f001 f9b9 	bl	80035dc <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 800226a:	4804      	ldr	r0, [pc, #16]	; (800227c <_Z18SystemClock_Configv+0xbc>)
 800226c:	f001 f9e8 	bl	8003640 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fdf3 	bl	8001e5c <LL_RCC_SetTIMPrescaler>
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	0aba9500 	.word	0x0aba9500

08002280 <__io_putchar>:

/* USER CODE BEGIN 4 */
void __io_putchar(uint8_t u8WriteData)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(DEBUG_PRINTF_USART_TYPEDEF, u8WriteData);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	4619      	mov	r1, r3
 800228e:	4803      	ldr	r0, [pc, #12]	; (800229c <__io_putchar+0x1c>)
 8002290:	f000 fa70 	bl	8002774 <USART_TransmitByte>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40004400 	.word	0x40004400

080022a0 <LL_AHB1_GRP1_EnableClock>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4013      	ands	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40023800 	.word	0x40023800

080022d0 <LL_APB1_GRP1_EnableClock>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80022da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80022e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800

08002300 <LL_SPI_SetStandard>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 0210 	bic.w	r2, r3, #16
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	605a      	str	r2, [r3, #4]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b090      	sub	sp, #64	; 0x40
 800232c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	2228      	movs	r2, #40	; 0x28
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f001 f9bc 	bl	80036b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800234c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002350:	f7ff ffbe 	bl	80022d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002354:	2004      	movs	r0, #4
 8002356:	f7ff ffa3 	bl	80022a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff ffa0 	bl	80022a0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC1   ------> SPI2_MOSI
  PC2   ------> SPI2_MISO
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002360:	2302      	movs	r3, #2
 8002362:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002364:	2302      	movs	r3, #2
 8002366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002374:	2307      	movs	r3, #7
 8002376:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002378:	463b      	mov	r3, r7
 800237a:	4619      	mov	r1, r3
 800237c:	4824      	ldr	r0, [pc, #144]	; (8002410 <MX_SPI2_Init+0xe8>)
 800237e:	f000 fc52 	bl	8002c26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002382:	2304      	movs	r3, #4
 8002384:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002386:	2302      	movs	r3, #2
 8002388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002396:	2305      	movs	r3, #5
 8002398:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	463b      	mov	r3, r7
 800239c:	4619      	mov	r1, r3
 800239e:	481c      	ldr	r0, [pc, #112]	; (8002410 <MX_SPI2_Init+0xe8>)
 80023a0:	f000 fc41 	bl	8002c26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80023a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023aa:	2302      	movs	r3, #2
 80023ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80023ba:	2305      	movs	r3, #5
 80023bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	463b      	mov	r3, r7
 80023c0:	4619      	mov	r1, r3
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <MX_SPI2_Init+0xec>)
 80023c4:	f000 fc2f 	bl	8002c26 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023d0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023d6:	2302      	movs	r3, #2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023da:	2301      	movs	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 80023e4:	2328      	movs	r3, #40	; 0x28
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80023f0:	230a      	movs	r3, #10
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_SPI2_Init+0xf0>)
 80023fc:	f000 fe1f 	bl	800303e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002400:	2100      	movs	r1, #0
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_SPI2_Init+0xf0>)
 8002404:	f7ff ff7c 	bl	8002300 <LL_SPI_SetStandard>

}
 8002408:	bf00      	nop
 800240a:	3740      	adds	r7, #64	; 0x40
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020800 	.word	0x40020800
 8002414:	40020400 	.word	0x40020400
 8002418:	40003800 	.word	0x40003800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <NMI_Handler+0x4>

08002422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <MemManage_Handler+0x4>

0800242e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <UsageFault_Handler+0x4>

0800243a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickTimer_Interrupt();
 8002468:	f7ff fa80 	bl	800196c <SystickTimer_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e00a      	b.n	8002498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002482:	f3af 8000 	nop.w
 8002486:	4601      	mov	r1, r0
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf0      	blt.n	8002482 <_read+0x12>
	}

return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e009      	b.n	80024d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fedb 	bl	8002280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbf1      	blt.n	80024bc <_write+0x12>
	}
	return len;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_close>:

int _close(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250a:	605a      	str	r2, [r3, #4]
	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_isatty>:

int _isatty(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	return 1;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
	return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f001 f870 	bl	8003660 <__errno>
 8002580:	4602      	mov	r2, r0
 8002582:	230c      	movs	r3, #12
 8002584:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20020000 	.word	0x20020000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20000208 	.word	0x20000208
 80025b4:	20000218 	.word	0x20000218

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <SystemInit+0x28>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <SystemInit+0x28>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SystemInit+0x28>)
 80025ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d2:	609a      	str	r2, [r3, #8]
#endif
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <LL_AHB1_GRP1_EnableClock>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023800 	.word	0x40023800

08002614 <LL_APB1_GRP1_EnableClock>:
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <LL_APB1_GRP1_EnableClock+0x2c>)
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4313      	orrs	r3, r2
 8002626:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <LL_APB1_GRP1_EnableClock+0x2c>)
 800262a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40023800 	.word	0x40023800

08002644 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	615a      	str	r2, [r3, #20]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	605a      	str	r2, [r3, #4]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	; 0x38
 80026d8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80026fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002702:	f7ff ff87 	bl	8002614 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff ff6c 	bl	80025e4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800270c:	230c      	movs	r3, #12
 800270e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002710:	2302      	movs	r3, #2
 8002712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002720:	2307      	movs	r3, #7
 8002722:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4810      	ldr	r0, [pc, #64]	; (800276c <MX_USART2_UART_Init+0x98>)
 800272a:	f000 fa7c 	bl	8002c26 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800272e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002732:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002740:	230c      	movs	r3, #12
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	4807      	ldr	r0, [pc, #28]	; (8002770 <MX_USART2_UART_Init+0x9c>)
 8002754:	f000 fea8 	bl	80034a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_USART2_UART_Init+0x9c>)
 800275a:	f7ff ff83 	bl	8002664 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_USART2_UART_Init+0x9c>)
 8002760:	f7ff ff70 	bl	8002644 <LL_USART_Enable>

}
 8002764:	bf00      	nop
 8002766:	3738      	adds	r7, #56	; 0x38
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40020000 	.word	0x40020000
 8002770:	40004400 	.word	0x40004400

08002774 <USART_TransmitByte>:

/* USER CODE BEGIN 1 */
void USART_TransmitByte(USART_TypeDef *pUSARTx, uint8_t u8WriteData)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	LL_USART_TransmitData8(pUSARTx, u8WriteData);
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff96 	bl	80026b6 <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TXE(pUSARTx));
 800278a:	bf00      	nop
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff7f 	bl	8002690 <LL_USART_IsActiveFlag_TXE>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f9      	beq.n	800278c <USART_TransmitByte+0x18>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027a6:	e003      	b.n	80027b0 <LoopCopyDataInit>

080027a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ae:	3104      	adds	r1, #4

080027b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027b8:	d3f6      	bcc.n	80027a8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027bc:	e002      	b.n	80027c4 <LoopFillZerobss>

080027be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027c0:	f842 3b04 	str.w	r3, [r2], #4

080027c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027c8:	d3f9      	bcc.n	80027be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ca:	f7ff fef5 	bl	80025b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ce:	f000 ff4d 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d2:	f7ff fc33 	bl	800203c <main>
  bx  lr    
 80027d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027dc:	080060a0 	.word	0x080060a0
  ldr  r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027e4:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 80027e8:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 80027ec:	20000218 	.word	0x20000218

080027f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>
	...

080027f4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <LL_EXTI_EnableIT_0_31+0x20>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4904      	ldr	r1, [pc, #16]	; (8002814 <LL_EXTI_EnableIT_0_31+0x20>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40013c00 	.word	0x40013c00

08002818 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <LL_EXTI_DisableIT_0_31+0x24>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	43db      	mvns	r3, r3
 8002828:	4904      	ldr	r1, [pc, #16]	; (800283c <LL_EXTI_DisableIT_0_31+0x24>)
 800282a:	4013      	ands	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40013c00 	.word	0x40013c00

08002840 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <LL_EXTI_EnableEvent_0_31+0x20>)
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <LL_EXTI_EnableEvent_0_31+0x20>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40013c00 	.word	0x40013c00

08002864 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <LL_EXTI_DisableEvent_0_31+0x24>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	43db      	mvns	r3, r3
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002876:	4013      	ands	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40013c00 	.word	0x40013c00

0800288c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	43db      	mvns	r3, r3
 80028c0:	4904      	ldr	r1, [pc, #16]	; (80028d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]

}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40013c00 	.word	0x40013c00

080028fc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	43db      	mvns	r3, r3
 800290c:	4904      	ldr	r1, [pc, #16]	; (8002920 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800290e:	4013      	ands	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40013c00 	.word	0x40013c00

08002924 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d060      	beq.n	80029fa <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d067      	beq.n	8002a10 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	795b      	ldrb	r3, [r3, #5]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00e      	beq.n	8002966 <LL_EXTI_Init+0x42>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d017      	beq.n	800297c <LL_EXTI_Init+0x58>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d120      	bne.n	8002992 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff85 	bl	8002864 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff48 	bl	80027f4 <LL_EXTI_EnableIT_0_31>
          break;
 8002964:	e018      	b.n	8002998 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff54 	bl	8002818 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff63 	bl	8002840 <LL_EXTI_EnableEvent_0_31>
          break;
 800297a:	e00d      	b.n	8002998 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff37 	bl	80027f4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff58 	bl	8002840 <LL_EXTI_EnableEvent_0_31>
          break;
 8002990:	e002      	b.n	8002998 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
          break;
 8002996:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	799b      	ldrb	r3, [r3, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d037      	beq.n	8002a10 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	799b      	ldrb	r3, [r3, #6]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d00e      	beq.n	80029c6 <LL_EXTI_Init+0xa2>
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <LL_EXTI_Init+0xb8>
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d120      	bne.n	80029f2 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ffa1 	bl	80028fc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff64 	bl	800288c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80029c4:	e025      	b.n	8002a12 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff70 	bl	80028b0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff7f 	bl	80028d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029da:	e01a      	b.n	8002a12 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff53 	bl	800288c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff74 	bl	80028d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029f0:	e00f      	b.n	8002a12 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
            break;
 80029f6:	bf00      	nop
 80029f8:	e00b      	b.n	8002a12 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff0a 	bl	8002818 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff2b 	bl	8002864 <LL_EXTI_DisableEvent_0_31>
 8002a0e:	e000      	b.n	8002a12 <LL_EXTI_Init+0xee>
      }
 8002a10:	bf00      	nop
  }
  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <LL_GPIO_SetPinMode>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	613b      	str	r3, [r7, #16]
  return result;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2103      	movs	r1, #3
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	61bb      	str	r3, [r7, #24]
  return result;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_GPIO_SetPinOutputType>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_GPIO_SetPinSpeed>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b089      	sub	sp, #36	; 0x24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	613b      	str	r3, [r7, #16]
  return result;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	401a      	ands	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_GPIO_SetPinPull>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	613b      	str	r3, [r7, #16]
  return result;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2103      	movs	r1, #3
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	61bb      	str	r3, [r7, #24]
  return result;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	60da      	str	r2, [r3, #12]
}
 8002b5a:	bf00      	nop
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_GPIO_SetAFPin_0_7>:
{
 8002b66:	b480      	push	{r7}
 8002b68:	b089      	sub	sp, #36	; 0x24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	613b      	str	r3, [r7, #16]
  return result;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	210f      	movs	r1, #15
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	3724      	adds	r7, #36	; 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_GPIO_SetAFPin_8_15>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	613b      	str	r3, [r7, #16]
  return result;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	210f      	movs	r1, #15
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	61bb      	str	r3, [r7, #24]
  return result;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b088      	sub	sp, #32
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	613b      	str	r3, [r7, #16]
  return result;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c50:	e050      	b.n	8002cf4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d042      	beq.n	8002cee <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d003      	beq.n	8002c78 <LL_GPIO_Init+0x52>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d10d      	bne.n	8002c94 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff12 	bl	8002aaa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fef3 	bl	8002a7a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff33 	bl	8002b08 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11a      	bne.n	8002ce0 <LL_GPIO_Init+0xba>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	60bb      	str	r3, [r7, #8]
  return result;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b07      	cmp	r3, #7
 8002cc0:	d807      	bhi.n	8002cd2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	69b9      	ldr	r1, [r7, #24]
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ff4b 	bl	8002b66 <LL_GPIO_SetAFPin_0_7>
 8002cd0:	e006      	b.n	8002ce0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff72 	bl	8002bc4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fe97 	bl	8002a1c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1a7      	bne.n	8002c52 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LL_RCC_GetSysClkSource>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <LL_RCC_GetSysClkSource+0x18>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <LL_RCC_GetAHBPrescaler>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <LL_RCC_GetAHBPrescaler+0x18>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <LL_RCC_GetAPB1Prescaler>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <LL_RCC_GetAPB1Prescaler+0x18>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800

08002d60 <LL_RCC_GetAPB2Prescaler>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <LL_RCC_PLL_GetMainSource+0x18>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <LL_RCC_PLL_GetN+0x18>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40023800 	.word	0x40023800

08002db4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <LL_RCC_PLL_GetP+0x18>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <LL_RCC_PLL_GetR+0x18>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800

08002dec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <LL_RCC_PLL_GetDivider+0x18>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800

08002e08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e10:	f000 f820 	bl	8002e54 <RCC_GetSystemClockFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f85c 	bl	8002edc <RCC_GetHCLKClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f86a 	bl	8002f08 <RCC_GetPCLK1ClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f876 	bl	8002f30 <RCC_GetPCLK2ClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60da      	str	r2, [r3, #12]
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002e5e:	f7ff ff55 	bl	8002d0c <LL_RCC_GetSysClkSource>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d82d      	bhi.n	8002ec4 <RCC_GetSystemClockFreq+0x70>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <RCC_GetSystemClockFreq+0x1c>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	08002ec5 	.word	0x08002ec5
 8002e7c:	08002ec5 	.word	0x08002ec5
 8002e80:	08002eab 	.word	0x08002eab
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002ec5 	.word	0x08002ec5
 8002e8c:	08002ec5 	.word	0x08002ec5
 8002e90:	08002eb1 	.word	0x08002eb1
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ebb 	.word	0x08002ebb
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <RCC_GetSystemClockFreq+0x80>)
 8002ea6:	607b      	str	r3, [r7, #4]
      break;
 8002ea8:	e00f      	b.n	8002eca <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <RCC_GetSystemClockFreq+0x84>)
 8002eac:	607b      	str	r3, [r7, #4]
      break;
 8002eae:	e00c      	b.n	8002eca <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002eb0:	2008      	movs	r0, #8
 8002eb2:	f000 f851 	bl	8002f58 <RCC_PLL_GetFreqDomain_SYS>
 8002eb6:	6078      	str	r0, [r7, #4]
      break;
 8002eb8:	e007      	b.n	8002eca <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8002eba:	200c      	movs	r0, #12
 8002ebc:	f000 f84c 	bl	8002f58 <RCC_PLL_GetFreqDomain_SYS>
 8002ec0:	6078      	str	r0, [r7, #4]
      break;
 8002ec2:	e002      	b.n	8002eca <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <RCC_GetSystemClockFreq+0x80>)
 8002ec6:	607b      	str	r3, [r7, #4]
      break;
 8002ec8:	bf00      	nop
  }

  return frequency;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	007a1200 	.word	0x007a1200

08002edc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ee4:	f7ff ff20 	bl	8002d28 <LL_RCC_GetAHBPrescaler>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <RCC_GetHCLKClockFreq+0x28>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	40d3      	lsrs	r3, r2
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	08005db4 	.word	0x08005db4

08002f08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002f10:	f7ff ff18 	bl	8002d44 <LL_RCC_GetAPB1Prescaler>
 8002f14:	4603      	mov	r3, r0
 8002f16:	0a9b      	lsrs	r3, r3, #10
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <RCC_GetPCLK1ClockFreq+0x24>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	40d3      	lsrs	r3, r2
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08005dc4 	.word	0x08005dc4

08002f30 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f38:	f7ff ff12 	bl	8002d60 <LL_RCC_GetAPB2Prescaler>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	0b5b      	lsrs	r3, r3, #13
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <RCC_GetPCLK2ClockFreq+0x24>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	40d3      	lsrs	r3, r2
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	08005dc4 	.word	0x08005dc4

08002f58 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002f6c:	f7ff ff06 	bl	8002d7c <LL_RCC_PLL_GetMainSource>
 8002f70:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7c:	d003      	beq.n	8002f86 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8002f7e:	e005      	b.n	8002f8c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8002f82:	617b      	str	r3, [r7, #20]
      break;
 8002f84:	e005      	b.n	8002f92 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002f88:	617b      	str	r3, [r7, #20]
      break;
 8002f8a:	e002      	b.n	8002f92 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8002f8e:	617b      	str	r3, [r7, #20]
      break;
 8002f90:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d114      	bne.n	8002fc2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f98:	f7ff ff28 	bl	8002dec <LL_RCC_PLL_GetDivider>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fbb3 f4f2 	udiv	r4, r3, r2
 8002fa4:	f7ff fef8 	bl	8002d98 <LL_RCC_PLL_GetN>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	fb03 f404 	mul.w	r4, r3, r4
 8002fae:	f7ff ff01 	bl	8002db4 <LL_RCC_PLL_GetP>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e011      	b.n	8002fe6 <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002fc2:	f7ff ff13 	bl	8002dec <LL_RCC_PLL_GetDivider>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fbb3 f4f2 	udiv	r4, r3, r2
 8002fce:	f7ff fee3 	bl	8002d98 <LL_RCC_PLL_GetN>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	fb03 f404 	mul.w	r4, r3, r4
 8002fd8:	f7ff fefa 	bl	8002dd0 <LL_RCC_PLL_GetR>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	0f1b      	lsrs	r3, r3, #28
 8002fe0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fe4:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002fe6:	693b      	ldr	r3, [r7, #16]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <LL_SPI_IsEnabled>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d101      	bne.n	8003010 <LL_SPI_IsEnabled+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_SPI_IsEnabled+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_SPI_SetCRCPolynomial>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ffd3 	bl	8002ff8 <LL_SPI_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d139      	bne.n	80030cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003060:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	6811      	ldr	r1, [r2, #0]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6852      	ldr	r2, [r2, #4]
 800306c:	4311      	orrs	r1, r2
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	6892      	ldr	r2, [r2, #8]
 8003072:	4311      	orrs	r1, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	4311      	orrs	r1, r2
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	6912      	ldr	r2, [r2, #16]
 800307e:	4311      	orrs	r1, r2
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	6952      	ldr	r2, [r2, #20]
 8003084:	4311      	orrs	r1, r2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	6992      	ldr	r2, [r2, #24]
 800308a:	4311      	orrs	r1, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	69d2      	ldr	r2, [r2, #28]
 8003090:	4311      	orrs	r1, r2
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6a12      	ldr	r2, [r2, #32]
 8003096:	430a      	orrs	r2, r1
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f023 0204 	bic.w	r2, r3, #4
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d105      	bne.n	80030c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ffab 	bl	800301e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	61da      	str	r2, [r3, #28]
  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <LL_USART_IsEnabled>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_USART_SetStopBitsLength>:
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_USART_SetHWFlowCtrl>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	615a      	str	r2, [r3, #20]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <LL_USART_SetBaudRate>:
{
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	f040 80c1 	bne.w	80032f4 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	461d      	mov	r5, r3
 8003176:	f04f 0600 	mov.w	r6, #0
 800317a:	46a8      	mov	r8, r5
 800317c:	46b1      	mov	r9, r6
 800317e:	eb18 0308 	adds.w	r3, r8, r8
 8003182:	eb49 0409 	adc.w	r4, r9, r9
 8003186:	4698      	mov	r8, r3
 8003188:	46a1      	mov	r9, r4
 800318a:	eb18 0805 	adds.w	r8, r8, r5
 800318e:	eb49 0906 	adc.w	r9, r9, r6
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800319e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031a6:	4688      	mov	r8, r1
 80031a8:	4691      	mov	r9, r2
 80031aa:	eb18 0005 	adds.w	r0, r8, r5
 80031ae:	eb49 0106 	adc.w	r1, r9, r6
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	461d      	mov	r5, r3
 80031b6:	f04f 0600 	mov.w	r6, #0
 80031ba:	196b      	adds	r3, r5, r5
 80031bc:	eb46 0406 	adc.w	r4, r6, r6
 80031c0:	461a      	mov	r2, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	f7fd fe1e 	bl	8000e04 <__aeabi_uldivmod>
 80031c8:	4603      	mov	r3, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	461a      	mov	r2, r3
 80031ce:	4bb5      	ldr	r3, [pc, #724]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 80031d0:	fba3 2302 	umull	r2, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	fa1f f883 	uxth.w	r8, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	461d      	mov	r5, r3
 80031e2:	f04f 0600 	mov.w	r6, #0
 80031e6:	46a9      	mov	r9, r5
 80031e8:	46b2      	mov	sl, r6
 80031ea:	eb19 0309 	adds.w	r3, r9, r9
 80031ee:	eb4a 040a 	adc.w	r4, sl, sl
 80031f2:	4699      	mov	r9, r3
 80031f4:	46a2      	mov	sl, r4
 80031f6:	eb19 0905 	adds.w	r9, r9, r5
 80031fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800320a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003212:	4689      	mov	r9, r1
 8003214:	4692      	mov	sl, r2
 8003216:	eb19 0005 	adds.w	r0, r9, r5
 800321a:	eb4a 0106 	adc.w	r1, sl, r6
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	461d      	mov	r5, r3
 8003222:	f04f 0600 	mov.w	r6, #0
 8003226:	196b      	adds	r3, r5, r5
 8003228:	eb46 0406 	adc.w	r4, r6, r6
 800322c:	461a      	mov	r2, r3
 800322e:	4623      	mov	r3, r4
 8003230:	f7fd fde8 	bl	8000e04 <__aeabi_uldivmod>
 8003234:	4603      	mov	r3, r0
 8003236:	460c      	mov	r4, r1
 8003238:	461a      	mov	r2, r3
 800323a:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	; 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3332      	adds	r3, #50	; 0x32
 800324e:	4a95      	ldr	r2, [pc, #596]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b29b      	uxth	r3, r3
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	b29b      	uxth	r3, r3
 800325c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003260:	b29b      	uxth	r3, r3
 8003262:	4443      	add	r3, r8
 8003264:	fa1f f883 	uxth.w	r8, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	461d      	mov	r5, r3
 800326c:	f04f 0600 	mov.w	r6, #0
 8003270:	46a9      	mov	r9, r5
 8003272:	46b2      	mov	sl, r6
 8003274:	eb19 0309 	adds.w	r3, r9, r9
 8003278:	eb4a 040a 	adc.w	r4, sl, sl
 800327c:	4699      	mov	r9, r3
 800327e:	46a2      	mov	sl, r4
 8003280:	eb19 0905 	adds.w	r9, r9, r5
 8003284:	eb4a 0a06 	adc.w	sl, sl, r6
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800329c:	4689      	mov	r9, r1
 800329e:	4692      	mov	sl, r2
 80032a0:	eb19 0005 	adds.w	r0, r9, r5
 80032a4:	eb4a 0106 	adc.w	r1, sl, r6
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	461d      	mov	r5, r3
 80032ac:	f04f 0600 	mov.w	r6, #0
 80032b0:	196b      	adds	r3, r5, r5
 80032b2:	eb46 0406 	adc.w	r4, r6, r6
 80032b6:	461a      	mov	r2, r3
 80032b8:	4623      	mov	r3, r4
 80032ba:	f7fd fda3 	bl	8000e04 <__aeabi_uldivmod>
 80032be:	4603      	mov	r3, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 80032c6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2164      	movs	r1, #100	; 0x64
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4443      	add	r3, r8
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	609a      	str	r2, [r3, #8]
}
 80032f2:	e0d2      	b.n	800349a <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	469a      	mov	sl, r3
 80032f8:	f04f 0b00 	mov.w	fp, #0
 80032fc:	46d0      	mov	r8, sl
 80032fe:	46d9      	mov	r9, fp
 8003300:	eb18 0308 	adds.w	r3, r8, r8
 8003304:	eb49 0409 	adc.w	r4, r9, r9
 8003308:	4698      	mov	r8, r3
 800330a:	46a1      	mov	r9, r4
 800330c:	eb18 080a 	adds.w	r8, r8, sl
 8003310:	eb49 090b 	adc.w	r9, r9, fp
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003320:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003324:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003328:	4688      	mov	r8, r1
 800332a:	4691      	mov	r9, r2
 800332c:	eb1a 0508 	adds.w	r5, sl, r8
 8003330:	eb4b 0609 	adc.w	r6, fp, r9
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	0094      	lsls	r4, r2, #2
 8003346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	4628      	mov	r0, r5
 8003352:	4631      	mov	r1, r6
 8003354:	f7fd fd56 	bl	8000e04 <__aeabi_uldivmod>
 8003358:	4603      	mov	r3, r0
 800335a:	460c      	mov	r4, r1
 800335c:	461a      	mov	r2, r3
 800335e:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	b29b      	uxth	r3, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	fa1f f883 	uxth.w	r8, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	469b      	mov	fp, r3
 8003372:	f04f 0c00 	mov.w	ip, #0
 8003376:	46d9      	mov	r9, fp
 8003378:	46e2      	mov	sl, ip
 800337a:	eb19 0309 	adds.w	r3, r9, r9
 800337e:	eb4a 040a 	adc.w	r4, sl, sl
 8003382:	4699      	mov	r9, r3
 8003384:	46a2      	mov	sl, r4
 8003386:	eb19 090b 	adds.w	r9, r9, fp
 800338a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a2:	4689      	mov	r9, r1
 80033a4:	4692      	mov	sl, r2
 80033a6:	eb1b 0509 	adds.w	r5, fp, r9
 80033aa:	eb4c 060a 	adc.w	r6, ip, sl
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	f04f 0400 	mov.w	r4, #0
 80033be:	0094      	lsls	r4, r2, #2
 80033c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033c4:	008b      	lsls	r3, r1, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	4623      	mov	r3, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	4631      	mov	r1, r6
 80033ce:	f7fd fd19 	bl	8000e04 <__aeabi_uldivmod>
 80033d2:	4603      	mov	r3, r0
 80033d4:	460c      	mov	r4, r1
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 80033da:	fba3 1302 	umull	r1, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2164      	movs	r1, #100	; 0x64
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	3332      	adds	r3, #50	; 0x32
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4443      	add	r3, r8
 80033fe:	fa1f f883 	uxth.w	r8, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	469b      	mov	fp, r3
 8003406:	f04f 0c00 	mov.w	ip, #0
 800340a:	46d9      	mov	r9, fp
 800340c:	46e2      	mov	sl, ip
 800340e:	eb19 0309 	adds.w	r3, r9, r9
 8003412:	eb4a 040a 	adc.w	r4, sl, sl
 8003416:	4699      	mov	r9, r3
 8003418:	46a2      	mov	sl, r4
 800341a:	eb19 090b 	adds.w	r9, r9, fp
 800341e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800342e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003432:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003436:	4689      	mov	r9, r1
 8003438:	4692      	mov	sl, r2
 800343a:	eb1b 0509 	adds.w	r5, fp, r9
 800343e:	eb4c 060a 	adc.w	r6, ip, sl
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0094      	lsls	r4, r2, #2
 8003454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003458:	008b      	lsls	r3, r1, #2
 800345a:	461a      	mov	r2, r3
 800345c:	4623      	mov	r3, r4
 800345e:	4628      	mov	r0, r5
 8003460:	4631      	mov	r1, r6
 8003462:	f7fd fccf 	bl	8000e04 <__aeabi_uldivmod>
 8003466:	4603      	mov	r3, r0
 8003468:	460c      	mov	r4, r1
 800346a:	461a      	mov	r2, r3
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 800346e:	fba3 1302 	umull	r1, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2164      	movs	r1, #100	; 0x64
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	3332      	adds	r3, #50	; 0x32
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <LL_USART_SetBaudRate+0x34c>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	b29b      	uxth	r3, r3
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	b29b      	uxth	r3, r3
 8003490:	4443      	add	r3, r8
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	609a      	str	r2, [r3, #8]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a4:	51eb851f 	.word	0x51eb851f

080034a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fe11 	bl	80030e2 <LL_USART_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d15e      	bne.n	8003584 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034ce:	f023 030c 	bic.w	r3, r3, #12
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	6851      	ldr	r1, [r2, #4]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68d2      	ldr	r2, [r2, #12]
 80034da:	4311      	orrs	r1, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6912      	ldr	r2, [r2, #16]
 80034e0:	4311      	orrs	r1, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	6992      	ldr	r2, [r2, #24]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fe08 	bl	800310a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fe15 	bl	8003130 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc7c 	bl	8002e08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <LL_USART_Init+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	e021      	b.n	8003562 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <LL_USART_Init+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d102      	bne.n	800352c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e01a      	b.n	8003562 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <LL_USART_Init+0xf0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d102      	bne.n	800353a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	e013      	b.n	8003562 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <LL_USART_Init+0xf4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d102      	bne.n	8003548 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e00c      	b.n	8003562 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <LL_USART_Init+0xf8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d102      	bne.n	8003556 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e005      	b.n	8003562 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <LL_USART_Init+0xfc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fdea 	bl	8003158 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003584:	7ffb      	ldrb	r3, [r7, #31]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40011000 	.word	0x40011000
 8003594:	40004400 	.word	0x40004400
 8003598:	40004800 	.word	0x40004800
 800359c:	40011400 	.word	0x40011400
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40005000 	.word	0x40005000

080035a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <LL_InitTick+0x30>)
 80035bc:	3b01      	subs	r3, #1
 80035be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <LL_InitTick+0x30>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <LL_InitTick+0x30>)
 80035c8:	2205      	movs	r2, #5
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e010 	.word	0xe000e010

080035dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80035e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ffdd 	bl	80035a8 <LL_InitTick>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <LL_mDelay+0x44>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003606:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360e:	d00c      	beq.n	800362a <LL_mDelay+0x32>
  {
    Delay++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3301      	adds	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003616:	e008      	b.n	800362a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <LL_mDelay+0x44>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <LL_mDelay+0x32>
    {
      Delay--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	607b      	str	r3, [r7, #4]
  while (Delay)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f3      	bne.n	8003618 <LL_mDelay+0x20>
    }
  }
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e010 	.word	0xe000e010

08003640 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <LL_SetSystemCoreClock+0x1c>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000

08003660 <__errno>:
 8003660:	4b01      	ldr	r3, [pc, #4]	; (8003668 <__errno+0x8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000004 	.word	0x20000004

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4e0d      	ldr	r6, [pc, #52]	; (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003672:	1ba4      	subs	r4, r4, r6
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2500      	movs	r5, #0
 8003678:	42a5      	cmp	r5, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4e0b      	ldr	r6, [pc, #44]	; (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	; (80036b0 <__libc_init_array+0x44>)
 8003680:	f002 fb52 	bl	8005d28 <_init>
 8003684:	1ba4      	subs	r4, r4, r6
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2500      	movs	r5, #0
 800368a:	42a5      	cmp	r5, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003694:	4798      	blx	r3
 8003696:	3501      	adds	r5, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800369e:	4798      	blx	r3
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	08006098 	.word	0x08006098
 80036a8:	08006098 	.word	0x08006098
 80036ac:	08006098 	.word	0x08006098
 80036b0:	0800609c 	.word	0x0800609c

080036b4 <memset>:
 80036b4:	4402      	add	r2, r0
 80036b6:	4603      	mov	r3, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <__cvt>:
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80036ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80036d0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80036d4:	461d      	mov	r5, r3
 80036d6:	f027 0720 	bic.w	r7, r7, #32
 80036da:	bfbb      	ittet	lt
 80036dc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80036e0:	461d      	movlt	r5, r3
 80036e2:	2300      	movge	r3, #0
 80036e4:	232d      	movlt	r3, #45	; 0x2d
 80036e6:	4614      	mov	r4, r2
 80036e8:	bfb8      	it	lt
 80036ea:	4614      	movlt	r4, r2
 80036ec:	2f46      	cmp	r7, #70	; 0x46
 80036ee:	700b      	strb	r3, [r1, #0]
 80036f0:	d004      	beq.n	80036fc <__cvt+0x38>
 80036f2:	2f45      	cmp	r7, #69	; 0x45
 80036f4:	d100      	bne.n	80036f8 <__cvt+0x34>
 80036f6:	3601      	adds	r6, #1
 80036f8:	2302      	movs	r3, #2
 80036fa:	e000      	b.n	80036fe <__cvt+0x3a>
 80036fc:	2303      	movs	r3, #3
 80036fe:	aa07      	add	r2, sp, #28
 8003700:	9204      	str	r2, [sp, #16]
 8003702:	aa06      	add	r2, sp, #24
 8003704:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003708:	e9cd 3600 	strd	r3, r6, [sp]
 800370c:	4622      	mov	r2, r4
 800370e:	462b      	mov	r3, r5
 8003710:	f000 fcde 	bl	80040d0 <_dtoa_r>
 8003714:	2f47      	cmp	r7, #71	; 0x47
 8003716:	4680      	mov	r8, r0
 8003718:	d102      	bne.n	8003720 <__cvt+0x5c>
 800371a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800371c:	07db      	lsls	r3, r3, #31
 800371e:	d526      	bpl.n	800376e <__cvt+0xaa>
 8003720:	2f46      	cmp	r7, #70	; 0x46
 8003722:	eb08 0906 	add.w	r9, r8, r6
 8003726:	d111      	bne.n	800374c <__cvt+0x88>
 8003728:	f898 3000 	ldrb.w	r3, [r8]
 800372c:	2b30      	cmp	r3, #48	; 0x30
 800372e:	d10a      	bne.n	8003746 <__cvt+0x82>
 8003730:	2200      	movs	r2, #0
 8003732:	2300      	movs	r3, #0
 8003734:	4620      	mov	r0, r4
 8003736:	4629      	mov	r1, r5
 8003738:	f7fd f9e6 	bl	8000b08 <__aeabi_dcmpeq>
 800373c:	b918      	cbnz	r0, 8003746 <__cvt+0x82>
 800373e:	f1c6 0601 	rsb	r6, r6, #1
 8003742:	f8ca 6000 	str.w	r6, [sl]
 8003746:	f8da 3000 	ldr.w	r3, [sl]
 800374a:	4499      	add	r9, r3
 800374c:	2200      	movs	r2, #0
 800374e:	2300      	movs	r3, #0
 8003750:	4620      	mov	r0, r4
 8003752:	4629      	mov	r1, r5
 8003754:	f7fd f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 8003758:	b938      	cbnz	r0, 800376a <__cvt+0xa6>
 800375a:	2230      	movs	r2, #48	; 0x30
 800375c:	9b07      	ldr	r3, [sp, #28]
 800375e:	454b      	cmp	r3, r9
 8003760:	d205      	bcs.n	800376e <__cvt+0xaa>
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	9107      	str	r1, [sp, #28]
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e7f8      	b.n	800375c <__cvt+0x98>
 800376a:	f8cd 901c 	str.w	r9, [sp, #28]
 800376e:	9b07      	ldr	r3, [sp, #28]
 8003770:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003772:	eba3 0308 	sub.w	r3, r3, r8
 8003776:	4640      	mov	r0, r8
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	b008      	add	sp, #32
 800377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003780 <__exponent>:
 8003780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003782:	2900      	cmp	r1, #0
 8003784:	4604      	mov	r4, r0
 8003786:	bfba      	itte	lt
 8003788:	4249      	neglt	r1, r1
 800378a:	232d      	movlt	r3, #45	; 0x2d
 800378c:	232b      	movge	r3, #43	; 0x2b
 800378e:	2909      	cmp	r1, #9
 8003790:	f804 2b02 	strb.w	r2, [r4], #2
 8003794:	7043      	strb	r3, [r0, #1]
 8003796:	dd20      	ble.n	80037da <__exponent+0x5a>
 8003798:	f10d 0307 	add.w	r3, sp, #7
 800379c:	461f      	mov	r7, r3
 800379e:	260a      	movs	r6, #10
 80037a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80037a4:	fb06 1115 	mls	r1, r6, r5, r1
 80037a8:	3130      	adds	r1, #48	; 0x30
 80037aa:	2d09      	cmp	r5, #9
 80037ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80037b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80037b4:	4629      	mov	r1, r5
 80037b6:	dc09      	bgt.n	80037cc <__exponent+0x4c>
 80037b8:	3130      	adds	r1, #48	; 0x30
 80037ba:	3b02      	subs	r3, #2
 80037bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037c0:	42bb      	cmp	r3, r7
 80037c2:	4622      	mov	r2, r4
 80037c4:	d304      	bcc.n	80037d0 <__exponent+0x50>
 80037c6:	1a10      	subs	r0, r2, r0
 80037c8:	b003      	add	sp, #12
 80037ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037cc:	4613      	mov	r3, r2
 80037ce:	e7e7      	b.n	80037a0 <__exponent+0x20>
 80037d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d4:	f804 2b01 	strb.w	r2, [r4], #1
 80037d8:	e7f2      	b.n	80037c0 <__exponent+0x40>
 80037da:	2330      	movs	r3, #48	; 0x30
 80037dc:	4419      	add	r1, r3
 80037de:	7083      	strb	r3, [r0, #2]
 80037e0:	1d02      	adds	r2, r0, #4
 80037e2:	70c1      	strb	r1, [r0, #3]
 80037e4:	e7ef      	b.n	80037c6 <__exponent+0x46>
	...

080037e8 <_printf_float>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	b091      	sub	sp, #68	; 0x44
 80037ee:	460c      	mov	r4, r1
 80037f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80037f4:	4616      	mov	r6, r2
 80037f6:	461f      	mov	r7, r3
 80037f8:	4605      	mov	r5, r0
 80037fa:	f001 faf1 	bl	8004de0 <_localeconv_r>
 80037fe:	6803      	ldr	r3, [r0, #0]
 8003800:	9308      	str	r3, [sp, #32]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fd04 	bl	8000210 <strlen>
 8003808:	2300      	movs	r3, #0
 800380a:	930e      	str	r3, [sp, #56]	; 0x38
 800380c:	f8d8 3000 	ldr.w	r3, [r8]
 8003810:	9009      	str	r0, [sp, #36]	; 0x24
 8003812:	3307      	adds	r3, #7
 8003814:	f023 0307 	bic.w	r3, r3, #7
 8003818:	f103 0208 	add.w	r2, r3, #8
 800381c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003820:	f8d4 b000 	ldr.w	fp, [r4]
 8003824:	f8c8 2000 	str.w	r2, [r8]
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003830:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003834:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003838:	930b      	str	r3, [sp, #44]	; 0x2c
 800383a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800383e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003842:	4ba9      	ldr	r3, [pc, #676]	; (8003ae8 <_printf_float+0x300>)
 8003844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003848:	f7fd f990 	bl	8000b6c <__aeabi_dcmpun>
 800384c:	bb70      	cbnz	r0, 80038ac <_printf_float+0xc4>
 800384e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003852:	4ba5      	ldr	r3, [pc, #660]	; (8003ae8 <_printf_float+0x300>)
 8003854:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003858:	f7fd f96a 	bl	8000b30 <__aeabi_dcmple>
 800385c:	bb30      	cbnz	r0, 80038ac <_printf_float+0xc4>
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	4640      	mov	r0, r8
 8003864:	4649      	mov	r1, r9
 8003866:	f7fd f959 	bl	8000b1c <__aeabi_dcmplt>
 800386a:	b110      	cbz	r0, 8003872 <_printf_float+0x8a>
 800386c:	232d      	movs	r3, #45	; 0x2d
 800386e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003872:	4a9e      	ldr	r2, [pc, #632]	; (8003aec <_printf_float+0x304>)
 8003874:	4b9e      	ldr	r3, [pc, #632]	; (8003af0 <_printf_float+0x308>)
 8003876:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800387a:	bf8c      	ite	hi
 800387c:	4690      	movhi	r8, r2
 800387e:	4698      	movls	r8, r3
 8003880:	2303      	movs	r3, #3
 8003882:	6123      	str	r3, [r4, #16]
 8003884:	f02b 0304 	bic.w	r3, fp, #4
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	f04f 0900 	mov.w	r9, #0
 800388e:	9700      	str	r7, [sp, #0]
 8003890:	4633      	mov	r3, r6
 8003892:	aa0f      	add	r2, sp, #60	; 0x3c
 8003894:	4621      	mov	r1, r4
 8003896:	4628      	mov	r0, r5
 8003898:	f000 f9ec 	bl	8003c74 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	f040 8090 	bne.w	80039c2 <_printf_float+0x1da>
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a6:	b011      	add	sp, #68	; 0x44
 80038a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	4640      	mov	r0, r8
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fd f95a 	bl	8000b6c <__aeabi_dcmpun>
 80038b8:	b110      	cbz	r0, 80038c0 <_printf_float+0xd8>
 80038ba:	4a8e      	ldr	r2, [pc, #568]	; (8003af4 <_printf_float+0x30c>)
 80038bc:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <_printf_float+0x310>)
 80038be:	e7da      	b.n	8003876 <_printf_float+0x8e>
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80038c8:	a90e      	add	r1, sp, #56	; 0x38
 80038ca:	a80d      	add	r0, sp, #52	; 0x34
 80038cc:	d140      	bne.n	8003950 <_printf_float+0x168>
 80038ce:	2306      	movs	r3, #6
 80038d0:	6063      	str	r3, [r4, #4]
 80038d2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80038d6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80038da:	f04f 0c00 	mov.w	ip, #0
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	6022      	str	r2, [r4, #0]
 80038e2:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f7ff fee7 	bl	80036c4 <__cvt>
 80038f6:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80038fa:	2b47      	cmp	r3, #71	; 0x47
 80038fc:	4680      	mov	r8, r0
 80038fe:	d109      	bne.n	8003914 <_printf_float+0x12c>
 8003900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003902:	1cd8      	adds	r0, r3, #3
 8003904:	db02      	blt.n	800390c <_printf_float+0x124>
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	4293      	cmp	r3, r2
 800390a:	dd47      	ble.n	800399c <_printf_float+0x1b4>
 800390c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003910:	fa5f fa8a 	uxtb.w	sl, sl
 8003914:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003918:	990d      	ldr	r1, [sp, #52]	; 0x34
 800391a:	d824      	bhi.n	8003966 <_printf_float+0x17e>
 800391c:	3901      	subs	r1, #1
 800391e:	4652      	mov	r2, sl
 8003920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003924:	910d      	str	r1, [sp, #52]	; 0x34
 8003926:	f7ff ff2b 	bl	8003780 <__exponent>
 800392a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800392c:	1813      	adds	r3, r2, r0
 800392e:	2a01      	cmp	r2, #1
 8003930:	4681      	mov	r9, r0
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	dc02      	bgt.n	800393c <_printf_float+0x154>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	07d1      	lsls	r1, r2, #31
 800393a:	d501      	bpl.n	8003940 <_printf_float+0x158>
 800393c:	3301      	adds	r3, #1
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0a2      	beq.n	800388e <_printf_float+0xa6>
 8003948:	232d      	movs	r3, #45	; 0x2d
 800394a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800394e:	e79e      	b.n	800388e <_printf_float+0xa6>
 8003950:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003954:	f000 8178 	beq.w	8003c48 <_printf_float+0x460>
 8003958:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800395c:	d1b9      	bne.n	80038d2 <_printf_float+0xea>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1b7      	bne.n	80038d2 <_printf_float+0xea>
 8003962:	2301      	movs	r3, #1
 8003964:	e7b4      	b.n	80038d0 <_printf_float+0xe8>
 8003966:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800396a:	d119      	bne.n	80039a0 <_printf_float+0x1b8>
 800396c:	2900      	cmp	r1, #0
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	dd0c      	ble.n	800398c <_printf_float+0x1a4>
 8003972:	6121      	str	r1, [r4, #16]
 8003974:	b913      	cbnz	r3, 800397c <_printf_float+0x194>
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	07d2      	lsls	r2, r2, #31
 800397a:	d502      	bpl.n	8003982 <_printf_float+0x19a>
 800397c:	3301      	adds	r3, #1
 800397e:	440b      	add	r3, r1
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003984:	65a3      	str	r3, [r4, #88]	; 0x58
 8003986:	f04f 0900 	mov.w	r9, #0
 800398a:	e7d9      	b.n	8003940 <_printf_float+0x158>
 800398c:	b913      	cbnz	r3, 8003994 <_printf_float+0x1ac>
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	07d0      	lsls	r0, r2, #31
 8003992:	d501      	bpl.n	8003998 <_printf_float+0x1b0>
 8003994:	3302      	adds	r3, #2
 8003996:	e7f3      	b.n	8003980 <_printf_float+0x198>
 8003998:	2301      	movs	r3, #1
 800399a:	e7f1      	b.n	8003980 <_printf_float+0x198>
 800399c:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80039a0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80039a4:	4293      	cmp	r3, r2
 80039a6:	db05      	blt.n	80039b4 <_printf_float+0x1cc>
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	6123      	str	r3, [r4, #16]
 80039ac:	07d1      	lsls	r1, r2, #31
 80039ae:	d5e8      	bpl.n	8003982 <_printf_float+0x19a>
 80039b0:	3301      	adds	r3, #1
 80039b2:	e7e5      	b.n	8003980 <_printf_float+0x198>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bfd4      	ite	le
 80039b8:	f1c3 0302 	rsble	r3, r3, #2
 80039bc:	2301      	movgt	r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	e7de      	b.n	8003980 <_printf_float+0x198>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	055a      	lsls	r2, r3, #21
 80039c6:	d407      	bmi.n	80039d8 <_printf_float+0x1f0>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	4642      	mov	r2, r8
 80039cc:	4631      	mov	r1, r6
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	d12b      	bne.n	8003a2e <_printf_float+0x246>
 80039d6:	e764      	b.n	80038a2 <_printf_float+0xba>
 80039d8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80039dc:	f240 80dd 	bls.w	8003b9a <_printf_float+0x3b2>
 80039e0:	2200      	movs	r2, #0
 80039e2:	2300      	movs	r3, #0
 80039e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039e8:	f7fd f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d033      	beq.n	8003a58 <_printf_float+0x270>
 80039f0:	2301      	movs	r3, #1
 80039f2:	4a42      	ldr	r2, [pc, #264]	; (8003afc <_printf_float+0x314>)
 80039f4:	4631      	mov	r1, r6
 80039f6:	4628      	mov	r0, r5
 80039f8:	47b8      	blx	r7
 80039fa:	3001      	adds	r0, #1
 80039fc:	f43f af51 	beq.w	80038a2 <_printf_float+0xba>
 8003a00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a04:	429a      	cmp	r2, r3
 8003a06:	db02      	blt.n	8003a0e <_printf_float+0x226>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	07d8      	lsls	r0, r3, #31
 8003a0c:	d50f      	bpl.n	8003a2e <_printf_float+0x246>
 8003a0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	f43f af42 	beq.w	80038a2 <_printf_float+0xba>
 8003a1e:	f04f 0800 	mov.w	r8, #0
 8003a22:	f104 091a 	add.w	r9, r4, #26
 8003a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4543      	cmp	r3, r8
 8003a2c:	dc09      	bgt.n	8003a42 <_printf_float+0x25a>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	f100 8104 	bmi.w	8003c3e <_printf_float+0x456>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	bfb8      	it	lt
 8003a3e:	4618      	movlt	r0, r3
 8003a40:	e731      	b.n	80038a6 <_printf_float+0xbe>
 8003a42:	2301      	movs	r3, #1
 8003a44:	464a      	mov	r2, r9
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f af28 	beq.w	80038a2 <_printf_float+0xba>
 8003a52:	f108 0801 	add.w	r8, r8, #1
 8003a56:	e7e6      	b.n	8003a26 <_printf_float+0x23e>
 8003a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	dc2b      	bgt.n	8003ab6 <_printf_float+0x2ce>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4a26      	ldr	r2, [pc, #152]	; (8003afc <_printf_float+0x314>)
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f43f af1a 	beq.w	80038a2 <_printf_float+0xba>
 8003a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a70:	b923      	cbnz	r3, 8003a7c <_printf_float+0x294>
 8003a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a74:	b913      	cbnz	r3, 8003a7c <_printf_float+0x294>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	07d9      	lsls	r1, r3, #31
 8003a7a:	d5d8      	bpl.n	8003a2e <_printf_float+0x246>
 8003a7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a80:	4631      	mov	r1, r6
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b8      	blx	r7
 8003a86:	3001      	adds	r0, #1
 8003a88:	f43f af0b 	beq.w	80038a2 <_printf_float+0xba>
 8003a8c:	f04f 0900 	mov.w	r9, #0
 8003a90:	f104 0a1a 	add.w	sl, r4, #26
 8003a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a96:	425b      	negs	r3, r3
 8003a98:	454b      	cmp	r3, r9
 8003a9a:	dc01      	bgt.n	8003aa0 <_printf_float+0x2b8>
 8003a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a9e:	e794      	b.n	80039ca <_printf_float+0x1e2>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4652      	mov	r2, sl
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b8      	blx	r7
 8003aaa:	3001      	adds	r0, #1
 8003aac:	f43f aef9 	beq.w	80038a2 <_printf_float+0xba>
 8003ab0:	f109 0901 	add.w	r9, r9, #1
 8003ab4:	e7ee      	b.n	8003a94 <_printf_float+0x2ac>
 8003ab6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003aba:	429a      	cmp	r2, r3
 8003abc:	bfa8      	it	ge
 8003abe:	461a      	movge	r2, r3
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	4691      	mov	r9, r2
 8003ac4:	dd07      	ble.n	8003ad6 <_printf_float+0x2ee>
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4642      	mov	r2, r8
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f aee6 	beq.w	80038a2 <_printf_float+0xba>
 8003ad6:	f104 031a 	add.w	r3, r4, #26
 8003ada:	f04f 0b00 	mov.w	fp, #0
 8003ade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ae4:	e016      	b.n	8003b14 <_printf_float+0x32c>
 8003ae6:	bf00      	nop
 8003ae8:	7fefffff 	.word	0x7fefffff
 8003aec:	08005dd4 	.word	0x08005dd4
 8003af0:	08005dd0 	.word	0x08005dd0
 8003af4:	08005ddc 	.word	0x08005ddc
 8003af8:	08005dd8 	.word	0x08005dd8
 8003afc:	08005de0 	.word	0x08005de0
 8003b00:	2301      	movs	r3, #1
 8003b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	47b8      	blx	r7
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f43f aec9 	beq.w	80038a2 <_printf_float+0xba>
 8003b10:	f10b 0b01 	add.w	fp, fp, #1
 8003b14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b18:	ebaa 0309 	sub.w	r3, sl, r9
 8003b1c:	455b      	cmp	r3, fp
 8003b1e:	dcef      	bgt.n	8003b00 <_printf_float+0x318>
 8003b20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b24:	429a      	cmp	r2, r3
 8003b26:	44d0      	add	r8, sl
 8003b28:	db15      	blt.n	8003b56 <_printf_float+0x36e>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	07da      	lsls	r2, r3, #31
 8003b2e:	d412      	bmi.n	8003b56 <_printf_float+0x36e>
 8003b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b34:	eba3 020a 	sub.w	r2, r3, sl
 8003b38:	eba3 0a01 	sub.w	sl, r3, r1
 8003b3c:	4592      	cmp	sl, r2
 8003b3e:	bfa8      	it	ge
 8003b40:	4692      	movge	sl, r2
 8003b42:	f1ba 0f00 	cmp.w	sl, #0
 8003b46:	dc0e      	bgt.n	8003b66 <_printf_float+0x37e>
 8003b48:	f04f 0800 	mov.w	r8, #0
 8003b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b50:	f104 091a 	add.w	r9, r4, #26
 8003b54:	e019      	b.n	8003b8a <_printf_float+0x3a2>
 8003b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b8      	blx	r7
 8003b60:	3001      	adds	r0, #1
 8003b62:	d1e5      	bne.n	8003b30 <_printf_float+0x348>
 8003b64:	e69d      	b.n	80038a2 <_printf_float+0xba>
 8003b66:	4653      	mov	r3, sl
 8003b68:	4642      	mov	r2, r8
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	47b8      	blx	r7
 8003b70:	3001      	adds	r0, #1
 8003b72:	d1e9      	bne.n	8003b48 <_printf_float+0x360>
 8003b74:	e695      	b.n	80038a2 <_printf_float+0xba>
 8003b76:	2301      	movs	r3, #1
 8003b78:	464a      	mov	r2, r9
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b8      	blx	r7
 8003b80:	3001      	adds	r0, #1
 8003b82:	f43f ae8e 	beq.w	80038a2 <_printf_float+0xba>
 8003b86:	f108 0801 	add.w	r8, r8, #1
 8003b8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	eba3 030a 	sub.w	r3, r3, sl
 8003b94:	4543      	cmp	r3, r8
 8003b96:	dcee      	bgt.n	8003b76 <_printf_float+0x38e>
 8003b98:	e749      	b.n	8003a2e <_printf_float+0x246>
 8003b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b9c:	2a01      	cmp	r2, #1
 8003b9e:	dc01      	bgt.n	8003ba4 <_printf_float+0x3bc>
 8003ba0:	07db      	lsls	r3, r3, #31
 8003ba2:	d53a      	bpl.n	8003c1a <_printf_float+0x432>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4642      	mov	r2, r8
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b8      	blx	r7
 8003bae:	3001      	adds	r0, #1
 8003bb0:	f43f ae77 	beq.w	80038a2 <_printf_float+0xba>
 8003bb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bb8:	4631      	mov	r1, r6
 8003bba:	4628      	mov	r0, r5
 8003bbc:	47b8      	blx	r7
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f108 0801 	add.w	r8, r8, #1
 8003bc4:	f43f ae6d 	beq.w	80038a2 <_printf_float+0xba>
 8003bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8003bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f7fc ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8003bda:	b9c8      	cbnz	r0, 8003c10 <_printf_float+0x428>
 8003bdc:	4653      	mov	r3, sl
 8003bde:	4642      	mov	r2, r8
 8003be0:	4631      	mov	r1, r6
 8003be2:	4628      	mov	r0, r5
 8003be4:	47b8      	blx	r7
 8003be6:	3001      	adds	r0, #1
 8003be8:	d10e      	bne.n	8003c08 <_printf_float+0x420>
 8003bea:	e65a      	b.n	80038a2 <_printf_float+0xba>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4652      	mov	r2, sl
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f ae53 	beq.w	80038a2 <_printf_float+0xba>
 8003bfc:	f108 0801 	add.w	r8, r8, #1
 8003c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4543      	cmp	r3, r8
 8003c06:	dcf1      	bgt.n	8003bec <_printf_float+0x404>
 8003c08:	464b      	mov	r3, r9
 8003c0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c0e:	e6dd      	b.n	80039cc <_printf_float+0x1e4>
 8003c10:	f04f 0800 	mov.w	r8, #0
 8003c14:	f104 0a1a 	add.w	sl, r4, #26
 8003c18:	e7f2      	b.n	8003c00 <_printf_float+0x418>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e7df      	b.n	8003bde <_printf_float+0x3f6>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	464a      	mov	r2, r9
 8003c22:	4631      	mov	r1, r6
 8003c24:	4628      	mov	r0, r5
 8003c26:	47b8      	blx	r7
 8003c28:	3001      	adds	r0, #1
 8003c2a:	f43f ae3a 	beq.w	80038a2 <_printf_float+0xba>
 8003c2e:	f108 0801 	add.w	r8, r8, #1
 8003c32:	68e3      	ldr	r3, [r4, #12]
 8003c34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	4543      	cmp	r3, r8
 8003c3a:	dcf0      	bgt.n	8003c1e <_printf_float+0x436>
 8003c3c:	e6fb      	b.n	8003a36 <_printf_float+0x24e>
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	f104 0919 	add.w	r9, r4, #25
 8003c46:	e7f4      	b.n	8003c32 <_printf_float+0x44a>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f43f ae8a 	beq.w	8003962 <_printf_float+0x17a>
 8003c4e:	f04f 0c00 	mov.w	ip, #0
 8003c52:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003c56:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 8003c60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f7ff fd2a 	bl	80036c4 <__cvt>
 8003c70:	4680      	mov	r8, r0
 8003c72:	e645      	b.n	8003900 <_printf_float+0x118>

08003c74 <_printf_common>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	4691      	mov	r9, r2
 8003c7a:	461f      	mov	r7, r3
 8003c7c:	688a      	ldr	r2, [r1, #8]
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bfb8      	it	lt
 8003c88:	4613      	movlt	r3, r2
 8003c8a:	f8c9 3000 	str.w	r3, [r9]
 8003c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c92:	4606      	mov	r6, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	b112      	cbz	r2, 8003c9e <_printf_common+0x2a>
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f8c9 3000 	str.w	r3, [r9]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	0699      	lsls	r1, r3, #26
 8003ca2:	bf42      	ittt	mi
 8003ca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ca8:	3302      	addmi	r3, #2
 8003caa:	f8c9 3000 	strmi.w	r3, [r9]
 8003cae:	6825      	ldr	r5, [r4, #0]
 8003cb0:	f015 0506 	ands.w	r5, r5, #6
 8003cb4:	d107      	bne.n	8003cc6 <_printf_common+0x52>
 8003cb6:	f104 0a19 	add.w	sl, r4, #25
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	42ab      	cmp	r3, r5
 8003cc4:	dc28      	bgt.n	8003d18 <_printf_common+0xa4>
 8003cc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	3300      	adds	r3, #0
 8003cce:	bf18      	it	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	0692      	lsls	r2, r2, #26
 8003cd4:	d42d      	bmi.n	8003d32 <_printf_common+0xbe>
 8003cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cda:	4639      	mov	r1, r7
 8003cdc:	4630      	mov	r0, r6
 8003cde:	47c0      	blx	r8
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d020      	beq.n	8003d26 <_printf_common+0xb2>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	68e5      	ldr	r5, [r4, #12]
 8003ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8003cec:	f003 0306 	and.w	r3, r3, #6
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	bf08      	it	eq
 8003cf4:	1aad      	subeq	r5, r5, r2
 8003cf6:	68a3      	ldr	r3, [r4, #8]
 8003cf8:	6922      	ldr	r2, [r4, #16]
 8003cfa:	bf0c      	ite	eq
 8003cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d00:	2500      	movne	r5, #0
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bfc4      	itt	gt
 8003d06:	1a9b      	subgt	r3, r3, r2
 8003d08:	18ed      	addgt	r5, r5, r3
 8003d0a:	f04f 0900 	mov.w	r9, #0
 8003d0e:	341a      	adds	r4, #26
 8003d10:	454d      	cmp	r5, r9
 8003d12:	d11a      	bne.n	8003d4a <_printf_common+0xd6>
 8003d14:	2000      	movs	r0, #0
 8003d16:	e008      	b.n	8003d2a <_printf_common+0xb6>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4652      	mov	r2, sl
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	47c0      	blx	r8
 8003d22:	3001      	adds	r0, #1
 8003d24:	d103      	bne.n	8003d2e <_printf_common+0xba>
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2e:	3501      	adds	r5, #1
 8003d30:	e7c3      	b.n	8003cba <_printf_common+0x46>
 8003d32:	18e1      	adds	r1, r4, r3
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	2030      	movs	r0, #48	; 0x30
 8003d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d3c:	4422      	add	r2, r4
 8003d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d46:	3302      	adds	r3, #2
 8003d48:	e7c5      	b.n	8003cd6 <_printf_common+0x62>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	4639      	mov	r1, r7
 8003d50:	4630      	mov	r0, r6
 8003d52:	47c0      	blx	r8
 8003d54:	3001      	adds	r0, #1
 8003d56:	d0e6      	beq.n	8003d26 <_printf_common+0xb2>
 8003d58:	f109 0901 	add.w	r9, r9, #1
 8003d5c:	e7d8      	b.n	8003d10 <_printf_common+0x9c>
	...

08003d60 <_printf_i>:
 8003d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d68:	460c      	mov	r4, r1
 8003d6a:	7e09      	ldrb	r1, [r1, #24]
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	296e      	cmp	r1, #110	; 0x6e
 8003d70:	4617      	mov	r7, r2
 8003d72:	4606      	mov	r6, r0
 8003d74:	4698      	mov	r8, r3
 8003d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d78:	f000 80b3 	beq.w	8003ee2 <_printf_i+0x182>
 8003d7c:	d822      	bhi.n	8003dc4 <_printf_i+0x64>
 8003d7e:	2963      	cmp	r1, #99	; 0x63
 8003d80:	d036      	beq.n	8003df0 <_printf_i+0x90>
 8003d82:	d80a      	bhi.n	8003d9a <_printf_i+0x3a>
 8003d84:	2900      	cmp	r1, #0
 8003d86:	f000 80b9 	beq.w	8003efc <_printf_i+0x19c>
 8003d8a:	2958      	cmp	r1, #88	; 0x58
 8003d8c:	f000 8083 	beq.w	8003e96 <_printf_i+0x136>
 8003d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d98:	e032      	b.n	8003e00 <_printf_i+0xa0>
 8003d9a:	2964      	cmp	r1, #100	; 0x64
 8003d9c:	d001      	beq.n	8003da2 <_printf_i+0x42>
 8003d9e:	2969      	cmp	r1, #105	; 0x69
 8003da0:	d1f6      	bne.n	8003d90 <_printf_i+0x30>
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	0605      	lsls	r5, r0, #24
 8003da8:	f103 0104 	add.w	r1, r3, #4
 8003dac:	d52a      	bpl.n	8003e04 <_printf_i+0xa4>
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0x5e>
 8003db6:	222d      	movs	r2, #45	; 0x2d
 8003db8:	425b      	negs	r3, r3
 8003dba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dbe:	486f      	ldr	r0, [pc, #444]	; (8003f7c <_printf_i+0x21c>)
 8003dc0:	220a      	movs	r2, #10
 8003dc2:	e039      	b.n	8003e38 <_printf_i+0xd8>
 8003dc4:	2973      	cmp	r1, #115	; 0x73
 8003dc6:	f000 809d 	beq.w	8003f04 <_printf_i+0x1a4>
 8003dca:	d808      	bhi.n	8003dde <_printf_i+0x7e>
 8003dcc:	296f      	cmp	r1, #111	; 0x6f
 8003dce:	d020      	beq.n	8003e12 <_printf_i+0xb2>
 8003dd0:	2970      	cmp	r1, #112	; 0x70
 8003dd2:	d1dd      	bne.n	8003d90 <_printf_i+0x30>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	e003      	b.n	8003de6 <_printf_i+0x86>
 8003dde:	2975      	cmp	r1, #117	; 0x75
 8003de0:	d017      	beq.n	8003e12 <_printf_i+0xb2>
 8003de2:	2978      	cmp	r1, #120	; 0x78
 8003de4:	d1d4      	bne.n	8003d90 <_printf_i+0x30>
 8003de6:	2378      	movs	r3, #120	; 0x78
 8003de8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dec:	4864      	ldr	r0, [pc, #400]	; (8003f80 <_printf_i+0x220>)
 8003dee:	e055      	b.n	8003e9c <_printf_i+0x13c>
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	1d19      	adds	r1, r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6011      	str	r1, [r2, #0]
 8003df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e00:	2301      	movs	r3, #1
 8003e02:	e08c      	b.n	8003f1e <_printf_i+0x1be>
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6011      	str	r1, [r2, #0]
 8003e08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e0c:	bf18      	it	ne
 8003e0e:	b21b      	sxthne	r3, r3
 8003e10:	e7cf      	b.n	8003db2 <_printf_i+0x52>
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	6825      	ldr	r5, [r4, #0]
 8003e16:	1d18      	adds	r0, r3, #4
 8003e18:	6010      	str	r0, [r2, #0]
 8003e1a:	0628      	lsls	r0, r5, #24
 8003e1c:	d501      	bpl.n	8003e22 <_printf_i+0xc2>
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	e002      	b.n	8003e28 <_printf_i+0xc8>
 8003e22:	0668      	lsls	r0, r5, #25
 8003e24:	d5fb      	bpl.n	8003e1e <_printf_i+0xbe>
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4854      	ldr	r0, [pc, #336]	; (8003f7c <_printf_i+0x21c>)
 8003e2a:	296f      	cmp	r1, #111	; 0x6f
 8003e2c:	bf14      	ite	ne
 8003e2e:	220a      	movne	r2, #10
 8003e30:	2208      	moveq	r2, #8
 8003e32:	2100      	movs	r1, #0
 8003e34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e38:	6865      	ldr	r5, [r4, #4]
 8003e3a:	60a5      	str	r5, [r4, #8]
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	f2c0 8095 	blt.w	8003f6c <_printf_i+0x20c>
 8003e42:	6821      	ldr	r1, [r4, #0]
 8003e44:	f021 0104 	bic.w	r1, r1, #4
 8003e48:	6021      	str	r1, [r4, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d13d      	bne.n	8003eca <_printf_i+0x16a>
 8003e4e:	2d00      	cmp	r5, #0
 8003e50:	f040 808e 	bne.w	8003f70 <_printf_i+0x210>
 8003e54:	4665      	mov	r5, ip
 8003e56:	2a08      	cmp	r2, #8
 8003e58:	d10b      	bne.n	8003e72 <_printf_i+0x112>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	07db      	lsls	r3, r3, #31
 8003e5e:	d508      	bpl.n	8003e72 <_printf_i+0x112>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	bfde      	ittt	le
 8003e68:	2330      	movle	r3, #48	; 0x30
 8003e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e6e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e72:	ebac 0305 	sub.w	r3, ip, r5
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	f8cd 8000 	str.w	r8, [sp]
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	aa03      	add	r2, sp, #12
 8003e80:	4621      	mov	r1, r4
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff fef6 	bl	8003c74 <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d14d      	bne.n	8003f28 <_printf_i+0x1c8>
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e90:	b005      	add	sp, #20
 8003e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e96:	4839      	ldr	r0, [pc, #228]	; (8003f7c <_printf_i+0x21c>)
 8003e98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	6821      	ldr	r1, [r4, #0]
 8003ea0:	1d1d      	adds	r5, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6015      	str	r5, [r2, #0]
 8003ea6:	060a      	lsls	r2, r1, #24
 8003ea8:	d50b      	bpl.n	8003ec2 <_printf_i+0x162>
 8003eaa:	07ca      	lsls	r2, r1, #31
 8003eac:	bf44      	itt	mi
 8003eae:	f041 0120 	orrmi.w	r1, r1, #32
 8003eb2:	6021      	strmi	r1, [r4, #0]
 8003eb4:	b91b      	cbnz	r3, 8003ebe <_printf_i+0x15e>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	f022 0220 	bic.w	r2, r2, #32
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	e7b7      	b.n	8003e32 <_printf_i+0xd2>
 8003ec2:	064d      	lsls	r5, r1, #25
 8003ec4:	bf48      	it	mi
 8003ec6:	b29b      	uxthmi	r3, r3
 8003ec8:	e7ef      	b.n	8003eaa <_printf_i+0x14a>
 8003eca:	4665      	mov	r5, ip
 8003ecc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ed0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ed4:	5cc3      	ldrb	r3, [r0, r3]
 8003ed6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003eda:	460b      	mov	r3, r1
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d1f5      	bne.n	8003ecc <_printf_i+0x16c>
 8003ee0:	e7b9      	b.n	8003e56 <_printf_i+0xf6>
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	6961      	ldr	r1, [r4, #20]
 8003ee8:	1d18      	adds	r0, r3, #4
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	0628      	lsls	r0, r5, #24
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	d501      	bpl.n	8003ef6 <_printf_i+0x196>
 8003ef2:	6019      	str	r1, [r3, #0]
 8003ef4:	e002      	b.n	8003efc <_printf_i+0x19c>
 8003ef6:	066a      	lsls	r2, r5, #25
 8003ef8:	d5fb      	bpl.n	8003ef2 <_printf_i+0x192>
 8003efa:	8019      	strh	r1, [r3, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	6123      	str	r3, [r4, #16]
 8003f00:	4665      	mov	r5, ip
 8003f02:	e7b9      	b.n	8003e78 <_printf_i+0x118>
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	1d19      	adds	r1, r3, #4
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	681d      	ldr	r5, [r3, #0]
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4628      	mov	r0, r5
 8003f12:	f7fc f985 	bl	8000220 <memchr>
 8003f16:	b108      	cbz	r0, 8003f1c <_printf_i+0x1bc>
 8003f18:	1b40      	subs	r0, r0, r5
 8003f1a:	6060      	str	r0, [r4, #4]
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	2300      	movs	r3, #0
 8003f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f26:	e7a7      	b.n	8003e78 <_printf_i+0x118>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4639      	mov	r1, r7
 8003f2e:	4630      	mov	r0, r6
 8003f30:	47c0      	blx	r8
 8003f32:	3001      	adds	r0, #1
 8003f34:	d0aa      	beq.n	8003e8c <_printf_i+0x12c>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	079b      	lsls	r3, r3, #30
 8003f3a:	d413      	bmi.n	8003f64 <_printf_i+0x204>
 8003f3c:	68e0      	ldr	r0, [r4, #12]
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	4298      	cmp	r0, r3
 8003f42:	bfb8      	it	lt
 8003f44:	4618      	movlt	r0, r3
 8003f46:	e7a3      	b.n	8003e90 <_printf_i+0x130>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	464a      	mov	r2, r9
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	4630      	mov	r0, r6
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d09a      	beq.n	8003e8c <_printf_i+0x12c>
 8003f56:	3501      	adds	r5, #1
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	9a03      	ldr	r2, [sp, #12]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	42ab      	cmp	r3, r5
 8003f60:	dcf2      	bgt.n	8003f48 <_printf_i+0x1e8>
 8003f62:	e7eb      	b.n	8003f3c <_printf_i+0x1dc>
 8003f64:	2500      	movs	r5, #0
 8003f66:	f104 0919 	add.w	r9, r4, #25
 8003f6a:	e7f5      	b.n	8003f58 <_printf_i+0x1f8>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ac      	bne.n	8003eca <_printf_i+0x16a>
 8003f70:	7803      	ldrb	r3, [r0, #0]
 8003f72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7a:	e76c      	b.n	8003e56 <_printf_i+0xf6>
 8003f7c:	08005de2 	.word	0x08005de2
 8003f80:	08005df3 	.word	0x08005df3

08003f84 <iprintf>:
 8003f84:	b40f      	push	{r0, r1, r2, r3}
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <iprintf+0x2c>)
 8003f88:	b513      	push	{r0, r1, r4, lr}
 8003f8a:	681c      	ldr	r4, [r3, #0]
 8003f8c:	b124      	cbz	r4, 8003f98 <iprintf+0x14>
 8003f8e:	69a3      	ldr	r3, [r4, #24]
 8003f90:	b913      	cbnz	r3, 8003f98 <iprintf+0x14>
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 fe9a 	bl	8004ccc <__sinit>
 8003f98:	ab05      	add	r3, sp, #20
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	68a1      	ldr	r1, [r4, #8]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f001 faf9 	bl	8005598 <_vfiprintf_r>
 8003fa6:	b002      	add	sp, #8
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	b004      	add	sp, #16
 8003fae:	4770      	bx	lr
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <quorem>:
 8003fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	6903      	ldr	r3, [r0, #16]
 8003fba:	690c      	ldr	r4, [r1, #16]
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	4680      	mov	r8, r0
 8003fc0:	f2c0 8082 	blt.w	80040c8 <quorem+0x114>
 8003fc4:	3c01      	subs	r4, #1
 8003fc6:	f101 0714 	add.w	r7, r1, #20
 8003fca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003fce:	f100 0614 	add.w	r6, r0, #20
 8003fd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003fd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003fda:	eb06 030c 	add.w	r3, r6, ip
 8003fde:	3501      	adds	r5, #1
 8003fe0:	eb07 090c 	add.w	r9, r7, ip
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	fbb0 f5f5 	udiv	r5, r0, r5
 8003fea:	b395      	cbz	r5, 8004052 <quorem+0x9e>
 8003fec:	f04f 0a00 	mov.w	sl, #0
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	46b6      	mov	lr, r6
 8003ff4:	46d3      	mov	fp, sl
 8003ff6:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ffa:	b293      	uxth	r3, r2
 8003ffc:	fb05 a303 	mla	r3, r5, r3, sl
 8004000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004004:	b29b      	uxth	r3, r3
 8004006:	ebab 0303 	sub.w	r3, fp, r3
 800400a:	0c12      	lsrs	r2, r2, #16
 800400c:	f8de b000 	ldr.w	fp, [lr]
 8004010:	fb05 a202 	mla	r2, r5, r2, sl
 8004014:	fa13 f38b 	uxtah	r3, r3, fp
 8004018:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800401c:	fa1f fb82 	uxth.w	fp, r2
 8004020:	f8de 2000 	ldr.w	r2, [lr]
 8004024:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800402c:	b29b      	uxth	r3, r3
 800402e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004032:	4581      	cmp	r9, r0
 8004034:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004038:	f84e 3b04 	str.w	r3, [lr], #4
 800403c:	d2db      	bcs.n	8003ff6 <quorem+0x42>
 800403e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004042:	b933      	cbnz	r3, 8004052 <quorem+0x9e>
 8004044:	9b01      	ldr	r3, [sp, #4]
 8004046:	3b04      	subs	r3, #4
 8004048:	429e      	cmp	r6, r3
 800404a:	461a      	mov	r2, r3
 800404c:	d330      	bcc.n	80040b0 <quorem+0xfc>
 800404e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004052:	4640      	mov	r0, r8
 8004054:	f001 f8fa 	bl	800524c <__mcmp>
 8004058:	2800      	cmp	r0, #0
 800405a:	db25      	blt.n	80040a8 <quorem+0xf4>
 800405c:	3501      	adds	r5, #1
 800405e:	4630      	mov	r0, r6
 8004060:	f04f 0c00 	mov.w	ip, #0
 8004064:	f857 2b04 	ldr.w	r2, [r7], #4
 8004068:	f8d0 e000 	ldr.w	lr, [r0]
 800406c:	b293      	uxth	r3, r2
 800406e:	ebac 0303 	sub.w	r3, ip, r3
 8004072:	0c12      	lsrs	r2, r2, #16
 8004074:	fa13 f38e 	uxtah	r3, r3, lr
 8004078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800407c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004080:	b29b      	uxth	r3, r3
 8004082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004086:	45b9      	cmp	r9, r7
 8004088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800408c:	f840 3b04 	str.w	r3, [r0], #4
 8004090:	d2e8      	bcs.n	8004064 <quorem+0xb0>
 8004092:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004096:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800409a:	b92a      	cbnz	r2, 80040a8 <quorem+0xf4>
 800409c:	3b04      	subs	r3, #4
 800409e:	429e      	cmp	r6, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	d30b      	bcc.n	80040bc <quorem+0x108>
 80040a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80040a8:	4628      	mov	r0, r5
 80040aa:	b003      	add	sp, #12
 80040ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	3b04      	subs	r3, #4
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d1ca      	bne.n	800404e <quorem+0x9a>
 80040b8:	3c01      	subs	r4, #1
 80040ba:	e7c5      	b.n	8004048 <quorem+0x94>
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	3b04      	subs	r3, #4
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d1ef      	bne.n	80040a4 <quorem+0xf0>
 80040c4:	3c01      	subs	r4, #1
 80040c6:	e7ea      	b.n	800409e <quorem+0xea>
 80040c8:	2000      	movs	r0, #0
 80040ca:	e7ee      	b.n	80040aa <quorem+0xf6>
 80040cc:	0000      	movs	r0, r0
	...

080040d0 <_dtoa_r>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040d6:	b097      	sub	sp, #92	; 0x5c
 80040d8:	4616      	mov	r6, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	4604      	mov	r4, r0
 80040de:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80040e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80040e6:	b93d      	cbnz	r5, 80040f8 <_dtoa_r+0x28>
 80040e8:	2010      	movs	r0, #16
 80040ea:	f000 fe87 	bl	8004dfc <malloc>
 80040ee:	6260      	str	r0, [r4, #36]	; 0x24
 80040f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040f4:	6005      	str	r5, [r0, #0]
 80040f6:	60c5      	str	r5, [r0, #12]
 80040f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	b151      	cbz	r1, 8004114 <_dtoa_r+0x44>
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	604a      	str	r2, [r1, #4]
 8004102:	2301      	movs	r3, #1
 8004104:	4093      	lsls	r3, r2
 8004106:	608b      	str	r3, [r1, #8]
 8004108:	4620      	mov	r0, r4
 800410a:	f000 febe 	bl	8004e8a <_Bfree>
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	1e3b      	subs	r3, r7, #0
 8004116:	bfbb      	ittet	lt
 8004118:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800411c:	9303      	strlt	r3, [sp, #12]
 800411e:	2300      	movge	r3, #0
 8004120:	2201      	movlt	r2, #1
 8004122:	bfac      	ite	ge
 8004124:	f8c8 3000 	strge.w	r3, [r8]
 8004128:	f8c8 2000 	strlt.w	r2, [r8]
 800412c:	4bb2      	ldr	r3, [pc, #712]	; (80043f8 <_dtoa_r+0x328>)
 800412e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004132:	ea33 0308 	bics.w	r3, r3, r8
 8004136:	d11b      	bne.n	8004170 <_dtoa_r+0xa0>
 8004138:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800413a:	f242 730f 	movw	r3, #9999	; 0x270f
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	b923      	cbnz	r3, 800414e <_dtoa_r+0x7e>
 8004144:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004148:	2800      	cmp	r0, #0
 800414a:	f000 854f 	beq.w	8004bec <_dtoa_r+0xb1c>
 800414e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004150:	b953      	cbnz	r3, 8004168 <_dtoa_r+0x98>
 8004152:	4baa      	ldr	r3, [pc, #680]	; (80043fc <_dtoa_r+0x32c>)
 8004154:	e021      	b.n	800419a <_dtoa_r+0xca>
 8004156:	4baa      	ldr	r3, [pc, #680]	; (8004400 <_dtoa_r+0x330>)
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	3308      	adds	r3, #8
 800415c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	9805      	ldr	r0, [sp, #20]
 8004162:	b017      	add	sp, #92	; 0x5c
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	4ba4      	ldr	r3, [pc, #656]	; (80043fc <_dtoa_r+0x32c>)
 800416a:	9305      	str	r3, [sp, #20]
 800416c:	3303      	adds	r3, #3
 800416e:	e7f5      	b.n	800415c <_dtoa_r+0x8c>
 8004170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	2300      	movs	r3, #0
 8004178:	4630      	mov	r0, r6
 800417a:	4639      	mov	r1, r7
 800417c:	f7fc fcc4 	bl	8000b08 <__aeabi_dcmpeq>
 8004180:	4682      	mov	sl, r0
 8004182:	b160      	cbz	r0, 800419e <_dtoa_r+0xce>
 8004184:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004186:	2301      	movs	r3, #1
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 852a 	beq.w	8004be6 <_dtoa_r+0xb16>
 8004192:	4b9c      	ldr	r3, [pc, #624]	; (8004404 <_dtoa_r+0x334>)
 8004194:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	9305      	str	r3, [sp, #20]
 800419c:	e7e0      	b.n	8004160 <_dtoa_r+0x90>
 800419e:	ab14      	add	r3, sp, #80	; 0x50
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	ab15      	add	r3, sp, #84	; 0x54
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	4632      	mov	r2, r6
 80041a8:	463b      	mov	r3, r7
 80041aa:	4620      	mov	r0, r4
 80041ac:	f001 f8c5 	bl	800533a <__d2b>
 80041b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041b4:	4683      	mov	fp, r0
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	d07c      	beq.n	80042b4 <_dtoa_r+0x1e4>
 80041ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041be:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80041c2:	46b0      	mov	r8, r6
 80041c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80041c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80041cc:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80041d0:	2200      	movs	r2, #0
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <_dtoa_r+0x338>)
 80041d4:	4640      	mov	r0, r8
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fc f876 	bl	80002c8 <__aeabi_dsub>
 80041dc:	a380      	add	r3, pc, #512	; (adr r3, 80043e0 <_dtoa_r+0x310>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fc fa29 	bl	8000638 <__aeabi_dmul>
 80041e6:	a380      	add	r3, pc, #512	; (adr r3, 80043e8 <_dtoa_r+0x318>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f86e 	bl	80002cc <__adddf3>
 80041f0:	4606      	mov	r6, r0
 80041f2:	4628      	mov	r0, r5
 80041f4:	460f      	mov	r7, r1
 80041f6:	f7fc f9b5 	bl	8000564 <__aeabi_i2d>
 80041fa:	a37d      	add	r3, pc, #500	; (adr r3, 80043f0 <_dtoa_r+0x320>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fc fa1a 	bl	8000638 <__aeabi_dmul>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4630      	mov	r0, r6
 800420a:	4639      	mov	r1, r7
 800420c:	f7fc f85e 	bl	80002cc <__adddf3>
 8004210:	4606      	mov	r6, r0
 8004212:	460f      	mov	r7, r1
 8004214:	f7fc fcc0 	bl	8000b98 <__aeabi_d2iz>
 8004218:	2200      	movs	r2, #0
 800421a:	4682      	mov	sl, r0
 800421c:	2300      	movs	r3, #0
 800421e:	4630      	mov	r0, r6
 8004220:	4639      	mov	r1, r7
 8004222:	f7fc fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8004226:	b148      	cbz	r0, 800423c <_dtoa_r+0x16c>
 8004228:	4650      	mov	r0, sl
 800422a:	f7fc f99b 	bl	8000564 <__aeabi_i2d>
 800422e:	4632      	mov	r2, r6
 8004230:	463b      	mov	r3, r7
 8004232:	f7fc fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8004236:	b908      	cbnz	r0, 800423c <_dtoa_r+0x16c>
 8004238:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800423c:	f1ba 0f16 	cmp.w	sl, #22
 8004240:	d859      	bhi.n	80042f6 <_dtoa_r+0x226>
 8004242:	4972      	ldr	r1, [pc, #456]	; (800440c <_dtoa_r+0x33c>)
 8004244:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800424c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004250:	f7fc fc82 	bl	8000b58 <__aeabi_dcmpgt>
 8004254:	2800      	cmp	r0, #0
 8004256:	d050      	beq.n	80042fa <_dtoa_r+0x22a>
 8004258:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800425c:	2300      	movs	r3, #0
 800425e:	9312      	str	r3, [sp, #72]	; 0x48
 8004260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004262:	1b5d      	subs	r5, r3, r5
 8004264:	f1b5 0801 	subs.w	r8, r5, #1
 8004268:	bf49      	itett	mi
 800426a:	f1c5 0301 	rsbmi	r3, r5, #1
 800426e:	2300      	movpl	r3, #0
 8004270:	9308      	strmi	r3, [sp, #32]
 8004272:	f04f 0800 	movmi.w	r8, #0
 8004276:	bf58      	it	pl
 8004278:	9308      	strpl	r3, [sp, #32]
 800427a:	f1ba 0f00 	cmp.w	sl, #0
 800427e:	db3e      	blt.n	80042fe <_dtoa_r+0x22e>
 8004280:	2300      	movs	r3, #0
 8004282:	44d0      	add	r8, sl
 8004284:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004288:	9309      	str	r3, [sp, #36]	; 0x24
 800428a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800428c:	2b09      	cmp	r3, #9
 800428e:	f200 8090 	bhi.w	80043b2 <_dtoa_r+0x2e2>
 8004292:	2b05      	cmp	r3, #5
 8004294:	bfc4      	itt	gt
 8004296:	3b04      	subgt	r3, #4
 8004298:	9320      	strgt	r3, [sp, #128]	; 0x80
 800429a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800429c:	f1a3 0302 	sub.w	r3, r3, #2
 80042a0:	bfcc      	ite	gt
 80042a2:	2500      	movgt	r5, #0
 80042a4:	2501      	movle	r5, #1
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	f200 808f 	bhi.w	80043ca <_dtoa_r+0x2fa>
 80042ac:	e8df f003 	tbb	[pc, r3]
 80042b0:	71317f7d 	.word	0x71317f7d
 80042b4:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80042b8:	441d      	add	r5, r3
 80042ba:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80042be:	2820      	cmp	r0, #32
 80042c0:	dd13      	ble.n	80042ea <_dtoa_r+0x21a>
 80042c2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	fa08 f800 	lsl.w	r8, r8, r0
 80042cc:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80042d0:	fa23 f000 	lsr.w	r0, r3, r0
 80042d4:	ea48 0000 	orr.w	r0, r8, r0
 80042d8:	f7fc f934 	bl	8000544 <__aeabi_ui2d>
 80042dc:	2301      	movs	r3, #1
 80042de:	4680      	mov	r8, r0
 80042e0:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80042e4:	3d01      	subs	r5, #1
 80042e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80042e8:	e772      	b.n	80041d0 <_dtoa_r+0x100>
 80042ea:	9b02      	ldr	r3, [sp, #8]
 80042ec:	f1c0 0020 	rsb	r0, r0, #32
 80042f0:	fa03 f000 	lsl.w	r0, r3, r0
 80042f4:	e7f0      	b.n	80042d8 <_dtoa_r+0x208>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e7b1      	b.n	800425e <_dtoa_r+0x18e>
 80042fa:	9012      	str	r0, [sp, #72]	; 0x48
 80042fc:	e7b0      	b.n	8004260 <_dtoa_r+0x190>
 80042fe:	9b08      	ldr	r3, [sp, #32]
 8004300:	eba3 030a 	sub.w	r3, r3, sl
 8004304:	9308      	str	r3, [sp, #32]
 8004306:	f1ca 0300 	rsb	r3, sl, #0
 800430a:	9309      	str	r3, [sp, #36]	; 0x24
 800430c:	2300      	movs	r3, #0
 800430e:	930d      	str	r3, [sp, #52]	; 0x34
 8004310:	e7bb      	b.n	800428a <_dtoa_r+0x1ba>
 8004312:	2301      	movs	r3, #1
 8004314:	930c      	str	r3, [sp, #48]	; 0x30
 8004316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004318:	2b00      	cmp	r3, #0
 800431a:	dd59      	ble.n	80043d0 <_dtoa_r+0x300>
 800431c:	9306      	str	r3, [sp, #24]
 800431e:	4699      	mov	r9, r3
 8004320:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004322:	2200      	movs	r2, #0
 8004324:	6072      	str	r2, [r6, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	f102 0014 	add.w	r0, r2, #20
 800432c:	4298      	cmp	r0, r3
 800432e:	6871      	ldr	r1, [r6, #4]
 8004330:	d970      	bls.n	8004414 <_dtoa_r+0x344>
 8004332:	4620      	mov	r0, r4
 8004334:	f000 fd75 	bl	8004e22 <_Balloc>
 8004338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800433a:	6030      	str	r0, [r6, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9305      	str	r3, [sp, #20]
 8004340:	f1b9 0f0e 	cmp.w	r9, #14
 8004344:	f200 80eb 	bhi.w	800451e <_dtoa_r+0x44e>
 8004348:	2d00      	cmp	r5, #0
 800434a:	f000 80e8 	beq.w	800451e <_dtoa_r+0x44e>
 800434e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004352:	f1ba 0f00 	cmp.w	sl, #0
 8004356:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800435a:	dd79      	ble.n	8004450 <_dtoa_r+0x380>
 800435c:	4a2b      	ldr	r2, [pc, #172]	; (800440c <_dtoa_r+0x33c>)
 800435e:	f00a 030f 	and.w	r3, sl, #15
 8004362:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004366:	ed93 7b00 	vldr	d7, [r3]
 800436a:	ea4f 162a 	mov.w	r6, sl, asr #4
 800436e:	06f0      	lsls	r0, r6, #27
 8004370:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004374:	d56a      	bpl.n	800444c <_dtoa_r+0x37c>
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <_dtoa_r+0x340>)
 8004378:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800437c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004380:	f7fc fa84 	bl	800088c <__aeabi_ddiv>
 8004384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004388:	f006 060f 	and.w	r6, r6, #15
 800438c:	2503      	movs	r5, #3
 800438e:	4f20      	ldr	r7, [pc, #128]	; (8004410 <_dtoa_r+0x340>)
 8004390:	e051      	b.n	8004436 <_dtoa_r+0x366>
 8004392:	2301      	movs	r3, #1
 8004394:	930c      	str	r3, [sp, #48]	; 0x30
 8004396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004398:	4453      	add	r3, sl
 800439a:	f103 0901 	add.w	r9, r3, #1
 800439e:	9306      	str	r3, [sp, #24]
 80043a0:	464b      	mov	r3, r9
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	bfb8      	it	lt
 80043a6:	2301      	movlt	r3, #1
 80043a8:	e7ba      	b.n	8004320 <_dtoa_r+0x250>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e7b2      	b.n	8004314 <_dtoa_r+0x244>
 80043ae:	2300      	movs	r3, #0
 80043b0:	e7f0      	b.n	8004394 <_dtoa_r+0x2c4>
 80043b2:	2501      	movs	r5, #1
 80043b4:	2300      	movs	r3, #0
 80043b6:	9320      	str	r3, [sp, #128]	; 0x80
 80043b8:	950c      	str	r5, [sp, #48]	; 0x30
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	9306      	str	r3, [sp, #24]
 80043c0:	4699      	mov	r9, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	2312      	movs	r3, #18
 80043c6:	9221      	str	r2, [sp, #132]	; 0x84
 80043c8:	e7aa      	b.n	8004320 <_dtoa_r+0x250>
 80043ca:	2301      	movs	r3, #1
 80043cc:	930c      	str	r3, [sp, #48]	; 0x30
 80043ce:	e7f4      	b.n	80043ba <_dtoa_r+0x2ea>
 80043d0:	2301      	movs	r3, #1
 80043d2:	9306      	str	r3, [sp, #24]
 80043d4:	4699      	mov	r9, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	e7f5      	b.n	80043c6 <_dtoa_r+0x2f6>
 80043da:	bf00      	nop
 80043dc:	f3af 8000 	nop.w
 80043e0:	636f4361 	.word	0x636f4361
 80043e4:	3fd287a7 	.word	0x3fd287a7
 80043e8:	8b60c8b3 	.word	0x8b60c8b3
 80043ec:	3fc68a28 	.word	0x3fc68a28
 80043f0:	509f79fb 	.word	0x509f79fb
 80043f4:	3fd34413 	.word	0x3fd34413
 80043f8:	7ff00000 	.word	0x7ff00000
 80043fc:	08005e0d 	.word	0x08005e0d
 8004400:	08005e04 	.word	0x08005e04
 8004404:	08005de1 	.word	0x08005de1
 8004408:	3ff80000 	.word	0x3ff80000
 800440c:	08005ea0 	.word	0x08005ea0
 8004410:	08005e78 	.word	0x08005e78
 8004414:	3101      	adds	r1, #1
 8004416:	6071      	str	r1, [r6, #4]
 8004418:	0052      	lsls	r2, r2, #1
 800441a:	e785      	b.n	8004328 <_dtoa_r+0x258>
 800441c:	07f1      	lsls	r1, r6, #31
 800441e:	d508      	bpl.n	8004432 <_dtoa_r+0x362>
 8004420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004428:	f7fc f906 	bl	8000638 <__aeabi_dmul>
 800442c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004430:	3501      	adds	r5, #1
 8004432:	1076      	asrs	r6, r6, #1
 8004434:	3708      	adds	r7, #8
 8004436:	2e00      	cmp	r6, #0
 8004438:	d1f0      	bne.n	800441c <_dtoa_r+0x34c>
 800443a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800443e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004442:	f7fc fa23 	bl	800088c <__aeabi_ddiv>
 8004446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800444a:	e01a      	b.n	8004482 <_dtoa_r+0x3b2>
 800444c:	2502      	movs	r5, #2
 800444e:	e79e      	b.n	800438e <_dtoa_r+0x2be>
 8004450:	f000 80a0 	beq.w	8004594 <_dtoa_r+0x4c4>
 8004454:	f1ca 0600 	rsb	r6, sl, #0
 8004458:	4b9f      	ldr	r3, [pc, #636]	; (80046d8 <_dtoa_r+0x608>)
 800445a:	4fa0      	ldr	r7, [pc, #640]	; (80046dc <_dtoa_r+0x60c>)
 800445c:	f006 020f 	and.w	r2, r6, #15
 8004460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800446c:	f7fc f8e4 	bl	8000638 <__aeabi_dmul>
 8004470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004474:	1136      	asrs	r6, r6, #4
 8004476:	2300      	movs	r3, #0
 8004478:	2502      	movs	r5, #2
 800447a:	2e00      	cmp	r6, #0
 800447c:	d17f      	bne.n	800457e <_dtoa_r+0x4ae>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e1      	bne.n	8004446 <_dtoa_r+0x376>
 8004482:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8087 	beq.w	8004598 <_dtoa_r+0x4c8>
 800448a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <_dtoa_r+0x610>)
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fc fb41 	bl	8000b1c <__aeabi_dcmplt>
 800449a:	2800      	cmp	r0, #0
 800449c:	d07c      	beq.n	8004598 <_dtoa_r+0x4c8>
 800449e:	f1b9 0f00 	cmp.w	r9, #0
 80044a2:	d079      	beq.n	8004598 <_dtoa_r+0x4c8>
 80044a4:	9b06      	ldr	r3, [sp, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dd35      	ble.n	8004516 <_dtoa_r+0x446>
 80044aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80044ae:	930a      	str	r3, [sp, #40]	; 0x28
 80044b0:	4639      	mov	r1, r7
 80044b2:	2200      	movs	r2, #0
 80044b4:	4b8b      	ldr	r3, [pc, #556]	; (80046e4 <_dtoa_r+0x614>)
 80044b6:	4630      	mov	r0, r6
 80044b8:	f7fc f8be 	bl	8000638 <__aeabi_dmul>
 80044bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044c0:	9f06      	ldr	r7, [sp, #24]
 80044c2:	3501      	adds	r5, #1
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7fc f84d 	bl	8000564 <__aeabi_i2d>
 80044ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044ce:	f7fc f8b3 	bl	8000638 <__aeabi_dmul>
 80044d2:	2200      	movs	r2, #0
 80044d4:	4b84      	ldr	r3, [pc, #528]	; (80046e8 <_dtoa_r+0x618>)
 80044d6:	f7fb fef9 	bl	80002cc <__adddf3>
 80044da:	4605      	mov	r5, r0
 80044dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	d15d      	bne.n	80045a0 <_dtoa_r+0x4d0>
 80044e4:	2200      	movs	r2, #0
 80044e6:	4b81      	ldr	r3, [pc, #516]	; (80046ec <_dtoa_r+0x61c>)
 80044e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ec:	f7fb feec 	bl	80002c8 <__aeabi_dsub>
 80044f0:	462a      	mov	r2, r5
 80044f2:	4633      	mov	r3, r6
 80044f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f8:	f7fc fb2e 	bl	8000b58 <__aeabi_dcmpgt>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f040 8288 	bne.w	8004a12 <_dtoa_r+0x942>
 8004502:	462a      	mov	r2, r5
 8004504:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450c:	f7fc fb06 	bl	8000b1c <__aeabi_dcmplt>
 8004510:	2800      	cmp	r0, #0
 8004512:	f040 827c 	bne.w	8004a0e <_dtoa_r+0x93e>
 8004516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800451a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800451e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	f2c0 8150 	blt.w	80047c6 <_dtoa_r+0x6f6>
 8004526:	f1ba 0f0e 	cmp.w	sl, #14
 800452a:	f300 814c 	bgt.w	80047c6 <_dtoa_r+0x6f6>
 800452e:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <_dtoa_r+0x608>)
 8004530:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004534:	ed93 7b00 	vldr	d7, [r3]
 8004538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800453a:	2b00      	cmp	r3, #0
 800453c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004540:	f280 80d8 	bge.w	80046f4 <_dtoa_r+0x624>
 8004544:	f1b9 0f00 	cmp.w	r9, #0
 8004548:	f300 80d4 	bgt.w	80046f4 <_dtoa_r+0x624>
 800454c:	f040 825e 	bne.w	8004a0c <_dtoa_r+0x93c>
 8004550:	2200      	movs	r2, #0
 8004552:	4b66      	ldr	r3, [pc, #408]	; (80046ec <_dtoa_r+0x61c>)
 8004554:	ec51 0b17 	vmov	r0, r1, d7
 8004558:	f7fc f86e 	bl	8000638 <__aeabi_dmul>
 800455c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004560:	f7fc faf0 	bl	8000b44 <__aeabi_dcmpge>
 8004564:	464f      	mov	r7, r9
 8004566:	464e      	mov	r6, r9
 8004568:	2800      	cmp	r0, #0
 800456a:	f040 8234 	bne.w	80049d6 <_dtoa_r+0x906>
 800456e:	9b05      	ldr	r3, [sp, #20]
 8004570:	9a05      	ldr	r2, [sp, #20]
 8004572:	1c5d      	adds	r5, r3, #1
 8004574:	2331      	movs	r3, #49	; 0x31
 8004576:	7013      	strb	r3, [r2, #0]
 8004578:	f10a 0a01 	add.w	sl, sl, #1
 800457c:	e22f      	b.n	80049de <_dtoa_r+0x90e>
 800457e:	07f2      	lsls	r2, r6, #31
 8004580:	d505      	bpl.n	800458e <_dtoa_r+0x4be>
 8004582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004586:	f7fc f857 	bl	8000638 <__aeabi_dmul>
 800458a:	3501      	adds	r5, #1
 800458c:	2301      	movs	r3, #1
 800458e:	1076      	asrs	r6, r6, #1
 8004590:	3708      	adds	r7, #8
 8004592:	e772      	b.n	800447a <_dtoa_r+0x3aa>
 8004594:	2502      	movs	r5, #2
 8004596:	e774      	b.n	8004482 <_dtoa_r+0x3b2>
 8004598:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800459c:	464f      	mov	r7, r9
 800459e:	e791      	b.n	80044c4 <_dtoa_r+0x3f4>
 80045a0:	4b4d      	ldr	r3, [pc, #308]	; (80046d8 <_dtoa_r+0x608>)
 80045a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80045aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d047      	beq.n	8004640 <_dtoa_r+0x570>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	2000      	movs	r0, #0
 80045b6:	494e      	ldr	r1, [pc, #312]	; (80046f0 <_dtoa_r+0x620>)
 80045b8:	f7fc f968 	bl	800088c <__aeabi_ddiv>
 80045bc:	462a      	mov	r2, r5
 80045be:	4633      	mov	r3, r6
 80045c0:	f7fb fe82 	bl	80002c8 <__aeabi_dsub>
 80045c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80045c8:	9d05      	ldr	r5, [sp, #20]
 80045ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ce:	f7fc fae3 	bl	8000b98 <__aeabi_d2iz>
 80045d2:	4606      	mov	r6, r0
 80045d4:	f7fb ffc6 	bl	8000564 <__aeabi_i2d>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e0:	f7fb fe72 	bl	80002c8 <__aeabi_dsub>
 80045e4:	3630      	adds	r6, #48	; 0x30
 80045e6:	f805 6b01 	strb.w	r6, [r5], #1
 80045ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80045ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045f2:	f7fc fa93 	bl	8000b1c <__aeabi_dcmplt>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d163      	bne.n	80046c2 <_dtoa_r+0x5f2>
 80045fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045fe:	2000      	movs	r0, #0
 8004600:	4937      	ldr	r1, [pc, #220]	; (80046e0 <_dtoa_r+0x610>)
 8004602:	f7fb fe61 	bl	80002c8 <__aeabi_dsub>
 8004606:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800460a:	f7fc fa87 	bl	8000b1c <__aeabi_dcmplt>
 800460e:	2800      	cmp	r0, #0
 8004610:	f040 80b7 	bne.w	8004782 <_dtoa_r+0x6b2>
 8004614:	9b05      	ldr	r3, [sp, #20]
 8004616:	1aeb      	subs	r3, r5, r3
 8004618:	429f      	cmp	r7, r3
 800461a:	f77f af7c 	ble.w	8004516 <_dtoa_r+0x446>
 800461e:	2200      	movs	r2, #0
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <_dtoa_r+0x614>)
 8004622:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004626:	f7fc f807 	bl	8000638 <__aeabi_dmul>
 800462a:	2200      	movs	r2, #0
 800462c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <_dtoa_r+0x614>)
 8004632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004636:	f7fb ffff 	bl	8000638 <__aeabi_dmul>
 800463a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800463e:	e7c4      	b.n	80045ca <_dtoa_r+0x4fa>
 8004640:	4633      	mov	r3, r6
 8004642:	462a      	mov	r2, r5
 8004644:	f7fb fff8 	bl	8000638 <__aeabi_dmul>
 8004648:	9b05      	ldr	r3, [sp, #20]
 800464a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800464e:	19dd      	adds	r5, r3, r7
 8004650:	461e      	mov	r6, r3
 8004652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004656:	f7fc fa9f 	bl	8000b98 <__aeabi_d2iz>
 800465a:	4607      	mov	r7, r0
 800465c:	f7fb ff82 	bl	8000564 <__aeabi_i2d>
 8004660:	3730      	adds	r7, #48	; 0x30
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466a:	f7fb fe2d 	bl	80002c8 <__aeabi_dsub>
 800466e:	f806 7b01 	strb.w	r7, [r6], #1
 8004672:	42ae      	cmp	r6, r5
 8004674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	d126      	bne.n	80046cc <_dtoa_r+0x5fc>
 800467e:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <_dtoa_r+0x620>)
 8004680:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004684:	f7fb fe22 	bl	80002cc <__adddf3>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004690:	f7fc fa62 	bl	8000b58 <__aeabi_dcmpgt>
 8004694:	2800      	cmp	r0, #0
 8004696:	d174      	bne.n	8004782 <_dtoa_r+0x6b2>
 8004698:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800469c:	2000      	movs	r0, #0
 800469e:	4914      	ldr	r1, [pc, #80]	; (80046f0 <_dtoa_r+0x620>)
 80046a0:	f7fb fe12 	bl	80002c8 <__aeabi_dsub>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ac:	f7fc fa36 	bl	8000b1c <__aeabi_dcmplt>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f43f af30 	beq.w	8004516 <_dtoa_r+0x446>
 80046b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046ba:	2b30      	cmp	r3, #48	; 0x30
 80046bc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80046c0:	d002      	beq.n	80046c8 <_dtoa_r+0x5f8>
 80046c2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80046c6:	e04a      	b.n	800475e <_dtoa_r+0x68e>
 80046c8:	4615      	mov	r5, r2
 80046ca:	e7f4      	b.n	80046b6 <_dtoa_r+0x5e6>
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_dtoa_r+0x614>)
 80046ce:	f7fb ffb3 	bl	8000638 <__aeabi_dmul>
 80046d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d6:	e7bc      	b.n	8004652 <_dtoa_r+0x582>
 80046d8:	08005ea0 	.word	0x08005ea0
 80046dc:	08005e78 	.word	0x08005e78
 80046e0:	3ff00000 	.word	0x3ff00000
 80046e4:	40240000 	.word	0x40240000
 80046e8:	401c0000 	.word	0x401c0000
 80046ec:	40140000 	.word	0x40140000
 80046f0:	3fe00000 	.word	0x3fe00000
 80046f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80046f8:	9d05      	ldr	r5, [sp, #20]
 80046fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fc f8c3 	bl	800088c <__aeabi_ddiv>
 8004706:	f7fc fa47 	bl	8000b98 <__aeabi_d2iz>
 800470a:	4680      	mov	r8, r0
 800470c:	f7fb ff2a 	bl	8000564 <__aeabi_i2d>
 8004710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004714:	f7fb ff90 	bl	8000638 <__aeabi_dmul>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4630      	mov	r0, r6
 800471e:	4639      	mov	r1, r7
 8004720:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004724:	f7fb fdd0 	bl	80002c8 <__aeabi_dsub>
 8004728:	f805 6b01 	strb.w	r6, [r5], #1
 800472c:	9e05      	ldr	r6, [sp, #20]
 800472e:	1bae      	subs	r6, r5, r6
 8004730:	45b1      	cmp	r9, r6
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	d139      	bne.n	80047ac <_dtoa_r+0x6dc>
 8004738:	f7fb fdc8 	bl	80002cc <__adddf3>
 800473c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004740:	4606      	mov	r6, r0
 8004742:	460f      	mov	r7, r1
 8004744:	f7fc fa08 	bl	8000b58 <__aeabi_dcmpgt>
 8004748:	b9c8      	cbnz	r0, 800477e <_dtoa_r+0x6ae>
 800474a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800474e:	4630      	mov	r0, r6
 8004750:	4639      	mov	r1, r7
 8004752:	f7fc f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8004756:	b110      	cbz	r0, 800475e <_dtoa_r+0x68e>
 8004758:	f018 0f01 	tst.w	r8, #1
 800475c:	d10f      	bne.n	800477e <_dtoa_r+0x6ae>
 800475e:	4659      	mov	r1, fp
 8004760:	4620      	mov	r0, r4
 8004762:	f000 fb92 	bl	8004e8a <_Bfree>
 8004766:	2300      	movs	r3, #0
 8004768:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800476a:	702b      	strb	r3, [r5, #0]
 800476c:	f10a 0301 	add.w	r3, sl, #1
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004774:	2b00      	cmp	r3, #0
 8004776:	f43f acf3 	beq.w	8004160 <_dtoa_r+0x90>
 800477a:	601d      	str	r5, [r3, #0]
 800477c:	e4f0      	b.n	8004160 <_dtoa_r+0x90>
 800477e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004786:	2a39      	cmp	r2, #57	; 0x39
 8004788:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800478c:	d108      	bne.n	80047a0 <_dtoa_r+0x6d0>
 800478e:	9a05      	ldr	r2, [sp, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	d109      	bne.n	80047a8 <_dtoa_r+0x6d8>
 8004794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004796:	3301      	adds	r3, #1
 8004798:	930a      	str	r3, [sp, #40]	; 0x28
 800479a:	2330      	movs	r3, #48	; 0x30
 800479c:	7013      	strb	r3, [r2, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	3201      	adds	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e78c      	b.n	80046c2 <_dtoa_r+0x5f2>
 80047a8:	461d      	mov	r5, r3
 80047aa:	e7ea      	b.n	8004782 <_dtoa_r+0x6b2>
 80047ac:	2200      	movs	r2, #0
 80047ae:	4b9b      	ldr	r3, [pc, #620]	; (8004a1c <_dtoa_r+0x94c>)
 80047b0:	f7fb ff42 	bl	8000638 <__aeabi_dmul>
 80047b4:	2200      	movs	r2, #0
 80047b6:	2300      	movs	r3, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	460f      	mov	r7, r1
 80047bc:	f7fc f9a4 	bl	8000b08 <__aeabi_dcmpeq>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d09a      	beq.n	80046fa <_dtoa_r+0x62a>
 80047c4:	e7cb      	b.n	800475e <_dtoa_r+0x68e>
 80047c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	f000 808b 	beq.w	80048e4 <_dtoa_r+0x814>
 80047ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047d0:	2a01      	cmp	r2, #1
 80047d2:	dc6e      	bgt.n	80048b2 <_dtoa_r+0x7e2>
 80047d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d067      	beq.n	80048aa <_dtoa_r+0x7da>
 80047da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047de:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80047e2:	9a08      	ldr	r2, [sp, #32]
 80047e4:	2101      	movs	r1, #1
 80047e6:	441a      	add	r2, r3
 80047e8:	4620      	mov	r0, r4
 80047ea:	9208      	str	r2, [sp, #32]
 80047ec:	4498      	add	r8, r3
 80047ee:	f000 fbec 	bl	8004fca <__i2b>
 80047f2:	4606      	mov	r6, r0
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	dd0c      	ble.n	8004812 <_dtoa_r+0x742>
 80047f8:	f1b8 0f00 	cmp.w	r8, #0
 80047fc:	dd09      	ble.n	8004812 <_dtoa_r+0x742>
 80047fe:	4545      	cmp	r5, r8
 8004800:	9a08      	ldr	r2, [sp, #32]
 8004802:	462b      	mov	r3, r5
 8004804:	bfa8      	it	ge
 8004806:	4643      	movge	r3, r8
 8004808:	1ad2      	subs	r2, r2, r3
 800480a:	9208      	str	r2, [sp, #32]
 800480c:	1aed      	subs	r5, r5, r3
 800480e:	eba8 0803 	sub.w	r8, r8, r3
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	b1eb      	cbz	r3, 8004852 <_dtoa_r+0x782>
 8004816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d067      	beq.n	80048ec <_dtoa_r+0x81c>
 800481c:	b18f      	cbz	r7, 8004842 <_dtoa_r+0x772>
 800481e:	4631      	mov	r1, r6
 8004820:	463a      	mov	r2, r7
 8004822:	4620      	mov	r0, r4
 8004824:	f000 fc70 	bl	8005108 <__pow5mult>
 8004828:	465a      	mov	r2, fp
 800482a:	4601      	mov	r1, r0
 800482c:	4606      	mov	r6, r0
 800482e:	4620      	mov	r0, r4
 8004830:	f000 fbd4 	bl	8004fdc <__multiply>
 8004834:	4659      	mov	r1, fp
 8004836:	900a      	str	r0, [sp, #40]	; 0x28
 8004838:	4620      	mov	r0, r4
 800483a:	f000 fb26 	bl	8004e8a <_Bfree>
 800483e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004840:	469b      	mov	fp, r3
 8004842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004844:	1bda      	subs	r2, r3, r7
 8004846:	d004      	beq.n	8004852 <_dtoa_r+0x782>
 8004848:	4659      	mov	r1, fp
 800484a:	4620      	mov	r0, r4
 800484c:	f000 fc5c 	bl	8005108 <__pow5mult>
 8004850:	4683      	mov	fp, r0
 8004852:	2101      	movs	r1, #1
 8004854:	4620      	mov	r0, r4
 8004856:	f000 fbb8 	bl	8004fca <__i2b>
 800485a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800485c:	4607      	mov	r7, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 81cb 	beq.w	8004bfa <_dtoa_r+0xb2a>
 8004864:	461a      	mov	r2, r3
 8004866:	4601      	mov	r1, r0
 8004868:	4620      	mov	r0, r4
 800486a:	f000 fc4d 	bl	8005108 <__pow5mult>
 800486e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004870:	2b01      	cmp	r3, #1
 8004872:	4607      	mov	r7, r0
 8004874:	dc40      	bgt.n	80048f8 <_dtoa_r+0x828>
 8004876:	9b02      	ldr	r3, [sp, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d139      	bne.n	80048f0 <_dtoa_r+0x820>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004882:	2b00      	cmp	r3, #0
 8004884:	d136      	bne.n	80048f4 <_dtoa_r+0x824>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800488c:	0d1b      	lsrs	r3, r3, #20
 800488e:	051b      	lsls	r3, r3, #20
 8004890:	b12b      	cbz	r3, 800489e <_dtoa_r+0x7ce>
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	3301      	adds	r3, #1
 8004896:	9308      	str	r3, [sp, #32]
 8004898:	f108 0801 	add.w	r8, r8, #1
 800489c:	2301      	movs	r3, #1
 800489e:	9309      	str	r3, [sp, #36]	; 0x24
 80048a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d12a      	bne.n	80048fc <_dtoa_r+0x82c>
 80048a6:	2001      	movs	r0, #1
 80048a8:	e030      	b.n	800490c <_dtoa_r+0x83c>
 80048aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048ac:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048b0:	e795      	b.n	80047de <_dtoa_r+0x70e>
 80048b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b4:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80048b8:	42bb      	cmp	r3, r7
 80048ba:	bfbf      	itttt	lt
 80048bc:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80048be:	9709      	strlt	r7, [sp, #36]	; 0x24
 80048c0:	1afa      	sublt	r2, r7, r3
 80048c2:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80048c4:	bfbb      	ittet	lt
 80048c6:	189b      	addlt	r3, r3, r2
 80048c8:	930d      	strlt	r3, [sp, #52]	; 0x34
 80048ca:	1bdf      	subge	r7, r3, r7
 80048cc:	2700      	movlt	r7, #0
 80048ce:	f1b9 0f00 	cmp.w	r9, #0
 80048d2:	bfb5      	itete	lt
 80048d4:	9b08      	ldrlt	r3, [sp, #32]
 80048d6:	9d08      	ldrge	r5, [sp, #32]
 80048d8:	eba3 0509 	sublt.w	r5, r3, r9
 80048dc:	464b      	movge	r3, r9
 80048de:	bfb8      	it	lt
 80048e0:	2300      	movlt	r3, #0
 80048e2:	e77e      	b.n	80047e2 <_dtoa_r+0x712>
 80048e4:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80048e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80048ea:	e783      	b.n	80047f4 <_dtoa_r+0x724>
 80048ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ee:	e7ab      	b.n	8004848 <_dtoa_r+0x778>
 80048f0:	2300      	movs	r3, #0
 80048f2:	e7d4      	b.n	800489e <_dtoa_r+0x7ce>
 80048f4:	9b02      	ldr	r3, [sp, #8]
 80048f6:	e7d2      	b.n	800489e <_dtoa_r+0x7ce>
 80048f8:	2300      	movs	r3, #0
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004902:	6918      	ldr	r0, [r3, #16]
 8004904:	f000 fb13 	bl	8004f2e <__hi0bits>
 8004908:	f1c0 0020 	rsb	r0, r0, #32
 800490c:	4440      	add	r0, r8
 800490e:	f010 001f 	ands.w	r0, r0, #31
 8004912:	d047      	beq.n	80049a4 <_dtoa_r+0x8d4>
 8004914:	f1c0 0320 	rsb	r3, r0, #32
 8004918:	2b04      	cmp	r3, #4
 800491a:	dd3b      	ble.n	8004994 <_dtoa_r+0x8c4>
 800491c:	9b08      	ldr	r3, [sp, #32]
 800491e:	f1c0 001c 	rsb	r0, r0, #28
 8004922:	4403      	add	r3, r0
 8004924:	9308      	str	r3, [sp, #32]
 8004926:	4405      	add	r5, r0
 8004928:	4480      	add	r8, r0
 800492a:	9b08      	ldr	r3, [sp, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	dd05      	ble.n	800493c <_dtoa_r+0x86c>
 8004930:	4659      	mov	r1, fp
 8004932:	461a      	mov	r2, r3
 8004934:	4620      	mov	r0, r4
 8004936:	f000 fc35 	bl	80051a4 <__lshift>
 800493a:	4683      	mov	fp, r0
 800493c:	f1b8 0f00 	cmp.w	r8, #0
 8004940:	dd05      	ble.n	800494e <_dtoa_r+0x87e>
 8004942:	4639      	mov	r1, r7
 8004944:	4642      	mov	r2, r8
 8004946:	4620      	mov	r0, r4
 8004948:	f000 fc2c 	bl	80051a4 <__lshift>
 800494c:	4607      	mov	r7, r0
 800494e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004950:	b353      	cbz	r3, 80049a8 <_dtoa_r+0x8d8>
 8004952:	4639      	mov	r1, r7
 8004954:	4658      	mov	r0, fp
 8004956:	f000 fc79 	bl	800524c <__mcmp>
 800495a:	2800      	cmp	r0, #0
 800495c:	da24      	bge.n	80049a8 <_dtoa_r+0x8d8>
 800495e:	2300      	movs	r3, #0
 8004960:	4659      	mov	r1, fp
 8004962:	220a      	movs	r2, #10
 8004964:	4620      	mov	r0, r4
 8004966:	f000 faa7 	bl	8004eb8 <__multadd>
 800496a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800496c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004970:	4683      	mov	fp, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8148 	beq.w	8004c08 <_dtoa_r+0xb38>
 8004978:	2300      	movs	r3, #0
 800497a:	4631      	mov	r1, r6
 800497c:	220a      	movs	r2, #10
 800497e:	4620      	mov	r0, r4
 8004980:	f000 fa9a 	bl	8004eb8 <__multadd>
 8004984:	9b06      	ldr	r3, [sp, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	4606      	mov	r6, r0
 800498a:	dc4f      	bgt.n	8004a2c <_dtoa_r+0x95c>
 800498c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800498e:	2b02      	cmp	r3, #2
 8004990:	dd4c      	ble.n	8004a2c <_dtoa_r+0x95c>
 8004992:	e011      	b.n	80049b8 <_dtoa_r+0x8e8>
 8004994:	d0c9      	beq.n	800492a <_dtoa_r+0x85a>
 8004996:	9a08      	ldr	r2, [sp, #32]
 8004998:	331c      	adds	r3, #28
 800499a:	441a      	add	r2, r3
 800499c:	9208      	str	r2, [sp, #32]
 800499e:	441d      	add	r5, r3
 80049a0:	4498      	add	r8, r3
 80049a2:	e7c2      	b.n	800492a <_dtoa_r+0x85a>
 80049a4:	4603      	mov	r3, r0
 80049a6:	e7f6      	b.n	8004996 <_dtoa_r+0x8c6>
 80049a8:	f1b9 0f00 	cmp.w	r9, #0
 80049ac:	dc38      	bgt.n	8004a20 <_dtoa_r+0x950>
 80049ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	dd35      	ble.n	8004a20 <_dtoa_r+0x950>
 80049b4:	f8cd 9018 	str.w	r9, [sp, #24]
 80049b8:	9b06      	ldr	r3, [sp, #24]
 80049ba:	b963      	cbnz	r3, 80049d6 <_dtoa_r+0x906>
 80049bc:	4639      	mov	r1, r7
 80049be:	2205      	movs	r2, #5
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fa79 	bl	8004eb8 <__multadd>
 80049c6:	4601      	mov	r1, r0
 80049c8:	4607      	mov	r7, r0
 80049ca:	4658      	mov	r0, fp
 80049cc:	f000 fc3e 	bl	800524c <__mcmp>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f73f adcc 	bgt.w	800456e <_dtoa_r+0x49e>
 80049d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049d8:	9d05      	ldr	r5, [sp, #20]
 80049da:	ea6f 0a03 	mvn.w	sl, r3
 80049de:	f04f 0900 	mov.w	r9, #0
 80049e2:	4639      	mov	r1, r7
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 fa50 	bl	8004e8a <_Bfree>
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	f43f aeb7 	beq.w	800475e <_dtoa_r+0x68e>
 80049f0:	f1b9 0f00 	cmp.w	r9, #0
 80049f4:	d005      	beq.n	8004a02 <_dtoa_r+0x932>
 80049f6:	45b1      	cmp	r9, r6
 80049f8:	d003      	beq.n	8004a02 <_dtoa_r+0x932>
 80049fa:	4649      	mov	r1, r9
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 fa44 	bl	8004e8a <_Bfree>
 8004a02:	4631      	mov	r1, r6
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 fa40 	bl	8004e8a <_Bfree>
 8004a0a:	e6a8      	b.n	800475e <_dtoa_r+0x68e>
 8004a0c:	2700      	movs	r7, #0
 8004a0e:	463e      	mov	r6, r7
 8004a10:	e7e1      	b.n	80049d6 <_dtoa_r+0x906>
 8004a12:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004a16:	463e      	mov	r6, r7
 8004a18:	e5a9      	b.n	800456e <_dtoa_r+0x49e>
 8004a1a:	bf00      	nop
 8004a1c:	40240000 	.word	0x40240000
 8004a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a22:	f8cd 9018 	str.w	r9, [sp, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80f5 	beq.w	8004c16 <_dtoa_r+0xb46>
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	dd05      	ble.n	8004a3c <_dtoa_r+0x96c>
 8004a30:	4631      	mov	r1, r6
 8004a32:	462a      	mov	r2, r5
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 fbb5 	bl	80051a4 <__lshift>
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04c      	beq.n	8004adc <_dtoa_r+0xa0c>
 8004a42:	6871      	ldr	r1, [r6, #4]
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 f9ec 	bl	8004e22 <_Balloc>
 8004a4a:	6932      	ldr	r2, [r6, #16]
 8004a4c:	3202      	adds	r2, #2
 8004a4e:	4605      	mov	r5, r0
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	f106 010c 	add.w	r1, r6, #12
 8004a56:	300c      	adds	r0, #12
 8004a58:	f000 f9d8 	bl	8004e0c <memcpy>
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fb9f 	bl	80051a4 <__lshift>
 8004a66:	9b05      	ldr	r3, [sp, #20]
 8004a68:	9308      	str	r3, [sp, #32]
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	46b1      	mov	r9, r6
 8004a72:	9309      	str	r3, [sp, #36]	; 0x24
 8004a74:	4606      	mov	r6, r0
 8004a76:	4639      	mov	r1, r7
 8004a78:	4658      	mov	r0, fp
 8004a7a:	f7ff fa9b 	bl	8003fb4 <quorem>
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4605      	mov	r5, r0
 8004a82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a86:	4658      	mov	r0, fp
 8004a88:	f000 fbe0 	bl	800524c <__mcmp>
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	9002      	str	r0, [sp, #8]
 8004a90:	4639      	mov	r1, r7
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 fbf4 	bl	8005280 <__mdiff>
 8004a98:	68c3      	ldr	r3, [r0, #12]
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	bb03      	cbnz	r3, 8004ae0 <_dtoa_r+0xa10>
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	900a      	str	r0, [sp, #40]	; 0x28
 8004aa2:	4658      	mov	r0, fp
 8004aa4:	f000 fbd2 	bl	800524c <__mcmp>
 8004aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4611      	mov	r1, r2
 8004aae:	4620      	mov	r0, r4
 8004ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab2:	f000 f9ea 	bl	8004e8a <_Bfree>
 8004ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab8:	b9a3      	cbnz	r3, 8004ae4 <_dtoa_r+0xa14>
 8004aba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004abc:	b992      	cbnz	r2, 8004ae4 <_dtoa_r+0xa14>
 8004abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ac0:	b982      	cbnz	r2, 8004ae4 <_dtoa_r+0xa14>
 8004ac2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ac6:	d029      	beq.n	8004b1c <_dtoa_r+0xa4c>
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dd01      	ble.n	8004ad2 <_dtoa_r+0xa02>
 8004ace:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004ad2:	9b08      	ldr	r3, [sp, #32]
 8004ad4:	1c5d      	adds	r5, r3, #1
 8004ad6:	f883 8000 	strb.w	r8, [r3]
 8004ada:	e782      	b.n	80049e2 <_dtoa_r+0x912>
 8004adc:	4630      	mov	r0, r6
 8004ade:	e7c2      	b.n	8004a66 <_dtoa_r+0x996>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e7e3      	b.n	8004aac <_dtoa_r+0x9dc>
 8004ae4:	9a02      	ldr	r2, [sp, #8]
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	db04      	blt.n	8004af4 <_dtoa_r+0xa24>
 8004aea:	d124      	bne.n	8004b36 <_dtoa_r+0xa66>
 8004aec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004aee:	bb12      	cbnz	r2, 8004b36 <_dtoa_r+0xa66>
 8004af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af2:	bb02      	cbnz	r2, 8004b36 <_dtoa_r+0xa66>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	ddec      	ble.n	8004ad2 <_dtoa_r+0xa02>
 8004af8:	4659      	mov	r1, fp
 8004afa:	2201      	movs	r2, #1
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fb51 	bl	80051a4 <__lshift>
 8004b02:	4639      	mov	r1, r7
 8004b04:	4683      	mov	fp, r0
 8004b06:	f000 fba1 	bl	800524c <__mcmp>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	dc03      	bgt.n	8004b16 <_dtoa_r+0xa46>
 8004b0e:	d1e0      	bne.n	8004ad2 <_dtoa_r+0xa02>
 8004b10:	f018 0f01 	tst.w	r8, #1
 8004b14:	d0dd      	beq.n	8004ad2 <_dtoa_r+0xa02>
 8004b16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b1a:	d1d8      	bne.n	8004ace <_dtoa_r+0x9fe>
 8004b1c:	9b08      	ldr	r3, [sp, #32]
 8004b1e:	9a08      	ldr	r2, [sp, #32]
 8004b20:	1c5d      	adds	r5, r3, #1
 8004b22:	2339      	movs	r3, #57	; 0x39
 8004b24:	7013      	strb	r3, [r2, #0]
 8004b26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b2a:	2b39      	cmp	r3, #57	; 0x39
 8004b2c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004b30:	d04e      	beq.n	8004bd0 <_dtoa_r+0xb00>
 8004b32:	3301      	adds	r3, #1
 8004b34:	e053      	b.n	8004bde <_dtoa_r+0xb0e>
 8004b36:	9a08      	ldr	r2, [sp, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f102 0501 	add.w	r5, r2, #1
 8004b3e:	dd06      	ble.n	8004b4e <_dtoa_r+0xa7e>
 8004b40:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b44:	d0ea      	beq.n	8004b1c <_dtoa_r+0xa4c>
 8004b46:	f108 0801 	add.w	r8, r8, #1
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	e7c3      	b.n	8004ad6 <_dtoa_r+0xa06>
 8004b4e:	9b05      	ldr	r3, [sp, #20]
 8004b50:	9a06      	ldr	r2, [sp, #24]
 8004b52:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b56:	1aeb      	subs	r3, r5, r3
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d021      	beq.n	8004ba0 <_dtoa_r+0xad0>
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	2300      	movs	r3, #0
 8004b60:	220a      	movs	r2, #10
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 f9a8 	bl	8004eb8 <__multadd>
 8004b68:	45b1      	cmp	r9, r6
 8004b6a:	4683      	mov	fp, r0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	f04f 020a 	mov.w	r2, #10
 8004b74:	4649      	mov	r1, r9
 8004b76:	4620      	mov	r0, r4
 8004b78:	d105      	bne.n	8004b86 <_dtoa_r+0xab6>
 8004b7a:	f000 f99d 	bl	8004eb8 <__multadd>
 8004b7e:	4681      	mov	r9, r0
 8004b80:	4606      	mov	r6, r0
 8004b82:	9508      	str	r5, [sp, #32]
 8004b84:	e777      	b.n	8004a76 <_dtoa_r+0x9a6>
 8004b86:	f000 f997 	bl	8004eb8 <__multadd>
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	2300      	movs	r3, #0
 8004b90:	220a      	movs	r2, #10
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 f990 	bl	8004eb8 <__multadd>
 8004b98:	4606      	mov	r6, r0
 8004b9a:	e7f2      	b.n	8004b82 <_dtoa_r+0xab2>
 8004b9c:	f04f 0900 	mov.w	r9, #0
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 fafd 	bl	80051a4 <__lshift>
 8004baa:	4639      	mov	r1, r7
 8004bac:	4683      	mov	fp, r0
 8004bae:	f000 fb4d 	bl	800524c <__mcmp>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	dcb7      	bgt.n	8004b26 <_dtoa_r+0xa56>
 8004bb6:	d102      	bne.n	8004bbe <_dtoa_r+0xaee>
 8004bb8:	f018 0f01 	tst.w	r8, #1
 8004bbc:	d1b3      	bne.n	8004b26 <_dtoa_r+0xa56>
 8004bbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bc2:	2b30      	cmp	r3, #48	; 0x30
 8004bc4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004bc8:	f47f af0b 	bne.w	80049e2 <_dtoa_r+0x912>
 8004bcc:	4615      	mov	r5, r2
 8004bce:	e7f6      	b.n	8004bbe <_dtoa_r+0xaee>
 8004bd0:	9b05      	ldr	r3, [sp, #20]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d105      	bne.n	8004be2 <_dtoa_r+0xb12>
 8004bd6:	9a05      	ldr	r2, [sp, #20]
 8004bd8:	f10a 0a01 	add.w	sl, sl, #1
 8004bdc:	2331      	movs	r3, #49	; 0x31
 8004bde:	7013      	strb	r3, [r2, #0]
 8004be0:	e6ff      	b.n	80049e2 <_dtoa_r+0x912>
 8004be2:	4615      	mov	r5, r2
 8004be4:	e79f      	b.n	8004b26 <_dtoa_r+0xa56>
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <_dtoa_r+0xb74>)
 8004be8:	f7ff bad7 	b.w	800419a <_dtoa_r+0xca>
 8004bec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f47f aab1 	bne.w	8004156 <_dtoa_r+0x86>
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <_dtoa_r+0xb78>)
 8004bf6:	f7ff bad0 	b.w	800419a <_dtoa_r+0xca>
 8004bfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	f77f ae3a 	ble.w	8004876 <_dtoa_r+0x7a6>
 8004c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	e64e      	b.n	80048a6 <_dtoa_r+0x7d6>
 8004c08:	9b06      	ldr	r3, [sp, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dc03      	bgt.n	8004c16 <_dtoa_r+0xb46>
 8004c0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f73f aed1 	bgt.w	80049b8 <_dtoa_r+0x8e8>
 8004c16:	9d05      	ldr	r5, [sp, #20]
 8004c18:	4639      	mov	r1, r7
 8004c1a:	4658      	mov	r0, fp
 8004c1c:	f7ff f9ca 	bl	8003fb4 <quorem>
 8004c20:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c24:	f805 8b01 	strb.w	r8, [r5], #1
 8004c28:	9b05      	ldr	r3, [sp, #20]
 8004c2a:	9a06      	ldr	r2, [sp, #24]
 8004c2c:	1aeb      	subs	r3, r5, r3
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	ddb4      	ble.n	8004b9c <_dtoa_r+0xacc>
 8004c32:	4659      	mov	r1, fp
 8004c34:	2300      	movs	r3, #0
 8004c36:	220a      	movs	r2, #10
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f93d 	bl	8004eb8 <__multadd>
 8004c3e:	4683      	mov	fp, r0
 8004c40:	e7ea      	b.n	8004c18 <_dtoa_r+0xb48>
 8004c42:	bf00      	nop
 8004c44:	08005de0 	.word	0x08005de0
 8004c48:	08005e04 	.word	0x08005e04

08004c4c <std>:
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	4604      	mov	r4, r0
 8004c52:	e9c0 3300 	strd	r3, r3, [r0]
 8004c56:	6083      	str	r3, [r0, #8]
 8004c58:	8181      	strh	r1, [r0, #12]
 8004c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c5c:	81c2      	strh	r2, [r0, #14]
 8004c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c62:	6183      	str	r3, [r0, #24]
 8004c64:	4619      	mov	r1, r3
 8004c66:	2208      	movs	r2, #8
 8004c68:	305c      	adds	r0, #92	; 0x5c
 8004c6a:	f7fe fd23 	bl	80036b4 <memset>
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <std+0x38>)
 8004c70:	6263      	str	r3, [r4, #36]	; 0x24
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <std+0x3c>)
 8004c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <std+0x40>)
 8004c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <std+0x44>)
 8004c7c:	6224      	str	r4, [r4, #32]
 8004c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	bf00      	nop
 8004c84:	080057e5 	.word	0x080057e5
 8004c88:	08005807 	.word	0x08005807
 8004c8c:	0800583f 	.word	0x0800583f
 8004c90:	08005863 	.word	0x08005863

08004c94 <_cleanup_r>:
 8004c94:	4901      	ldr	r1, [pc, #4]	; (8004c9c <_cleanup_r+0x8>)
 8004c96:	f000 b885 	b.w	8004da4 <_fwalk_reent>
 8004c9a:	bf00      	nop
 8004c9c:	08005b3d 	.word	0x08005b3d

08004ca0 <__sfmoreglue>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	1e4a      	subs	r2, r1, #1
 8004ca4:	2568      	movs	r5, #104	; 0x68
 8004ca6:	4355      	muls	r5, r2
 8004ca8:	460e      	mov	r6, r1
 8004caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cae:	f000 fbef 	bl	8005490 <_malloc_r>
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	b140      	cbz	r0, 8004cc8 <__sfmoreglue+0x28>
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8004cbc:	300c      	adds	r0, #12
 8004cbe:	60a0      	str	r0, [r4, #8]
 8004cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cc4:	f7fe fcf6 	bl	80036b4 <memset>
 8004cc8:	4620      	mov	r0, r4
 8004cca:	bd70      	pop	{r4, r5, r6, pc}

08004ccc <__sinit>:
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	bb33      	cbnz	r3, 8004d22 <__sinit+0x56>
 8004cd4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004cd8:	6503      	str	r3, [r0, #80]	; 0x50
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <__sinit+0x58>)
 8004cdc:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <__sinit+0x5c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6282      	str	r2, [r0, #40]	; 0x28
 8004ce2:	4298      	cmp	r0, r3
 8004ce4:	bf04      	itt	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	6183      	streq	r3, [r0, #24]
 8004cea:	f000 f81f 	bl	8004d2c <__sfp>
 8004cee:	6060      	str	r0, [r4, #4]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f000 f81b 	bl	8004d2c <__sfp>
 8004cf6:	60a0      	str	r0, [r4, #8]
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 f817 	bl	8004d2c <__sfp>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60e0      	str	r0, [r4, #12]
 8004d02:	2104      	movs	r1, #4
 8004d04:	6860      	ldr	r0, [r4, #4]
 8004d06:	f7ff ffa1 	bl	8004c4c <std>
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	2109      	movs	r1, #9
 8004d0e:	68a0      	ldr	r0, [r4, #8]
 8004d10:	f7ff ff9c 	bl	8004c4c <std>
 8004d14:	2202      	movs	r2, #2
 8004d16:	2112      	movs	r1, #18
 8004d18:	68e0      	ldr	r0, [r4, #12]
 8004d1a:	f7ff ff97 	bl	8004c4c <std>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61a3      	str	r3, [r4, #24]
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	08005dcc 	.word	0x08005dcc
 8004d28:	08004c95 	.word	0x08004c95

08004d2c <__sfp>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <__sfp+0x70>)
 8004d30:	681e      	ldr	r6, [r3, #0]
 8004d32:	69b3      	ldr	r3, [r6, #24]
 8004d34:	4607      	mov	r7, r0
 8004d36:	b913      	cbnz	r3, 8004d3e <__sfp+0x12>
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f7ff ffc7 	bl	8004ccc <__sinit>
 8004d3e:	3648      	adds	r6, #72	; 0x48
 8004d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	d503      	bpl.n	8004d50 <__sfp+0x24>
 8004d48:	6833      	ldr	r3, [r6, #0]
 8004d4a:	b133      	cbz	r3, 8004d5a <__sfp+0x2e>
 8004d4c:	6836      	ldr	r6, [r6, #0]
 8004d4e:	e7f7      	b.n	8004d40 <__sfp+0x14>
 8004d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d54:	b16d      	cbz	r5, 8004d72 <__sfp+0x46>
 8004d56:	3468      	adds	r4, #104	; 0x68
 8004d58:	e7f4      	b.n	8004d44 <__sfp+0x18>
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	f7ff ff9f 	bl	8004ca0 <__sfmoreglue>
 8004d62:	6030      	str	r0, [r6, #0]
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d1f1      	bne.n	8004d4c <__sfp+0x20>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	4620      	mov	r0, r4
 8004d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <__sfp+0x74>)
 8004d74:	6665      	str	r5, [r4, #100]	; 0x64
 8004d76:	e9c4 5500 	strd	r5, r5, [r4]
 8004d7a:	60a5      	str	r5, [r4, #8]
 8004d7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4629      	mov	r1, r5
 8004d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d8c:	f7fe fc92 	bl	80036b4 <memset>
 8004d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d98:	e7e9      	b.n	8004d6e <__sfp+0x42>
 8004d9a:	bf00      	nop
 8004d9c:	08005dcc 	.word	0x08005dcc
 8004da0:	ffff0001 	.word	0xffff0001

08004da4 <_fwalk_reent>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4680      	mov	r8, r0
 8004daa:	4689      	mov	r9, r1
 8004dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004db0:	2600      	movs	r6, #0
 8004db2:	b914      	cbnz	r4, 8004dba <_fwalk_reent+0x16>
 8004db4:	4630      	mov	r0, r6
 8004db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004dbe:	3f01      	subs	r7, #1
 8004dc0:	d501      	bpl.n	8004dc6 <_fwalk_reent+0x22>
 8004dc2:	6824      	ldr	r4, [r4, #0]
 8004dc4:	e7f5      	b.n	8004db2 <_fwalk_reent+0xe>
 8004dc6:	89ab      	ldrh	r3, [r5, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d907      	bls.n	8004ddc <_fwalk_reent+0x38>
 8004dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	d003      	beq.n	8004ddc <_fwalk_reent+0x38>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	47c8      	blx	r9
 8004dda:	4306      	orrs	r6, r0
 8004ddc:	3568      	adds	r5, #104	; 0x68
 8004dde:	e7ee      	b.n	8004dbe <_fwalk_reent+0x1a>

08004de0 <_localeconv_r>:
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <_localeconv_r+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a18      	ldr	r0, [r3, #32]
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <_localeconv_r+0x18>)
 8004de8:	2800      	cmp	r0, #0
 8004dea:	bf08      	it	eq
 8004dec:	4618      	moveq	r0, r3
 8004dee:	30f0      	adds	r0, #240	; 0xf0
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000004 	.word	0x20000004
 8004df8:	20000068 	.word	0x20000068

08004dfc <malloc>:
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <malloc+0xc>)
 8004dfe:	4601      	mov	r1, r0
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f000 bb45 	b.w	8005490 <_malloc_r>
 8004e06:	bf00      	nop
 8004e08:	20000004 	.word	0x20000004

08004e0c <memcpy>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	1e43      	subs	r3, r0, #1
 8004e10:	440a      	add	r2, r1
 8004e12:	4291      	cmp	r1, r2
 8004e14:	d100      	bne.n	8004e18 <memcpy+0xc>
 8004e16:	bd10      	pop	{r4, pc}
 8004e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e20:	e7f7      	b.n	8004e12 <memcpy+0x6>

08004e22 <_Balloc>:
 8004e22:	b570      	push	{r4, r5, r6, lr}
 8004e24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e26:	4604      	mov	r4, r0
 8004e28:	460e      	mov	r6, r1
 8004e2a:	b93d      	cbnz	r5, 8004e3c <_Balloc+0x1a>
 8004e2c:	2010      	movs	r0, #16
 8004e2e:	f7ff ffe5 	bl	8004dfc <malloc>
 8004e32:	6260      	str	r0, [r4, #36]	; 0x24
 8004e34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e38:	6005      	str	r5, [r0, #0]
 8004e3a:	60c5      	str	r5, [r0, #12]
 8004e3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e3e:	68eb      	ldr	r3, [r5, #12]
 8004e40:	b183      	cbz	r3, 8004e64 <_Balloc+0x42>
 8004e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e4a:	b9b8      	cbnz	r0, 8004e7c <_Balloc+0x5a>
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f506 	lsl.w	r5, r1, r6
 8004e52:	1d6a      	adds	r2, r5, #5
 8004e54:	0092      	lsls	r2, r2, #2
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fabe 	bl	80053d8 <_calloc_r>
 8004e5c:	b160      	cbz	r0, 8004e78 <_Balloc+0x56>
 8004e5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004e62:	e00e      	b.n	8004e82 <_Balloc+0x60>
 8004e64:	2221      	movs	r2, #33	; 0x21
 8004e66:	2104      	movs	r1, #4
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f000 fab5 	bl	80053d8 <_calloc_r>
 8004e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e70:	60e8      	str	r0, [r5, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e4      	bne.n	8004e42 <_Balloc+0x20>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	6802      	ldr	r2, [r0, #0]
 8004e7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e82:	2300      	movs	r3, #0
 8004e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e88:	e7f7      	b.n	8004e7a <_Balloc+0x58>

08004e8a <_Bfree>:
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460d      	mov	r5, r1
 8004e92:	b93c      	cbnz	r4, 8004ea4 <_Bfree+0x1a>
 8004e94:	2010      	movs	r0, #16
 8004e96:	f7ff ffb1 	bl	8004dfc <malloc>
 8004e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8004e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea0:	6004      	str	r4, [r0, #0]
 8004ea2:	60c4      	str	r4, [r0, #12]
 8004ea4:	b13d      	cbz	r5, 8004eb6 <_Bfree+0x2c>
 8004ea6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ea8:	686a      	ldr	r2, [r5, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004eb0:	6029      	str	r1, [r5, #0]
 8004eb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}

08004eb8 <__multadd>:
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	690d      	ldr	r5, [r1, #16]
 8004ebe:	461f      	mov	r7, r3
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	f101 0c14 	add.w	ip, r1, #20
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8dc 0000 	ldr.w	r0, [ip]
 8004ece:	b281      	uxth	r1, r0
 8004ed0:	fb02 7101 	mla	r1, r2, r1, r7
 8004ed4:	0c0f      	lsrs	r7, r1, #16
 8004ed6:	0c00      	lsrs	r0, r0, #16
 8004ed8:	fb02 7000 	mla	r0, r2, r0, r7
 8004edc:	b289      	uxth	r1, r1
 8004ede:	3301      	adds	r3, #1
 8004ee0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004ee4:	429d      	cmp	r5, r3
 8004ee6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004eea:	f84c 1b04 	str.w	r1, [ip], #4
 8004eee:	dcec      	bgt.n	8004eca <__multadd+0x12>
 8004ef0:	b1d7      	cbz	r7, 8004f28 <__multadd+0x70>
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	dc12      	bgt.n	8004f1e <__multadd+0x66>
 8004ef8:	6861      	ldr	r1, [r4, #4]
 8004efa:	4630      	mov	r0, r6
 8004efc:	3101      	adds	r1, #1
 8004efe:	f7ff ff90 	bl	8004e22 <_Balloc>
 8004f02:	6922      	ldr	r2, [r4, #16]
 8004f04:	3202      	adds	r2, #2
 8004f06:	f104 010c 	add.w	r1, r4, #12
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	0092      	lsls	r2, r2, #2
 8004f0e:	300c      	adds	r0, #12
 8004f10:	f7ff ff7c 	bl	8004e0c <memcpy>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffb7 	bl	8004e8a <_Bfree>
 8004f1c:	4644      	mov	r4, r8
 8004f1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f22:	3501      	adds	r5, #1
 8004f24:	615f      	str	r7, [r3, #20]
 8004f26:	6125      	str	r5, [r4, #16]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f2e <__hi0bits>:
 8004f2e:	0c02      	lsrs	r2, r0, #16
 8004f30:	0412      	lsls	r2, r2, #16
 8004f32:	4603      	mov	r3, r0
 8004f34:	b9b2      	cbnz	r2, 8004f64 <__hi0bits+0x36>
 8004f36:	0403      	lsls	r3, r0, #16
 8004f38:	2010      	movs	r0, #16
 8004f3a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f3e:	bf04      	itt	eq
 8004f40:	021b      	lsleq	r3, r3, #8
 8004f42:	3008      	addeq	r0, #8
 8004f44:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f48:	bf04      	itt	eq
 8004f4a:	011b      	lsleq	r3, r3, #4
 8004f4c:	3004      	addeq	r0, #4
 8004f4e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f52:	bf04      	itt	eq
 8004f54:	009b      	lsleq	r3, r3, #2
 8004f56:	3002      	addeq	r0, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	db06      	blt.n	8004f6a <__hi0bits+0x3c>
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	d503      	bpl.n	8004f68 <__hi0bits+0x3a>
 8004f60:	3001      	adds	r0, #1
 8004f62:	4770      	bx	lr
 8004f64:	2000      	movs	r0, #0
 8004f66:	e7e8      	b.n	8004f3a <__hi0bits+0xc>
 8004f68:	2020      	movs	r0, #32
 8004f6a:	4770      	bx	lr

08004f6c <__lo0bits>:
 8004f6c:	6803      	ldr	r3, [r0, #0]
 8004f6e:	f013 0207 	ands.w	r2, r3, #7
 8004f72:	4601      	mov	r1, r0
 8004f74:	d00b      	beq.n	8004f8e <__lo0bits+0x22>
 8004f76:	07da      	lsls	r2, r3, #31
 8004f78:	d423      	bmi.n	8004fc2 <__lo0bits+0x56>
 8004f7a:	0798      	lsls	r0, r3, #30
 8004f7c:	bf49      	itett	mi
 8004f7e:	085b      	lsrmi	r3, r3, #1
 8004f80:	089b      	lsrpl	r3, r3, #2
 8004f82:	2001      	movmi	r0, #1
 8004f84:	600b      	strmi	r3, [r1, #0]
 8004f86:	bf5c      	itt	pl
 8004f88:	600b      	strpl	r3, [r1, #0]
 8004f8a:	2002      	movpl	r0, #2
 8004f8c:	4770      	bx	lr
 8004f8e:	b298      	uxth	r0, r3
 8004f90:	b9a8      	cbnz	r0, 8004fbe <__lo0bits+0x52>
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	2010      	movs	r0, #16
 8004f96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f9a:	bf04      	itt	eq
 8004f9c:	0a1b      	lsreq	r3, r3, #8
 8004f9e:	3008      	addeq	r0, #8
 8004fa0:	071a      	lsls	r2, r3, #28
 8004fa2:	bf04      	itt	eq
 8004fa4:	091b      	lsreq	r3, r3, #4
 8004fa6:	3004      	addeq	r0, #4
 8004fa8:	079a      	lsls	r2, r3, #30
 8004faa:	bf04      	itt	eq
 8004fac:	089b      	lsreq	r3, r3, #2
 8004fae:	3002      	addeq	r0, #2
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	d402      	bmi.n	8004fba <__lo0bits+0x4e>
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	d006      	beq.n	8004fc6 <__lo0bits+0x5a>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	e7e9      	b.n	8004f96 <__lo0bits+0x2a>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4770      	bx	lr
 8004fc6:	2020      	movs	r0, #32
 8004fc8:	4770      	bx	lr

08004fca <__i2b>:
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	460c      	mov	r4, r1
 8004fce:	2101      	movs	r1, #1
 8004fd0:	f7ff ff27 	bl	8004e22 <_Balloc>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	6144      	str	r4, [r0, #20]
 8004fd8:	6102      	str	r2, [r0, #16]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <__multiply>:
 8004fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	690a      	ldr	r2, [r1, #16]
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bfb8      	it	lt
 8004fea:	460b      	movlt	r3, r1
 8004fec:	4688      	mov	r8, r1
 8004fee:	bfbc      	itt	lt
 8004ff0:	46a0      	movlt	r8, r4
 8004ff2:	461c      	movlt	r4, r3
 8004ff4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004ffc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005004:	eb07 0609 	add.w	r6, r7, r9
 8005008:	42b3      	cmp	r3, r6
 800500a:	bfb8      	it	lt
 800500c:	3101      	addlt	r1, #1
 800500e:	f7ff ff08 	bl	8004e22 <_Balloc>
 8005012:	f100 0514 	add.w	r5, r0, #20
 8005016:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800501a:	462b      	mov	r3, r5
 800501c:	2200      	movs	r2, #0
 800501e:	4573      	cmp	r3, lr
 8005020:	d316      	bcc.n	8005050 <__multiply+0x74>
 8005022:	f104 0214 	add.w	r2, r4, #20
 8005026:	f108 0114 	add.w	r1, r8, #20
 800502a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800502e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	9b00      	ldr	r3, [sp, #0]
 8005036:	9201      	str	r2, [sp, #4]
 8005038:	4293      	cmp	r3, r2
 800503a:	d80c      	bhi.n	8005056 <__multiply+0x7a>
 800503c:	2e00      	cmp	r6, #0
 800503e:	dd03      	ble.n	8005048 <__multiply+0x6c>
 8005040:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05d      	beq.n	8005104 <__multiply+0x128>
 8005048:	6106      	str	r6, [r0, #16]
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	f843 2b04 	str.w	r2, [r3], #4
 8005054:	e7e3      	b.n	800501e <__multiply+0x42>
 8005056:	f8b2 b000 	ldrh.w	fp, [r2]
 800505a:	f1bb 0f00 	cmp.w	fp, #0
 800505e:	d023      	beq.n	80050a8 <__multiply+0xcc>
 8005060:	4689      	mov	r9, r1
 8005062:	46ac      	mov	ip, r5
 8005064:	f04f 0800 	mov.w	r8, #0
 8005068:	f859 4b04 	ldr.w	r4, [r9], #4
 800506c:	f8dc a000 	ldr.w	sl, [ip]
 8005070:	b2a3      	uxth	r3, r4
 8005072:	fa1f fa8a 	uxth.w	sl, sl
 8005076:	fb0b a303 	mla	r3, fp, r3, sl
 800507a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800507e:	f8dc 4000 	ldr.w	r4, [ip]
 8005082:	4443      	add	r3, r8
 8005084:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005088:	fb0b 840a 	mla	r4, fp, sl, r8
 800508c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005090:	46e2      	mov	sl, ip
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005098:	454f      	cmp	r7, r9
 800509a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800509e:	f84a 3b04 	str.w	r3, [sl], #4
 80050a2:	d82b      	bhi.n	80050fc <__multiply+0x120>
 80050a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80050ae:	3204      	adds	r2, #4
 80050b0:	f1ba 0f00 	cmp.w	sl, #0
 80050b4:	d020      	beq.n	80050f8 <__multiply+0x11c>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	4689      	mov	r9, r1
 80050ba:	46a8      	mov	r8, r5
 80050bc:	f04f 0b00 	mov.w	fp, #0
 80050c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80050c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80050c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80050cc:	445c      	add	r4, fp
 80050ce:	46c4      	mov	ip, r8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80050d6:	f84c 3b04 	str.w	r3, [ip], #4
 80050da:	f859 3b04 	ldr.w	r3, [r9], #4
 80050de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	fb0a b303 	mla	r3, sl, r3, fp
 80050e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050ec:	454f      	cmp	r7, r9
 80050ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80050f2:	d805      	bhi.n	8005100 <__multiply+0x124>
 80050f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80050f8:	3504      	adds	r5, #4
 80050fa:	e79b      	b.n	8005034 <__multiply+0x58>
 80050fc:	46d4      	mov	ip, sl
 80050fe:	e7b3      	b.n	8005068 <__multiply+0x8c>
 8005100:	46e0      	mov	r8, ip
 8005102:	e7dd      	b.n	80050c0 <__multiply+0xe4>
 8005104:	3e01      	subs	r6, #1
 8005106:	e799      	b.n	800503c <__multiply+0x60>

08005108 <__pow5mult>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	4615      	mov	r5, r2
 800510e:	f012 0203 	ands.w	r2, r2, #3
 8005112:	4606      	mov	r6, r0
 8005114:	460f      	mov	r7, r1
 8005116:	d007      	beq.n	8005128 <__pow5mult+0x20>
 8005118:	3a01      	subs	r2, #1
 800511a:	4c21      	ldr	r4, [pc, #132]	; (80051a0 <__pow5mult+0x98>)
 800511c:	2300      	movs	r3, #0
 800511e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005122:	f7ff fec9 	bl	8004eb8 <__multadd>
 8005126:	4607      	mov	r7, r0
 8005128:	10ad      	asrs	r5, r5, #2
 800512a:	d035      	beq.n	8005198 <__pow5mult+0x90>
 800512c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800512e:	b93c      	cbnz	r4, 8005140 <__pow5mult+0x38>
 8005130:	2010      	movs	r0, #16
 8005132:	f7ff fe63 	bl	8004dfc <malloc>
 8005136:	6270      	str	r0, [r6, #36]	; 0x24
 8005138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800513c:	6004      	str	r4, [r0, #0]
 800513e:	60c4      	str	r4, [r0, #12]
 8005140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005148:	b94c      	cbnz	r4, 800515e <__pow5mult+0x56>
 800514a:	f240 2171 	movw	r1, #625	; 0x271
 800514e:	4630      	mov	r0, r6
 8005150:	f7ff ff3b 	bl	8004fca <__i2b>
 8005154:	2300      	movs	r3, #0
 8005156:	f8c8 0008 	str.w	r0, [r8, #8]
 800515a:	4604      	mov	r4, r0
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	f04f 0800 	mov.w	r8, #0
 8005162:	07eb      	lsls	r3, r5, #31
 8005164:	d50a      	bpl.n	800517c <__pow5mult+0x74>
 8005166:	4639      	mov	r1, r7
 8005168:	4622      	mov	r2, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff ff36 	bl	8004fdc <__multiply>
 8005170:	4639      	mov	r1, r7
 8005172:	4681      	mov	r9, r0
 8005174:	4630      	mov	r0, r6
 8005176:	f7ff fe88 	bl	8004e8a <_Bfree>
 800517a:	464f      	mov	r7, r9
 800517c:	106d      	asrs	r5, r5, #1
 800517e:	d00b      	beq.n	8005198 <__pow5mult+0x90>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	b938      	cbnz	r0, 8005194 <__pow5mult+0x8c>
 8005184:	4622      	mov	r2, r4
 8005186:	4621      	mov	r1, r4
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff ff27 	bl	8004fdc <__multiply>
 800518e:	6020      	str	r0, [r4, #0]
 8005190:	f8c0 8000 	str.w	r8, [r0]
 8005194:	4604      	mov	r4, r0
 8005196:	e7e4      	b.n	8005162 <__pow5mult+0x5a>
 8005198:	4638      	mov	r0, r7
 800519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519e:	bf00      	nop
 80051a0:	08005f68 	.word	0x08005f68

080051a4 <__lshift>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	460c      	mov	r4, r1
 80051aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	6849      	ldr	r1, [r1, #4]
 80051b2:	eb0a 0903 	add.w	r9, sl, r3
 80051b6:	68a3      	ldr	r3, [r4, #8]
 80051b8:	4607      	mov	r7, r0
 80051ba:	4616      	mov	r6, r2
 80051bc:	f109 0501 	add.w	r5, r9, #1
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	db32      	blt.n	800522a <__lshift+0x86>
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff fe2c 	bl	8004e22 <_Balloc>
 80051ca:	2300      	movs	r3, #0
 80051cc:	4680      	mov	r8, r0
 80051ce:	f100 0114 	add.w	r1, r0, #20
 80051d2:	461a      	mov	r2, r3
 80051d4:	4553      	cmp	r3, sl
 80051d6:	db2b      	blt.n	8005230 <__lshift+0x8c>
 80051d8:	6920      	ldr	r0, [r4, #16]
 80051da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051de:	f104 0314 	add.w	r3, r4, #20
 80051e2:	f016 021f 	ands.w	r2, r6, #31
 80051e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051ee:	d025      	beq.n	800523c <__lshift+0x98>
 80051f0:	f1c2 0e20 	rsb	lr, r2, #32
 80051f4:	2000      	movs	r0, #0
 80051f6:	681e      	ldr	r6, [r3, #0]
 80051f8:	468a      	mov	sl, r1
 80051fa:	4096      	lsls	r6, r2
 80051fc:	4330      	orrs	r0, r6
 80051fe:	f84a 0b04 	str.w	r0, [sl], #4
 8005202:	f853 0b04 	ldr.w	r0, [r3], #4
 8005206:	459c      	cmp	ip, r3
 8005208:	fa20 f00e 	lsr.w	r0, r0, lr
 800520c:	d814      	bhi.n	8005238 <__lshift+0x94>
 800520e:	6048      	str	r0, [r1, #4]
 8005210:	b108      	cbz	r0, 8005216 <__lshift+0x72>
 8005212:	f109 0502 	add.w	r5, r9, #2
 8005216:	3d01      	subs	r5, #1
 8005218:	4638      	mov	r0, r7
 800521a:	f8c8 5010 	str.w	r5, [r8, #16]
 800521e:	4621      	mov	r1, r4
 8005220:	f7ff fe33 	bl	8004e8a <_Bfree>
 8005224:	4640      	mov	r0, r8
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	3101      	adds	r1, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	e7c7      	b.n	80051c0 <__lshift+0x1c>
 8005230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005234:	3301      	adds	r3, #1
 8005236:	e7cd      	b.n	80051d4 <__lshift+0x30>
 8005238:	4651      	mov	r1, sl
 800523a:	e7dc      	b.n	80051f6 <__lshift+0x52>
 800523c:	3904      	subs	r1, #4
 800523e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005242:	f841 2f04 	str.w	r2, [r1, #4]!
 8005246:	459c      	cmp	ip, r3
 8005248:	d8f9      	bhi.n	800523e <__lshift+0x9a>
 800524a:	e7e4      	b.n	8005216 <__lshift+0x72>

0800524c <__mcmp>:
 800524c:	6903      	ldr	r3, [r0, #16]
 800524e:	690a      	ldr	r2, [r1, #16]
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	b530      	push	{r4, r5, lr}
 8005254:	d10c      	bne.n	8005270 <__mcmp+0x24>
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	3014      	adds	r0, #20
 800525a:	3114      	adds	r1, #20
 800525c:	1884      	adds	r4, r0, r2
 800525e:	4411      	add	r1, r2
 8005260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005268:	4295      	cmp	r5, r2
 800526a:	d003      	beq.n	8005274 <__mcmp+0x28>
 800526c:	d305      	bcc.n	800527a <__mcmp+0x2e>
 800526e:	2301      	movs	r3, #1
 8005270:	4618      	mov	r0, r3
 8005272:	bd30      	pop	{r4, r5, pc}
 8005274:	42a0      	cmp	r0, r4
 8005276:	d3f3      	bcc.n	8005260 <__mcmp+0x14>
 8005278:	e7fa      	b.n	8005270 <__mcmp+0x24>
 800527a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800527e:	e7f7      	b.n	8005270 <__mcmp+0x24>

08005280 <__mdiff>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	460d      	mov	r5, r1
 8005286:	4607      	mov	r7, r0
 8005288:	4611      	mov	r1, r2
 800528a:	4628      	mov	r0, r5
 800528c:	4614      	mov	r4, r2
 800528e:	f7ff ffdd 	bl	800524c <__mcmp>
 8005292:	1e06      	subs	r6, r0, #0
 8005294:	d108      	bne.n	80052a8 <__mdiff+0x28>
 8005296:	4631      	mov	r1, r6
 8005298:	4638      	mov	r0, r7
 800529a:	f7ff fdc2 	bl	8004e22 <_Balloc>
 800529e:	2301      	movs	r3, #1
 80052a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	bfa4      	itt	ge
 80052aa:	4623      	movge	r3, r4
 80052ac:	462c      	movge	r4, r5
 80052ae:	4638      	mov	r0, r7
 80052b0:	6861      	ldr	r1, [r4, #4]
 80052b2:	bfa6      	itte	ge
 80052b4:	461d      	movge	r5, r3
 80052b6:	2600      	movge	r6, #0
 80052b8:	2601      	movlt	r6, #1
 80052ba:	f7ff fdb2 	bl	8004e22 <_Balloc>
 80052be:	692b      	ldr	r3, [r5, #16]
 80052c0:	60c6      	str	r6, [r0, #12]
 80052c2:	6926      	ldr	r6, [r4, #16]
 80052c4:	f105 0914 	add.w	r9, r5, #20
 80052c8:	f104 0214 	add.w	r2, r4, #20
 80052cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80052d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80052d4:	f100 0514 	add.w	r5, r0, #20
 80052d8:	f04f 0e00 	mov.w	lr, #0
 80052dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80052e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80052e4:	fa1e f18a 	uxtah	r1, lr, sl
 80052e8:	b2a3      	uxth	r3, r4
 80052ea:	1ac9      	subs	r1, r1, r3
 80052ec:	0c23      	lsrs	r3, r4, #16
 80052ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80052f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80052f6:	b289      	uxth	r1, r1
 80052f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80052fc:	45c8      	cmp	r8, r9
 80052fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005302:	4694      	mov	ip, r2
 8005304:	f845 3b04 	str.w	r3, [r5], #4
 8005308:	d8e8      	bhi.n	80052dc <__mdiff+0x5c>
 800530a:	45bc      	cmp	ip, r7
 800530c:	d304      	bcc.n	8005318 <__mdiff+0x98>
 800530e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005312:	b183      	cbz	r3, 8005336 <__mdiff+0xb6>
 8005314:	6106      	str	r6, [r0, #16]
 8005316:	e7c5      	b.n	80052a4 <__mdiff+0x24>
 8005318:	f85c 1b04 	ldr.w	r1, [ip], #4
 800531c:	fa1e f381 	uxtah	r3, lr, r1
 8005320:	141a      	asrs	r2, r3, #16
 8005322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800532c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005330:	f845 3b04 	str.w	r3, [r5], #4
 8005334:	e7e9      	b.n	800530a <__mdiff+0x8a>
 8005336:	3e01      	subs	r6, #1
 8005338:	e7e9      	b.n	800530e <__mdiff+0x8e>

0800533a <__d2b>:
 800533a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800533e:	2101      	movs	r1, #1
 8005340:	4699      	mov	r9, r3
 8005342:	4690      	mov	r8, r2
 8005344:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 8005348:	f7ff fd6b 	bl	8004e22 <_Balloc>
 800534c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005350:	4607      	mov	r7, r0
 8005352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005356:	bb34      	cbnz	r4, 80053a6 <__d2b+0x6c>
 8005358:	f1b8 0200 	subs.w	r2, r8, #0
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	d027      	beq.n	80053b0 <__d2b+0x76>
 8005360:	a802      	add	r0, sp, #8
 8005362:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005366:	f7ff fe01 	bl	8004f6c <__lo0bits>
 800536a:	9900      	ldr	r1, [sp, #0]
 800536c:	b1f0      	cbz	r0, 80053ac <__d2b+0x72>
 800536e:	9a01      	ldr	r2, [sp, #4]
 8005370:	f1c0 0320 	rsb	r3, r0, #32
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	430b      	orrs	r3, r1
 800537a:	40c2      	lsrs	r2, r0
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	9201      	str	r2, [sp, #4]
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2102      	movne	r1, #2
 800538a:	2101      	moveq	r1, #1
 800538c:	6139      	str	r1, [r7, #16]
 800538e:	b1c4      	cbz	r4, 80053c2 <__d2b+0x88>
 8005390:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005394:	4404      	add	r4, r0
 8005396:	6034      	str	r4, [r6, #0]
 8005398:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800539c:	6028      	str	r0, [r5, #0]
 800539e:	4638      	mov	r0, r7
 80053a0:	b003      	add	sp, #12
 80053a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053aa:	e7d5      	b.n	8005358 <__d2b+0x1e>
 80053ac:	6179      	str	r1, [r7, #20]
 80053ae:	e7e7      	b.n	8005380 <__d2b+0x46>
 80053b0:	a801      	add	r0, sp, #4
 80053b2:	f7ff fddb 	bl	8004f6c <__lo0bits>
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	2101      	movs	r1, #1
 80053bc:	6139      	str	r1, [r7, #16]
 80053be:	3020      	adds	r0, #32
 80053c0:	e7e5      	b.n	800538e <__d2b+0x54>
 80053c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80053c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053ca:	6030      	str	r0, [r6, #0]
 80053cc:	6918      	ldr	r0, [r3, #16]
 80053ce:	f7ff fdae 	bl	8004f2e <__hi0bits>
 80053d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80053d6:	e7e1      	b.n	800539c <__d2b+0x62>

080053d8 <_calloc_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	fb02 f401 	mul.w	r4, r2, r1
 80053de:	4621      	mov	r1, r4
 80053e0:	f000 f856 	bl	8005490 <_malloc_r>
 80053e4:	4605      	mov	r5, r0
 80053e6:	b118      	cbz	r0, 80053f0 <_calloc_r+0x18>
 80053e8:	4622      	mov	r2, r4
 80053ea:	2100      	movs	r1, #0
 80053ec:	f7fe f962 	bl	80036b4 <memset>
 80053f0:	4628      	mov	r0, r5
 80053f2:	bd38      	pop	{r3, r4, r5, pc}

080053f4 <_free_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4605      	mov	r5, r0
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d045      	beq.n	8005488 <_free_r+0x94>
 80053fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005400:	1f0c      	subs	r4, r1, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	bfb8      	it	lt
 8005406:	18e4      	addlt	r4, r4, r3
 8005408:	f000 fc4a 	bl	8005ca0 <__malloc_lock>
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <_free_r+0x98>)
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	4610      	mov	r0, r2
 8005412:	b933      	cbnz	r3, 8005422 <_free_r+0x2e>
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6014      	str	r4, [r2, #0]
 8005418:	4628      	mov	r0, r5
 800541a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800541e:	f000 bc40 	b.w	8005ca2 <__malloc_unlock>
 8005422:	42a3      	cmp	r3, r4
 8005424:	d90c      	bls.n	8005440 <_free_r+0x4c>
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	1862      	adds	r2, r4, r1
 800542a:	4293      	cmp	r3, r2
 800542c:	bf04      	itt	eq
 800542e:	681a      	ldreq	r2, [r3, #0]
 8005430:	685b      	ldreq	r3, [r3, #4]
 8005432:	6063      	str	r3, [r4, #4]
 8005434:	bf04      	itt	eq
 8005436:	1852      	addeq	r2, r2, r1
 8005438:	6022      	streq	r2, [r4, #0]
 800543a:	6004      	str	r4, [r0, #0]
 800543c:	e7ec      	b.n	8005418 <_free_r+0x24>
 800543e:	4613      	mov	r3, r2
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	b10a      	cbz	r2, 8005448 <_free_r+0x54>
 8005444:	42a2      	cmp	r2, r4
 8005446:	d9fa      	bls.n	800543e <_free_r+0x4a>
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	1858      	adds	r0, r3, r1
 800544c:	42a0      	cmp	r0, r4
 800544e:	d10b      	bne.n	8005468 <_free_r+0x74>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	4401      	add	r1, r0
 8005454:	1858      	adds	r0, r3, r1
 8005456:	4282      	cmp	r2, r0
 8005458:	6019      	str	r1, [r3, #0]
 800545a:	d1dd      	bne.n	8005418 <_free_r+0x24>
 800545c:	6810      	ldr	r0, [r2, #0]
 800545e:	6852      	ldr	r2, [r2, #4]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	4401      	add	r1, r0
 8005464:	6019      	str	r1, [r3, #0]
 8005466:	e7d7      	b.n	8005418 <_free_r+0x24>
 8005468:	d902      	bls.n	8005470 <_free_r+0x7c>
 800546a:	230c      	movs	r3, #12
 800546c:	602b      	str	r3, [r5, #0]
 800546e:	e7d3      	b.n	8005418 <_free_r+0x24>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	1821      	adds	r1, r4, r0
 8005474:	428a      	cmp	r2, r1
 8005476:	bf04      	itt	eq
 8005478:	6811      	ldreq	r1, [r2, #0]
 800547a:	6852      	ldreq	r2, [r2, #4]
 800547c:	6062      	str	r2, [r4, #4]
 800547e:	bf04      	itt	eq
 8005480:	1809      	addeq	r1, r1, r0
 8005482:	6021      	streq	r1, [r4, #0]
 8005484:	605c      	str	r4, [r3, #4]
 8005486:	e7c7      	b.n	8005418 <_free_r+0x24>
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	2000020c 	.word	0x2000020c

08005490 <_malloc_r>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	1ccd      	adds	r5, r1, #3
 8005494:	f025 0503 	bic.w	r5, r5, #3
 8005498:	3508      	adds	r5, #8
 800549a:	2d0c      	cmp	r5, #12
 800549c:	bf38      	it	cc
 800549e:	250c      	movcc	r5, #12
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	4606      	mov	r6, r0
 80054a4:	db01      	blt.n	80054aa <_malloc_r+0x1a>
 80054a6:	42a9      	cmp	r1, r5
 80054a8:	d903      	bls.n	80054b2 <_malloc_r+0x22>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	2000      	movs	r0, #0
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	f000 fbf5 	bl	8005ca0 <__malloc_lock>
 80054b6:	4a21      	ldr	r2, [pc, #132]	; (800553c <_malloc_r+0xac>)
 80054b8:	6814      	ldr	r4, [r2, #0]
 80054ba:	4621      	mov	r1, r4
 80054bc:	b991      	cbnz	r1, 80054e4 <_malloc_r+0x54>
 80054be:	4c20      	ldr	r4, [pc, #128]	; (8005540 <_malloc_r+0xb0>)
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	b91b      	cbnz	r3, 80054cc <_malloc_r+0x3c>
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f97d 	bl	80057c4 <_sbrk_r>
 80054ca:	6020      	str	r0, [r4, #0]
 80054cc:	4629      	mov	r1, r5
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f978 	bl	80057c4 <_sbrk_r>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d124      	bne.n	8005522 <_malloc_r+0x92>
 80054d8:	230c      	movs	r3, #12
 80054da:	6033      	str	r3, [r6, #0]
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 fbe0 	bl	8005ca2 <__malloc_unlock>
 80054e2:	e7e4      	b.n	80054ae <_malloc_r+0x1e>
 80054e4:	680b      	ldr	r3, [r1, #0]
 80054e6:	1b5b      	subs	r3, r3, r5
 80054e8:	d418      	bmi.n	800551c <_malloc_r+0x8c>
 80054ea:	2b0b      	cmp	r3, #11
 80054ec:	d90f      	bls.n	800550e <_malloc_r+0x7e>
 80054ee:	600b      	str	r3, [r1, #0]
 80054f0:	50cd      	str	r5, [r1, r3]
 80054f2:	18cc      	adds	r4, r1, r3
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 fbd4 	bl	8005ca2 <__malloc_unlock>
 80054fa:	f104 000b 	add.w	r0, r4, #11
 80054fe:	1d23      	adds	r3, r4, #4
 8005500:	f020 0007 	bic.w	r0, r0, #7
 8005504:	1ac3      	subs	r3, r0, r3
 8005506:	d0d3      	beq.n	80054b0 <_malloc_r+0x20>
 8005508:	425a      	negs	r2, r3
 800550a:	50e2      	str	r2, [r4, r3]
 800550c:	e7d0      	b.n	80054b0 <_malloc_r+0x20>
 800550e:	428c      	cmp	r4, r1
 8005510:	684b      	ldr	r3, [r1, #4]
 8005512:	bf16      	itet	ne
 8005514:	6063      	strne	r3, [r4, #4]
 8005516:	6013      	streq	r3, [r2, #0]
 8005518:	460c      	movne	r4, r1
 800551a:	e7eb      	b.n	80054f4 <_malloc_r+0x64>
 800551c:	460c      	mov	r4, r1
 800551e:	6849      	ldr	r1, [r1, #4]
 8005520:	e7cc      	b.n	80054bc <_malloc_r+0x2c>
 8005522:	1cc4      	adds	r4, r0, #3
 8005524:	f024 0403 	bic.w	r4, r4, #3
 8005528:	42a0      	cmp	r0, r4
 800552a:	d005      	beq.n	8005538 <_malloc_r+0xa8>
 800552c:	1a21      	subs	r1, r4, r0
 800552e:	4630      	mov	r0, r6
 8005530:	f000 f948 	bl	80057c4 <_sbrk_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d0cf      	beq.n	80054d8 <_malloc_r+0x48>
 8005538:	6025      	str	r5, [r4, #0]
 800553a:	e7db      	b.n	80054f4 <_malloc_r+0x64>
 800553c:	2000020c 	.word	0x2000020c
 8005540:	20000210 	.word	0x20000210

08005544 <__sfputc_r>:
 8005544:	6893      	ldr	r3, [r2, #8]
 8005546:	3b01      	subs	r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	b410      	push	{r4}
 800554c:	6093      	str	r3, [r2, #8]
 800554e:	da08      	bge.n	8005562 <__sfputc_r+0x1e>
 8005550:	6994      	ldr	r4, [r2, #24]
 8005552:	42a3      	cmp	r3, r4
 8005554:	db01      	blt.n	800555a <__sfputc_r+0x16>
 8005556:	290a      	cmp	r1, #10
 8005558:	d103      	bne.n	8005562 <__sfputc_r+0x1e>
 800555a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800555e:	f000 b985 	b.w	800586c <__swbuf_r>
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	1c58      	adds	r0, r3, #1
 8005566:	6010      	str	r0, [r2, #0]
 8005568:	7019      	strb	r1, [r3, #0]
 800556a:	4608      	mov	r0, r1
 800556c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005570:	4770      	bx	lr

08005572 <__sfputs_r>:
 8005572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005574:	4606      	mov	r6, r0
 8005576:	460f      	mov	r7, r1
 8005578:	4614      	mov	r4, r2
 800557a:	18d5      	adds	r5, r2, r3
 800557c:	42ac      	cmp	r4, r5
 800557e:	d101      	bne.n	8005584 <__sfputs_r+0x12>
 8005580:	2000      	movs	r0, #0
 8005582:	e007      	b.n	8005594 <__sfputs_r+0x22>
 8005584:	463a      	mov	r2, r7
 8005586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff ffda 	bl	8005544 <__sfputc_r>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d1f3      	bne.n	800557c <__sfputs_r+0xa>
 8005594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005598 <_vfiprintf_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	b09d      	sub	sp, #116	; 0x74
 80055a0:	4617      	mov	r7, r2
 80055a2:	461d      	mov	r5, r3
 80055a4:	4606      	mov	r6, r0
 80055a6:	b118      	cbz	r0, 80055b0 <_vfiprintf_r+0x18>
 80055a8:	6983      	ldr	r3, [r0, #24]
 80055aa:	b90b      	cbnz	r3, 80055b0 <_vfiprintf_r+0x18>
 80055ac:	f7ff fb8e 	bl	8004ccc <__sinit>
 80055b0:	4b7c      	ldr	r3, [pc, #496]	; (80057a4 <_vfiprintf_r+0x20c>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d158      	bne.n	8005668 <_vfiprintf_r+0xd0>
 80055b6:	6874      	ldr	r4, [r6, #4]
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	0718      	lsls	r0, r3, #28
 80055bc:	d55e      	bpl.n	800567c <_vfiprintf_r+0xe4>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05b      	beq.n	800567c <_vfiprintf_r+0xe4>
 80055c4:	2300      	movs	r3, #0
 80055c6:	9309      	str	r3, [sp, #36]	; 0x24
 80055c8:	2320      	movs	r3, #32
 80055ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ce:	2330      	movs	r3, #48	; 0x30
 80055d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d4:	9503      	str	r5, [sp, #12]
 80055d6:	f04f 0b01 	mov.w	fp, #1
 80055da:	46b8      	mov	r8, r7
 80055dc:	4645      	mov	r5, r8
 80055de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055e2:	b10b      	cbz	r3, 80055e8 <_vfiprintf_r+0x50>
 80055e4:	2b25      	cmp	r3, #37	; 0x25
 80055e6:	d154      	bne.n	8005692 <_vfiprintf_r+0xfa>
 80055e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80055ec:	d00b      	beq.n	8005606 <_vfiprintf_r+0x6e>
 80055ee:	4653      	mov	r3, sl
 80055f0:	463a      	mov	r2, r7
 80055f2:	4621      	mov	r1, r4
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff ffbc 	bl	8005572 <__sfputs_r>
 80055fa:	3001      	adds	r0, #1
 80055fc:	f000 80c2 	beq.w	8005784 <_vfiprintf_r+0x1ec>
 8005600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005602:	4453      	add	r3, sl
 8005604:	9309      	str	r3, [sp, #36]	; 0x24
 8005606:	f898 3000 	ldrb.w	r3, [r8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80ba 	beq.w	8005784 <_vfiprintf_r+0x1ec>
 8005610:	2300      	movs	r3, #0
 8005612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005622:	931a      	str	r3, [sp, #104]	; 0x68
 8005624:	46a8      	mov	r8, r5
 8005626:	2205      	movs	r2, #5
 8005628:	f818 1b01 	ldrb.w	r1, [r8], #1
 800562c:	485e      	ldr	r0, [pc, #376]	; (80057a8 <_vfiprintf_r+0x210>)
 800562e:	f7fa fdf7 	bl	8000220 <memchr>
 8005632:	9b04      	ldr	r3, [sp, #16]
 8005634:	bb78      	cbnz	r0, 8005696 <_vfiprintf_r+0xfe>
 8005636:	06d9      	lsls	r1, r3, #27
 8005638:	bf44      	itt	mi
 800563a:	2220      	movmi	r2, #32
 800563c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005640:	071a      	lsls	r2, r3, #28
 8005642:	bf44      	itt	mi
 8005644:	222b      	movmi	r2, #43	; 0x2b
 8005646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800564a:	782a      	ldrb	r2, [r5, #0]
 800564c:	2a2a      	cmp	r2, #42	; 0x2a
 800564e:	d02a      	beq.n	80056a6 <_vfiprintf_r+0x10e>
 8005650:	9a07      	ldr	r2, [sp, #28]
 8005652:	46a8      	mov	r8, r5
 8005654:	2000      	movs	r0, #0
 8005656:	250a      	movs	r5, #10
 8005658:	4641      	mov	r1, r8
 800565a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565e:	3b30      	subs	r3, #48	; 0x30
 8005660:	2b09      	cmp	r3, #9
 8005662:	d969      	bls.n	8005738 <_vfiprintf_r+0x1a0>
 8005664:	b360      	cbz	r0, 80056c0 <_vfiprintf_r+0x128>
 8005666:	e024      	b.n	80056b2 <_vfiprintf_r+0x11a>
 8005668:	4b50      	ldr	r3, [pc, #320]	; (80057ac <_vfiprintf_r+0x214>)
 800566a:	429c      	cmp	r4, r3
 800566c:	d101      	bne.n	8005672 <_vfiprintf_r+0xda>
 800566e:	68b4      	ldr	r4, [r6, #8]
 8005670:	e7a2      	b.n	80055b8 <_vfiprintf_r+0x20>
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <_vfiprintf_r+0x218>)
 8005674:	429c      	cmp	r4, r3
 8005676:	bf08      	it	eq
 8005678:	68f4      	ldreq	r4, [r6, #12]
 800567a:	e79d      	b.n	80055b8 <_vfiprintf_r+0x20>
 800567c:	4621      	mov	r1, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f958 	bl	8005934 <__swsetup_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	d09d      	beq.n	80055c4 <_vfiprintf_r+0x2c>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568c:	b01d      	add	sp, #116	; 0x74
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	46a8      	mov	r8, r5
 8005694:	e7a2      	b.n	80055dc <_vfiprintf_r+0x44>
 8005696:	4a44      	ldr	r2, [pc, #272]	; (80057a8 <_vfiprintf_r+0x210>)
 8005698:	1a80      	subs	r0, r0, r2
 800569a:	fa0b f000 	lsl.w	r0, fp, r0
 800569e:	4318      	orrs	r0, r3
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	4645      	mov	r5, r8
 80056a4:	e7be      	b.n	8005624 <_vfiprintf_r+0x8c>
 80056a6:	9a03      	ldr	r2, [sp, #12]
 80056a8:	1d11      	adds	r1, r2, #4
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	9103      	str	r1, [sp, #12]
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	db01      	blt.n	80056b6 <_vfiprintf_r+0x11e>
 80056b2:	9207      	str	r2, [sp, #28]
 80056b4:	e004      	b.n	80056c0 <_vfiprintf_r+0x128>
 80056b6:	4252      	negs	r2, r2
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	9207      	str	r2, [sp, #28]
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	f898 3000 	ldrb.w	r3, [r8]
 80056c4:	2b2e      	cmp	r3, #46	; 0x2e
 80056c6:	d10e      	bne.n	80056e6 <_vfiprintf_r+0x14e>
 80056c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80056cc:	2b2a      	cmp	r3, #42	; 0x2a
 80056ce:	d138      	bne.n	8005742 <_vfiprintf_r+0x1aa>
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	9203      	str	r2, [sp, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bfb8      	it	lt
 80056dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056e0:	f108 0802 	add.w	r8, r8, #2
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	4d33      	ldr	r5, [pc, #204]	; (80057b4 <_vfiprintf_r+0x21c>)
 80056e8:	f898 1000 	ldrb.w	r1, [r8]
 80056ec:	2203      	movs	r2, #3
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7fa fd96 	bl	8000220 <memchr>
 80056f4:	b140      	cbz	r0, 8005708 <_vfiprintf_r+0x170>
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	1b40      	subs	r0, r0, r5
 80056fa:	fa03 f000 	lsl.w	r0, r3, r0
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	4303      	orrs	r3, r0
 8005702:	f108 0801 	add.w	r8, r8, #1
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	f898 1000 	ldrb.w	r1, [r8]
 800570c:	482a      	ldr	r0, [pc, #168]	; (80057b8 <_vfiprintf_r+0x220>)
 800570e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005712:	2206      	movs	r2, #6
 8005714:	f108 0701 	add.w	r7, r8, #1
 8005718:	f7fa fd82 	bl	8000220 <memchr>
 800571c:	2800      	cmp	r0, #0
 800571e:	d037      	beq.n	8005790 <_vfiprintf_r+0x1f8>
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <_vfiprintf_r+0x224>)
 8005722:	bb1b      	cbnz	r3, 800576c <_vfiprintf_r+0x1d4>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	3307      	adds	r3, #7
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	3308      	adds	r3, #8
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005732:	444b      	add	r3, r9
 8005734:	9309      	str	r3, [sp, #36]	; 0x24
 8005736:	e750      	b.n	80055da <_vfiprintf_r+0x42>
 8005738:	fb05 3202 	mla	r2, r5, r2, r3
 800573c:	2001      	movs	r0, #1
 800573e:	4688      	mov	r8, r1
 8005740:	e78a      	b.n	8005658 <_vfiprintf_r+0xc0>
 8005742:	2300      	movs	r3, #0
 8005744:	f108 0801 	add.w	r8, r8, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	4619      	mov	r1, r3
 800574c:	250a      	movs	r5, #10
 800574e:	4640      	mov	r0, r8
 8005750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005754:	3a30      	subs	r2, #48	; 0x30
 8005756:	2a09      	cmp	r2, #9
 8005758:	d903      	bls.n	8005762 <_vfiprintf_r+0x1ca>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0c3      	beq.n	80056e6 <_vfiprintf_r+0x14e>
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	e7c1      	b.n	80056e6 <_vfiprintf_r+0x14e>
 8005762:	fb05 2101 	mla	r1, r5, r1, r2
 8005766:	2301      	movs	r3, #1
 8005768:	4680      	mov	r8, r0
 800576a:	e7f0      	b.n	800574e <_vfiprintf_r+0x1b6>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4622      	mov	r2, r4
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <_vfiprintf_r+0x228>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4630      	mov	r0, r6
 8005778:	f7fe f836 	bl	80037e8 <_printf_float>
 800577c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005780:	4681      	mov	r9, r0
 8005782:	d1d5      	bne.n	8005730 <_vfiprintf_r+0x198>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	065b      	lsls	r3, r3, #25
 8005788:	f53f af7e 	bmi.w	8005688 <_vfiprintf_r+0xf0>
 800578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578e:	e77d      	b.n	800568c <_vfiprintf_r+0xf4>
 8005790:	ab03      	add	r3, sp, #12
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4622      	mov	r2, r4
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <_vfiprintf_r+0x228>)
 8005798:	a904      	add	r1, sp, #16
 800579a:	4630      	mov	r0, r6
 800579c:	f7fe fae0 	bl	8003d60 <_printf_i>
 80057a0:	e7ec      	b.n	800577c <_vfiprintf_r+0x1e4>
 80057a2:	bf00      	nop
 80057a4:	08005e34 	.word	0x08005e34
 80057a8:	08005f74 	.word	0x08005f74
 80057ac:	08005e54 	.word	0x08005e54
 80057b0:	08005e14 	.word	0x08005e14
 80057b4:	08005f7a 	.word	0x08005f7a
 80057b8:	08005f7e 	.word	0x08005f7e
 80057bc:	080037e9 	.word	0x080037e9
 80057c0:	08005573 	.word	0x08005573

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4c06      	ldr	r4, [pc, #24]	; (80057e0 <_sbrk_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4605      	mov	r5, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	f7fc febc 	bl	800254c <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000214 	.word	0x20000214

080057e4 <__sread>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	460c      	mov	r4, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	f000 fa5a 	bl	8005ca4 <_read_r>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	bfab      	itete	ge
 80057f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057f6:	89a3      	ldrhlt	r3, [r4, #12]
 80057f8:	181b      	addge	r3, r3, r0
 80057fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057fe:	bfac      	ite	ge
 8005800:	6563      	strge	r3, [r4, #84]	; 0x54
 8005802:	81a3      	strhlt	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__swrite>:
 8005806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	461f      	mov	r7, r3
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	05db      	lsls	r3, r3, #23
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	4616      	mov	r6, r2
 8005816:	d505      	bpl.n	8005824 <__swrite+0x1e>
 8005818:	2302      	movs	r3, #2
 800581a:	2200      	movs	r2, #0
 800581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005820:	f000 f9b6 	bl	8005b90 <_lseek_r>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800582a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	4632      	mov	r2, r6
 8005832:	463b      	mov	r3, r7
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800583a:	f000 b869 	b.w	8005910 <_write_r>

0800583e <__sseek>:
 800583e:	b510      	push	{r4, lr}
 8005840:	460c      	mov	r4, r1
 8005842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005846:	f000 f9a3 	bl	8005b90 <_lseek_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	bf15      	itete	ne
 8005850:	6560      	strne	r0, [r4, #84]	; 0x54
 8005852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800585a:	81a3      	strheq	r3, [r4, #12]
 800585c:	bf18      	it	ne
 800585e:	81a3      	strhne	r3, [r4, #12]
 8005860:	bd10      	pop	{r4, pc}

08005862 <__sclose>:
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 b8d3 	b.w	8005a10 <_close_r>
	...

0800586c <__swbuf_r>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	460e      	mov	r6, r1
 8005870:	4614      	mov	r4, r2
 8005872:	4605      	mov	r5, r0
 8005874:	b118      	cbz	r0, 800587e <__swbuf_r+0x12>
 8005876:	6983      	ldr	r3, [r0, #24]
 8005878:	b90b      	cbnz	r3, 800587e <__swbuf_r+0x12>
 800587a:	f7ff fa27 	bl	8004ccc <__sinit>
 800587e:	4b21      	ldr	r3, [pc, #132]	; (8005904 <__swbuf_r+0x98>)
 8005880:	429c      	cmp	r4, r3
 8005882:	d12a      	bne.n	80058da <__swbuf_r+0x6e>
 8005884:	686c      	ldr	r4, [r5, #4]
 8005886:	69a3      	ldr	r3, [r4, #24]
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	071a      	lsls	r2, r3, #28
 800588e:	d52e      	bpl.n	80058ee <__swbuf_r+0x82>
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	b363      	cbz	r3, 80058ee <__swbuf_r+0x82>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	6820      	ldr	r0, [r4, #0]
 8005898:	1ac0      	subs	r0, r0, r3
 800589a:	6963      	ldr	r3, [r4, #20]
 800589c:	b2f6      	uxtb	r6, r6
 800589e:	4283      	cmp	r3, r0
 80058a0:	4637      	mov	r7, r6
 80058a2:	dc04      	bgt.n	80058ae <__swbuf_r+0x42>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f948 	bl	8005b3c <_fflush_r>
 80058ac:	bb28      	cbnz	r0, 80058fa <__swbuf_r+0x8e>
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60a3      	str	r3, [r4, #8]
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	701e      	strb	r6, [r3, #0]
 80058bc:	6963      	ldr	r3, [r4, #20]
 80058be:	3001      	adds	r0, #1
 80058c0:	4283      	cmp	r3, r0
 80058c2:	d004      	beq.n	80058ce <__swbuf_r+0x62>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	07db      	lsls	r3, r3, #31
 80058c8:	d519      	bpl.n	80058fe <__swbuf_r+0x92>
 80058ca:	2e0a      	cmp	r6, #10
 80058cc:	d117      	bne.n	80058fe <__swbuf_r+0x92>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 f933 	bl	8005b3c <_fflush_r>
 80058d6:	b190      	cbz	r0, 80058fe <__swbuf_r+0x92>
 80058d8:	e00f      	b.n	80058fa <__swbuf_r+0x8e>
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <__swbuf_r+0x9c>)
 80058dc:	429c      	cmp	r4, r3
 80058de:	d101      	bne.n	80058e4 <__swbuf_r+0x78>
 80058e0:	68ac      	ldr	r4, [r5, #8]
 80058e2:	e7d0      	b.n	8005886 <__swbuf_r+0x1a>
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <__swbuf_r+0xa0>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	bf08      	it	eq
 80058ea:	68ec      	ldreq	r4, [r5, #12]
 80058ec:	e7cb      	b.n	8005886 <__swbuf_r+0x1a>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 f81f 	bl	8005934 <__swsetup_r>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0cc      	beq.n	8005894 <__swbuf_r+0x28>
 80058fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058fe:	4638      	mov	r0, r7
 8005900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005902:	bf00      	nop
 8005904:	08005e34 	.word	0x08005e34
 8005908:	08005e54 	.word	0x08005e54
 800590c:	08005e14 	.word	0x08005e14

08005910 <_write_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4c07      	ldr	r4, [pc, #28]	; (8005930 <_write_r+0x20>)
 8005914:	4605      	mov	r5, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	6022      	str	r2, [r4, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fc fdc3 	bl	80024aa <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_write_r+0x1e>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	b103      	cbz	r3, 800592e <_write_r+0x1e>
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000214 	.word	0x20000214

08005934 <__swsetup_r>:
 8005934:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <__swsetup_r+0xcc>)
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	681d      	ldr	r5, [r3, #0]
 800593a:	4606      	mov	r6, r0
 800593c:	460c      	mov	r4, r1
 800593e:	b125      	cbz	r5, 800594a <__swsetup_r+0x16>
 8005940:	69ab      	ldr	r3, [r5, #24]
 8005942:	b913      	cbnz	r3, 800594a <__swsetup_r+0x16>
 8005944:	4628      	mov	r0, r5
 8005946:	f7ff f9c1 	bl	8004ccc <__sinit>
 800594a:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <__swsetup_r+0xd0>)
 800594c:	429c      	cmp	r4, r3
 800594e:	d10f      	bne.n	8005970 <__swsetup_r+0x3c>
 8005950:	686c      	ldr	r4, [r5, #4]
 8005952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005956:	b29a      	uxth	r2, r3
 8005958:	0715      	lsls	r5, r2, #28
 800595a:	d42c      	bmi.n	80059b6 <__swsetup_r+0x82>
 800595c:	06d0      	lsls	r0, r2, #27
 800595e:	d411      	bmi.n	8005984 <__swsetup_r+0x50>
 8005960:	2209      	movs	r2, #9
 8005962:	6032      	str	r2, [r6, #0]
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800596e:	e03e      	b.n	80059ee <__swsetup_r+0xba>
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <__swsetup_r+0xd4>)
 8005972:	429c      	cmp	r4, r3
 8005974:	d101      	bne.n	800597a <__swsetup_r+0x46>
 8005976:	68ac      	ldr	r4, [r5, #8]
 8005978:	e7eb      	b.n	8005952 <__swsetup_r+0x1e>
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <__swsetup_r+0xd8>)
 800597c:	429c      	cmp	r4, r3
 800597e:	bf08      	it	eq
 8005980:	68ec      	ldreq	r4, [r5, #12]
 8005982:	e7e6      	b.n	8005952 <__swsetup_r+0x1e>
 8005984:	0751      	lsls	r1, r2, #29
 8005986:	d512      	bpl.n	80059ae <__swsetup_r+0x7a>
 8005988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598a:	b141      	cbz	r1, 800599e <__swsetup_r+0x6a>
 800598c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005990:	4299      	cmp	r1, r3
 8005992:	d002      	beq.n	800599a <__swsetup_r+0x66>
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff fd2d 	bl	80053f4 <_free_r>
 800599a:	2300      	movs	r3, #0
 800599c:	6363      	str	r3, [r4, #52]	; 0x34
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	2300      	movs	r3, #0
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f043 0308 	orr.w	r3, r3, #8
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	b94b      	cbnz	r3, 80059ce <__swsetup_r+0x9a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c4:	d003      	beq.n	80059ce <__swsetup_r+0x9a>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f917 	bl	8005bfc <__smakebuf_r>
 80059ce:	89a2      	ldrh	r2, [r4, #12]
 80059d0:	f012 0301 	ands.w	r3, r2, #1
 80059d4:	d00c      	beq.n	80059f0 <__swsetup_r+0xbc>
 80059d6:	2300      	movs	r3, #0
 80059d8:	60a3      	str	r3, [r4, #8]
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	425b      	negs	r3, r3
 80059de:	61a3      	str	r3, [r4, #24]
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	b953      	cbnz	r3, 80059fa <__swsetup_r+0xc6>
 80059e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059ec:	d1ba      	bne.n	8005964 <__swsetup_r+0x30>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	0792      	lsls	r2, r2, #30
 80059f2:	bf58      	it	pl
 80059f4:	6963      	ldrpl	r3, [r4, #20]
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	e7f2      	b.n	80059e0 <__swsetup_r+0xac>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e7f7      	b.n	80059ee <__swsetup_r+0xba>
 80059fe:	bf00      	nop
 8005a00:	20000004 	.word	0x20000004
 8005a04:	08005e34 	.word	0x08005e34
 8005a08:	08005e54 	.word	0x08005e54
 8005a0c:	08005e14 	.word	0x08005e14

08005a10 <_close_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4c06      	ldr	r4, [pc, #24]	; (8005a2c <_close_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4605      	mov	r5, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	f7fc fd61 	bl	80024e2 <_close>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_close_r+0x1a>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_close_r+0x1a>
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000214 	.word	0x20000214

08005a30 <__sflush_r>:
 8005a30:	898a      	ldrh	r2, [r1, #12]
 8005a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a36:	4605      	mov	r5, r0
 8005a38:	0710      	lsls	r0, r2, #28
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	d458      	bmi.n	8005af0 <__sflush_r+0xc0>
 8005a3e:	684b      	ldr	r3, [r1, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dc05      	bgt.n	8005a50 <__sflush_r+0x20>
 8005a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dc02      	bgt.n	8005a50 <__sflush_r+0x20>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	d0f9      	beq.n	8005a4a <__sflush_r+0x1a>
 8005a56:	2300      	movs	r3, #0
 8005a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a5c:	682f      	ldr	r7, [r5, #0]
 8005a5e:	6a21      	ldr	r1, [r4, #32]
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	d032      	beq.n	8005aca <__sflush_r+0x9a>
 8005a64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	075a      	lsls	r2, r3, #29
 8005a6a:	d505      	bpl.n	8005a78 <__sflush_r+0x48>
 8005a6c:	6863      	ldr	r3, [r4, #4]
 8005a6e:	1ac0      	subs	r0, r0, r3
 8005a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a72:	b10b      	cbz	r3, 8005a78 <__sflush_r+0x48>
 8005a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a76:	1ac0      	subs	r0, r0, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a7e:	6a21      	ldr	r1, [r4, #32]
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	d106      	bne.n	8005a98 <__sflush_r+0x68>
 8005a8a:	6829      	ldr	r1, [r5, #0]
 8005a8c:	291d      	cmp	r1, #29
 8005a8e:	d848      	bhi.n	8005b22 <__sflush_r+0xf2>
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <__sflush_r+0x108>)
 8005a92:	40ca      	lsrs	r2, r1
 8005a94:	07d6      	lsls	r6, r2, #31
 8005a96:	d544      	bpl.n	8005b22 <__sflush_r+0xf2>
 8005a98:	2200      	movs	r2, #0
 8005a9a:	6062      	str	r2, [r4, #4]
 8005a9c:	04d9      	lsls	r1, r3, #19
 8005a9e:	6922      	ldr	r2, [r4, #16]
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	d504      	bpl.n	8005aae <__sflush_r+0x7e>
 8005aa4:	1c42      	adds	r2, r0, #1
 8005aa6:	d101      	bne.n	8005aac <__sflush_r+0x7c>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b903      	cbnz	r3, 8005aae <__sflush_r+0x7e>
 8005aac:	6560      	str	r0, [r4, #84]	; 0x54
 8005aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ab0:	602f      	str	r7, [r5, #0]
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d0c9      	beq.n	8005a4a <__sflush_r+0x1a>
 8005ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aba:	4299      	cmp	r1, r3
 8005abc:	d002      	beq.n	8005ac4 <__sflush_r+0x94>
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f7ff fc98 	bl	80053f4 <_free_r>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac8:	e7c0      	b.n	8005a4c <__sflush_r+0x1c>
 8005aca:	2301      	movs	r3, #1
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	1c41      	adds	r1, r0, #1
 8005ad2:	d1c8      	bne.n	8005a66 <__sflush_r+0x36>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0c5      	beq.n	8005a66 <__sflush_r+0x36>
 8005ada:	2b1d      	cmp	r3, #29
 8005adc:	d001      	beq.n	8005ae2 <__sflush_r+0xb2>
 8005ade:	2b16      	cmp	r3, #22
 8005ae0:	d101      	bne.n	8005ae6 <__sflush_r+0xb6>
 8005ae2:	602f      	str	r7, [r5, #0]
 8005ae4:	e7b1      	b.n	8005a4a <__sflush_r+0x1a>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	e7ad      	b.n	8005a4c <__sflush_r+0x1c>
 8005af0:	690f      	ldr	r7, [r1, #16]
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	d0a9      	beq.n	8005a4a <__sflush_r+0x1a>
 8005af6:	0793      	lsls	r3, r2, #30
 8005af8:	680e      	ldr	r6, [r1, #0]
 8005afa:	bf08      	it	eq
 8005afc:	694b      	ldreq	r3, [r1, #20]
 8005afe:	600f      	str	r7, [r1, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2300      	movne	r3, #0
 8005b04:	eba6 0807 	sub.w	r8, r6, r7
 8005b08:	608b      	str	r3, [r1, #8]
 8005b0a:	f1b8 0f00 	cmp.w	r8, #0
 8005b0e:	dd9c      	ble.n	8005a4a <__sflush_r+0x1a>
 8005b10:	4643      	mov	r3, r8
 8005b12:	463a      	mov	r2, r7
 8005b14:	6a21      	ldr	r1, [r4, #32]
 8005b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	dc06      	bgt.n	8005b2e <__sflush_r+0xfe>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	e78e      	b.n	8005a4c <__sflush_r+0x1c>
 8005b2e:	4407      	add	r7, r0
 8005b30:	eba8 0800 	sub.w	r8, r8, r0
 8005b34:	e7e9      	b.n	8005b0a <__sflush_r+0xda>
 8005b36:	bf00      	nop
 8005b38:	20400001 	.word	0x20400001

08005b3c <_fflush_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	4605      	mov	r5, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	b1db      	cbz	r3, 8005b7e <_fflush_r+0x42>
 8005b46:	b118      	cbz	r0, 8005b50 <_fflush_r+0x14>
 8005b48:	6983      	ldr	r3, [r0, #24]
 8005b4a:	b90b      	cbnz	r3, 8005b50 <_fflush_r+0x14>
 8005b4c:	f7ff f8be 	bl	8004ccc <__sinit>
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <_fflush_r+0x48>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d109      	bne.n	8005b6a <_fflush_r+0x2e>
 8005b56:	686c      	ldr	r4, [r5, #4]
 8005b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5c:	b17b      	cbz	r3, 8005b7e <_fflush_r+0x42>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b66:	f7ff bf63 	b.w	8005a30 <__sflush_r>
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <_fflush_r+0x4c>)
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	d101      	bne.n	8005b74 <_fflush_r+0x38>
 8005b70:	68ac      	ldr	r4, [r5, #8]
 8005b72:	e7f1      	b.n	8005b58 <_fflush_r+0x1c>
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <_fflush_r+0x50>)
 8005b76:	429c      	cmp	r4, r3
 8005b78:	bf08      	it	eq
 8005b7a:	68ec      	ldreq	r4, [r5, #12]
 8005b7c:	e7ec      	b.n	8005b58 <_fflush_r+0x1c>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	bf00      	nop
 8005b84:	08005e34 	.word	0x08005e34
 8005b88:	08005e54 	.word	0x08005e54
 8005b8c:	08005e14 	.word	0x08005e14

08005b90 <_lseek_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4c07      	ldr	r4, [pc, #28]	; (8005bb0 <_lseek_r+0x20>)
 8005b94:	4605      	mov	r5, r0
 8005b96:	4608      	mov	r0, r1
 8005b98:	4611      	mov	r1, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	6022      	str	r2, [r4, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fc fcc6 	bl	8002530 <_lseek>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_lseek_r+0x1e>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_lseek_r+0x1e>
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000214 	.word	0x20000214

08005bb4 <__swhatbuf_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	460e      	mov	r6, r1
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	b096      	sub	sp, #88	; 0x58
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	da07      	bge.n	8005bd6 <__swhatbuf_r+0x22>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	89b3      	ldrh	r3, [r6, #12]
 8005bcc:	061a      	lsls	r2, r3, #24
 8005bce:	d410      	bmi.n	8005bf2 <__swhatbuf_r+0x3e>
 8005bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd4:	e00e      	b.n	8005bf4 <__swhatbuf_r+0x40>
 8005bd6:	466a      	mov	r2, sp
 8005bd8:	f000 f884 	bl	8005ce4 <_fstat_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	dbf2      	blt.n	8005bc6 <__swhatbuf_r+0x12>
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005be6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bea:	425a      	negs	r2, r3
 8005bec:	415a      	adcs	r2, r3
 8005bee:	602a      	str	r2, [r5, #0]
 8005bf0:	e7ee      	b.n	8005bd0 <__swhatbuf_r+0x1c>
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	b016      	add	sp, #88	; 0x58
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}

08005bfc <__smakebuf_r>:
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c00:	079d      	lsls	r5, r3, #30
 8005c02:	4606      	mov	r6, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	d507      	bpl.n	8005c18 <__smakebuf_r+0x1c>
 8005c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	2301      	movs	r3, #1
 8005c12:	6163      	str	r3, [r4, #20]
 8005c14:	b002      	add	sp, #8
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	ab01      	add	r3, sp, #4
 8005c1a:	466a      	mov	r2, sp
 8005c1c:	f7ff ffca 	bl	8005bb4 <__swhatbuf_r>
 8005c20:	9900      	ldr	r1, [sp, #0]
 8005c22:	4605      	mov	r5, r0
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7ff fc33 	bl	8005490 <_malloc_r>
 8005c2a:	b948      	cbnz	r0, 8005c40 <__smakebuf_r+0x44>
 8005c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d4ef      	bmi.n	8005c14 <__smakebuf_r+0x18>
 8005c34:	f023 0303 	bic.w	r3, r3, #3
 8005c38:	f043 0302 	orr.w	r3, r3, #2
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7e3      	b.n	8005c08 <__smakebuf_r+0xc>
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <__smakebuf_r+0x7c>)
 8005c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	9b00      	ldr	r3, [sp, #0]
 8005c50:	6163      	str	r3, [r4, #20]
 8005c52:	9b01      	ldr	r3, [sp, #4]
 8005c54:	6120      	str	r0, [r4, #16]
 8005c56:	b15b      	cbz	r3, 8005c70 <__smakebuf_r+0x74>
 8005c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f853 	bl	8005d08 <_isatty_r>
 8005c62:	b128      	cbz	r0, 8005c70 <__smakebuf_r+0x74>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	431d      	orrs	r5, r3
 8005c74:	81a5      	strh	r5, [r4, #12]
 8005c76:	e7cd      	b.n	8005c14 <__smakebuf_r+0x18>
 8005c78:	08004c95 	.word	0x08004c95

08005c7c <__ascii_mbtowc>:
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	b901      	cbnz	r1, 8005c82 <__ascii_mbtowc+0x6>
 8005c80:	a901      	add	r1, sp, #4
 8005c82:	b142      	cbz	r2, 8005c96 <__ascii_mbtowc+0x1a>
 8005c84:	b14b      	cbz	r3, 8005c9a <__ascii_mbtowc+0x1e>
 8005c86:	7813      	ldrb	r3, [r2, #0]
 8005c88:	600b      	str	r3, [r1, #0]
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	1c10      	adds	r0, r2, #0
 8005c8e:	bf18      	it	ne
 8005c90:	2001      	movne	r0, #1
 8005c92:	b002      	add	sp, #8
 8005c94:	4770      	bx	lr
 8005c96:	4610      	mov	r0, r2
 8005c98:	e7fb      	b.n	8005c92 <__ascii_mbtowc+0x16>
 8005c9a:	f06f 0001 	mvn.w	r0, #1
 8005c9e:	e7f8      	b.n	8005c92 <__ascii_mbtowc+0x16>

08005ca0 <__malloc_lock>:
 8005ca0:	4770      	bx	lr

08005ca2 <__malloc_unlock>:
 8005ca2:	4770      	bx	lr

08005ca4 <_read_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4c07      	ldr	r4, [pc, #28]	; (8005cc4 <_read_r+0x20>)
 8005ca8:	4605      	mov	r5, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	6022      	str	r2, [r4, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fc fbdc 	bl	8002470 <_read>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_read_r+0x1e>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_read_r+0x1e>
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000214 	.word	0x20000214

08005cc8 <__ascii_wctomb>:
 8005cc8:	b149      	cbz	r1, 8005cde <__ascii_wctomb+0x16>
 8005cca:	2aff      	cmp	r2, #255	; 0xff
 8005ccc:	bf85      	ittet	hi
 8005cce:	238a      	movhi	r3, #138	; 0x8a
 8005cd0:	6003      	strhi	r3, [r0, #0]
 8005cd2:	700a      	strbls	r2, [r1, #0]
 8005cd4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005cd8:	bf98      	it	ls
 8005cda:	2001      	movls	r0, #1
 8005cdc:	4770      	bx	lr
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4770      	bx	lr
	...

08005ce4 <_fstat_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4c07      	ldr	r4, [pc, #28]	; (8005d04 <_fstat_r+0x20>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4605      	mov	r5, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	f7fc fc02 	bl	80024fa <_fstat>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	d102      	bne.n	8005d00 <_fstat_r+0x1c>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	b103      	cbz	r3, 8005d00 <_fstat_r+0x1c>
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	bd38      	pop	{r3, r4, r5, pc}
 8005d02:	bf00      	nop
 8005d04:	20000214 	.word	0x20000214

08005d08 <_isatty_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4c06      	ldr	r4, [pc, #24]	; (8005d24 <_isatty_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4605      	mov	r5, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	f7fc fc01 	bl	800251a <_isatty>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_isatty_r+0x1a>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_isatty_r+0x1a>
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20000214 	.word	0x20000214

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
