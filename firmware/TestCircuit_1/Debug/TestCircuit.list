
TestCircuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08004b18  08004b18  00014b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001d8  08004fac  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004fac  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000732e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001819  00000000  00000000  00027532  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00028d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b059  00000000  00000000  000299b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c9e  00000000  00000000  00044a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a076e  00000000  00000000  0004a6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eae1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  000eae98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004afc 	.word	0x08004afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	08004afc 	.word	0x08004afc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	401a      	ands	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN6ButtonC1EP12GPIO_TypeDefm>:

/*
 * Public member functions
 */

Button::Button(GPIO_TypeDef *pGPIOx, uint32_t uiInputPin) {
 8000e2a:	b490      	push	{r4, r7}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
	// TODO Auto-generated constructor stub
	this->pGPIOx = pGPIOx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	601a      	str	r2, [r3, #0]
	this->uiInputPin = uiInputPin;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]

	uiPushCount = 0;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	uiReleaseCount = 0;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
	uiPushFilterTimeMs = 0;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
	uiReleaseFilterTimeMs = 0;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
	bPushEdge = false;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
	bReleaseEdge = false;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
	bRawState = false;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	771a      	strb	r2, [r3, #28]
	bRawPushState = false;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	775a      	strb	r2, [r3, #29]
	bPushState = false;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	779a      	strb	r2, [r3, #30]
	bReverseEnable = false;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	77da      	strb	r2, [r3, #31]
	bPushStateOld = false;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]
	bFirstFlag = false;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ullPushFilterStartTimeMs = 0;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	f04f 0400 	mov.w	r4, #0
 8000e98:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	ullReleaseFilterStartTimeMs = 0;
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	f04f 0400 	mov.w	r4, #0
 8000ea6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc90      	pop	{r4, r7}
 8000eb4:	4770      	bx	lr

08000eb6 <_ZN6Button6UpdateEv>:

}


void Button::Update()
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	bRawState = (bool)LL_GPIO_IsInputPinSet(pGPIOx, uiInputPin);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff ff99 	bl	8000e00 <LL_GPIO_IsInputPinSet>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	771a      	strb	r2, [r3, #28]

	if(bReverseEnable){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7fdb      	ldrb	r3, [r3, #31]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d018      	beq.n	8000f18 <_ZN6Button6UpdateEv+0x62>
		bRawPushState  = !bRawState;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f1b      	ldrb	r3, [r3, #28]
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	775a      	strb	r2, [r3, #29]
		if(!bFirstFlag){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00d      	beq.n	8000f20 <_ZN6Button6UpdateEv+0x6a>
			bFirstFlag = true;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			bPushStateOld = bRawPushState;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7f5a      	ldrb	r2, [r3, #29]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
 8000f16:	e003      	b.n	8000f20 <_ZN6Button6UpdateEv+0x6a>
		}
	}else{
		bRawPushState = bRawState;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1a      	ldrb	r2, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	775a      	strb	r2, [r3, #29]
	}

	if((0u < uiPushFilterTimeMs) || (0u < uiReleaseFilterTimeMs)){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <_ZN6Button6UpdateEv+0x7a>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <_ZN6Button6UpdateEv+0x82>
		ExecuteEdgeFilter();
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f841 	bl	8000fb8 <_ZN6Button17ExecuteEdgeFilterEv>
 8000f36:	e003      	b.n	8000f40 <_ZN6Button6UpdateEv+0x8a>
	}else{
		bPushState = bRawPushState;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7f5a      	ldrb	r2, [r3, #29]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	779a      	strb	r2, [r3, #30]
	}

	if(bPushStateOld != bPushState){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7f9b      	ldrb	r3, [r3, #30]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d013      	beq.n	8000f76 <_ZN6Button6UpdateEv+0xc0>
		if(		bPushStateOld		//bPushStateOld = High
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00a      	beq.n	8000f6e <_ZN6Button6UpdateEv+0xb8>
			&& !bPushState){		//bPushState = Low
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7f9b      	ldrb	r3, [r3, #30]
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <_ZN6Button6UpdateEv+0xb8>
			bReleaseEdge = true;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	745a      	strb	r2, [r3, #17]
 8000f6c:	e009      	b.n	8000f82 <_ZN6Button6UpdateEv+0xcc>
		}else{
			bPushEdge = true;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	741a      	strb	r2, [r3, #16]
 8000f74:	e005      	b.n	8000f82 <_ZN6Button6UpdateEv+0xcc>
		}
	}else{
		bPushEdge = false;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	741a      	strb	r2, [r3, #16]
		bReleaseEdge = false;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	745a      	strb	r2, [r3, #17]
	}

	if(bPushEdge){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7c1b      	ldrb	r3, [r3, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <_ZN6Button6UpdateEv+0xde>
		uiPushCount ++;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
	}
	if(bReleaseEdge){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7c5b      	ldrb	r3, [r3, #17]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <_ZN6Button6UpdateEv+0xf0>
		uiReleaseCount ++;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60da      	str	r2, [r3, #12]
	}

	bPushStateOld = bPushState;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7f9a      	ldrb	r2, [r3, #30]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN6Button17ExecuteEdgeFilterEv>:
/*
 * Private member functions
 */

void Button::ExecuteEdgeFilter()
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(bRawPushState && !bPushStateOld && !bPushFilterStartFlag){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7f5b      	ldrb	r3, [r3, #29]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01b      	beq.n	8001000 <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <_ZN6Button17ExecuteEdgeFilterEv+0x48>
		bPushFilterStartFlag = true;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ullPushFilterStartTimeMs = SystickTimer_GetTimeMS();
 8000ff0:	f000 f8dc 	bl	80011ac <SystickTimer_GetTimeMS>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8000ffe:	e01e      	b.n	800103e <_ZN6Button17ExecuteEdgeFilterEv+0x86>
	}else if(!bRawPushState && bPushStateOld && !bReleaseFilterStartFlag){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7f5b      	ldrb	r3, [r3, #29]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d017      	beq.n	800103e <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d012      	beq.n	800103e <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00a      	beq.n	800103e <_ZN6Button17ExecuteEdgeFilterEv+0x86>
		bReleaseFilterStartFlag = true;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		ullReleaseFilterStartTimeMs = SystickTimer_GetTimeMS();
 8001030:	f000 f8bc 	bl	80011ac <SystickTimer_GetTimeMS>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	}else{
		//do nothing
	}

	if(bPushFilterStartFlag){
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001044:	2b00      	cmp	r3, #0
 8001046:	d017      	beq.n	8001078 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		if(SystickTimer_IsTimeElapsed(ullPushFilterStartTimeMs, uiPushFilterTimeMs)){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6952      	ldr	r2, [r2, #20]
 8001052:	4618      	mov	r0, r3
 8001054:	4621      	mov	r1, r4
 8001056:	f000 f8b5 	bl	80011c4 <SystickTimer_IsTimeElapsed>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <_ZN6Button17ExecuteEdgeFilterEv+0xba>
			bPushFilterStartFlag = false;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			bPushState = bRawPushState;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7f5a      	ldrb	r2, [r3, #29]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	779a      	strb	r2, [r3, #30]
 8001070:	e002      	b.n	8001078 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		}else{
			bPushState = false;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	779a      	strb	r2, [r3, #30]
		}
	}else{
		//do nothing
	}

	if(bReleaseFilterStartFlag){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800107e:	2b00      	cmp	r3, #0
 8001080:	d017      	beq.n	80010b2 <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
		if(SystickTimer_IsTimeElapsed(ullReleaseFilterStartTimeMs, uiReleaseFilterTimeMs)){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6992      	ldr	r2, [r2, #24]
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f000 f898 	bl	80011c4 <SystickTimer_IsTimeElapsed>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <_ZN6Button17ExecuteEdgeFilterEv+0xf4>
			bReleaseFilterStartFlag = false;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			bPushState = bRawPushState;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7f5a      	ldrb	r2, [r3, #29]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	779a      	strb	r2, [r3, #30]
		}

	}else{
		//do nothing
	}
}
 80010aa:	e002      	b.n	80010b2 <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
			bPushState = true;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	779a      	strb	r2, [r3, #30]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
	...

080010bc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_SYSTICK_EnableIT+0x1c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <LL_SYSTICK_EnableIT+0x1c>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <SystickTimer_Interrupt>:

#define SYSTICKTIMER_MS_PER_COUNT	(1)		//1Countが何msecかを定義(1ms以上)

//割り込み関数用タイマーカウント関数
void SystickTimer_Interrupt(void)
{
 80010dc:	b490      	push	{r4, r7}
 80010de:	af00      	add	r7, sp, #0
	__u64SystickTimeCount += SYSTICKTIMER_MS_PER_COUNT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystickTimer_Interrupt+0x20>)
 80010e2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80010e6:	1c4b      	adds	r3, r1, #1
 80010e8:	f142 0400 	adc.w	r4, r2, #0
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <SystickTimer_Interrupt+0x20>)
 80010ee:	e9c2 3400 	strd	r3, r4, [r2]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc90      	pop	{r4, r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200001f8 	.word	0x200001f8

08001100 <SystickTimer_EnableInterrupt>:

//割り込み有効
void SystickTimer_EnableInterrupt(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8001104:	f7ff ffda 	bl	80010bc <LL_SYSTICK_EnableIT>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <SystickTimer_SetSamplingTime>:
	LL_SYSTICK_DisableIT();
}

//サンプリングタイムの設定
void SystickTimer_SetSamplingTime(uint16_t u16SamplingTimeMs)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	if(0u == u16SamplingTimeMs){
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <SystickTimer_SetSamplingTime+0x18>
		//0指定の場合はデフォルト値を設定
		__u16SamplingTimeMs = SYSTICKTIMER_DEFAULT_SAMPLING_TIME_MS;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystickTimer_SetSamplingTime+0x2c>)
 800111e:	2201      	movs	r2, #1
 8001120:	801a      	strh	r2, [r3, #0]
	}else{
		__u16SamplingTimeMs = u16SamplingTimeMs;
	}
}
 8001122:	e002      	b.n	800112a <SystickTimer_SetSamplingTime+0x1e>
		__u16SamplingTimeMs = u16SamplingTimeMs;
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <SystickTimer_SetSamplingTime+0x2c>)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	8013      	strh	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200001f4 	.word	0x200001f4

0800113c <SystickTimer_IsSamplingTimeElapsed>:
//サンプリングタイムの経過判定
bool SystickTimer_IsSamplingTimeElapsed(void)
{
 800113c:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
	//常に0以下の場合はFalseを即Return
	if(__u64SystickTimeCount <= 0u){
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 8001146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800114a:	4323      	orrs	r3, r4
 800114c:	d101      	bne.n	8001152 <SystickTimer_IsSamplingTimeElapsed+0x16>
		return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e020      	b.n	8001194 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	static uint64_t u64LastTimeMs = 0;
	uint64_t u64CurrentTimeMs = __u64SystickTimeCount;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 8001154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001158:	e9c7 3400 	strd	r3, r4, [r7]

	if(__u16SamplingTimeMs <= u64CurrentTimeMs - u64LastTimeMs){
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <SystickTimer_IsSamplingTimeElapsed+0x68>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8001168:	e9d2 bc00 	ldrd	fp, ip, [r2]
 800116c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001170:	4629      	mov	r1, r5
 8001172:	4632      	mov	r2, r6
 8001174:	ebb1 010b 	subs.w	r1, r1, fp
 8001178:	eb62 020c 	sbc.w	r2, r2, ip
 800117c:	42a2      	cmp	r2, r4
 800117e:	bf08      	it	eq
 8001180:	4299      	cmpeq	r1, r3
 8001182:	d306      	bcc.n	8001192 <SystickTimer_IsSamplingTimeElapsed+0x56>
		u64LastTimeMs = u64CurrentTimeMs;
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8001186:	e9d7 3400 	ldrd	r3, r4, [r7]
 800118a:	e9c2 3400 	strd	r3, r4, [r2]
		return true;
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	return false;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800119e:	4770      	bx	lr
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	200001f4 	.word	0x200001f4
 80011a8:	20000200 	.word	0x20000200

080011ac <SystickTimer_GetTimeMS>:

//起動時からの時間取得 [ms]
uint64_t SystickTimer_GetTimeMS(void)
{
 80011ac:	b490      	push	{r4, r7}
 80011ae:	af00      	add	r7, sp, #0
	return __u64SystickTimeCount;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <SystickTimer_GetTimeMS+0x14>)
 80011b2:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc90      	pop	{r4, r7}
 80011be:	4770      	bx	lr
 80011c0:	200001f8 	.word	0x200001f8

080011c4 <SystickTimer_IsTimeElapsed>:
	LL_mDelay(u32DelayMs);
}

//指定時間経過
bool SystickTimer_IsTimeElapsed(uint64_t u64StartTimeMs ,uint32_t u32IntervalMs)
{
 80011c4:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
	if((uint64_t)u32IntervalMs <= SystickTimer_GetTimeMS() - u64StartTimeMs){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	461c      	mov	r4, r3
 80011d6:	f04f 0500 	mov.w	r5, #0
 80011da:	f7ff ffe7 	bl	80011ac <SystickTimer_GetTimeMS>
 80011de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e2:	1a80      	subs	r0, r0, r2
 80011e4:	eb61 0103 	sbc.w	r1, r1, r3
 80011e8:	4683      	mov	fp, r0
 80011ea:	468c      	mov	ip, r1
 80011ec:	45ac      	cmp	ip, r5
 80011ee:	bf08      	it	eq
 80011f0:	45a3      	cmpeq	fp, r4
 80011f2:	d301      	bcc.n	80011f8 <SystickTimer_IsTimeElapsed+0x34>
		return true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <SystickTimer_IsTimeElapsed+0x36>
	}
	return false;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}

08001204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023800 	.word	0x40023800

08001234 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800126a:	2004      	movs	r0, #4
 800126c:	f7ff ffca 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff ffc7 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff ffc4 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800127c:	2008      	movs	r0, #8
 800127e:	f7ff ffc1 	bl	8001204 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 8001282:	f24e 311f 	movw	r1, #58143	; 0xe31f
 8001286:	4834      	ldr	r0, [pc, #208]	; (8001358 <MX_GPIO_Init+0x104>)
 8001288:	f7ff ffd4 	bl	8001234 <LL_GPIO_ResetOutputPin>
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin);
 800128c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001290:	4832      	ldr	r0, [pc, #200]	; (800135c <MX_GPIO_Init+0x108>)
 8001292:	f7ff ffcf 	bl	8001234 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001296:	2104      	movs	r1, #4
 8001298:	4831      	ldr	r0, [pc, #196]	; (8001360 <MX_GPIO_Init+0x10c>)
 800129a:	f7ff ffcb 	bl	8001234 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4830      	ldr	r0, [pc, #192]	; (8001364 <MX_GPIO_Init+0x110>)
 80012a2:	f7ff ffc7 	bl	8001234 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 80012a6:	f24e 331f 	movw	r3, #58143	; 0xe31f
 80012aa:	603b      	str	r3, [r7, #0]
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ac:	2301      	movs	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <MX_GPIO_Init+0x104>)
 80012c2:	f000 fdcb 	bl	8001e5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 80012c6:	2320      	movs	r3, #32
 80012c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4820      	ldr	r0, [pc, #128]	; (8001358 <MX_GPIO_Init+0x104>)
 80012d8:	f000 fdc0 	bl	8001e5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin|IMU_INT_Pin;
 80012dc:	2384      	movs	r3, #132	; 0x84
 80012de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	481d      	ldr	r0, [pc, #116]	; (8001364 <MX_GPIO_Init+0x110>)
 80012ee:	f000 fdb5 	bl	8001e5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin;
 80012f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f8:	2301      	movs	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x108>)
 800130e:	f000 fda5 	bl	8001e5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001312:	2304      	movs	r3, #4
 8001314:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001316:	2301      	movs	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_GPIO_Init+0x10c>)
 800132c:	f000 fd96 	bl	8001e5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001334:	2301      	movs	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_GPIO_Init+0x110>)
 800134a:	f000 fd87 	bl	8001e5c <LL_GPIO_Init>

}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020800 	.word	0x40020800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40020400 	.word	0x40020400

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_RCC_HSI_Enable+0x1c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <LL_RCC_HSI_Enable+0x1c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <LL_RCC_HSI_IsReady+0x20>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b02      	cmp	r3, #2
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40023800 	.word	0x40023800

080013f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4904      	ldr	r1, [pc, #16]	; (800141c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <LL_RCC_SetSysClkSource+0x24>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 0203 	bic.w	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4904      	ldr	r1, [pc, #16]	; (8001444 <LL_RCC_SetSysClkSource+0x24>)
 8001434:	4313      	orrs	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40023800 	.word	0x40023800

08001448 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <LL_RCC_GetSysClkSource+0x18>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <LL_RCC_SetAHBPrescaler+0x24>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4904      	ldr	r1, [pc, #16]	; (8001488 <LL_RCC_SetAHBPrescaler+0x24>)
 8001478:	4313      	orrs	r3, r2
 800147a:	608b      	str	r3, [r1, #8]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800

0800148c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4904      	ldr	r1, [pc, #16]	; (80014b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40023800 	.word	0x40023800

080014b4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4904      	ldr	r1, [pc, #16]	; (80014d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40023800 	.word	0x40023800

080014dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <LL_RCC_PLL_Enable+0x1c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <LL_RCC_PLL_Enable+0x1c>)
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <LL_RCC_PLL_IsReady+0x24>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800150c:	bf0c      	ite	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	2300      	movne	r3, #0
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001538:	4013      	ands	r3, r2
 800153a:	68f9      	ldr	r1, [r7, #12]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	4311      	orrs	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	0192      	lsls	r2, r2, #6
 8001544:	430a      	orrs	r2, r1
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4904      	ldr	r1, [pc, #16]	; (8001568 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40023800 	.word	0x40023800
 800156c:	ffbf8000 	.word	0xffbf8000

08001570 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <LL_APB1_GRP1_EnableClock+0x2c>)
 800157a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4907      	ldr	r1, [pc, #28]	; (800159c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4013      	ands	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40023800 	.word	0x40023800

080015a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80015aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4907      	ldr	r1, [pc, #28]	; (80015cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80015b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40023800 	.word	0x40023800

080015d0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_FLASH_SetLatency+0x24>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 020f 	bic.w	r2, r3, #15
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4904      	ldr	r1, [pc, #16]	; (80015f4 <LL_FLASH_SetLatency+0x24>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LL_FLASH_GetLatency+0x18>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40007000 	.word	0x40007000

0800163c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	405a      	eors	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	615a      	str	r2, [r3, #20]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_ZN6Button17SetPushEdgeFilterEm>:
public:
	Button(GPIO_TypeDef *pGPIOx, uint32_t uiInputPin);
	~Button();
	Button(const Button &other);

	void SetPushEdgeFilter(uint32_t uiFilterTimeMs = 10){
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
		uiPushFilterTimeMs = uiFilterTimeMs;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	615a      	str	r2, [r3, #20]
	}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_ZN6Button20SetReleaseEdgeFilterEm>:

	void SetReleaseEdgeFilter(uint32_t uiFilterTimeMs = 10){
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
		uiReleaseFilterTimeMs = uiFilterTimeMs;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	619a      	str	r2, [r3, #24]
	}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_ZN6Button13SetEdgeFilterEmm>:

	void SetEdgeFilter(uint32_t uiPushFilterTimeMs = 10, uint32_t uiReleaseFilterTimeMs = 10){
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
		SetPushEdgeFilter(uiPushFilterTimeMs);
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff ffda 	bl	800165e <_ZN6Button17SetPushEdgeFilterEm>
		SetReleaseEdgeFilter(uiReleaseFilterTimeMs);
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff ffe4 	bl	800167a <_ZN6Button20SetReleaseEdgeFilterEm>
	}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_ZN6Button14SetPushReverseEb>:

	void SetPushReverse(bool bReverseEnable = true){
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
		this->bReverseEnable = bReverseEnable;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	77da      	strb	r2, [r3, #31]
	}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b094      	sub	sp, #80	; 0x50
 80016dc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80016de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016e2:	f7ff ff5d 	bl	80015a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80016e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80016ea:	f7ff ff41 	bl	8001570 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ee:	2003      	movs	r0, #3
 80016f0:	f7ff fe3a 	bl	8001368 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f864 	bl	80017c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f7ff fdac 	bl	8001254 <MX_GPIO_Init>
  //MX_TIM1_Init();
  //MX_TIM5_Init();
  //MX_ADC1_Init();
  //MX_ADC2_Init();
  //MX_SPI1_Init();
  MX_USART2_UART_Init();
 80016fc:	f000 fa1a 	bl	8001b34 <MX_USART2_UART_Init>
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL );
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <main+0xd8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fbcd 	bl	8002ea8 <setbuf>
  SystickTimer_EnableInterrupt();
 800170e:	f7ff fcf7 	bl	8001100 <SystickTimer_EnableInterrupt>
  SystickTimer_SetSamplingTime(2u);
 8001712:	2002      	movs	r0, #2
 8001714:	f7ff fcfa 	bl	800110c <SystickTimer_SetSamplingTime>

  Button Sw0(SW0_GPIO_Port, SW0_Pin);
 8001718:	463b      	mov	r3, r7
 800171a:	2220      	movs	r2, #32
 800171c:	4925      	ldr	r1, [pc, #148]	; (80017b4 <main+0xdc>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb83 	bl	8000e2a <_ZN6ButtonC1EP12GPIO_TypeDefm>
  Sw0.SetPushReverse();
 8001724:	463b      	mov	r3, r7
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ffc6 	bl	80016ba <_ZN6Button14SetPushReverseEb>
  Sw0.SetEdgeFilter();
 800172e:	463b      	mov	r3, r7
 8001730:	220a      	movs	r2, #10
 8001732:	210a      	movs	r1, #10
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ffae 	bl	8001696 <_ZN6Button13SetEdgeFilterEmm>

  uint64_t ullLedTimeMs = SystickTimer_GetTimeMS();
 800173a:	f7ff fd37 	bl	80011ac <SystickTimer_GetTimeMS>
 800173e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
  uint64_t ullDebugTimeMs = SystickTimer_GetTimeMS();
 8001742:	f7ff fd33 	bl	80011ac <SystickTimer_GetTimeMS>
 8001746:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  uint64_t ullTimeStampMs = SystickTimer_GetTimeMS();
 800174a:	f7ff fd2f 	bl	80011ac <SystickTimer_GetTimeMS>
 800174e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(SystickTimer_IsSamplingTimeElapsed()){
 8001752:	f7ff fcf3 	bl	800113c <SystickTimer_IsSamplingTimeElapsed>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0fa      	beq.n	8001752 <main+0x7a>
		  Sw0.Update();
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fba9 	bl	8000eb6 <_ZN6Button6UpdateEv>


		  if(SystickTimer_IsTimeElapsed(ullLedTimeMs, 500)){
 8001764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001768:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800176c:	f7ff fd2a 	bl	80011c4 <SystickTimer_IsTimeElapsed>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <main+0xae>
			  ullLedTimeMs = SystickTimer_GetTimeMS();
 8001776:	f7ff fd19 	bl	80011ac <SystickTimer_GetTimeMS>
 800177a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			  LL_GPIO_TogglePin(TICK_LED_GPIO_Port, TICK_LED_Pin);
 800177e:	2110      	movs	r1, #16
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <main+0xdc>)
 8001782:	f7ff ff5b 	bl	800163c <LL_GPIO_TogglePin>
		  }

		  if(SystickTimer_IsTimeElapsed(ullDebugTimeMs, 50)){
 8001786:	2232      	movs	r2, #50	; 0x32
 8001788:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800178c:	f7ff fd1a 	bl	80011c4 <SystickTimer_IsTimeElapsed>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0dd      	beq.n	8001752 <main+0x7a>
			  ullDebugTimeMs = SystickTimer_GetTimeMS();
 8001796:	f7ff fd09 	bl	80011ac <SystickTimer_GetTimeMS>
 800179a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			  USART_TransmitByte(USART2, 0x0A);
 800179e:	210a      	movs	r1, #10
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <main+0xe0>)
 80017a2:	f000 fa17 	bl	8001bd4 <USART_TransmitByte>
			  printf("Hello World\n");
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <main+0xe4>)
 80017a8:	f001 fb76 	bl	8002e98 <puts>
	  if(SystickTimer_IsSamplingTimeElapsed()){
 80017ac:	e7d1      	b.n	8001752 <main+0x7a>
 80017ae:	bf00      	nop
 80017b0:	20000004 	.word	0x20000004
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40004400 	.word	0x40004400
 80017bc:	08004b18 	.word	0x08004b18

080017c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80017c4:	2005      	movs	r0, #5
 80017c6:	f7ff ff03 	bl	80015d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80017ca:	f7ff ff15 	bl	80015f8 <LL_FLASH_GetLatency>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d000      	beq.n	80017e0 <_Z18SystemClock_Configv+0x20>
 80017de:	e7f4      	b.n	80017ca <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80017e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017e4:	f7ff ff16 	bl	8001614 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80017e8:	2010      	movs	r0, #16
 80017ea:	f7ff fe03 	bl	80013f4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80017ee:	f7ff fddf 	bl	80013b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017f2:	f7ff fded 	bl	80013d0 <LL_RCC_HSI_IsReady>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d000      	beq.n	8001808 <_Z18SystemClock_Configv+0x48>
 8001806:	e7f4      	b.n	80017f2 <_Z18SystemClock_Configv+0x32>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8001808:	2300      	movs	r3, #0
 800180a:	22a8      	movs	r2, #168	; 0xa8
 800180c:	2108      	movs	r1, #8
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fe88 	bl	8001524 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001814:	f7ff fe62 	bl	80014dc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001818:	f7ff fe70 	bl	80014fc <LL_RCC_PLL_IsReady>
 800181c:	4603      	mov	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <_Z18SystemClock_Configv+0x6e>
 800182c:	e7f4      	b.n	8001818 <_Z18SystemClock_Configv+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fe18 	bl	8001464 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001834:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001838:	f7ff fe28 	bl	800148c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800183c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001840:	f7ff fe38 	bl	80014b4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff fdeb 	bl	8001420 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800184a:	f7ff fdfd 	bl	8001448 <LL_RCC_GetSysClkSource>
 800184e:	4603      	mov	r3, r0
 8001850:	2b08      	cmp	r3, #8
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d000      	beq.n	8001860 <_Z18SystemClock_Configv+0xa0>
 800185e:	e7f4      	b.n	800184a <_Z18SystemClock_Configv+0x8a>
  {

  }
  LL_Init1msTick(168000000);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <_Z18SystemClock_Configv+0xb0>)
 8001862:	f000 ff23 	bl	80026ac <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <_Z18SystemClock_Configv+0xb0>)
 8001868:	f000 ff2e 	bl	80026c8 <LL_SetSystemCoreClock>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0a037a00 	.word	0x0a037a00

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickTimer_Interrupt();
 80018c8:	f7ff fc08 	bl	80010dc <SystickTimer_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
	}

return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
	}
	return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f000 fe84 	bl	80026e8 <__errno>
 80019e0:	4602      	mov	r2, r0
 80019e2:	230c      	movs	r3, #12
 80019e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	20000208 	.word	0x20000208
 8001a14:	20000218 	.word	0x20000218

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <SystemInit+0x28>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <SystemInit+0x28>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SystemInit+0x28>)
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	609a      	str	r2, [r3, #8]
#endif
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <LL_AHB1_GRP1_EnableClock>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800

08001a74 <LL_APB1_GRP1_EnableClock>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	615a      	str	r2, [r3, #20]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b62:	f7ff ff87 	bl	8001a74 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff ff6c 	bl	8001a44 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b80:	2307      	movs	r3, #7
 8001b82:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4810      	ldr	r0, [pc, #64]	; (8001bcc <MX_USART2_UART_Init+0x98>)
 8001b8a:	f000 f967 	bl	8001e5c <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001b8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b92:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <MX_USART2_UART_Init+0x9c>)
 8001bb4:	f000 fce0 	bl	8002578 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_USART2_UART_Init+0x9c>)
 8001bba:	f7ff ff83 	bl	8001ac4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_USART2_UART_Init+0x9c>)
 8001bc0:	f7ff ff70 	bl	8001aa4 <LL_USART_Enable>

}
 8001bc4:	bf00      	nop
 8001bc6:	3738      	adds	r7, #56	; 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <USART_TransmitByte>:

/* USER CODE BEGIN 1 */
void USART_TransmitByte(USART_TypeDef *pUSARTx, uint8_t u8WriteData)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
	LL_USART_TransmitData8(pUSARTx, u8WriteData);
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	4619      	mov	r1, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff96 	bl	8001b16 <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TXE(pUSARTx));
 8001bea:	bf00      	nop
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff7f 	bl	8001af0 <LL_USART_IsActiveFlag_TXE>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f9      	beq.n	8001bec <USART_TransmitByte+0x18>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c06:	e003      	b.n	8001c10 <LoopCopyDataInit>

08001c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c0e:	3104      	adds	r1, #4

08001c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c18:	d3f6      	bcc.n	8001c08 <CopyDataInit>
  ldr  r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c1c:	e002      	b.n	8001c24 <LoopFillZerobss>

08001c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c20:	f842 3b04 	str.w	r3, [r2], #4

08001c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c28:	d3f9      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff fef5 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f000 fd61 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff fd51 	bl	80016d8 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c3c:	08004dd8 	.word	0x08004dd8
  ldr  r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c44:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8001c48:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001c4c:	20000218 	.word	0x20000218

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>

08001c52 <LL_GPIO_SetPinMode>:
{
 8001c52:	b480      	push	{r7}
 8001c54:	b089      	sub	sp, #36	; 0x24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2103      	movs	r1, #3
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	401a      	ands	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	61bb      	str	r3, [r7, #24]
  return result;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_GPIO_SetPinOutputType>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_GPIO_SetPinSpeed>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	613b      	str	r3, [r7, #16]
  return result;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2103      	movs	r1, #3
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_GPIO_SetPinPull>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b089      	sub	sp, #36	; 0x24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	613b      	str	r3, [r7, #16]
  return result;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2103      	movs	r1, #3
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	61bb      	str	r3, [r7, #24]
  return result;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	60da      	str	r2, [r3, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3724      	adds	r7, #36	; 0x24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_GPIO_SetAFPin_0_7>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	613b      	str	r3, [r7, #16]
  return result;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	61bb      	str	r3, [r7, #24]
  return result;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	621a      	str	r2, [r3, #32]
}
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_GPIO_SetAFPin_8_15>:
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b089      	sub	sp, #36	; 0x24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	613b      	str	r3, [r7, #16]
  return result;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	210f      	movs	r1, #15
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	61bb      	str	r3, [r7, #24]
  return result;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e50:	bf00      	nop
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	613b      	str	r3, [r7, #16]
  return result;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e86:	e050      	b.n	8001f2a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d042      	beq.n	8001f24 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d003      	beq.n	8001eae <LL_GPIO_Init+0x52>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d10d      	bne.n	8001eca <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	69b9      	ldr	r1, [r7, #24]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff12 	bl	8001ce0 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fef3 	bl	8001cb0 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff33 	bl	8001d3e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d11a      	bne.n	8001f16 <LL_GPIO_Init+0xba>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	60bb      	str	r3, [r7, #8]
  return result;
 8001eec:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d807      	bhi.n	8001f08 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	461a      	mov	r2, r3
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff4b 	bl	8001d9c <LL_GPIO_SetAFPin_0_7>
 8001f06:	e006      	b.n	8001f16 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff72 	bl	8001dfa <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	69b9      	ldr	r1, [r7, #24]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fe97 	bl	8001c52 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1a7      	bne.n	8001e88 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <LL_RCC_GetSysClkSource>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <LL_RCC_GetSysClkSource+0x18>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <LL_RCC_GetAHBPrescaler>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <LL_RCC_GetAHBPrescaler+0x18>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <LL_RCC_GetAPB1Prescaler>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <LL_RCC_GetAPB2Prescaler>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <LL_RCC_PLL_GetMainSource+0x18>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <LL_RCC_PLL_GetN+0x18>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40023800 	.word	0x40023800

08001fec <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <LL_RCC_PLL_GetP+0x18>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <LL_RCC_PLL_GetDivider+0x18>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800202c:	f000 f820 	bl	8002070 <RCC_GetSystemClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f83e 	bl	80020bc <RCC_GetHCLKClockFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f84c 	bl	80020e8 <RCC_GetPCLK1ClockFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f858 	bl	8002110 <RCC_GetPCLK2ClockFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800207a:	f7ff ff63 	bl	8001f44 <LL_RCC_GetSysClkSource>
 800207e:	4603      	mov	r3, r0
 8002080:	2b04      	cmp	r3, #4
 8002082:	d006      	beq.n	8002092 <RCC_GetSystemClockFreq+0x22>
 8002084:	2b08      	cmp	r3, #8
 8002086:	d007      	beq.n	8002098 <RCC_GetSystemClockFreq+0x28>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <RCC_GetSystemClockFreq+0x44>)
 800208e:	607b      	str	r3, [r7, #4]
      break;
 8002090:	e00a      	b.n	80020a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <RCC_GetSystemClockFreq+0x48>)
 8002094:	607b      	str	r3, [r7, #4]
      break;
 8002096:	e007      	b.n	80020a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002098:	2008      	movs	r0, #8
 800209a:	f000 f84d 	bl	8002138 <RCC_PLL_GetFreqDomain_SYS>
 800209e:	6078      	str	r0, [r7, #4]
      break;
 80020a0:	e002      	b.n	80020a8 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <RCC_GetSystemClockFreq+0x44>)
 80020a4:	607b      	str	r3, [r7, #4]
      break;
 80020a6:	bf00      	nop
  }

  return frequency;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	017d7840 	.word	0x017d7840

080020bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80020c4:	f7ff ff4c 	bl	8001f60 <LL_RCC_GetAHBPrescaler>
 80020c8:	4603      	mov	r3, r0
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <RCC_GetHCLKClockFreq+0x28>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	40d3      	lsrs	r3, r2
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	08004b24 	.word	0x08004b24

080020e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80020f0:	f7ff ff44 	bl	8001f7c <LL_RCC_GetAPB1Prescaler>
 80020f4:	4603      	mov	r3, r0
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <RCC_GetPCLK1ClockFreq+0x24>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	40d3      	lsrs	r3, r2
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	08004b34 	.word	0x08004b34

08002110 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002118:	f7ff ff3e 	bl	8001f98 <LL_RCC_GetAPB2Prescaler>
 800211c:	4603      	mov	r3, r0
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <RCC_GetPCLK2ClockFreq+0x24>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	40d3      	lsrs	r3, r2
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08004b34 	.word	0x08004b34

08002138 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800214c:	f7ff ff32 	bl	8001fb4 <LL_RCC_PLL_GetMainSource>
 8002150:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d003      	beq.n	8002166 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800215e:	e005      	b.n	800216c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e005      	b.n	8002172 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	e002      	b.n	8002172 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800216e:	617b      	str	r3, [r7, #20]
      break;
 8002170:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d113      	bne.n	80021a0 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002178:	f7ff ff46 	bl	8002008 <LL_RCC_PLL_GetDivider>
 800217c:	4602      	mov	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fbb3 f4f2 	udiv	r4, r3, r2
 8002184:	f7ff ff24 	bl	8001fd0 <LL_RCC_PLL_GetN>
 8002188:	4603      	mov	r3, r0
 800218a:	fb03 f404 	mul.w	r4, r3, r4
 800218e:	f7ff ff2d 	bl	8001fec <LL_RCC_PLL_GetP>
 8002192:	4603      	mov	r3, r0
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fbb4 f3f3 	udiv	r3, r4, r3
 800219e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80021a0:	693b      	ldr	r3, [r7, #16]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	bf00      	nop
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	017d7840 	.word	0x017d7840

080021b4 <LL_USART_IsEnabled>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_USART_SetStopBitsLength>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_USART_SetHWFlowCtrl>:
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	615a      	str	r2, [r3, #20]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_USART_SetBaudRate>:
{
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223e:	f040 80c1 	bne.w	80023c4 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	461d      	mov	r5, r3
 8002246:	f04f 0600 	mov.w	r6, #0
 800224a:	46a8      	mov	r8, r5
 800224c:	46b1      	mov	r9, r6
 800224e:	eb18 0308 	adds.w	r3, r8, r8
 8002252:	eb49 0409 	adc.w	r4, r9, r9
 8002256:	4698      	mov	r8, r3
 8002258:	46a1      	mov	r9, r4
 800225a:	eb18 0805 	adds.w	r8, r8, r5
 800225e:	eb49 0906 	adc.w	r9, r9, r6
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800226e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002272:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002276:	4688      	mov	r8, r1
 8002278:	4691      	mov	r9, r2
 800227a:	eb18 0005 	adds.w	r0, r8, r5
 800227e:	eb49 0106 	adc.w	r1, r9, r6
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	461d      	mov	r5, r3
 8002286:	f04f 0600 	mov.w	r6, #0
 800228a:	196b      	adds	r3, r5, r5
 800228c:	eb46 0406 	adc.w	r4, r6, r6
 8002290:	461a      	mov	r2, r3
 8002292:	4623      	mov	r3, r4
 8002294:	f7fe fc34 	bl	8000b00 <__aeabi_uldivmod>
 8002298:	4603      	mov	r3, r0
 800229a:	460c      	mov	r4, r1
 800229c:	461a      	mov	r2, r3
 800229e:	4bb5      	ldr	r3, [pc, #724]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 80022a0:	fba3 2302 	umull	r2, r3, r3, r2
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	fa1f f883 	uxth.w	r8, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	461d      	mov	r5, r3
 80022b2:	f04f 0600 	mov.w	r6, #0
 80022b6:	46a9      	mov	r9, r5
 80022b8:	46b2      	mov	sl, r6
 80022ba:	eb19 0309 	adds.w	r3, r9, r9
 80022be:	eb4a 040a 	adc.w	r4, sl, sl
 80022c2:	4699      	mov	r9, r3
 80022c4:	46a2      	mov	sl, r4
 80022c6:	eb19 0905 	adds.w	r9, r9, r5
 80022ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022e2:	4689      	mov	r9, r1
 80022e4:	4692      	mov	sl, r2
 80022e6:	eb19 0005 	adds.w	r0, r9, r5
 80022ea:	eb4a 0106 	adc.w	r1, sl, r6
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	461d      	mov	r5, r3
 80022f2:	f04f 0600 	mov.w	r6, #0
 80022f6:	196b      	adds	r3, r5, r5
 80022f8:	eb46 0406 	adc.w	r4, r6, r6
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	f7fe fbfe 	bl	8000b00 <__aeabi_uldivmod>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	461a      	mov	r2, r3
 800230a:	4b9a      	ldr	r3, [pc, #616]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 800230c:	fba3 1302 	umull	r1, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a95      	ldr	r2, [pc, #596]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b29b      	uxth	r3, r3
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	b29b      	uxth	r3, r3
 800232c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002330:	b29b      	uxth	r3, r3
 8002332:	4443      	add	r3, r8
 8002334:	fa1f f883 	uxth.w	r8, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	461d      	mov	r5, r3
 800233c:	f04f 0600 	mov.w	r6, #0
 8002340:	46a9      	mov	r9, r5
 8002342:	46b2      	mov	sl, r6
 8002344:	eb19 0309 	adds.w	r3, r9, r9
 8002348:	eb4a 040a 	adc.w	r4, sl, sl
 800234c:	4699      	mov	r9, r3
 800234e:	46a2      	mov	sl, r4
 8002350:	eb19 0905 	adds.w	r9, r9, r5
 8002354:	eb4a 0a06 	adc.w	sl, sl, r6
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002364:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002368:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800236c:	4689      	mov	r9, r1
 800236e:	4692      	mov	sl, r2
 8002370:	eb19 0005 	adds.w	r0, r9, r5
 8002374:	eb4a 0106 	adc.w	r1, sl, r6
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	461d      	mov	r5, r3
 800237c:	f04f 0600 	mov.w	r6, #0
 8002380:	196b      	adds	r3, r5, r5
 8002382:	eb46 0406 	adc.w	r4, r6, r6
 8002386:	461a      	mov	r2, r3
 8002388:	4623      	mov	r3, r4
 800238a:	f7fe fbb9 	bl	8000b00 <__aeabi_uldivmod>
 800238e:	4603      	mov	r3, r0
 8002390:	460c      	mov	r4, r1
 8002392:	461a      	mov	r2, r3
 8002394:	4b77      	ldr	r3, [pc, #476]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 8002396:	fba3 1302 	umull	r1, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2164      	movs	r1, #100	; 0x64
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a72      	ldr	r2, [pc, #456]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4443      	add	r3, r8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	609a      	str	r2, [r3, #8]
}
 80023c2:	e0d2      	b.n	800256a <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	469a      	mov	sl, r3
 80023c8:	f04f 0b00 	mov.w	fp, #0
 80023cc:	46d0      	mov	r8, sl
 80023ce:	46d9      	mov	r9, fp
 80023d0:	eb18 0308 	adds.w	r3, r8, r8
 80023d4:	eb49 0409 	adc.w	r4, r9, r9
 80023d8:	4698      	mov	r8, r3
 80023da:	46a1      	mov	r9, r4
 80023dc:	eb18 080a 	adds.w	r8, r8, sl
 80023e0:	eb49 090b 	adc.w	r9, r9, fp
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023f8:	4688      	mov	r8, r1
 80023fa:	4691      	mov	r9, r2
 80023fc:	eb1a 0508 	adds.w	r5, sl, r8
 8002400:	eb4b 0609 	adc.w	r6, fp, r9
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	0094      	lsls	r4, r2, #2
 8002416:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800241a:	008b      	lsls	r3, r1, #2
 800241c:	461a      	mov	r2, r3
 800241e:	4623      	mov	r3, r4
 8002420:	4628      	mov	r0, r5
 8002422:	4631      	mov	r1, r6
 8002424:	f7fe fb6c 	bl	8000b00 <__aeabi_uldivmod>
 8002428:	4603      	mov	r3, r0
 800242a:	460c      	mov	r4, r1
 800242c:	461a      	mov	r2, r3
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 8002430:	fba3 2302 	umull	r2, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b29b      	uxth	r3, r3
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	fa1f f883 	uxth.w	r8, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	469b      	mov	fp, r3
 8002442:	f04f 0c00 	mov.w	ip, #0
 8002446:	46d9      	mov	r9, fp
 8002448:	46e2      	mov	sl, ip
 800244a:	eb19 0309 	adds.w	r3, r9, r9
 800244e:	eb4a 040a 	adc.w	r4, sl, sl
 8002452:	4699      	mov	r9, r3
 8002454:	46a2      	mov	sl, r4
 8002456:	eb19 090b 	adds.w	r9, r9, fp
 800245a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800246e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002472:	4689      	mov	r9, r1
 8002474:	4692      	mov	sl, r2
 8002476:	eb1b 0509 	adds.w	r5, fp, r9
 800247a:	eb4c 060a 	adc.w	r6, ip, sl
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	0094      	lsls	r4, r2, #2
 8002490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002494:	008b      	lsls	r3, r1, #2
 8002496:	461a      	mov	r2, r3
 8002498:	4623      	mov	r3, r4
 800249a:	4628      	mov	r0, r5
 800249c:	4631      	mov	r1, r6
 800249e:	f7fe fb2f 	bl	8000b00 <__aeabi_uldivmod>
 80024a2:	4603      	mov	r3, r0
 80024a4:	460c      	mov	r4, r1
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 80024aa:	fba3 1302 	umull	r1, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2164      	movs	r1, #100	; 0x64
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	3332      	adds	r3, #50	; 0x32
 80024bc:	4a2d      	ldr	r2, [pc, #180]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4443      	add	r3, r8
 80024ce:	fa1f f883 	uxth.w	r8, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	469b      	mov	fp, r3
 80024d6:	f04f 0c00 	mov.w	ip, #0
 80024da:	46d9      	mov	r9, fp
 80024dc:	46e2      	mov	sl, ip
 80024de:	eb19 0309 	adds.w	r3, r9, r9
 80024e2:	eb4a 040a 	adc.w	r4, sl, sl
 80024e6:	4699      	mov	r9, r3
 80024e8:	46a2      	mov	sl, r4
 80024ea:	eb19 090b 	adds.w	r9, r9, fp
 80024ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002506:	4689      	mov	r9, r1
 8002508:	4692      	mov	sl, r2
 800250a:	eb1b 0509 	adds.w	r5, fp, r9
 800250e:	eb4c 060a 	adc.w	r6, ip, sl
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	f04f 0400 	mov.w	r4, #0
 8002522:	0094      	lsls	r4, r2, #2
 8002524:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002528:	008b      	lsls	r3, r1, #2
 800252a:	461a      	mov	r2, r3
 800252c:	4623      	mov	r3, r4
 800252e:	4628      	mov	r0, r5
 8002530:	4631      	mov	r1, r6
 8002532:	f7fe fae5 	bl	8000b00 <__aeabi_uldivmod>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	461a      	mov	r2, r3
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 800253e:	fba3 1302 	umull	r1, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2164      	movs	r1, #100	; 0x64
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	3332      	adds	r3, #50	; 0x32
 8002550:	4a08      	ldr	r2, [pc, #32]	; (8002574 <LL_USART_SetBaudRate+0x34c>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b29b      	uxth	r3, r3
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	b29b      	uxth	r3, r3
 8002560:	4443      	add	r3, r8
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002574:	51eb851f 	.word	0x51eb851f

08002578 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fe12 	bl	80021b4 <LL_USART_IsEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d15e      	bne.n	8002654 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800259e:	f023 030c 	bic.w	r3, r3, #12
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	6851      	ldr	r1, [r2, #4]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6912      	ldr	r2, [r2, #16]
 80025b0:	4311      	orrs	r1, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6992      	ldr	r2, [r2, #24]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fe09 	bl	80021dc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fe16 	bl	8002202 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd22 	bl	8002024 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <LL_USART_Init+0xe8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e021      	b.n	8002632 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <LL_USART_Init+0xec>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d102      	bne.n	80025fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e01a      	b.n	8002632 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <LL_USART_Init+0xf0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d102      	bne.n	800260a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e013      	b.n	8002632 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <LL_USART_Init+0xf4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d102      	bne.n	8002618 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e00c      	b.n	8002632 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <LL_USART_Init+0xf8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d102      	bne.n	8002626 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	e005      	b.n	8002632 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <LL_USART_Init+0xfc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69b9      	ldr	r1, [r7, #24]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fdea 	bl	8002228 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40011000 	.word	0x40011000
 8002664:	40004400 	.word	0x40004400
 8002668:	40004800 	.word	0x40004800
 800266c:	40011400 	.word	0x40011400
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40005000 	.word	0x40005000

08002678 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <LL_InitTick+0x30>)
 800268c:	3b01      	subs	r3, #1
 800268e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <LL_InitTick+0x30>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <LL_InitTick+0x30>)
 8002698:	2205      	movs	r2, #5
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e010 	.word	0xe000e010

080026ac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80026b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffdd 	bl	8002678 <LL_InitTick>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <LL_SetSystemCoreClock+0x1c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <__errno>:
 80026e8:	4b01      	ldr	r3, [pc, #4]	; (80026f0 <__errno+0x8>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000004 	.word	0x20000004

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4e0d      	ldr	r6, [pc, #52]	; (800272c <__libc_init_array+0x38>)
 80026f8:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fa:	1ba4      	subs	r4, r4, r6
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	2500      	movs	r5, #0
 8002700:	42a5      	cmp	r5, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	4e0b      	ldr	r6, [pc, #44]	; (8002734 <__libc_init_array+0x40>)
 8002706:	4c0c      	ldr	r4, [pc, #48]	; (8002738 <__libc_init_array+0x44>)
 8002708:	f002 f9f8 	bl	8004afc <_init>
 800270c:	1ba4      	subs	r4, r4, r6
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	2500      	movs	r5, #0
 8002712:	42a5      	cmp	r5, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271c:	4798      	blx	r3
 800271e:	3501      	adds	r5, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002726:	4798      	blx	r3
 8002728:	3501      	adds	r5, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	08004dd0 	.word	0x08004dd0
 8002730:	08004dd0 	.word	0x08004dd0
 8002734:	08004dd0 	.word	0x08004dd0
 8002738:	08004dd4 	.word	0x08004dd4

0800273c <memset>:
 800273c:	4402      	add	r2, r0
 800273e:	4603      	mov	r3, r0
 8002740:	4293      	cmp	r3, r2
 8002742:	d100      	bne.n	8002746 <memset+0xa>
 8002744:	4770      	bx	lr
 8002746:	f803 1b01 	strb.w	r1, [r3], #1
 800274a:	e7f9      	b.n	8002740 <memset+0x4>

0800274c <__cvt>:
 800274c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002750:	ec55 4b10 	vmov	r4, r5, d0
 8002754:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002756:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800275a:	2d00      	cmp	r5, #0
 800275c:	460e      	mov	r6, r1
 800275e:	4691      	mov	r9, r2
 8002760:	4619      	mov	r1, r3
 8002762:	bfb8      	it	lt
 8002764:	4622      	movlt	r2, r4
 8002766:	462b      	mov	r3, r5
 8002768:	f027 0720 	bic.w	r7, r7, #32
 800276c:	bfbb      	ittet	lt
 800276e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002772:	461d      	movlt	r5, r3
 8002774:	2300      	movge	r3, #0
 8002776:	232d      	movlt	r3, #45	; 0x2d
 8002778:	bfb8      	it	lt
 800277a:	4614      	movlt	r4, r2
 800277c:	2f46      	cmp	r7, #70	; 0x46
 800277e:	700b      	strb	r3, [r1, #0]
 8002780:	d004      	beq.n	800278c <__cvt+0x40>
 8002782:	2f45      	cmp	r7, #69	; 0x45
 8002784:	d100      	bne.n	8002788 <__cvt+0x3c>
 8002786:	3601      	adds	r6, #1
 8002788:	2102      	movs	r1, #2
 800278a:	e000      	b.n	800278e <__cvt+0x42>
 800278c:	2103      	movs	r1, #3
 800278e:	ab03      	add	r3, sp, #12
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	ab02      	add	r3, sp, #8
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4632      	mov	r2, r6
 8002798:	4653      	mov	r3, sl
 800279a:	ec45 4b10 	vmov	d0, r4, r5
 800279e:	f000 fd87 	bl	80032b0 <_dtoa_r>
 80027a2:	2f47      	cmp	r7, #71	; 0x47
 80027a4:	4680      	mov	r8, r0
 80027a6:	d102      	bne.n	80027ae <__cvt+0x62>
 80027a8:	f019 0f01 	tst.w	r9, #1
 80027ac:	d026      	beq.n	80027fc <__cvt+0xb0>
 80027ae:	2f46      	cmp	r7, #70	; 0x46
 80027b0:	eb08 0906 	add.w	r9, r8, r6
 80027b4:	d111      	bne.n	80027da <__cvt+0x8e>
 80027b6:	f898 3000 	ldrb.w	r3, [r8]
 80027ba:	2b30      	cmp	r3, #48	; 0x30
 80027bc:	d10a      	bne.n	80027d4 <__cvt+0x88>
 80027be:	2200      	movs	r2, #0
 80027c0:	2300      	movs	r3, #0
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fe f92b 	bl	8000a20 <__aeabi_dcmpeq>
 80027ca:	b918      	cbnz	r0, 80027d4 <__cvt+0x88>
 80027cc:	f1c6 0601 	rsb	r6, r6, #1
 80027d0:	f8ca 6000 	str.w	r6, [sl]
 80027d4:	f8da 3000 	ldr.w	r3, [sl]
 80027d8:	4499      	add	r9, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	2300      	movs	r3, #0
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	f7fe f91d 	bl	8000a20 <__aeabi_dcmpeq>
 80027e6:	b938      	cbnz	r0, 80027f8 <__cvt+0xac>
 80027e8:	2230      	movs	r2, #48	; 0x30
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	454b      	cmp	r3, r9
 80027ee:	d205      	bcs.n	80027fc <__cvt+0xb0>
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	9103      	str	r1, [sp, #12]
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e7f8      	b.n	80027ea <__cvt+0x9e>
 80027f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80027fc:	9b03      	ldr	r3, [sp, #12]
 80027fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002800:	eba3 0308 	sub.w	r3, r3, r8
 8002804:	4640      	mov	r0, r8
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	b004      	add	sp, #16
 800280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800280e <__exponent>:
 800280e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002810:	2900      	cmp	r1, #0
 8002812:	4604      	mov	r4, r0
 8002814:	bfba      	itte	lt
 8002816:	4249      	neglt	r1, r1
 8002818:	232d      	movlt	r3, #45	; 0x2d
 800281a:	232b      	movge	r3, #43	; 0x2b
 800281c:	2909      	cmp	r1, #9
 800281e:	f804 2b02 	strb.w	r2, [r4], #2
 8002822:	7043      	strb	r3, [r0, #1]
 8002824:	dd20      	ble.n	8002868 <__exponent+0x5a>
 8002826:	f10d 0307 	add.w	r3, sp, #7
 800282a:	461f      	mov	r7, r3
 800282c:	260a      	movs	r6, #10
 800282e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002832:	fb06 1115 	mls	r1, r6, r5, r1
 8002836:	3130      	adds	r1, #48	; 0x30
 8002838:	2d09      	cmp	r5, #9
 800283a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800283e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002842:	4629      	mov	r1, r5
 8002844:	dc09      	bgt.n	800285a <__exponent+0x4c>
 8002846:	3130      	adds	r1, #48	; 0x30
 8002848:	3b02      	subs	r3, #2
 800284a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800284e:	42bb      	cmp	r3, r7
 8002850:	4622      	mov	r2, r4
 8002852:	d304      	bcc.n	800285e <__exponent+0x50>
 8002854:	1a10      	subs	r0, r2, r0
 8002856:	b003      	add	sp, #12
 8002858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285a:	4613      	mov	r3, r2
 800285c:	e7e7      	b.n	800282e <__exponent+0x20>
 800285e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002862:	f804 2b01 	strb.w	r2, [r4], #1
 8002866:	e7f2      	b.n	800284e <__exponent+0x40>
 8002868:	2330      	movs	r3, #48	; 0x30
 800286a:	4419      	add	r1, r3
 800286c:	7083      	strb	r3, [r0, #2]
 800286e:	1d02      	adds	r2, r0, #4
 8002870:	70c1      	strb	r1, [r0, #3]
 8002872:	e7ef      	b.n	8002854 <__exponent+0x46>

08002874 <_printf_float>:
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002878:	b08d      	sub	sp, #52	; 0x34
 800287a:	460c      	mov	r4, r1
 800287c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002880:	4616      	mov	r6, r2
 8002882:	461f      	mov	r7, r3
 8002884:	4605      	mov	r5, r0
 8002886:	f001 fc45 	bl	8004114 <_localeconv_r>
 800288a:	6803      	ldr	r3, [r0, #0]
 800288c:	9304      	str	r3, [sp, #16]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fc9a 	bl	80001c8 <strlen>
 8002894:	2300      	movs	r3, #0
 8002896:	930a      	str	r3, [sp, #40]	; 0x28
 8002898:	f8d8 3000 	ldr.w	r3, [r8]
 800289c:	9005      	str	r0, [sp, #20]
 800289e:	3307      	adds	r3, #7
 80028a0:	f023 0307 	bic.w	r3, r3, #7
 80028a4:	f103 0208 	add.w	r2, r3, #8
 80028a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80028ac:	f8d4 b000 	ldr.w	fp, [r4]
 80028b0:	f8c8 2000 	str.w	r2, [r8]
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80028bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80028c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80028c4:	9307      	str	r3, [sp, #28]
 80028c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ce:	4ba7      	ldr	r3, [pc, #668]	; (8002b6c <_printf_float+0x2f8>)
 80028d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80028d4:	f7fe f8d6 	bl	8000a84 <__aeabi_dcmpun>
 80028d8:	bb70      	cbnz	r0, 8002938 <_printf_float+0xc4>
 80028da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028de:	4ba3      	ldr	r3, [pc, #652]	; (8002b6c <_printf_float+0x2f8>)
 80028e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80028e4:	f7fe f8b0 	bl	8000a48 <__aeabi_dcmple>
 80028e8:	bb30      	cbnz	r0, 8002938 <_printf_float+0xc4>
 80028ea:	2200      	movs	r2, #0
 80028ec:	2300      	movs	r3, #0
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f7fe f89f 	bl	8000a34 <__aeabi_dcmplt>
 80028f6:	b110      	cbz	r0, 80028fe <_printf_float+0x8a>
 80028f8:	232d      	movs	r3, #45	; 0x2d
 80028fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028fe:	4a9c      	ldr	r2, [pc, #624]	; (8002b70 <_printf_float+0x2fc>)
 8002900:	4b9c      	ldr	r3, [pc, #624]	; (8002b74 <_printf_float+0x300>)
 8002902:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002906:	bf8c      	ite	hi
 8002908:	4690      	movhi	r8, r2
 800290a:	4698      	movls	r8, r3
 800290c:	2303      	movs	r3, #3
 800290e:	f02b 0204 	bic.w	r2, fp, #4
 8002912:	6123      	str	r3, [r4, #16]
 8002914:	6022      	str	r2, [r4, #0]
 8002916:	f04f 0900 	mov.w	r9, #0
 800291a:	9700      	str	r7, [sp, #0]
 800291c:	4633      	mov	r3, r6
 800291e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002920:	4621      	mov	r1, r4
 8002922:	4628      	mov	r0, r5
 8002924:	f000 f9e6 	bl	8002cf4 <_printf_common>
 8002928:	3001      	adds	r0, #1
 800292a:	f040 808d 	bne.w	8002a48 <_printf_float+0x1d4>
 800292e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002932:	b00d      	add	sp, #52	; 0x34
 8002934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	4640      	mov	r0, r8
 800293e:	4649      	mov	r1, r9
 8002940:	f7fe f8a0 	bl	8000a84 <__aeabi_dcmpun>
 8002944:	b110      	cbz	r0, 800294c <_printf_float+0xd8>
 8002946:	4a8c      	ldr	r2, [pc, #560]	; (8002b78 <_printf_float+0x304>)
 8002948:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <_printf_float+0x308>)
 800294a:	e7da      	b.n	8002902 <_printf_float+0x8e>
 800294c:	6861      	ldr	r1, [r4, #4]
 800294e:	1c4b      	adds	r3, r1, #1
 8002950:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002954:	a80a      	add	r0, sp, #40	; 0x28
 8002956:	d13e      	bne.n	80029d6 <_printf_float+0x162>
 8002958:	2306      	movs	r3, #6
 800295a:	6063      	str	r3, [r4, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002962:	ab09      	add	r3, sp, #36	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	ec49 8b10 	vmov	d0, r8, r9
 800296a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800296e:	6022      	str	r2, [r4, #0]
 8002970:	f8cd a004 	str.w	sl, [sp, #4]
 8002974:	6861      	ldr	r1, [r4, #4]
 8002976:	4628      	mov	r0, r5
 8002978:	f7ff fee8 	bl	800274c <__cvt>
 800297c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002980:	2b47      	cmp	r3, #71	; 0x47
 8002982:	4680      	mov	r8, r0
 8002984:	d109      	bne.n	800299a <_printf_float+0x126>
 8002986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002988:	1cd8      	adds	r0, r3, #3
 800298a:	db02      	blt.n	8002992 <_printf_float+0x11e>
 800298c:	6862      	ldr	r2, [r4, #4]
 800298e:	4293      	cmp	r3, r2
 8002990:	dd47      	ble.n	8002a22 <_printf_float+0x1ae>
 8002992:	f1aa 0a02 	sub.w	sl, sl, #2
 8002996:	fa5f fa8a 	uxtb.w	sl, sl
 800299a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800299e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029a0:	d824      	bhi.n	80029ec <_printf_float+0x178>
 80029a2:	3901      	subs	r1, #1
 80029a4:	4652      	mov	r2, sl
 80029a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80029aa:	9109      	str	r1, [sp, #36]	; 0x24
 80029ac:	f7ff ff2f 	bl	800280e <__exponent>
 80029b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029b2:	1813      	adds	r3, r2, r0
 80029b4:	2a01      	cmp	r2, #1
 80029b6:	4681      	mov	r9, r0
 80029b8:	6123      	str	r3, [r4, #16]
 80029ba:	dc02      	bgt.n	80029c2 <_printf_float+0x14e>
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	07d1      	lsls	r1, r2, #31
 80029c0:	d501      	bpl.n	80029c6 <_printf_float+0x152>
 80029c2:	3301      	adds	r3, #1
 80029c4:	6123      	str	r3, [r4, #16]
 80029c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0a5      	beq.n	800291a <_printf_float+0xa6>
 80029ce:	232d      	movs	r3, #45	; 0x2d
 80029d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029d4:	e7a1      	b.n	800291a <_printf_float+0xa6>
 80029d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80029da:	f000 8177 	beq.w	8002ccc <_printf_float+0x458>
 80029de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80029e2:	d1bb      	bne.n	800295c <_printf_float+0xe8>
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d1b9      	bne.n	800295c <_printf_float+0xe8>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e7b6      	b.n	800295a <_printf_float+0xe6>
 80029ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80029f0:	d119      	bne.n	8002a26 <_printf_float+0x1b2>
 80029f2:	2900      	cmp	r1, #0
 80029f4:	6863      	ldr	r3, [r4, #4]
 80029f6:	dd0c      	ble.n	8002a12 <_printf_float+0x19e>
 80029f8:	6121      	str	r1, [r4, #16]
 80029fa:	b913      	cbnz	r3, 8002a02 <_printf_float+0x18e>
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	07d2      	lsls	r2, r2, #31
 8002a00:	d502      	bpl.n	8002a08 <_printf_float+0x194>
 8002a02:	3301      	adds	r3, #1
 8002a04:	440b      	add	r3, r1
 8002a06:	6123      	str	r3, [r4, #16]
 8002a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a0c:	f04f 0900 	mov.w	r9, #0
 8002a10:	e7d9      	b.n	80029c6 <_printf_float+0x152>
 8002a12:	b913      	cbnz	r3, 8002a1a <_printf_float+0x1a6>
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	07d0      	lsls	r0, r2, #31
 8002a18:	d501      	bpl.n	8002a1e <_printf_float+0x1aa>
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	e7f3      	b.n	8002a06 <_printf_float+0x192>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e7f1      	b.n	8002a06 <_printf_float+0x192>
 8002a22:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002a26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	db05      	blt.n	8002a3a <_printf_float+0x1c6>
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	6123      	str	r3, [r4, #16]
 8002a32:	07d1      	lsls	r1, r2, #31
 8002a34:	d5e8      	bpl.n	8002a08 <_printf_float+0x194>
 8002a36:	3301      	adds	r3, #1
 8002a38:	e7e5      	b.n	8002a06 <_printf_float+0x192>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bfd4      	ite	le
 8002a3e:	f1c3 0302 	rsble	r3, r3, #2
 8002a42:	2301      	movgt	r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	e7de      	b.n	8002a06 <_printf_float+0x192>
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	055a      	lsls	r2, r3, #21
 8002a4c:	d407      	bmi.n	8002a5e <_printf_float+0x1ea>
 8002a4e:	6923      	ldr	r3, [r4, #16]
 8002a50:	4642      	mov	r2, r8
 8002a52:	4631      	mov	r1, r6
 8002a54:	4628      	mov	r0, r5
 8002a56:	47b8      	blx	r7
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d12b      	bne.n	8002ab4 <_printf_float+0x240>
 8002a5c:	e767      	b.n	800292e <_printf_float+0xba>
 8002a5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002a62:	f240 80dc 	bls.w	8002c1e <_printf_float+0x3aa>
 8002a66:	2200      	movs	r2, #0
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a6e:	f7fd ffd7 	bl	8000a20 <__aeabi_dcmpeq>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d033      	beq.n	8002ade <_printf_float+0x26a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	4a41      	ldr	r2, [pc, #260]	; (8002b80 <_printf_float+0x30c>)
 8002a7a:	4631      	mov	r1, r6
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	47b8      	blx	r7
 8002a80:	3001      	adds	r0, #1
 8002a82:	f43f af54 	beq.w	800292e <_printf_float+0xba>
 8002a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	db02      	blt.n	8002a94 <_printf_float+0x220>
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	07d8      	lsls	r0, r3, #31
 8002a92:	d50f      	bpl.n	8002ab4 <_printf_float+0x240>
 8002a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a98:	4631      	mov	r1, r6
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	47b8      	blx	r7
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	f43f af45 	beq.w	800292e <_printf_float+0xba>
 8002aa4:	f04f 0800 	mov.w	r8, #0
 8002aa8:	f104 091a 	add.w	r9, r4, #26
 8002aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4543      	cmp	r3, r8
 8002ab2:	dc09      	bgt.n	8002ac8 <_printf_float+0x254>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	079b      	lsls	r3, r3, #30
 8002ab8:	f100 8103 	bmi.w	8002cc2 <_printf_float+0x44e>
 8002abc:	68e0      	ldr	r0, [r4, #12]
 8002abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	bfb8      	it	lt
 8002ac4:	4618      	movlt	r0, r3
 8002ac6:	e734      	b.n	8002932 <_printf_float+0xbe>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	464a      	mov	r2, r9
 8002acc:	4631      	mov	r1, r6
 8002ace:	4628      	mov	r0, r5
 8002ad0:	47b8      	blx	r7
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	f43f af2b 	beq.w	800292e <_printf_float+0xba>
 8002ad8:	f108 0801 	add.w	r8, r8, #1
 8002adc:	e7e6      	b.n	8002aac <_printf_float+0x238>
 8002ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dc2b      	bgt.n	8002b3c <_printf_float+0x2c8>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <_printf_float+0x30c>)
 8002ae8:	4631      	mov	r1, r6
 8002aea:	4628      	mov	r0, r5
 8002aec:	47b8      	blx	r7
 8002aee:	3001      	adds	r0, #1
 8002af0:	f43f af1d 	beq.w	800292e <_printf_float+0xba>
 8002af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af6:	b923      	cbnz	r3, 8002b02 <_printf_float+0x28e>
 8002af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002afa:	b913      	cbnz	r3, 8002b02 <_printf_float+0x28e>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	07d9      	lsls	r1, r3, #31
 8002b00:	d5d8      	bpl.n	8002ab4 <_printf_float+0x240>
 8002b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b06:	4631      	mov	r1, r6
 8002b08:	4628      	mov	r0, r5
 8002b0a:	47b8      	blx	r7
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	f43f af0e 	beq.w	800292e <_printf_float+0xba>
 8002b12:	f04f 0900 	mov.w	r9, #0
 8002b16:	f104 0a1a 	add.w	sl, r4, #26
 8002b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	454b      	cmp	r3, r9
 8002b20:	dc01      	bgt.n	8002b26 <_printf_float+0x2b2>
 8002b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b24:	e794      	b.n	8002a50 <_printf_float+0x1dc>
 8002b26:	2301      	movs	r3, #1
 8002b28:	4652      	mov	r2, sl
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	47b8      	blx	r7
 8002b30:	3001      	adds	r0, #1
 8002b32:	f43f aefc 	beq.w	800292e <_printf_float+0xba>
 8002b36:	f109 0901 	add.w	r9, r9, #1
 8002b3a:	e7ee      	b.n	8002b1a <_printf_float+0x2a6>
 8002b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b40:	429a      	cmp	r2, r3
 8002b42:	bfa8      	it	ge
 8002b44:	461a      	movge	r2, r3
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	4691      	mov	r9, r2
 8002b4a:	dd07      	ble.n	8002b5c <_printf_float+0x2e8>
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4642      	mov	r2, r8
 8002b52:	4628      	mov	r0, r5
 8002b54:	47b8      	blx	r7
 8002b56:	3001      	adds	r0, #1
 8002b58:	f43f aee9 	beq.w	800292e <_printf_float+0xba>
 8002b5c:	f104 031a 	add.w	r3, r4, #26
 8002b60:	f04f 0b00 	mov.w	fp, #0
 8002b64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b68:	9306      	str	r3, [sp, #24]
 8002b6a:	e015      	b.n	8002b98 <_printf_float+0x324>
 8002b6c:	7fefffff 	.word	0x7fefffff
 8002b70:	08004b44 	.word	0x08004b44
 8002b74:	08004b40 	.word	0x08004b40
 8002b78:	08004b4c 	.word	0x08004b4c
 8002b7c:	08004b48 	.word	0x08004b48
 8002b80:	08004b50 	.word	0x08004b50
 8002b84:	2301      	movs	r3, #1
 8002b86:	9a06      	ldr	r2, [sp, #24]
 8002b88:	4631      	mov	r1, r6
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	47b8      	blx	r7
 8002b8e:	3001      	adds	r0, #1
 8002b90:	f43f aecd 	beq.w	800292e <_printf_float+0xba>
 8002b94:	f10b 0b01 	add.w	fp, fp, #1
 8002b98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002b9c:	ebaa 0309 	sub.w	r3, sl, r9
 8002ba0:	455b      	cmp	r3, fp
 8002ba2:	dcef      	bgt.n	8002b84 <_printf_float+0x310>
 8002ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	44d0      	add	r8, sl
 8002bac:	db15      	blt.n	8002bda <_printf_float+0x366>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	07da      	lsls	r2, r3, #31
 8002bb2:	d412      	bmi.n	8002bda <_printf_float+0x366>
 8002bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002bb8:	eba3 020a 	sub.w	r2, r3, sl
 8002bbc:	eba3 0a01 	sub.w	sl, r3, r1
 8002bc0:	4592      	cmp	sl, r2
 8002bc2:	bfa8      	it	ge
 8002bc4:	4692      	movge	sl, r2
 8002bc6:	f1ba 0f00 	cmp.w	sl, #0
 8002bca:	dc0e      	bgt.n	8002bea <_printf_float+0x376>
 8002bcc:	f04f 0800 	mov.w	r8, #0
 8002bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002bd4:	f104 091a 	add.w	r9, r4, #26
 8002bd8:	e019      	b.n	8002c0e <_printf_float+0x39a>
 8002bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bde:	4631      	mov	r1, r6
 8002be0:	4628      	mov	r0, r5
 8002be2:	47b8      	blx	r7
 8002be4:	3001      	adds	r0, #1
 8002be6:	d1e5      	bne.n	8002bb4 <_printf_float+0x340>
 8002be8:	e6a1      	b.n	800292e <_printf_float+0xba>
 8002bea:	4653      	mov	r3, sl
 8002bec:	4642      	mov	r2, r8
 8002bee:	4631      	mov	r1, r6
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	47b8      	blx	r7
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d1e9      	bne.n	8002bcc <_printf_float+0x358>
 8002bf8:	e699      	b.n	800292e <_printf_float+0xba>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	464a      	mov	r2, r9
 8002bfe:	4631      	mov	r1, r6
 8002c00:	4628      	mov	r0, r5
 8002c02:	47b8      	blx	r7
 8002c04:	3001      	adds	r0, #1
 8002c06:	f43f ae92 	beq.w	800292e <_printf_float+0xba>
 8002c0a:	f108 0801 	add.w	r8, r8, #1
 8002c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	eba3 030a 	sub.w	r3, r3, sl
 8002c18:	4543      	cmp	r3, r8
 8002c1a:	dcee      	bgt.n	8002bfa <_printf_float+0x386>
 8002c1c:	e74a      	b.n	8002ab4 <_printf_float+0x240>
 8002c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c20:	2a01      	cmp	r2, #1
 8002c22:	dc01      	bgt.n	8002c28 <_printf_float+0x3b4>
 8002c24:	07db      	lsls	r3, r3, #31
 8002c26:	d53a      	bpl.n	8002c9e <_printf_float+0x42a>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	4628      	mov	r0, r5
 8002c30:	47b8      	blx	r7
 8002c32:	3001      	adds	r0, #1
 8002c34:	f43f ae7b 	beq.w	800292e <_printf_float+0xba>
 8002c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	4628      	mov	r0, r5
 8002c40:	47b8      	blx	r7
 8002c42:	3001      	adds	r0, #1
 8002c44:	f108 0801 	add.w	r8, r8, #1
 8002c48:	f43f ae71 	beq.w	800292e <_printf_float+0xba>
 8002c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8002c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f7fd fee1 	bl	8000a20 <__aeabi_dcmpeq>
 8002c5e:	b9c8      	cbnz	r0, 8002c94 <_printf_float+0x420>
 8002c60:	4653      	mov	r3, sl
 8002c62:	4642      	mov	r2, r8
 8002c64:	4631      	mov	r1, r6
 8002c66:	4628      	mov	r0, r5
 8002c68:	47b8      	blx	r7
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d10e      	bne.n	8002c8c <_printf_float+0x418>
 8002c6e:	e65e      	b.n	800292e <_printf_float+0xba>
 8002c70:	2301      	movs	r3, #1
 8002c72:	4652      	mov	r2, sl
 8002c74:	4631      	mov	r1, r6
 8002c76:	4628      	mov	r0, r5
 8002c78:	47b8      	blx	r7
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f43f ae57 	beq.w	800292e <_printf_float+0xba>
 8002c80:	f108 0801 	add.w	r8, r8, #1
 8002c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	4543      	cmp	r3, r8
 8002c8a:	dcf1      	bgt.n	8002c70 <_printf_float+0x3fc>
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002c92:	e6de      	b.n	8002a52 <_printf_float+0x1de>
 8002c94:	f04f 0800 	mov.w	r8, #0
 8002c98:	f104 0a1a 	add.w	sl, r4, #26
 8002c9c:	e7f2      	b.n	8002c84 <_printf_float+0x410>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e7df      	b.n	8002c62 <_printf_float+0x3ee>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	464a      	mov	r2, r9
 8002ca6:	4631      	mov	r1, r6
 8002ca8:	4628      	mov	r0, r5
 8002caa:	47b8      	blx	r7
 8002cac:	3001      	adds	r0, #1
 8002cae:	f43f ae3e 	beq.w	800292e <_printf_float+0xba>
 8002cb2:	f108 0801 	add.w	r8, r8, #1
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	4543      	cmp	r3, r8
 8002cbe:	dcf0      	bgt.n	8002ca2 <_printf_float+0x42e>
 8002cc0:	e6fc      	b.n	8002abc <_printf_float+0x248>
 8002cc2:	f04f 0800 	mov.w	r8, #0
 8002cc6:	f104 0919 	add.w	r9, r4, #25
 8002cca:	e7f4      	b.n	8002cb6 <_printf_float+0x442>
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	f43f ae8b 	beq.w	80029e8 <_printf_float+0x174>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002cd8:	ab09      	add	r3, sp, #36	; 0x24
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	ec49 8b10 	vmov	d0, r8, r9
 8002ce0:	6022      	str	r2, [r4, #0]
 8002ce2:	f8cd a004 	str.w	sl, [sp, #4]
 8002ce6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002cea:	4628      	mov	r0, r5
 8002cec:	f7ff fd2e 	bl	800274c <__cvt>
 8002cf0:	4680      	mov	r8, r0
 8002cf2:	e648      	b.n	8002986 <_printf_float+0x112>

08002cf4 <_printf_common>:
 8002cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf8:	4691      	mov	r9, r2
 8002cfa:	461f      	mov	r7, r3
 8002cfc:	688a      	ldr	r2, [r1, #8]
 8002cfe:	690b      	ldr	r3, [r1, #16]
 8002d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bfb8      	it	lt
 8002d08:	4613      	movlt	r3, r2
 8002d0a:	f8c9 3000 	str.w	r3, [r9]
 8002d0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d12:	4606      	mov	r6, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	b112      	cbz	r2, 8002d1e <_printf_common+0x2a>
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f8c9 3000 	str.w	r3, [r9]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	0699      	lsls	r1, r3, #26
 8002d22:	bf42      	ittt	mi
 8002d24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d28:	3302      	addmi	r3, #2
 8002d2a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d2e:	6825      	ldr	r5, [r4, #0]
 8002d30:	f015 0506 	ands.w	r5, r5, #6
 8002d34:	d107      	bne.n	8002d46 <_printf_common+0x52>
 8002d36:	f104 0a19 	add.w	sl, r4, #25
 8002d3a:	68e3      	ldr	r3, [r4, #12]
 8002d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	42ab      	cmp	r3, r5
 8002d44:	dc28      	bgt.n	8002d98 <_printf_common+0xa4>
 8002d46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	3300      	adds	r3, #0
 8002d4e:	bf18      	it	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	0692      	lsls	r2, r2, #26
 8002d54:	d42d      	bmi.n	8002db2 <_printf_common+0xbe>
 8002d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d020      	beq.n	8002da6 <_printf_common+0xb2>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	68e5      	ldr	r5, [r4, #12]
 8002d68:	f8d9 2000 	ldr.w	r2, [r9]
 8002d6c:	f003 0306 	and.w	r3, r3, #6
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	bf08      	it	eq
 8002d74:	1aad      	subeq	r5, r5, r2
 8002d76:	68a3      	ldr	r3, [r4, #8]
 8002d78:	6922      	ldr	r2, [r4, #16]
 8002d7a:	bf0c      	ite	eq
 8002d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d80:	2500      	movne	r5, #0
 8002d82:	4293      	cmp	r3, r2
 8002d84:	bfc4      	itt	gt
 8002d86:	1a9b      	subgt	r3, r3, r2
 8002d88:	18ed      	addgt	r5, r5, r3
 8002d8a:	f04f 0900 	mov.w	r9, #0
 8002d8e:	341a      	adds	r4, #26
 8002d90:	454d      	cmp	r5, r9
 8002d92:	d11a      	bne.n	8002dca <_printf_common+0xd6>
 8002d94:	2000      	movs	r0, #0
 8002d96:	e008      	b.n	8002daa <_printf_common+0xb6>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4652      	mov	r2, sl
 8002d9c:	4639      	mov	r1, r7
 8002d9e:	4630      	mov	r0, r6
 8002da0:	47c0      	blx	r8
 8002da2:	3001      	adds	r0, #1
 8002da4:	d103      	bne.n	8002dae <_printf_common+0xba>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dae:	3501      	adds	r5, #1
 8002db0:	e7c3      	b.n	8002d3a <_printf_common+0x46>
 8002db2:	18e1      	adds	r1, r4, r3
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	2030      	movs	r0, #48	; 0x30
 8002db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dbc:	4422      	add	r2, r4
 8002dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	e7c5      	b.n	8002d56 <_printf_common+0x62>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4639      	mov	r1, r7
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	47c0      	blx	r8
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d0e6      	beq.n	8002da6 <_printf_common+0xb2>
 8002dd8:	f109 0901 	add.w	r9, r9, #1
 8002ddc:	e7d8      	b.n	8002d90 <_printf_common+0x9c>
	...

08002de0 <_puts_r>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	460e      	mov	r6, r1
 8002de4:	4605      	mov	r5, r0
 8002de6:	b118      	cbz	r0, 8002df0 <_puts_r+0x10>
 8002de8:	6983      	ldr	r3, [r0, #24]
 8002dea:	b90b      	cbnz	r3, 8002df0 <_puts_r+0x10>
 8002dec:	f001 f908 	bl	8004000 <__sinit>
 8002df0:	69ab      	ldr	r3, [r5, #24]
 8002df2:	68ac      	ldr	r4, [r5, #8]
 8002df4:	b913      	cbnz	r3, 8002dfc <_puts_r+0x1c>
 8002df6:	4628      	mov	r0, r5
 8002df8:	f001 f902 	bl	8004000 <__sinit>
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <_puts_r+0xac>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d117      	bne.n	8002e32 <_puts_r+0x52>
 8002e02:	686c      	ldr	r4, [r5, #4]
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	d51d      	bpl.n	8002e46 <_puts_r+0x66>
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	b1db      	cbz	r3, 8002e46 <_puts_r+0x66>
 8002e0e:	3e01      	subs	r6, #1
 8002e10:	68a3      	ldr	r3, [r4, #8]
 8002e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e16:	3b01      	subs	r3, #1
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	b9e9      	cbnz	r1, 8002e58 <_puts_r+0x78>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da2e      	bge.n	8002e7e <_puts_r+0x9e>
 8002e20:	4622      	mov	r2, r4
 8002e22:	210a      	movs	r1, #10
 8002e24:	4628      	mov	r0, r5
 8002e26:	f000 f8f5 	bl	8003014 <__swbuf_r>
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d011      	beq.n	8002e52 <_puts_r+0x72>
 8002e2e:	200a      	movs	r0, #10
 8002e30:	e011      	b.n	8002e56 <_puts_r+0x76>
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <_puts_r+0xb0>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d101      	bne.n	8002e3c <_puts_r+0x5c>
 8002e38:	68ac      	ldr	r4, [r5, #8]
 8002e3a:	e7e3      	b.n	8002e04 <_puts_r+0x24>
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <_puts_r+0xb4>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	bf08      	it	eq
 8002e42:	68ec      	ldreq	r4, [r5, #12]
 8002e44:	e7de      	b.n	8002e04 <_puts_r+0x24>
 8002e46:	4621      	mov	r1, r4
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f000 f935 	bl	80030b8 <__swsetup_r>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d0dd      	beq.n	8002e0e <_puts_r+0x2e>
 8002e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da04      	bge.n	8002e66 <_puts_r+0x86>
 8002e5c:	69a2      	ldr	r2, [r4, #24]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	dc06      	bgt.n	8002e70 <_puts_r+0x90>
 8002e62:	290a      	cmp	r1, #10
 8002e64:	d004      	beq.n	8002e70 <_puts_r+0x90>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	6022      	str	r2, [r4, #0]
 8002e6c:	7019      	strb	r1, [r3, #0]
 8002e6e:	e7cf      	b.n	8002e10 <_puts_r+0x30>
 8002e70:	4622      	mov	r2, r4
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 f8ce 	bl	8003014 <__swbuf_r>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d1c9      	bne.n	8002e10 <_puts_r+0x30>
 8002e7c:	e7e9      	b.n	8002e52 <_puts_r+0x72>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	200a      	movs	r0, #10
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	6022      	str	r2, [r4, #0]
 8002e86:	7018      	strb	r0, [r3, #0]
 8002e88:	e7e5      	b.n	8002e56 <_puts_r+0x76>
 8002e8a:	bf00      	nop
 8002e8c:	08004b80 	.word	0x08004b80
 8002e90:	08004ba0 	.word	0x08004ba0
 8002e94:	08004b60 	.word	0x08004b60

08002e98 <puts>:
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <puts+0xc>)
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f7ff bf9f 	b.w	8002de0 <_puts_r>
 8002ea2:	bf00      	nop
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <setbuf>:
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eae:	bf0c      	ite	eq
 8002eb0:	2202      	moveq	r2, #2
 8002eb2:	2200      	movne	r2, #0
 8002eb4:	f000 b800 	b.w	8002eb8 <setvbuf>

08002eb8 <setvbuf>:
 8002eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <setvbuf+0x14c>)
 8002ec0:	681e      	ldr	r6, [r3, #0]
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460f      	mov	r7, r1
 8002ec6:	4690      	mov	r8, r2
 8002ec8:	b126      	cbz	r6, 8002ed4 <setvbuf+0x1c>
 8002eca:	69b3      	ldr	r3, [r6, #24]
 8002ecc:	b913      	cbnz	r3, 8002ed4 <setvbuf+0x1c>
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f001 f896 	bl	8004000 <__sinit>
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <setvbuf+0x150>)
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	d152      	bne.n	8002f80 <setvbuf+0xc8>
 8002eda:	6874      	ldr	r4, [r6, #4]
 8002edc:	f1b8 0f02 	cmp.w	r8, #2
 8002ee0:	d006      	beq.n	8002ef0 <setvbuf+0x38>
 8002ee2:	f1b8 0f01 	cmp.w	r8, #1
 8002ee6:	f200 8089 	bhi.w	8002ffc <setvbuf+0x144>
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	f2c0 8086 	blt.w	8002ffc <setvbuf+0x144>
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f001 f81a 	bl	8003f2c <_fflush_r>
 8002ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002efa:	b141      	cbz	r1, 8002f0e <setvbuf+0x56>
 8002efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f00:	4299      	cmp	r1, r3
 8002f02:	d002      	beq.n	8002f0a <setvbuf+0x52>
 8002f04:	4630      	mov	r0, r6
 8002f06:	f001 fc73 	bl	80047f0 <_free_r>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61a3      	str	r3, [r4, #24]
 8002f12:	6063      	str	r3, [r4, #4]
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	d503      	bpl.n	8002f22 <setvbuf+0x6a>
 8002f1a:	6921      	ldr	r1, [r4, #16]
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f001 fc67 	bl	80047f0 <_free_r>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f28:	f023 0303 	bic.w	r3, r3, #3
 8002f2c:	f1b8 0f02 	cmp.w	r8, #2
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	d05d      	beq.n	8002ff0 <setvbuf+0x138>
 8002f34:	ab01      	add	r3, sp, #4
 8002f36:	466a      	mov	r2, sp
 8002f38:	4621      	mov	r1, r4
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	f001 f8f8 	bl	8004130 <__swhatbuf_r>
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	4318      	orrs	r0, r3
 8002f44:	81a0      	strh	r0, [r4, #12]
 8002f46:	bb2d      	cbnz	r5, 8002f94 <setvbuf+0xdc>
 8002f48:	9d00      	ldr	r5, [sp, #0]
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f001 f954 	bl	80041f8 <malloc>
 8002f50:	4607      	mov	r7, r0
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d14e      	bne.n	8002ff4 <setvbuf+0x13c>
 8002f56:	f8dd 9000 	ldr.w	r9, [sp]
 8002f5a:	45a9      	cmp	r9, r5
 8002f5c:	d13c      	bne.n	8002fd8 <setvbuf+0x120>
 8002f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60a3      	str	r3, [r4, #8]
 8002f6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	2301      	movs	r3, #1
 8002f78:	6163      	str	r3, [r4, #20]
 8002f7a:	b003      	add	sp, #12
 8002f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <setvbuf+0x154>)
 8002f82:	429c      	cmp	r4, r3
 8002f84:	d101      	bne.n	8002f8a <setvbuf+0xd2>
 8002f86:	68b4      	ldr	r4, [r6, #8]
 8002f88:	e7a8      	b.n	8002edc <setvbuf+0x24>
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <setvbuf+0x158>)
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	bf08      	it	eq
 8002f90:	68f4      	ldreq	r4, [r6, #12]
 8002f92:	e7a3      	b.n	8002edc <setvbuf+0x24>
 8002f94:	2f00      	cmp	r7, #0
 8002f96:	d0d8      	beq.n	8002f4a <setvbuf+0x92>
 8002f98:	69b3      	ldr	r3, [r6, #24]
 8002f9a:	b913      	cbnz	r3, 8002fa2 <setvbuf+0xea>
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f001 f82f 	bl	8004000 <__sinit>
 8002fa2:	f1b8 0f01 	cmp.w	r8, #1
 8002fa6:	bf08      	it	eq
 8002fa8:	89a3      	ldrheq	r3, [r4, #12]
 8002faa:	6027      	str	r7, [r4, #0]
 8002fac:	bf04      	itt	eq
 8002fae:	f043 0301 	orreq.w	r3, r3, #1
 8002fb2:	81a3      	strheq	r3, [r4, #12]
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	f013 0008 	ands.w	r0, r3, #8
 8002fba:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8002fbe:	d01b      	beq.n	8002ff8 <setvbuf+0x140>
 8002fc0:	f013 0001 	ands.w	r0, r3, #1
 8002fc4:	bf18      	it	ne
 8002fc6:	426d      	negne	r5, r5
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	bf1d      	ittte	ne
 8002fce:	60a3      	strne	r3, [r4, #8]
 8002fd0:	61a5      	strne	r5, [r4, #24]
 8002fd2:	4618      	movne	r0, r3
 8002fd4:	60a5      	streq	r5, [r4, #8]
 8002fd6:	e7d0      	b.n	8002f7a <setvbuf+0xc2>
 8002fd8:	4648      	mov	r0, r9
 8002fda:	f001 f90d 	bl	80041f8 <malloc>
 8002fde:	4607      	mov	r7, r0
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d0bc      	beq.n	8002f5e <setvbuf+0xa6>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	464d      	mov	r5, r9
 8002fee:	e7d3      	b.n	8002f98 <setvbuf+0xe0>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e7b6      	b.n	8002f62 <setvbuf+0xaa>
 8002ff4:	46a9      	mov	r9, r5
 8002ff6:	e7f5      	b.n	8002fe4 <setvbuf+0x12c>
 8002ff8:	60a0      	str	r0, [r4, #8]
 8002ffa:	e7be      	b.n	8002f7a <setvbuf+0xc2>
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003000:	e7bb      	b.n	8002f7a <setvbuf+0xc2>
 8003002:	bf00      	nop
 8003004:	20000004 	.word	0x20000004
 8003008:	08004b80 	.word	0x08004b80
 800300c:	08004ba0 	.word	0x08004ba0
 8003010:	08004b60 	.word	0x08004b60

08003014 <__swbuf_r>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	460e      	mov	r6, r1
 8003018:	4614      	mov	r4, r2
 800301a:	4605      	mov	r5, r0
 800301c:	b118      	cbz	r0, 8003026 <__swbuf_r+0x12>
 800301e:	6983      	ldr	r3, [r0, #24]
 8003020:	b90b      	cbnz	r3, 8003026 <__swbuf_r+0x12>
 8003022:	f000 ffed 	bl	8004000 <__sinit>
 8003026:	4b21      	ldr	r3, [pc, #132]	; (80030ac <__swbuf_r+0x98>)
 8003028:	429c      	cmp	r4, r3
 800302a:	d12a      	bne.n	8003082 <__swbuf_r+0x6e>
 800302c:	686c      	ldr	r4, [r5, #4]
 800302e:	69a3      	ldr	r3, [r4, #24]
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	071a      	lsls	r2, r3, #28
 8003036:	d52e      	bpl.n	8003096 <__swbuf_r+0x82>
 8003038:	6923      	ldr	r3, [r4, #16]
 800303a:	b363      	cbz	r3, 8003096 <__swbuf_r+0x82>
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	1ac0      	subs	r0, r0, r3
 8003042:	6963      	ldr	r3, [r4, #20]
 8003044:	b2f6      	uxtb	r6, r6
 8003046:	4283      	cmp	r3, r0
 8003048:	4637      	mov	r7, r6
 800304a:	dc04      	bgt.n	8003056 <__swbuf_r+0x42>
 800304c:	4621      	mov	r1, r4
 800304e:	4628      	mov	r0, r5
 8003050:	f000 ff6c 	bl	8003f2c <_fflush_r>
 8003054:	bb28      	cbnz	r0, 80030a2 <__swbuf_r+0x8e>
 8003056:	68a3      	ldr	r3, [r4, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60a3      	str	r3, [r4, #8]
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	6022      	str	r2, [r4, #0]
 8003062:	701e      	strb	r6, [r3, #0]
 8003064:	6963      	ldr	r3, [r4, #20]
 8003066:	3001      	adds	r0, #1
 8003068:	4283      	cmp	r3, r0
 800306a:	d004      	beq.n	8003076 <__swbuf_r+0x62>
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	07db      	lsls	r3, r3, #31
 8003070:	d519      	bpl.n	80030a6 <__swbuf_r+0x92>
 8003072:	2e0a      	cmp	r6, #10
 8003074:	d117      	bne.n	80030a6 <__swbuf_r+0x92>
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 ff57 	bl	8003f2c <_fflush_r>
 800307e:	b190      	cbz	r0, 80030a6 <__swbuf_r+0x92>
 8003080:	e00f      	b.n	80030a2 <__swbuf_r+0x8e>
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <__swbuf_r+0x9c>)
 8003084:	429c      	cmp	r4, r3
 8003086:	d101      	bne.n	800308c <__swbuf_r+0x78>
 8003088:	68ac      	ldr	r4, [r5, #8]
 800308a:	e7d0      	b.n	800302e <__swbuf_r+0x1a>
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <__swbuf_r+0xa0>)
 800308e:	429c      	cmp	r4, r3
 8003090:	bf08      	it	eq
 8003092:	68ec      	ldreq	r4, [r5, #12]
 8003094:	e7cb      	b.n	800302e <__swbuf_r+0x1a>
 8003096:	4621      	mov	r1, r4
 8003098:	4628      	mov	r0, r5
 800309a:	f000 f80d 	bl	80030b8 <__swsetup_r>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d0cc      	beq.n	800303c <__swbuf_r+0x28>
 80030a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80030a6:	4638      	mov	r0, r7
 80030a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	08004b80 	.word	0x08004b80
 80030b0:	08004ba0 	.word	0x08004ba0
 80030b4:	08004b60 	.word	0x08004b60

080030b8 <__swsetup_r>:
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <__swsetup_r+0xcc>)
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	681d      	ldr	r5, [r3, #0]
 80030be:	4606      	mov	r6, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	b125      	cbz	r5, 80030ce <__swsetup_r+0x16>
 80030c4:	69ab      	ldr	r3, [r5, #24]
 80030c6:	b913      	cbnz	r3, 80030ce <__swsetup_r+0x16>
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 ff99 	bl	8004000 <__sinit>
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <__swsetup_r+0xd0>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d10f      	bne.n	80030f4 <__swsetup_r+0x3c>
 80030d4:	686c      	ldr	r4, [r5, #4]
 80030d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	0715      	lsls	r5, r2, #28
 80030de:	d42c      	bmi.n	800313a <__swsetup_r+0x82>
 80030e0:	06d0      	lsls	r0, r2, #27
 80030e2:	d411      	bmi.n	8003108 <__swsetup_r+0x50>
 80030e4:	2209      	movs	r2, #9
 80030e6:	6032      	str	r2, [r6, #0]
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f2:	e03e      	b.n	8003172 <__swsetup_r+0xba>
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <__swsetup_r+0xd4>)
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d101      	bne.n	80030fe <__swsetup_r+0x46>
 80030fa:	68ac      	ldr	r4, [r5, #8]
 80030fc:	e7eb      	b.n	80030d6 <__swsetup_r+0x1e>
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <__swsetup_r+0xd8>)
 8003100:	429c      	cmp	r4, r3
 8003102:	bf08      	it	eq
 8003104:	68ec      	ldreq	r4, [r5, #12]
 8003106:	e7e6      	b.n	80030d6 <__swsetup_r+0x1e>
 8003108:	0751      	lsls	r1, r2, #29
 800310a:	d512      	bpl.n	8003132 <__swsetup_r+0x7a>
 800310c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800310e:	b141      	cbz	r1, 8003122 <__swsetup_r+0x6a>
 8003110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003114:	4299      	cmp	r1, r3
 8003116:	d002      	beq.n	800311e <__swsetup_r+0x66>
 8003118:	4630      	mov	r0, r6
 800311a:	f001 fb69 	bl	80047f0 <_free_r>
 800311e:	2300      	movs	r3, #0
 8003120:	6363      	str	r3, [r4, #52]	; 0x34
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	2300      	movs	r3, #0
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	b94b      	cbnz	r3, 8003152 <__swsetup_r+0x9a>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d003      	beq.n	8003152 <__swsetup_r+0x9a>
 800314a:	4621      	mov	r1, r4
 800314c:	4630      	mov	r0, r6
 800314e:	f001 f813 	bl	8004178 <__smakebuf_r>
 8003152:	89a2      	ldrh	r2, [r4, #12]
 8003154:	f012 0301 	ands.w	r3, r2, #1
 8003158:	d00c      	beq.n	8003174 <__swsetup_r+0xbc>
 800315a:	2300      	movs	r3, #0
 800315c:	60a3      	str	r3, [r4, #8]
 800315e:	6963      	ldr	r3, [r4, #20]
 8003160:	425b      	negs	r3, r3
 8003162:	61a3      	str	r3, [r4, #24]
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	b953      	cbnz	r3, 800317e <__swsetup_r+0xc6>
 8003168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800316c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003170:	d1ba      	bne.n	80030e8 <__swsetup_r+0x30>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	0792      	lsls	r2, r2, #30
 8003176:	bf58      	it	pl
 8003178:	6963      	ldrpl	r3, [r4, #20]
 800317a:	60a3      	str	r3, [r4, #8]
 800317c:	e7f2      	b.n	8003164 <__swsetup_r+0xac>
 800317e:	2000      	movs	r0, #0
 8003180:	e7f7      	b.n	8003172 <__swsetup_r+0xba>
 8003182:	bf00      	nop
 8003184:	20000004 	.word	0x20000004
 8003188:	08004b80 	.word	0x08004b80
 800318c:	08004ba0 	.word	0x08004ba0
 8003190:	08004b60 	.word	0x08004b60

08003194 <quorem>:
 8003194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	6903      	ldr	r3, [r0, #16]
 800319a:	690c      	ldr	r4, [r1, #16]
 800319c:	42a3      	cmp	r3, r4
 800319e:	4680      	mov	r8, r0
 80031a0:	f2c0 8082 	blt.w	80032a8 <quorem+0x114>
 80031a4:	3c01      	subs	r4, #1
 80031a6:	f101 0714 	add.w	r7, r1, #20
 80031aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80031ae:	f100 0614 	add.w	r6, r0, #20
 80031b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80031b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80031ba:	eb06 030c 	add.w	r3, r6, ip
 80031be:	3501      	adds	r5, #1
 80031c0:	eb07 090c 	add.w	r9, r7, ip
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80031ca:	b395      	cbz	r5, 8003232 <quorem+0x9e>
 80031cc:	f04f 0a00 	mov.w	sl, #0
 80031d0:	4638      	mov	r0, r7
 80031d2:	46b6      	mov	lr, r6
 80031d4:	46d3      	mov	fp, sl
 80031d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80031da:	b293      	uxth	r3, r2
 80031dc:	fb05 a303 	mla	r3, r5, r3, sl
 80031e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ebab 0303 	sub.w	r3, fp, r3
 80031ea:	0c12      	lsrs	r2, r2, #16
 80031ec:	f8de b000 	ldr.w	fp, [lr]
 80031f0:	fb05 a202 	mla	r2, r5, r2, sl
 80031f4:	fa13 f38b 	uxtah	r3, r3, fp
 80031f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80031fc:	fa1f fb82 	uxth.w	fp, r2
 8003200:	f8de 2000 	ldr.w	r2, [lr]
 8003204:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800320c:	b29b      	uxth	r3, r3
 800320e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003212:	4581      	cmp	r9, r0
 8003214:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003218:	f84e 3b04 	str.w	r3, [lr], #4
 800321c:	d2db      	bcs.n	80031d6 <quorem+0x42>
 800321e:	f856 300c 	ldr.w	r3, [r6, ip]
 8003222:	b933      	cbnz	r3, 8003232 <quorem+0x9e>
 8003224:	9b01      	ldr	r3, [sp, #4]
 8003226:	3b04      	subs	r3, #4
 8003228:	429e      	cmp	r6, r3
 800322a:	461a      	mov	r2, r3
 800322c:	d330      	bcc.n	8003290 <quorem+0xfc>
 800322e:	f8c8 4010 	str.w	r4, [r8, #16]
 8003232:	4640      	mov	r0, r8
 8003234:	f001 fa08 	bl	8004648 <__mcmp>
 8003238:	2800      	cmp	r0, #0
 800323a:	db25      	blt.n	8003288 <quorem+0xf4>
 800323c:	3501      	adds	r5, #1
 800323e:	4630      	mov	r0, r6
 8003240:	f04f 0c00 	mov.w	ip, #0
 8003244:	f857 2b04 	ldr.w	r2, [r7], #4
 8003248:	f8d0 e000 	ldr.w	lr, [r0]
 800324c:	b293      	uxth	r3, r2
 800324e:	ebac 0303 	sub.w	r3, ip, r3
 8003252:	0c12      	lsrs	r2, r2, #16
 8003254:	fa13 f38e 	uxtah	r3, r3, lr
 8003258:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800325c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003260:	b29b      	uxth	r3, r3
 8003262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003266:	45b9      	cmp	r9, r7
 8003268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800326c:	f840 3b04 	str.w	r3, [r0], #4
 8003270:	d2e8      	bcs.n	8003244 <quorem+0xb0>
 8003272:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003276:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800327a:	b92a      	cbnz	r2, 8003288 <quorem+0xf4>
 800327c:	3b04      	subs	r3, #4
 800327e:	429e      	cmp	r6, r3
 8003280:	461a      	mov	r2, r3
 8003282:	d30b      	bcc.n	800329c <quorem+0x108>
 8003284:	f8c8 4010 	str.w	r4, [r8, #16]
 8003288:	4628      	mov	r0, r5
 800328a:	b003      	add	sp, #12
 800328c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	3b04      	subs	r3, #4
 8003294:	2a00      	cmp	r2, #0
 8003296:	d1ca      	bne.n	800322e <quorem+0x9a>
 8003298:	3c01      	subs	r4, #1
 800329a:	e7c5      	b.n	8003228 <quorem+0x94>
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	3b04      	subs	r3, #4
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d1ef      	bne.n	8003284 <quorem+0xf0>
 80032a4:	3c01      	subs	r4, #1
 80032a6:	e7ea      	b.n	800327e <quorem+0xea>
 80032a8:	2000      	movs	r0, #0
 80032aa:	e7ee      	b.n	800328a <quorem+0xf6>
 80032ac:	0000      	movs	r0, r0
	...

080032b0 <_dtoa_r>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	ec57 6b10 	vmov	r6, r7, d0
 80032b8:	b097      	sub	sp, #92	; 0x5c
 80032ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80032bc:	9106      	str	r1, [sp, #24]
 80032be:	4604      	mov	r4, r0
 80032c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80032c2:	9312      	str	r3, [sp, #72]	; 0x48
 80032c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80032c8:	e9cd 6700 	strd	r6, r7, [sp]
 80032cc:	b93d      	cbnz	r5, 80032de <_dtoa_r+0x2e>
 80032ce:	2010      	movs	r0, #16
 80032d0:	f000 ff92 	bl	80041f8 <malloc>
 80032d4:	6260      	str	r0, [r4, #36]	; 0x24
 80032d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80032da:	6005      	str	r5, [r0, #0]
 80032dc:	60c5      	str	r5, [r0, #12]
 80032de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	b151      	cbz	r1, 80032fa <_dtoa_r+0x4a>
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	604a      	str	r2, [r1, #4]
 80032e8:	2301      	movs	r3, #1
 80032ea:	4093      	lsls	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 ffc9 	bl	8004286 <_Bfree>
 80032f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	1e3b      	subs	r3, r7, #0
 80032fc:	bfbb      	ittet	lt
 80032fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003302:	9301      	strlt	r3, [sp, #4]
 8003304:	2300      	movge	r3, #0
 8003306:	2201      	movlt	r2, #1
 8003308:	bfac      	ite	ge
 800330a:	f8c8 3000 	strge.w	r3, [r8]
 800330e:	f8c8 2000 	strlt.w	r2, [r8]
 8003312:	4baf      	ldr	r3, [pc, #700]	; (80035d0 <_dtoa_r+0x320>)
 8003314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003318:	ea33 0308 	bics.w	r3, r3, r8
 800331c:	d114      	bne.n	8003348 <_dtoa_r+0x98>
 800331e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003320:	f242 730f 	movw	r3, #9999	; 0x270f
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	9b00      	ldr	r3, [sp, #0]
 8003328:	b923      	cbnz	r3, 8003334 <_dtoa_r+0x84>
 800332a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800332e:	2800      	cmp	r0, #0
 8003330:	f000 8542 	beq.w	8003db8 <_dtoa_r+0xb08>
 8003334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003336:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80035e4 <_dtoa_r+0x334>
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8544 	beq.w	8003dc8 <_dtoa_r+0xb18>
 8003340:	f10b 0303 	add.w	r3, fp, #3
 8003344:	f000 bd3e 	b.w	8003dc4 <_dtoa_r+0xb14>
 8003348:	e9dd 6700 	ldrd	r6, r7, [sp]
 800334c:	2200      	movs	r2, #0
 800334e:	2300      	movs	r3, #0
 8003350:	4630      	mov	r0, r6
 8003352:	4639      	mov	r1, r7
 8003354:	f7fd fb64 	bl	8000a20 <__aeabi_dcmpeq>
 8003358:	4681      	mov	r9, r0
 800335a:	b168      	cbz	r0, 8003378 <_dtoa_r+0xc8>
 800335c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800335e:	2301      	movs	r3, #1
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8524 	beq.w	8003db2 <_dtoa_r+0xb02>
 800336a:	4b9a      	ldr	r3, [pc, #616]	; (80035d4 <_dtoa_r+0x324>)
 800336c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800336e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	f000 bd28 	b.w	8003dc8 <_dtoa_r+0xb18>
 8003378:	aa14      	add	r2, sp, #80	; 0x50
 800337a:	a915      	add	r1, sp, #84	; 0x54
 800337c:	ec47 6b10 	vmov	d0, r6, r7
 8003380:	4620      	mov	r0, r4
 8003382:	f001 f9d8 	bl	8004736 <__d2b>
 8003386:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800338a:	9004      	str	r0, [sp, #16]
 800338c:	2d00      	cmp	r5, #0
 800338e:	d07c      	beq.n	800348a <_dtoa_r+0x1da>
 8003390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003394:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003398:	46b2      	mov	sl, r6
 800339a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800339e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80033a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80033a6:	2200      	movs	r2, #0
 80033a8:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <_dtoa_r+0x328>)
 80033aa:	4650      	mov	r0, sl
 80033ac:	4659      	mov	r1, fp
 80033ae:	f7fc ff17 	bl	80001e0 <__aeabi_dsub>
 80033b2:	a381      	add	r3, pc, #516	; (adr r3, 80035b8 <_dtoa_r+0x308>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd f8ca 	bl	8000550 <__aeabi_dmul>
 80033bc:	a380      	add	r3, pc, #512	; (adr r3, 80035c0 <_dtoa_r+0x310>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fc ff0f 	bl	80001e4 <__adddf3>
 80033c6:	4606      	mov	r6, r0
 80033c8:	4628      	mov	r0, r5
 80033ca:	460f      	mov	r7, r1
 80033cc:	f7fd f856 	bl	800047c <__aeabi_i2d>
 80033d0:	a37d      	add	r3, pc, #500	; (adr r3, 80035c8 <_dtoa_r+0x318>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd f8bb 	bl	8000550 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4630      	mov	r0, r6
 80033e0:	4639      	mov	r1, r7
 80033e2:	f7fc feff 	bl	80001e4 <__adddf3>
 80033e6:	4606      	mov	r6, r0
 80033e8:	460f      	mov	r7, r1
 80033ea:	f7fd fb61 	bl	8000ab0 <__aeabi_d2iz>
 80033ee:	2200      	movs	r2, #0
 80033f0:	4682      	mov	sl, r0
 80033f2:	2300      	movs	r3, #0
 80033f4:	4630      	mov	r0, r6
 80033f6:	4639      	mov	r1, r7
 80033f8:	f7fd fb1c 	bl	8000a34 <__aeabi_dcmplt>
 80033fc:	b148      	cbz	r0, 8003412 <_dtoa_r+0x162>
 80033fe:	4650      	mov	r0, sl
 8003400:	f7fd f83c 	bl	800047c <__aeabi_i2d>
 8003404:	4632      	mov	r2, r6
 8003406:	463b      	mov	r3, r7
 8003408:	f7fd fb0a 	bl	8000a20 <__aeabi_dcmpeq>
 800340c:	b908      	cbnz	r0, 8003412 <_dtoa_r+0x162>
 800340e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003412:	f1ba 0f16 	cmp.w	sl, #22
 8003416:	d859      	bhi.n	80034cc <_dtoa_r+0x21c>
 8003418:	4970      	ldr	r1, [pc, #448]	; (80035dc <_dtoa_r+0x32c>)
 800341a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800341e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003426:	f7fd fb23 	bl	8000a70 <__aeabi_dcmpgt>
 800342a:	2800      	cmp	r0, #0
 800342c:	d050      	beq.n	80034d0 <_dtoa_r+0x220>
 800342e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003432:	2300      	movs	r3, #0
 8003434:	930f      	str	r3, [sp, #60]	; 0x3c
 8003436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003438:	1b5d      	subs	r5, r3, r5
 800343a:	f1b5 0801 	subs.w	r8, r5, #1
 800343e:	bf49      	itett	mi
 8003440:	f1c5 0301 	rsbmi	r3, r5, #1
 8003444:	2300      	movpl	r3, #0
 8003446:	9305      	strmi	r3, [sp, #20]
 8003448:	f04f 0800 	movmi.w	r8, #0
 800344c:	bf58      	it	pl
 800344e:	9305      	strpl	r3, [sp, #20]
 8003450:	f1ba 0f00 	cmp.w	sl, #0
 8003454:	db3e      	blt.n	80034d4 <_dtoa_r+0x224>
 8003456:	2300      	movs	r3, #0
 8003458:	44d0      	add	r8, sl
 800345a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800345e:	9307      	str	r3, [sp, #28]
 8003460:	9b06      	ldr	r3, [sp, #24]
 8003462:	2b09      	cmp	r3, #9
 8003464:	f200 8090 	bhi.w	8003588 <_dtoa_r+0x2d8>
 8003468:	2b05      	cmp	r3, #5
 800346a:	bfc4      	itt	gt
 800346c:	3b04      	subgt	r3, #4
 800346e:	9306      	strgt	r3, [sp, #24]
 8003470:	9b06      	ldr	r3, [sp, #24]
 8003472:	f1a3 0302 	sub.w	r3, r3, #2
 8003476:	bfcc      	ite	gt
 8003478:	2500      	movgt	r5, #0
 800347a:	2501      	movle	r5, #1
 800347c:	2b03      	cmp	r3, #3
 800347e:	f200 808f 	bhi.w	80035a0 <_dtoa_r+0x2f0>
 8003482:	e8df f003 	tbb	[pc, r3]
 8003486:	7f7d      	.short	0x7f7d
 8003488:	7131      	.short	0x7131
 800348a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800348e:	441d      	add	r5, r3
 8003490:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003494:	2820      	cmp	r0, #32
 8003496:	dd13      	ble.n	80034c0 <_dtoa_r+0x210>
 8003498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800349c:	9b00      	ldr	r3, [sp, #0]
 800349e:	fa08 f800 	lsl.w	r8, r8, r0
 80034a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80034a6:	fa23 f000 	lsr.w	r0, r3, r0
 80034aa:	ea48 0000 	orr.w	r0, r8, r0
 80034ae:	f7fc ffd5 	bl	800045c <__aeabi_ui2d>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4682      	mov	sl, r0
 80034b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80034ba:	3d01      	subs	r5, #1
 80034bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80034be:	e772      	b.n	80033a6 <_dtoa_r+0xf6>
 80034c0:	9b00      	ldr	r3, [sp, #0]
 80034c2:	f1c0 0020 	rsb	r0, r0, #32
 80034c6:	fa03 f000 	lsl.w	r0, r3, r0
 80034ca:	e7f0      	b.n	80034ae <_dtoa_r+0x1fe>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e7b1      	b.n	8003434 <_dtoa_r+0x184>
 80034d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80034d2:	e7b0      	b.n	8003436 <_dtoa_r+0x186>
 80034d4:	9b05      	ldr	r3, [sp, #20]
 80034d6:	eba3 030a 	sub.w	r3, r3, sl
 80034da:	9305      	str	r3, [sp, #20]
 80034dc:	f1ca 0300 	rsb	r3, sl, #0
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	930e      	str	r3, [sp, #56]	; 0x38
 80034e6:	e7bb      	b.n	8003460 <_dtoa_r+0x1b0>
 80034e8:	2301      	movs	r3, #1
 80034ea:	930a      	str	r3, [sp, #40]	; 0x28
 80034ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dd59      	ble.n	80035a6 <_dtoa_r+0x2f6>
 80034f2:	9302      	str	r3, [sp, #8]
 80034f4:	4699      	mov	r9, r3
 80034f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034f8:	2200      	movs	r2, #0
 80034fa:	6072      	str	r2, [r6, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	f102 0014 	add.w	r0, r2, #20
 8003502:	4298      	cmp	r0, r3
 8003504:	6871      	ldr	r1, [r6, #4]
 8003506:	d953      	bls.n	80035b0 <_dtoa_r+0x300>
 8003508:	4620      	mov	r0, r4
 800350a:	f000 fe88 	bl	800421e <_Balloc>
 800350e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003510:	6030      	str	r0, [r6, #0]
 8003512:	f1b9 0f0e 	cmp.w	r9, #14
 8003516:	f8d3 b000 	ldr.w	fp, [r3]
 800351a:	f200 80e6 	bhi.w	80036ea <_dtoa_r+0x43a>
 800351e:	2d00      	cmp	r5, #0
 8003520:	f000 80e3 	beq.w	80036ea <_dtoa_r+0x43a>
 8003524:	ed9d 7b00 	vldr	d7, [sp]
 8003528:	f1ba 0f00 	cmp.w	sl, #0
 800352c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003530:	dd74      	ble.n	800361c <_dtoa_r+0x36c>
 8003532:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <_dtoa_r+0x32c>)
 8003534:	f00a 030f 	and.w	r3, sl, #15
 8003538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800353c:	ed93 7b00 	vldr	d7, [r3]
 8003540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003544:	06f0      	lsls	r0, r6, #27
 8003546:	ed8d 7b08 	vstr	d7, [sp, #32]
 800354a:	d565      	bpl.n	8003618 <_dtoa_r+0x368>
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <_dtoa_r+0x330>)
 800354e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003556:	f7fd f925 	bl	80007a4 <__aeabi_ddiv>
 800355a:	e9cd 0100 	strd	r0, r1, [sp]
 800355e:	f006 060f 	and.w	r6, r6, #15
 8003562:	2503      	movs	r5, #3
 8003564:	4f1e      	ldr	r7, [pc, #120]	; (80035e0 <_dtoa_r+0x330>)
 8003566:	e04c      	b.n	8003602 <_dtoa_r+0x352>
 8003568:	2301      	movs	r3, #1
 800356a:	930a      	str	r3, [sp, #40]	; 0x28
 800356c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800356e:	4453      	add	r3, sl
 8003570:	f103 0901 	add.w	r9, r3, #1
 8003574:	9302      	str	r3, [sp, #8]
 8003576:	464b      	mov	r3, r9
 8003578:	2b01      	cmp	r3, #1
 800357a:	bfb8      	it	lt
 800357c:	2301      	movlt	r3, #1
 800357e:	e7ba      	b.n	80034f6 <_dtoa_r+0x246>
 8003580:	2300      	movs	r3, #0
 8003582:	e7b2      	b.n	80034ea <_dtoa_r+0x23a>
 8003584:	2300      	movs	r3, #0
 8003586:	e7f0      	b.n	800356a <_dtoa_r+0x2ba>
 8003588:	2501      	movs	r5, #1
 800358a:	2300      	movs	r3, #0
 800358c:	9306      	str	r3, [sp, #24]
 800358e:	950a      	str	r5, [sp, #40]	; 0x28
 8003590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003594:	9302      	str	r3, [sp, #8]
 8003596:	4699      	mov	r9, r3
 8003598:	2200      	movs	r2, #0
 800359a:	2312      	movs	r3, #18
 800359c:	920b      	str	r2, [sp, #44]	; 0x2c
 800359e:	e7aa      	b.n	80034f6 <_dtoa_r+0x246>
 80035a0:	2301      	movs	r3, #1
 80035a2:	930a      	str	r3, [sp, #40]	; 0x28
 80035a4:	e7f4      	b.n	8003590 <_dtoa_r+0x2e0>
 80035a6:	2301      	movs	r3, #1
 80035a8:	9302      	str	r3, [sp, #8]
 80035aa:	4699      	mov	r9, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	e7f5      	b.n	800359c <_dtoa_r+0x2ec>
 80035b0:	3101      	adds	r1, #1
 80035b2:	6071      	str	r1, [r6, #4]
 80035b4:	0052      	lsls	r2, r2, #1
 80035b6:	e7a2      	b.n	80034fe <_dtoa_r+0x24e>
 80035b8:	636f4361 	.word	0x636f4361
 80035bc:	3fd287a7 	.word	0x3fd287a7
 80035c0:	8b60c8b3 	.word	0x8b60c8b3
 80035c4:	3fc68a28 	.word	0x3fc68a28
 80035c8:	509f79fb 	.word	0x509f79fb
 80035cc:	3fd34413 	.word	0x3fd34413
 80035d0:	7ff00000 	.word	0x7ff00000
 80035d4:	08004b51 	.word	0x08004b51
 80035d8:	3ff80000 	.word	0x3ff80000
 80035dc:	08004be8 	.word	0x08004be8
 80035e0:	08004bc0 	.word	0x08004bc0
 80035e4:	08004b5b 	.word	0x08004b5b
 80035e8:	07f1      	lsls	r1, r6, #31
 80035ea:	d508      	bpl.n	80035fe <_dtoa_r+0x34e>
 80035ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80035f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f4:	f7fc ffac 	bl	8000550 <__aeabi_dmul>
 80035f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80035fc:	3501      	adds	r5, #1
 80035fe:	1076      	asrs	r6, r6, #1
 8003600:	3708      	adds	r7, #8
 8003602:	2e00      	cmp	r6, #0
 8003604:	d1f0      	bne.n	80035e8 <_dtoa_r+0x338>
 8003606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800360a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800360e:	f7fd f8c9 	bl	80007a4 <__aeabi_ddiv>
 8003612:	e9cd 0100 	strd	r0, r1, [sp]
 8003616:	e01a      	b.n	800364e <_dtoa_r+0x39e>
 8003618:	2502      	movs	r5, #2
 800361a:	e7a3      	b.n	8003564 <_dtoa_r+0x2b4>
 800361c:	f000 80a0 	beq.w	8003760 <_dtoa_r+0x4b0>
 8003620:	f1ca 0600 	rsb	r6, sl, #0
 8003624:	4b9f      	ldr	r3, [pc, #636]	; (80038a4 <_dtoa_r+0x5f4>)
 8003626:	4fa0      	ldr	r7, [pc, #640]	; (80038a8 <_dtoa_r+0x5f8>)
 8003628:	f006 020f 	and.w	r2, r6, #15
 800362c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003638:	f7fc ff8a 	bl	8000550 <__aeabi_dmul>
 800363c:	e9cd 0100 	strd	r0, r1, [sp]
 8003640:	1136      	asrs	r6, r6, #4
 8003642:	2300      	movs	r3, #0
 8003644:	2502      	movs	r5, #2
 8003646:	2e00      	cmp	r6, #0
 8003648:	d17f      	bne.n	800374a <_dtoa_r+0x49a>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e1      	bne.n	8003612 <_dtoa_r+0x362>
 800364e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8087 	beq.w	8003764 <_dtoa_r+0x4b4>
 8003656:	e9dd 6700 	ldrd	r6, r7, [sp]
 800365a:	2200      	movs	r2, #0
 800365c:	4b93      	ldr	r3, [pc, #588]	; (80038ac <_dtoa_r+0x5fc>)
 800365e:	4630      	mov	r0, r6
 8003660:	4639      	mov	r1, r7
 8003662:	f7fd f9e7 	bl	8000a34 <__aeabi_dcmplt>
 8003666:	2800      	cmp	r0, #0
 8003668:	d07c      	beq.n	8003764 <_dtoa_r+0x4b4>
 800366a:	f1b9 0f00 	cmp.w	r9, #0
 800366e:	d079      	beq.n	8003764 <_dtoa_r+0x4b4>
 8003670:	9b02      	ldr	r3, [sp, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	dd35      	ble.n	80036e2 <_dtoa_r+0x432>
 8003676:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800367a:	9308      	str	r3, [sp, #32]
 800367c:	4639      	mov	r1, r7
 800367e:	2200      	movs	r2, #0
 8003680:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <_dtoa_r+0x600>)
 8003682:	4630      	mov	r0, r6
 8003684:	f7fc ff64 	bl	8000550 <__aeabi_dmul>
 8003688:	e9cd 0100 	strd	r0, r1, [sp]
 800368c:	9f02      	ldr	r7, [sp, #8]
 800368e:	3501      	adds	r5, #1
 8003690:	4628      	mov	r0, r5
 8003692:	f7fc fef3 	bl	800047c <__aeabi_i2d>
 8003696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800369a:	f7fc ff59 	bl	8000550 <__aeabi_dmul>
 800369e:	2200      	movs	r2, #0
 80036a0:	4b84      	ldr	r3, [pc, #528]	; (80038b4 <_dtoa_r+0x604>)
 80036a2:	f7fc fd9f 	bl	80001e4 <__adddf3>
 80036a6:	4605      	mov	r5, r0
 80036a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80036ac:	2f00      	cmp	r7, #0
 80036ae:	d15d      	bne.n	800376c <_dtoa_r+0x4bc>
 80036b0:	2200      	movs	r2, #0
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <_dtoa_r+0x608>)
 80036b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036b8:	f7fc fd92 	bl	80001e0 <__aeabi_dsub>
 80036bc:	462a      	mov	r2, r5
 80036be:	4633      	mov	r3, r6
 80036c0:	e9cd 0100 	strd	r0, r1, [sp]
 80036c4:	f7fd f9d4 	bl	8000a70 <__aeabi_dcmpgt>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	f040 8288 	bne.w	8003bde <_dtoa_r+0x92e>
 80036ce:	462a      	mov	r2, r5
 80036d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80036d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036d8:	f7fd f9ac 	bl	8000a34 <__aeabi_dcmplt>
 80036dc:	2800      	cmp	r0, #0
 80036de:	f040 827c 	bne.w	8003bda <_dtoa_r+0x92a>
 80036e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80036e6:	e9cd 2300 	strd	r2, r3, [sp]
 80036ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f2c0 8150 	blt.w	8003992 <_dtoa_r+0x6e2>
 80036f2:	f1ba 0f0e 	cmp.w	sl, #14
 80036f6:	f300 814c 	bgt.w	8003992 <_dtoa_r+0x6e2>
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <_dtoa_r+0x5f4>)
 80036fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003700:	ed93 7b00 	vldr	d7, [r3]
 8003704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	ed8d 7b02 	vstr	d7, [sp, #8]
 800370c:	f280 80d8 	bge.w	80038c0 <_dtoa_r+0x610>
 8003710:	f1b9 0f00 	cmp.w	r9, #0
 8003714:	f300 80d4 	bgt.w	80038c0 <_dtoa_r+0x610>
 8003718:	f040 825e 	bne.w	8003bd8 <_dtoa_r+0x928>
 800371c:	2200      	movs	r2, #0
 800371e:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <_dtoa_r+0x608>)
 8003720:	ec51 0b17 	vmov	r0, r1, d7
 8003724:	f7fc ff14 	bl	8000550 <__aeabi_dmul>
 8003728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800372c:	f7fd f996 	bl	8000a5c <__aeabi_dcmpge>
 8003730:	464f      	mov	r7, r9
 8003732:	464e      	mov	r6, r9
 8003734:	2800      	cmp	r0, #0
 8003736:	f040 8234 	bne.w	8003ba2 <_dtoa_r+0x8f2>
 800373a:	2331      	movs	r3, #49	; 0x31
 800373c:	f10b 0501 	add.w	r5, fp, #1
 8003740:	f88b 3000 	strb.w	r3, [fp]
 8003744:	f10a 0a01 	add.w	sl, sl, #1
 8003748:	e22f      	b.n	8003baa <_dtoa_r+0x8fa>
 800374a:	07f2      	lsls	r2, r6, #31
 800374c:	d505      	bpl.n	800375a <_dtoa_r+0x4aa>
 800374e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003752:	f7fc fefd 	bl	8000550 <__aeabi_dmul>
 8003756:	3501      	adds	r5, #1
 8003758:	2301      	movs	r3, #1
 800375a:	1076      	asrs	r6, r6, #1
 800375c:	3708      	adds	r7, #8
 800375e:	e772      	b.n	8003646 <_dtoa_r+0x396>
 8003760:	2502      	movs	r5, #2
 8003762:	e774      	b.n	800364e <_dtoa_r+0x39e>
 8003764:	f8cd a020 	str.w	sl, [sp, #32]
 8003768:	464f      	mov	r7, r9
 800376a:	e791      	b.n	8003690 <_dtoa_r+0x3e0>
 800376c:	4b4d      	ldr	r3, [pc, #308]	; (80038a4 <_dtoa_r+0x5f4>)
 800376e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003772:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d047      	beq.n	800380c <_dtoa_r+0x55c>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	2000      	movs	r0, #0
 8003782:	494e      	ldr	r1, [pc, #312]	; (80038bc <_dtoa_r+0x60c>)
 8003784:	f7fd f80e 	bl	80007a4 <__aeabi_ddiv>
 8003788:	462a      	mov	r2, r5
 800378a:	4633      	mov	r3, r6
 800378c:	f7fc fd28 	bl	80001e0 <__aeabi_dsub>
 8003790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003794:	465d      	mov	r5, fp
 8003796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800379a:	f7fd f989 	bl	8000ab0 <__aeabi_d2iz>
 800379e:	4606      	mov	r6, r0
 80037a0:	f7fc fe6c 	bl	800047c <__aeabi_i2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037ac:	f7fc fd18 	bl	80001e0 <__aeabi_dsub>
 80037b0:	3630      	adds	r6, #48	; 0x30
 80037b2:	f805 6b01 	strb.w	r6, [r5], #1
 80037b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80037ba:	e9cd 0100 	strd	r0, r1, [sp]
 80037be:	f7fd f939 	bl	8000a34 <__aeabi_dcmplt>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d163      	bne.n	800388e <_dtoa_r+0x5de>
 80037c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ca:	2000      	movs	r0, #0
 80037cc:	4937      	ldr	r1, [pc, #220]	; (80038ac <_dtoa_r+0x5fc>)
 80037ce:	f7fc fd07 	bl	80001e0 <__aeabi_dsub>
 80037d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80037d6:	f7fd f92d 	bl	8000a34 <__aeabi_dcmplt>
 80037da:	2800      	cmp	r0, #0
 80037dc:	f040 80b7 	bne.w	800394e <_dtoa_r+0x69e>
 80037e0:	eba5 030b 	sub.w	r3, r5, fp
 80037e4:	429f      	cmp	r7, r3
 80037e6:	f77f af7c 	ble.w	80036e2 <_dtoa_r+0x432>
 80037ea:	2200      	movs	r2, #0
 80037ec:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <_dtoa_r+0x600>)
 80037ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037f2:	f7fc fead 	bl	8000550 <__aeabi_dmul>
 80037f6:	2200      	movs	r2, #0
 80037f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80037fc:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <_dtoa_r+0x600>)
 80037fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003802:	f7fc fea5 	bl	8000550 <__aeabi_dmul>
 8003806:	e9cd 0100 	strd	r0, r1, [sp]
 800380a:	e7c4      	b.n	8003796 <_dtoa_r+0x4e6>
 800380c:	462a      	mov	r2, r5
 800380e:	4633      	mov	r3, r6
 8003810:	f7fc fe9e 	bl	8000550 <__aeabi_dmul>
 8003814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003818:	eb0b 0507 	add.w	r5, fp, r7
 800381c:	465e      	mov	r6, fp
 800381e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003822:	f7fd f945 	bl	8000ab0 <__aeabi_d2iz>
 8003826:	4607      	mov	r7, r0
 8003828:	f7fc fe28 	bl	800047c <__aeabi_i2d>
 800382c:	3730      	adds	r7, #48	; 0x30
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003836:	f7fc fcd3 	bl	80001e0 <__aeabi_dsub>
 800383a:	f806 7b01 	strb.w	r7, [r6], #1
 800383e:	42ae      	cmp	r6, r5
 8003840:	e9cd 0100 	strd	r0, r1, [sp]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	d126      	bne.n	8003898 <_dtoa_r+0x5e8>
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <_dtoa_r+0x60c>)
 800384c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003850:	f7fc fcc8 	bl	80001e4 <__adddf3>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800385c:	f7fd f908 	bl	8000a70 <__aeabi_dcmpgt>
 8003860:	2800      	cmp	r0, #0
 8003862:	d174      	bne.n	800394e <_dtoa_r+0x69e>
 8003864:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003868:	2000      	movs	r0, #0
 800386a:	4914      	ldr	r1, [pc, #80]	; (80038bc <_dtoa_r+0x60c>)
 800386c:	f7fc fcb8 	bl	80001e0 <__aeabi_dsub>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003878:	f7fd f8dc 	bl	8000a34 <__aeabi_dcmplt>
 800387c:	2800      	cmp	r0, #0
 800387e:	f43f af30 	beq.w	80036e2 <_dtoa_r+0x432>
 8003882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800388c:	d002      	beq.n	8003894 <_dtoa_r+0x5e4>
 800388e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003892:	e04a      	b.n	800392a <_dtoa_r+0x67a>
 8003894:	4615      	mov	r5, r2
 8003896:	e7f4      	b.n	8003882 <_dtoa_r+0x5d2>
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <_dtoa_r+0x600>)
 800389a:	f7fc fe59 	bl	8000550 <__aeabi_dmul>
 800389e:	e9cd 0100 	strd	r0, r1, [sp]
 80038a2:	e7bc      	b.n	800381e <_dtoa_r+0x56e>
 80038a4:	08004be8 	.word	0x08004be8
 80038a8:	08004bc0 	.word	0x08004bc0
 80038ac:	3ff00000 	.word	0x3ff00000
 80038b0:	40240000 	.word	0x40240000
 80038b4:	401c0000 	.word	0x401c0000
 80038b8:	40140000 	.word	0x40140000
 80038bc:	3fe00000 	.word	0x3fe00000
 80038c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80038c4:	465d      	mov	r5, fp
 80038c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038ca:	4630      	mov	r0, r6
 80038cc:	4639      	mov	r1, r7
 80038ce:	f7fc ff69 	bl	80007a4 <__aeabi_ddiv>
 80038d2:	f7fd f8ed 	bl	8000ab0 <__aeabi_d2iz>
 80038d6:	4680      	mov	r8, r0
 80038d8:	f7fc fdd0 	bl	800047c <__aeabi_i2d>
 80038dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038e0:	f7fc fe36 	bl	8000550 <__aeabi_dmul>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80038f0:	f7fc fc76 	bl	80001e0 <__aeabi_dsub>
 80038f4:	f805 6b01 	strb.w	r6, [r5], #1
 80038f8:	eba5 060b 	sub.w	r6, r5, fp
 80038fc:	45b1      	cmp	r9, r6
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	d139      	bne.n	8003978 <_dtoa_r+0x6c8>
 8003904:	f7fc fc6e 	bl	80001e4 <__adddf3>
 8003908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	f7fd f8ae 	bl	8000a70 <__aeabi_dcmpgt>
 8003914:	b9c8      	cbnz	r0, 800394a <_dtoa_r+0x69a>
 8003916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800391a:	4630      	mov	r0, r6
 800391c:	4639      	mov	r1, r7
 800391e:	f7fd f87f 	bl	8000a20 <__aeabi_dcmpeq>
 8003922:	b110      	cbz	r0, 800392a <_dtoa_r+0x67a>
 8003924:	f018 0f01 	tst.w	r8, #1
 8003928:	d10f      	bne.n	800394a <_dtoa_r+0x69a>
 800392a:	9904      	ldr	r1, [sp, #16]
 800392c:	4620      	mov	r0, r4
 800392e:	f000 fcaa 	bl	8004286 <_Bfree>
 8003932:	2300      	movs	r3, #0
 8003934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003936:	702b      	strb	r3, [r5, #0]
 8003938:	f10a 0301 	add.w	r3, sl, #1
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8241 	beq.w	8003dc8 <_dtoa_r+0xb18>
 8003946:	601d      	str	r5, [r3, #0]
 8003948:	e23e      	b.n	8003dc8 <_dtoa_r+0xb18>
 800394a:	f8cd a020 	str.w	sl, [sp, #32]
 800394e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003952:	2a39      	cmp	r2, #57	; 0x39
 8003954:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003958:	d108      	bne.n	800396c <_dtoa_r+0x6bc>
 800395a:	459b      	cmp	fp, r3
 800395c:	d10a      	bne.n	8003974 <_dtoa_r+0x6c4>
 800395e:	9b08      	ldr	r3, [sp, #32]
 8003960:	3301      	adds	r3, #1
 8003962:	9308      	str	r3, [sp, #32]
 8003964:	2330      	movs	r3, #48	; 0x30
 8003966:	f88b 3000 	strb.w	r3, [fp]
 800396a:	465b      	mov	r3, fp
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	3201      	adds	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e78c      	b.n	800388e <_dtoa_r+0x5de>
 8003974:	461d      	mov	r5, r3
 8003976:	e7ea      	b.n	800394e <_dtoa_r+0x69e>
 8003978:	2200      	movs	r2, #0
 800397a:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <_dtoa_r+0x938>)
 800397c:	f7fc fde8 	bl	8000550 <__aeabi_dmul>
 8003980:	2200      	movs	r2, #0
 8003982:	2300      	movs	r3, #0
 8003984:	4606      	mov	r6, r0
 8003986:	460f      	mov	r7, r1
 8003988:	f7fd f84a 	bl	8000a20 <__aeabi_dcmpeq>
 800398c:	2800      	cmp	r0, #0
 800398e:	d09a      	beq.n	80038c6 <_dtoa_r+0x616>
 8003990:	e7cb      	b.n	800392a <_dtoa_r+0x67a>
 8003992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003994:	2a00      	cmp	r2, #0
 8003996:	f000 808b 	beq.w	8003ab0 <_dtoa_r+0x800>
 800399a:	9a06      	ldr	r2, [sp, #24]
 800399c:	2a01      	cmp	r2, #1
 800399e:	dc6e      	bgt.n	8003a7e <_dtoa_r+0x7ce>
 80039a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80039a2:	2a00      	cmp	r2, #0
 80039a4:	d067      	beq.n	8003a76 <_dtoa_r+0x7c6>
 80039a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80039aa:	9f07      	ldr	r7, [sp, #28]
 80039ac:	9d05      	ldr	r5, [sp, #20]
 80039ae:	9a05      	ldr	r2, [sp, #20]
 80039b0:	2101      	movs	r1, #1
 80039b2:	441a      	add	r2, r3
 80039b4:	4620      	mov	r0, r4
 80039b6:	9205      	str	r2, [sp, #20]
 80039b8:	4498      	add	r8, r3
 80039ba:	f000 fd04 	bl	80043c6 <__i2b>
 80039be:	4606      	mov	r6, r0
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	dd0c      	ble.n	80039de <_dtoa_r+0x72e>
 80039c4:	f1b8 0f00 	cmp.w	r8, #0
 80039c8:	dd09      	ble.n	80039de <_dtoa_r+0x72e>
 80039ca:	4545      	cmp	r5, r8
 80039cc:	9a05      	ldr	r2, [sp, #20]
 80039ce:	462b      	mov	r3, r5
 80039d0:	bfa8      	it	ge
 80039d2:	4643      	movge	r3, r8
 80039d4:	1ad2      	subs	r2, r2, r3
 80039d6:	9205      	str	r2, [sp, #20]
 80039d8:	1aed      	subs	r5, r5, r3
 80039da:	eba8 0803 	sub.w	r8, r8, r3
 80039de:	9b07      	ldr	r3, [sp, #28]
 80039e0:	b1eb      	cbz	r3, 8003a1e <_dtoa_r+0x76e>
 80039e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d067      	beq.n	8003ab8 <_dtoa_r+0x808>
 80039e8:	b18f      	cbz	r7, 8003a0e <_dtoa_r+0x75e>
 80039ea:	4631      	mov	r1, r6
 80039ec:	463a      	mov	r2, r7
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 fd88 	bl	8004504 <__pow5mult>
 80039f4:	9a04      	ldr	r2, [sp, #16]
 80039f6:	4601      	mov	r1, r0
 80039f8:	4606      	mov	r6, r0
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fcec 	bl	80043d8 <__multiply>
 8003a00:	9904      	ldr	r1, [sp, #16]
 8003a02:	9008      	str	r0, [sp, #32]
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 fc3e 	bl	8004286 <_Bfree>
 8003a0a:	9b08      	ldr	r3, [sp, #32]
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	9b07      	ldr	r3, [sp, #28]
 8003a10:	1bda      	subs	r2, r3, r7
 8003a12:	d004      	beq.n	8003a1e <_dtoa_r+0x76e>
 8003a14:	9904      	ldr	r1, [sp, #16]
 8003a16:	4620      	mov	r0, r4
 8003a18:	f000 fd74 	bl	8004504 <__pow5mult>
 8003a1c:	9004      	str	r0, [sp, #16]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fcd0 	bl	80043c6 <__i2b>
 8003a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a28:	4607      	mov	r7, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 81d0 	beq.w	8003dd0 <_dtoa_r+0xb20>
 8003a30:	461a      	mov	r2, r3
 8003a32:	4601      	mov	r1, r0
 8003a34:	4620      	mov	r0, r4
 8003a36:	f000 fd65 	bl	8004504 <__pow5mult>
 8003a3a:	9b06      	ldr	r3, [sp, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	4607      	mov	r7, r0
 8003a40:	dc40      	bgt.n	8003ac4 <_dtoa_r+0x814>
 8003a42:	9b00      	ldr	r3, [sp, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d139      	bne.n	8003abc <_dtoa_r+0x80c>
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d136      	bne.n	8003ac0 <_dtoa_r+0x810>
 8003a52:	9b01      	ldr	r3, [sp, #4]
 8003a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a58:	0d1b      	lsrs	r3, r3, #20
 8003a5a:	051b      	lsls	r3, r3, #20
 8003a5c:	b12b      	cbz	r3, 8003a6a <_dtoa_r+0x7ba>
 8003a5e:	9b05      	ldr	r3, [sp, #20]
 8003a60:	3301      	adds	r3, #1
 8003a62:	9305      	str	r3, [sp, #20]
 8003a64:	f108 0801 	add.w	r8, r8, #1
 8003a68:	2301      	movs	r3, #1
 8003a6a:	9307      	str	r3, [sp, #28]
 8003a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d12a      	bne.n	8003ac8 <_dtoa_r+0x818>
 8003a72:	2001      	movs	r0, #1
 8003a74:	e030      	b.n	8003ad8 <_dtoa_r+0x828>
 8003a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a7c:	e795      	b.n	80039aa <_dtoa_r+0x6fa>
 8003a7e:	9b07      	ldr	r3, [sp, #28]
 8003a80:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8003a84:	42bb      	cmp	r3, r7
 8003a86:	bfbf      	itttt	lt
 8003a88:	9b07      	ldrlt	r3, [sp, #28]
 8003a8a:	9707      	strlt	r7, [sp, #28]
 8003a8c:	1afa      	sublt	r2, r7, r3
 8003a8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003a90:	bfbb      	ittet	lt
 8003a92:	189b      	addlt	r3, r3, r2
 8003a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003a96:	1bdf      	subge	r7, r3, r7
 8003a98:	2700      	movlt	r7, #0
 8003a9a:	f1b9 0f00 	cmp.w	r9, #0
 8003a9e:	bfb5      	itete	lt
 8003aa0:	9b05      	ldrlt	r3, [sp, #20]
 8003aa2:	9d05      	ldrge	r5, [sp, #20]
 8003aa4:	eba3 0509 	sublt.w	r5, r3, r9
 8003aa8:	464b      	movge	r3, r9
 8003aaa:	bfb8      	it	lt
 8003aac:	2300      	movlt	r3, #0
 8003aae:	e77e      	b.n	80039ae <_dtoa_r+0x6fe>
 8003ab0:	9f07      	ldr	r7, [sp, #28]
 8003ab2:	9d05      	ldr	r5, [sp, #20]
 8003ab4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003ab6:	e783      	b.n	80039c0 <_dtoa_r+0x710>
 8003ab8:	9a07      	ldr	r2, [sp, #28]
 8003aba:	e7ab      	b.n	8003a14 <_dtoa_r+0x764>
 8003abc:	2300      	movs	r3, #0
 8003abe:	e7d4      	b.n	8003a6a <_dtoa_r+0x7ba>
 8003ac0:	9b00      	ldr	r3, [sp, #0]
 8003ac2:	e7d2      	b.n	8003a6a <_dtoa_r+0x7ba>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003ace:	6918      	ldr	r0, [r3, #16]
 8003ad0:	f000 fc2b 	bl	800432a <__hi0bits>
 8003ad4:	f1c0 0020 	rsb	r0, r0, #32
 8003ad8:	4440      	add	r0, r8
 8003ada:	f010 001f 	ands.w	r0, r0, #31
 8003ade:	d047      	beq.n	8003b70 <_dtoa_r+0x8c0>
 8003ae0:	f1c0 0320 	rsb	r3, r0, #32
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	dd3b      	ble.n	8003b60 <_dtoa_r+0x8b0>
 8003ae8:	9b05      	ldr	r3, [sp, #20]
 8003aea:	f1c0 001c 	rsb	r0, r0, #28
 8003aee:	4403      	add	r3, r0
 8003af0:	9305      	str	r3, [sp, #20]
 8003af2:	4405      	add	r5, r0
 8003af4:	4480      	add	r8, r0
 8003af6:	9b05      	ldr	r3, [sp, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dd05      	ble.n	8003b08 <_dtoa_r+0x858>
 8003afc:	461a      	mov	r2, r3
 8003afe:	9904      	ldr	r1, [sp, #16]
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 fd4d 	bl	80045a0 <__lshift>
 8003b06:	9004      	str	r0, [sp, #16]
 8003b08:	f1b8 0f00 	cmp.w	r8, #0
 8003b0c:	dd05      	ble.n	8003b1a <_dtoa_r+0x86a>
 8003b0e:	4639      	mov	r1, r7
 8003b10:	4642      	mov	r2, r8
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 fd44 	bl	80045a0 <__lshift>
 8003b18:	4607      	mov	r7, r0
 8003b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b1c:	b353      	cbz	r3, 8003b74 <_dtoa_r+0x8c4>
 8003b1e:	4639      	mov	r1, r7
 8003b20:	9804      	ldr	r0, [sp, #16]
 8003b22:	f000 fd91 	bl	8004648 <__mcmp>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	da24      	bge.n	8003b74 <_dtoa_r+0x8c4>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	220a      	movs	r2, #10
 8003b2e:	9904      	ldr	r1, [sp, #16]
 8003b30:	4620      	mov	r0, r4
 8003b32:	f000 fbbf 	bl	80042b4 <__multadd>
 8003b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b38:	9004      	str	r0, [sp, #16]
 8003b3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 814d 	beq.w	8003dde <_dtoa_r+0xb2e>
 8003b44:	2300      	movs	r3, #0
 8003b46:	4631      	mov	r1, r6
 8003b48:	220a      	movs	r2, #10
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 fbb2 	bl	80042b4 <__multadd>
 8003b50:	9b02      	ldr	r3, [sp, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	4606      	mov	r6, r0
 8003b56:	dc4f      	bgt.n	8003bf8 <_dtoa_r+0x948>
 8003b58:	9b06      	ldr	r3, [sp, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	dd4c      	ble.n	8003bf8 <_dtoa_r+0x948>
 8003b5e:	e011      	b.n	8003b84 <_dtoa_r+0x8d4>
 8003b60:	d0c9      	beq.n	8003af6 <_dtoa_r+0x846>
 8003b62:	9a05      	ldr	r2, [sp, #20]
 8003b64:	331c      	adds	r3, #28
 8003b66:	441a      	add	r2, r3
 8003b68:	9205      	str	r2, [sp, #20]
 8003b6a:	441d      	add	r5, r3
 8003b6c:	4498      	add	r8, r3
 8003b6e:	e7c2      	b.n	8003af6 <_dtoa_r+0x846>
 8003b70:	4603      	mov	r3, r0
 8003b72:	e7f6      	b.n	8003b62 <_dtoa_r+0x8b2>
 8003b74:	f1b9 0f00 	cmp.w	r9, #0
 8003b78:	dc38      	bgt.n	8003bec <_dtoa_r+0x93c>
 8003b7a:	9b06      	ldr	r3, [sp, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	dd35      	ble.n	8003bec <_dtoa_r+0x93c>
 8003b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8003b84:	9b02      	ldr	r3, [sp, #8]
 8003b86:	b963      	cbnz	r3, 8003ba2 <_dtoa_r+0x8f2>
 8003b88:	4639      	mov	r1, r7
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 fb91 	bl	80042b4 <__multadd>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4607      	mov	r7, r0
 8003b96:	9804      	ldr	r0, [sp, #16]
 8003b98:	f000 fd56 	bl	8004648 <__mcmp>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	f73f adcc 	bgt.w	800373a <_dtoa_r+0x48a>
 8003ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ba4:	465d      	mov	r5, fp
 8003ba6:	ea6f 0a03 	mvn.w	sl, r3
 8003baa:	f04f 0900 	mov.w	r9, #0
 8003bae:	4639      	mov	r1, r7
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fb68 	bl	8004286 <_Bfree>
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	f43f aeb7 	beq.w	800392a <_dtoa_r+0x67a>
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	d005      	beq.n	8003bce <_dtoa_r+0x91e>
 8003bc2:	45b1      	cmp	r9, r6
 8003bc4:	d003      	beq.n	8003bce <_dtoa_r+0x91e>
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 fb5c 	bl	8004286 <_Bfree>
 8003bce:	4631      	mov	r1, r6
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 fb58 	bl	8004286 <_Bfree>
 8003bd6:	e6a8      	b.n	800392a <_dtoa_r+0x67a>
 8003bd8:	2700      	movs	r7, #0
 8003bda:	463e      	mov	r6, r7
 8003bdc:	e7e1      	b.n	8003ba2 <_dtoa_r+0x8f2>
 8003bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003be2:	463e      	mov	r6, r7
 8003be4:	e5a9      	b.n	800373a <_dtoa_r+0x48a>
 8003be6:	bf00      	nop
 8003be8:	40240000 	.word	0x40240000
 8003bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80fa 	beq.w	8003dec <_dtoa_r+0xb3c>
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	dd05      	ble.n	8003c08 <_dtoa_r+0x958>
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	462a      	mov	r2, r5
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fccd 	bl	80045a0 <__lshift>
 8003c06:	4606      	mov	r6, r0
 8003c08:	9b07      	ldr	r3, [sp, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04c      	beq.n	8003ca8 <_dtoa_r+0x9f8>
 8003c0e:	6871      	ldr	r1, [r6, #4]
 8003c10:	4620      	mov	r0, r4
 8003c12:	f000 fb04 	bl	800421e <_Balloc>
 8003c16:	6932      	ldr	r2, [r6, #16]
 8003c18:	3202      	adds	r2, #2
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	f106 010c 	add.w	r1, r6, #12
 8003c22:	300c      	adds	r0, #12
 8003c24:	f000 faf0 	bl	8004208 <memcpy>
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f000 fcb7 	bl	80045a0 <__lshift>
 8003c32:	9b00      	ldr	r3, [sp, #0]
 8003c34:	f8cd b014 	str.w	fp, [sp, #20]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	46b1      	mov	r9, r6
 8003c3e:	9307      	str	r3, [sp, #28]
 8003c40:	4606      	mov	r6, r0
 8003c42:	4639      	mov	r1, r7
 8003c44:	9804      	ldr	r0, [sp, #16]
 8003c46:	f7ff faa5 	bl	8003194 <quorem>
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003c52:	9804      	ldr	r0, [sp, #16]
 8003c54:	f000 fcf8 	bl	8004648 <__mcmp>
 8003c58:	4632      	mov	r2, r6
 8003c5a:	9000      	str	r0, [sp, #0]
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 fd0c 	bl	800467c <__mdiff>
 8003c64:	68c3      	ldr	r3, [r0, #12]
 8003c66:	4602      	mov	r2, r0
 8003c68:	bb03      	cbnz	r3, 8003cac <_dtoa_r+0x9fc>
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	9008      	str	r0, [sp, #32]
 8003c6e:	9804      	ldr	r0, [sp, #16]
 8003c70:	f000 fcea 	bl	8004648 <__mcmp>
 8003c74:	9a08      	ldr	r2, [sp, #32]
 8003c76:	4603      	mov	r3, r0
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	9308      	str	r3, [sp, #32]
 8003c7e:	f000 fb02 	bl	8004286 <_Bfree>
 8003c82:	9b08      	ldr	r3, [sp, #32]
 8003c84:	b9a3      	cbnz	r3, 8003cb0 <_dtoa_r+0xa00>
 8003c86:	9a06      	ldr	r2, [sp, #24]
 8003c88:	b992      	cbnz	r2, 8003cb0 <_dtoa_r+0xa00>
 8003c8a:	9a07      	ldr	r2, [sp, #28]
 8003c8c:	b982      	cbnz	r2, 8003cb0 <_dtoa_r+0xa00>
 8003c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c92:	d029      	beq.n	8003ce8 <_dtoa_r+0xa38>
 8003c94:	9b00      	ldr	r3, [sp, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	dd01      	ble.n	8003c9e <_dtoa_r+0x9ee>
 8003c9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003c9e:	9b05      	ldr	r3, [sp, #20]
 8003ca0:	1c5d      	adds	r5, r3, #1
 8003ca2:	f883 8000 	strb.w	r8, [r3]
 8003ca6:	e782      	b.n	8003bae <_dtoa_r+0x8fe>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	e7c2      	b.n	8003c32 <_dtoa_r+0x982>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e7e3      	b.n	8003c78 <_dtoa_r+0x9c8>
 8003cb0:	9a00      	ldr	r2, [sp, #0]
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	db04      	blt.n	8003cc0 <_dtoa_r+0xa10>
 8003cb6:	d125      	bne.n	8003d04 <_dtoa_r+0xa54>
 8003cb8:	9a06      	ldr	r2, [sp, #24]
 8003cba:	bb1a      	cbnz	r2, 8003d04 <_dtoa_r+0xa54>
 8003cbc:	9a07      	ldr	r2, [sp, #28]
 8003cbe:	bb0a      	cbnz	r2, 8003d04 <_dtoa_r+0xa54>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	ddec      	ble.n	8003c9e <_dtoa_r+0x9ee>
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	9904      	ldr	r1, [sp, #16]
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fc69 	bl	80045a0 <__lshift>
 8003cce:	4639      	mov	r1, r7
 8003cd0:	9004      	str	r0, [sp, #16]
 8003cd2:	f000 fcb9 	bl	8004648 <__mcmp>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	dc03      	bgt.n	8003ce2 <_dtoa_r+0xa32>
 8003cda:	d1e0      	bne.n	8003c9e <_dtoa_r+0x9ee>
 8003cdc:	f018 0f01 	tst.w	r8, #1
 8003ce0:	d0dd      	beq.n	8003c9e <_dtoa_r+0x9ee>
 8003ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003ce6:	d1d8      	bne.n	8003c9a <_dtoa_r+0x9ea>
 8003ce8:	9b05      	ldr	r3, [sp, #20]
 8003cea:	9a05      	ldr	r2, [sp, #20]
 8003cec:	1c5d      	adds	r5, r3, #1
 8003cee:	2339      	movs	r3, #57	; 0x39
 8003cf0:	7013      	strb	r3, [r2, #0]
 8003cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cf6:	2b39      	cmp	r3, #57	; 0x39
 8003cf8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003cfc:	d04f      	beq.n	8003d9e <_dtoa_r+0xaee>
 8003cfe:	3301      	adds	r3, #1
 8003d00:	7013      	strb	r3, [r2, #0]
 8003d02:	e754      	b.n	8003bae <_dtoa_r+0x8fe>
 8003d04:	9a05      	ldr	r2, [sp, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f102 0501 	add.w	r5, r2, #1
 8003d0c:	dd06      	ble.n	8003d1c <_dtoa_r+0xa6c>
 8003d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003d12:	d0e9      	beq.n	8003ce8 <_dtoa_r+0xa38>
 8003d14:	f108 0801 	add.w	r8, r8, #1
 8003d18:	9b05      	ldr	r3, [sp, #20]
 8003d1a:	e7c2      	b.n	8003ca2 <_dtoa_r+0x9f2>
 8003d1c:	9a02      	ldr	r2, [sp, #8]
 8003d1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003d22:	eba5 030b 	sub.w	r3, r5, fp
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d021      	beq.n	8003d6e <_dtoa_r+0xabe>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	220a      	movs	r2, #10
 8003d2e:	9904      	ldr	r1, [sp, #16]
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fabf 	bl	80042b4 <__multadd>
 8003d36:	45b1      	cmp	r9, r6
 8003d38:	9004      	str	r0, [sp, #16]
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	f04f 020a 	mov.w	r2, #10
 8003d42:	4649      	mov	r1, r9
 8003d44:	4620      	mov	r0, r4
 8003d46:	d105      	bne.n	8003d54 <_dtoa_r+0xaa4>
 8003d48:	f000 fab4 	bl	80042b4 <__multadd>
 8003d4c:	4681      	mov	r9, r0
 8003d4e:	4606      	mov	r6, r0
 8003d50:	9505      	str	r5, [sp, #20]
 8003d52:	e776      	b.n	8003c42 <_dtoa_r+0x992>
 8003d54:	f000 faae 	bl	80042b4 <__multadd>
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4681      	mov	r9, r0
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	220a      	movs	r2, #10
 8003d60:	4620      	mov	r0, r4
 8003d62:	f000 faa7 	bl	80042b4 <__multadd>
 8003d66:	4606      	mov	r6, r0
 8003d68:	e7f2      	b.n	8003d50 <_dtoa_r+0xaa0>
 8003d6a:	f04f 0900 	mov.w	r9, #0
 8003d6e:	2201      	movs	r2, #1
 8003d70:	9904      	ldr	r1, [sp, #16]
 8003d72:	4620      	mov	r0, r4
 8003d74:	f000 fc14 	bl	80045a0 <__lshift>
 8003d78:	4639      	mov	r1, r7
 8003d7a:	9004      	str	r0, [sp, #16]
 8003d7c:	f000 fc64 	bl	8004648 <__mcmp>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	dcb6      	bgt.n	8003cf2 <_dtoa_r+0xa42>
 8003d84:	d102      	bne.n	8003d8c <_dtoa_r+0xadc>
 8003d86:	f018 0f01 	tst.w	r8, #1
 8003d8a:	d1b2      	bne.n	8003cf2 <_dtoa_r+0xa42>
 8003d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003d96:	f47f af0a 	bne.w	8003bae <_dtoa_r+0x8fe>
 8003d9a:	4615      	mov	r5, r2
 8003d9c:	e7f6      	b.n	8003d8c <_dtoa_r+0xadc>
 8003d9e:	4593      	cmp	fp, r2
 8003da0:	d105      	bne.n	8003dae <_dtoa_r+0xafe>
 8003da2:	2331      	movs	r3, #49	; 0x31
 8003da4:	f10a 0a01 	add.w	sl, sl, #1
 8003da8:	f88b 3000 	strb.w	r3, [fp]
 8003dac:	e6ff      	b.n	8003bae <_dtoa_r+0x8fe>
 8003dae:	4615      	mov	r5, r2
 8003db0:	e79f      	b.n	8003cf2 <_dtoa_r+0xa42>
 8003db2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003e18 <_dtoa_r+0xb68>
 8003db6:	e007      	b.n	8003dc8 <_dtoa_r+0xb18>
 8003db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003e1c <_dtoa_r+0xb6c>
 8003dbe:	b11b      	cbz	r3, 8003dc8 <_dtoa_r+0xb18>
 8003dc0:	f10b 0308 	add.w	r3, fp, #8
 8003dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4658      	mov	r0, fp
 8003dca:	b017      	add	sp, #92	; 0x5c
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	9b06      	ldr	r3, [sp, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f77f ae35 	ble.w	8003a42 <_dtoa_r+0x792>
 8003dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dda:	9307      	str	r3, [sp, #28]
 8003ddc:	e649      	b.n	8003a72 <_dtoa_r+0x7c2>
 8003dde:	9b02      	ldr	r3, [sp, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	dc03      	bgt.n	8003dec <_dtoa_r+0xb3c>
 8003de4:	9b06      	ldr	r3, [sp, #24]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	f73f aecc 	bgt.w	8003b84 <_dtoa_r+0x8d4>
 8003dec:	465d      	mov	r5, fp
 8003dee:	4639      	mov	r1, r7
 8003df0:	9804      	ldr	r0, [sp, #16]
 8003df2:	f7ff f9cf 	bl	8003194 <quorem>
 8003df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8003dfe:	9a02      	ldr	r2, [sp, #8]
 8003e00:	eba5 030b 	sub.w	r3, r5, fp
 8003e04:	429a      	cmp	r2, r3
 8003e06:	ddb0      	ble.n	8003d6a <_dtoa_r+0xaba>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	220a      	movs	r2, #10
 8003e0c:	9904      	ldr	r1, [sp, #16]
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 fa50 	bl	80042b4 <__multadd>
 8003e14:	9004      	str	r0, [sp, #16]
 8003e16:	e7ea      	b.n	8003dee <_dtoa_r+0xb3e>
 8003e18:	08004b50 	.word	0x08004b50
 8003e1c:	08004b52 	.word	0x08004b52

08003e20 <__sflush_r>:
 8003e20:	898a      	ldrh	r2, [r1, #12]
 8003e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e26:	4605      	mov	r5, r0
 8003e28:	0710      	lsls	r0, r2, #28
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	d458      	bmi.n	8003ee0 <__sflush_r+0xc0>
 8003e2e:	684b      	ldr	r3, [r1, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dc05      	bgt.n	8003e40 <__sflush_r+0x20>
 8003e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dc02      	bgt.n	8003e40 <__sflush_r+0x20>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d0f9      	beq.n	8003e3a <__sflush_r+0x1a>
 8003e46:	2300      	movs	r3, #0
 8003e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e4c:	682f      	ldr	r7, [r5, #0]
 8003e4e:	6a21      	ldr	r1, [r4, #32]
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	d032      	beq.n	8003eba <__sflush_r+0x9a>
 8003e54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	075a      	lsls	r2, r3, #29
 8003e5a:	d505      	bpl.n	8003e68 <__sflush_r+0x48>
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	1ac0      	subs	r0, r0, r3
 8003e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e62:	b10b      	cbz	r3, 8003e68 <__sflush_r+0x48>
 8003e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e66:	1ac0      	subs	r0, r0, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e6e:	6a21      	ldr	r1, [r4, #32]
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b0      	blx	r6
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	d106      	bne.n	8003e88 <__sflush_r+0x68>
 8003e7a:	6829      	ldr	r1, [r5, #0]
 8003e7c:	291d      	cmp	r1, #29
 8003e7e:	d848      	bhi.n	8003f12 <__sflush_r+0xf2>
 8003e80:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <__sflush_r+0x108>)
 8003e82:	40ca      	lsrs	r2, r1
 8003e84:	07d6      	lsls	r6, r2, #31
 8003e86:	d544      	bpl.n	8003f12 <__sflush_r+0xf2>
 8003e88:	2200      	movs	r2, #0
 8003e8a:	6062      	str	r2, [r4, #4]
 8003e8c:	04d9      	lsls	r1, r3, #19
 8003e8e:	6922      	ldr	r2, [r4, #16]
 8003e90:	6022      	str	r2, [r4, #0]
 8003e92:	d504      	bpl.n	8003e9e <__sflush_r+0x7e>
 8003e94:	1c42      	adds	r2, r0, #1
 8003e96:	d101      	bne.n	8003e9c <__sflush_r+0x7c>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b903      	cbnz	r3, 8003e9e <__sflush_r+0x7e>
 8003e9c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea0:	602f      	str	r7, [r5, #0]
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	d0c9      	beq.n	8003e3a <__sflush_r+0x1a>
 8003ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	d002      	beq.n	8003eb4 <__sflush_r+0x94>
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 fc9e 	bl	80047f0 <_free_r>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	6360      	str	r0, [r4, #52]	; 0x34
 8003eb8:	e7c0      	b.n	8003e3c <__sflush_r+0x1c>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b0      	blx	r6
 8003ec0:	1c41      	adds	r1, r0, #1
 8003ec2:	d1c8      	bne.n	8003e56 <__sflush_r+0x36>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0c5      	beq.n	8003e56 <__sflush_r+0x36>
 8003eca:	2b1d      	cmp	r3, #29
 8003ecc:	d001      	beq.n	8003ed2 <__sflush_r+0xb2>
 8003ece:	2b16      	cmp	r3, #22
 8003ed0:	d101      	bne.n	8003ed6 <__sflush_r+0xb6>
 8003ed2:	602f      	str	r7, [r5, #0]
 8003ed4:	e7b1      	b.n	8003e3a <__sflush_r+0x1a>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	e7ad      	b.n	8003e3c <__sflush_r+0x1c>
 8003ee0:	690f      	ldr	r7, [r1, #16]
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	d0a9      	beq.n	8003e3a <__sflush_r+0x1a>
 8003ee6:	0793      	lsls	r3, r2, #30
 8003ee8:	680e      	ldr	r6, [r1, #0]
 8003eea:	bf08      	it	eq
 8003eec:	694b      	ldreq	r3, [r1, #20]
 8003eee:	600f      	str	r7, [r1, #0]
 8003ef0:	bf18      	it	ne
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	eba6 0807 	sub.w	r8, r6, r7
 8003ef8:	608b      	str	r3, [r1, #8]
 8003efa:	f1b8 0f00 	cmp.w	r8, #0
 8003efe:	dd9c      	ble.n	8003e3a <__sflush_r+0x1a>
 8003f00:	4643      	mov	r3, r8
 8003f02:	463a      	mov	r2, r7
 8003f04:	6a21      	ldr	r1, [r4, #32]
 8003f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f08:	4628      	mov	r0, r5
 8003f0a:	47b0      	blx	r6
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	dc06      	bgt.n	8003f1e <__sflush_r+0xfe>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1c:	e78e      	b.n	8003e3c <__sflush_r+0x1c>
 8003f1e:	4407      	add	r7, r0
 8003f20:	eba8 0800 	sub.w	r8, r8, r0
 8003f24:	e7e9      	b.n	8003efa <__sflush_r+0xda>
 8003f26:	bf00      	nop
 8003f28:	20400001 	.word	0x20400001

08003f2c <_fflush_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	690b      	ldr	r3, [r1, #16]
 8003f30:	4605      	mov	r5, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	b1db      	cbz	r3, 8003f6e <_fflush_r+0x42>
 8003f36:	b118      	cbz	r0, 8003f40 <_fflush_r+0x14>
 8003f38:	6983      	ldr	r3, [r0, #24]
 8003f3a:	b90b      	cbnz	r3, 8003f40 <_fflush_r+0x14>
 8003f3c:	f000 f860 	bl	8004000 <__sinit>
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <_fflush_r+0x48>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d109      	bne.n	8003f5a <_fflush_r+0x2e>
 8003f46:	686c      	ldr	r4, [r5, #4]
 8003f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4c:	b17b      	cbz	r3, 8003f6e <_fflush_r+0x42>
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4628      	mov	r0, r5
 8003f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f56:	f7ff bf63 	b.w	8003e20 <__sflush_r>
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <_fflush_r+0x4c>)
 8003f5c:	429c      	cmp	r4, r3
 8003f5e:	d101      	bne.n	8003f64 <_fflush_r+0x38>
 8003f60:	68ac      	ldr	r4, [r5, #8]
 8003f62:	e7f1      	b.n	8003f48 <_fflush_r+0x1c>
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <_fflush_r+0x50>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	bf08      	it	eq
 8003f6a:	68ec      	ldreq	r4, [r5, #12]
 8003f6c:	e7ec      	b.n	8003f48 <_fflush_r+0x1c>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	bd38      	pop	{r3, r4, r5, pc}
 8003f72:	bf00      	nop
 8003f74:	08004b80 	.word	0x08004b80
 8003f78:	08004ba0 	.word	0x08004ba0
 8003f7c:	08004b60 	.word	0x08004b60

08003f80 <std>:
 8003f80:	2300      	movs	r3, #0
 8003f82:	b510      	push	{r4, lr}
 8003f84:	4604      	mov	r4, r0
 8003f86:	e9c0 3300 	strd	r3, r3, [r0]
 8003f8a:	6083      	str	r3, [r0, #8]
 8003f8c:	8181      	strh	r1, [r0, #12]
 8003f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f90:	81c2      	strh	r2, [r0, #14]
 8003f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f96:	6183      	str	r3, [r0, #24]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	305c      	adds	r0, #92	; 0x5c
 8003f9e:	f7fe fbcd 	bl	800273c <memset>
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x38>)
 8003fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x3c>)
 8003fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <std+0x40>)
 8003fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <std+0x44>)
 8003fb0:	6224      	str	r4, [r4, #32]
 8003fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	08004961 	.word	0x08004961
 8003fbc:	08004983 	.word	0x08004983
 8003fc0:	080049bb 	.word	0x080049bb
 8003fc4:	080049df 	.word	0x080049df

08003fc8 <_cleanup_r>:
 8003fc8:	4901      	ldr	r1, [pc, #4]	; (8003fd0 <_cleanup_r+0x8>)
 8003fca:	f000 b885 	b.w	80040d8 <_fwalk_reent>
 8003fce:	bf00      	nop
 8003fd0:	08003f2d 	.word	0x08003f2d

08003fd4 <__sfmoreglue>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	1e4a      	subs	r2, r1, #1
 8003fd8:	2568      	movs	r5, #104	; 0x68
 8003fda:	4355      	muls	r5, r2
 8003fdc:	460e      	mov	r6, r1
 8003fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fe2:	f000 fc53 	bl	800488c <_malloc_r>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	b140      	cbz	r0, 8003ffc <__sfmoreglue+0x28>
 8003fea:	2100      	movs	r1, #0
 8003fec:	e9c0 1600 	strd	r1, r6, [r0]
 8003ff0:	300c      	adds	r0, #12
 8003ff2:	60a0      	str	r0, [r4, #8]
 8003ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ff8:	f7fe fba0 	bl	800273c <memset>
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}

08004000 <__sinit>:
 8004000:	6983      	ldr	r3, [r0, #24]
 8004002:	b510      	push	{r4, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	bb33      	cbnz	r3, 8004056 <__sinit+0x56>
 8004008:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800400c:	6503      	str	r3, [r0, #80]	; 0x50
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <__sinit+0x58>)
 8004010:	4a12      	ldr	r2, [pc, #72]	; (800405c <__sinit+0x5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6282      	str	r2, [r0, #40]	; 0x28
 8004016:	4298      	cmp	r0, r3
 8004018:	bf04      	itt	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	6183      	streq	r3, [r0, #24]
 800401e:	f000 f81f 	bl	8004060 <__sfp>
 8004022:	6060      	str	r0, [r4, #4]
 8004024:	4620      	mov	r0, r4
 8004026:	f000 f81b 	bl	8004060 <__sfp>
 800402a:	60a0      	str	r0, [r4, #8]
 800402c:	4620      	mov	r0, r4
 800402e:	f000 f817 	bl	8004060 <__sfp>
 8004032:	2200      	movs	r2, #0
 8004034:	60e0      	str	r0, [r4, #12]
 8004036:	2104      	movs	r1, #4
 8004038:	6860      	ldr	r0, [r4, #4]
 800403a:	f7ff ffa1 	bl	8003f80 <std>
 800403e:	2201      	movs	r2, #1
 8004040:	2109      	movs	r1, #9
 8004042:	68a0      	ldr	r0, [r4, #8]
 8004044:	f7ff ff9c 	bl	8003f80 <std>
 8004048:	2202      	movs	r2, #2
 800404a:	2112      	movs	r1, #18
 800404c:	68e0      	ldr	r0, [r4, #12]
 800404e:	f7ff ff97 	bl	8003f80 <std>
 8004052:	2301      	movs	r3, #1
 8004054:	61a3      	str	r3, [r4, #24]
 8004056:	bd10      	pop	{r4, pc}
 8004058:	08004b3c 	.word	0x08004b3c
 800405c:	08003fc9 	.word	0x08003fc9

08004060 <__sfp>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <__sfp+0x70>)
 8004064:	681e      	ldr	r6, [r3, #0]
 8004066:	69b3      	ldr	r3, [r6, #24]
 8004068:	4607      	mov	r7, r0
 800406a:	b913      	cbnz	r3, 8004072 <__sfp+0x12>
 800406c:	4630      	mov	r0, r6
 800406e:	f7ff ffc7 	bl	8004000 <__sinit>
 8004072:	3648      	adds	r6, #72	; 0x48
 8004074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	d503      	bpl.n	8004084 <__sfp+0x24>
 800407c:	6833      	ldr	r3, [r6, #0]
 800407e:	b133      	cbz	r3, 800408e <__sfp+0x2e>
 8004080:	6836      	ldr	r6, [r6, #0]
 8004082:	e7f7      	b.n	8004074 <__sfp+0x14>
 8004084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004088:	b16d      	cbz	r5, 80040a6 <__sfp+0x46>
 800408a:	3468      	adds	r4, #104	; 0x68
 800408c:	e7f4      	b.n	8004078 <__sfp+0x18>
 800408e:	2104      	movs	r1, #4
 8004090:	4638      	mov	r0, r7
 8004092:	f7ff ff9f 	bl	8003fd4 <__sfmoreglue>
 8004096:	6030      	str	r0, [r6, #0]
 8004098:	2800      	cmp	r0, #0
 800409a:	d1f1      	bne.n	8004080 <__sfp+0x20>
 800409c:	230c      	movs	r3, #12
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4604      	mov	r4, r0
 80040a2:	4620      	mov	r0, r4
 80040a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <__sfp+0x74>)
 80040a8:	6665      	str	r5, [r4, #100]	; 0x64
 80040aa:	e9c4 5500 	strd	r5, r5, [r4]
 80040ae:	60a5      	str	r5, [r4, #8]
 80040b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80040b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80040b8:	2208      	movs	r2, #8
 80040ba:	4629      	mov	r1, r5
 80040bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c0:	f7fe fb3c 	bl	800273c <memset>
 80040c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040cc:	e7e9      	b.n	80040a2 <__sfp+0x42>
 80040ce:	bf00      	nop
 80040d0:	08004b3c 	.word	0x08004b3c
 80040d4:	ffff0001 	.word	0xffff0001

080040d8 <_fwalk_reent>:
 80040d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040dc:	4680      	mov	r8, r0
 80040de:	4689      	mov	r9, r1
 80040e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80040e4:	2600      	movs	r6, #0
 80040e6:	b914      	cbnz	r4, 80040ee <_fwalk_reent+0x16>
 80040e8:	4630      	mov	r0, r6
 80040ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80040f2:	3f01      	subs	r7, #1
 80040f4:	d501      	bpl.n	80040fa <_fwalk_reent+0x22>
 80040f6:	6824      	ldr	r4, [r4, #0]
 80040f8:	e7f5      	b.n	80040e6 <_fwalk_reent+0xe>
 80040fa:	89ab      	ldrh	r3, [r5, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d907      	bls.n	8004110 <_fwalk_reent+0x38>
 8004100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004104:	3301      	adds	r3, #1
 8004106:	d003      	beq.n	8004110 <_fwalk_reent+0x38>
 8004108:	4629      	mov	r1, r5
 800410a:	4640      	mov	r0, r8
 800410c:	47c8      	blx	r9
 800410e:	4306      	orrs	r6, r0
 8004110:	3568      	adds	r5, #104	; 0x68
 8004112:	e7ee      	b.n	80040f2 <_fwalk_reent+0x1a>

08004114 <_localeconv_r>:
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <_localeconv_r+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a18      	ldr	r0, [r3, #32]
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <_localeconv_r+0x18>)
 800411c:	2800      	cmp	r0, #0
 800411e:	bf08      	it	eq
 8004120:	4618      	moveq	r0, r3
 8004122:	30f0      	adds	r0, #240	; 0xf0
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000004 	.word	0x20000004
 800412c:	20000068 	.word	0x20000068

08004130 <__swhatbuf_r>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	460e      	mov	r6, r1
 8004134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004138:	2900      	cmp	r1, #0
 800413a:	b096      	sub	sp, #88	; 0x58
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
 8004140:	da07      	bge.n	8004152 <__swhatbuf_r+0x22>
 8004142:	2300      	movs	r3, #0
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	89b3      	ldrh	r3, [r6, #12]
 8004148:	061a      	lsls	r2, r3, #24
 800414a:	d410      	bmi.n	800416e <__swhatbuf_r+0x3e>
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	e00e      	b.n	8004170 <__swhatbuf_r+0x40>
 8004152:	466a      	mov	r2, sp
 8004154:	f000 fc6a 	bl	8004a2c <_fstat_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	dbf2      	blt.n	8004142 <__swhatbuf_r+0x12>
 800415c:	9a01      	ldr	r2, [sp, #4]
 800415e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004162:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004166:	425a      	negs	r2, r3
 8004168:	415a      	adcs	r2, r3
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	e7ee      	b.n	800414c <__swhatbuf_r+0x1c>
 800416e:	2340      	movs	r3, #64	; 0x40
 8004170:	2000      	movs	r0, #0
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	b016      	add	sp, #88	; 0x58
 8004176:	bd70      	pop	{r4, r5, r6, pc}

08004178 <__smakebuf_r>:
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800417c:	079d      	lsls	r5, r3, #30
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	d507      	bpl.n	8004194 <__smakebuf_r+0x1c>
 8004184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	2301      	movs	r3, #1
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	b002      	add	sp, #8
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	ab01      	add	r3, sp, #4
 8004196:	466a      	mov	r2, sp
 8004198:	f7ff ffca 	bl	8004130 <__swhatbuf_r>
 800419c:	9900      	ldr	r1, [sp, #0]
 800419e:	4605      	mov	r5, r0
 80041a0:	4630      	mov	r0, r6
 80041a2:	f000 fb73 	bl	800488c <_malloc_r>
 80041a6:	b948      	cbnz	r0, 80041bc <__smakebuf_r+0x44>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d4ef      	bmi.n	8004190 <__smakebuf_r+0x18>
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7e3      	b.n	8004184 <__smakebuf_r+0xc>
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <__smakebuf_r+0x7c>)
 80041be:	62b3      	str	r3, [r6, #40]	; 0x28
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	6020      	str	r0, [r4, #0]
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	9b00      	ldr	r3, [sp, #0]
 80041cc:	6163      	str	r3, [r4, #20]
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	6120      	str	r0, [r4, #16]
 80041d2:	b15b      	cbz	r3, 80041ec <__smakebuf_r+0x74>
 80041d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 fc39 	bl	8004a50 <_isatty_r>
 80041de:	b128      	cbz	r0, 80041ec <__smakebuf_r+0x74>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	431d      	orrs	r5, r3
 80041f0:	81a5      	strh	r5, [r4, #12]
 80041f2:	e7cd      	b.n	8004190 <__smakebuf_r+0x18>
 80041f4:	08003fc9 	.word	0x08003fc9

080041f8 <malloc>:
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <malloc+0xc>)
 80041fa:	4601      	mov	r1, r0
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f000 bb45 	b.w	800488c <_malloc_r>
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004

08004208 <memcpy>:
 8004208:	b510      	push	{r4, lr}
 800420a:	1e43      	subs	r3, r0, #1
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	d100      	bne.n	8004214 <memcpy+0xc>
 8004212:	bd10      	pop	{r4, pc}
 8004214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421c:	e7f7      	b.n	800420e <memcpy+0x6>

0800421e <_Balloc>:
 800421e:	b570      	push	{r4, r5, r6, lr}
 8004220:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004222:	4604      	mov	r4, r0
 8004224:	460e      	mov	r6, r1
 8004226:	b93d      	cbnz	r5, 8004238 <_Balloc+0x1a>
 8004228:	2010      	movs	r0, #16
 800422a:	f7ff ffe5 	bl	80041f8 <malloc>
 800422e:	6260      	str	r0, [r4, #36]	; 0x24
 8004230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004234:	6005      	str	r5, [r0, #0]
 8004236:	60c5      	str	r5, [r0, #12]
 8004238:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800423a:	68eb      	ldr	r3, [r5, #12]
 800423c:	b183      	cbz	r3, 8004260 <_Balloc+0x42>
 800423e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004246:	b9b8      	cbnz	r0, 8004278 <_Balloc+0x5a>
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f506 	lsl.w	r5, r1, r6
 800424e:	1d6a      	adds	r2, r5, #5
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fabe 	bl	80047d4 <_calloc_r>
 8004258:	b160      	cbz	r0, 8004274 <_Balloc+0x56>
 800425a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800425e:	e00e      	b.n	800427e <_Balloc+0x60>
 8004260:	2221      	movs	r2, #33	; 0x21
 8004262:	2104      	movs	r1, #4
 8004264:	4620      	mov	r0, r4
 8004266:	f000 fab5 	bl	80047d4 <_calloc_r>
 800426a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800426c:	60e8      	str	r0, [r5, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e4      	bne.n	800423e <_Balloc+0x20>
 8004274:	2000      	movs	r0, #0
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	6802      	ldr	r2, [r0, #0]
 800427a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800427e:	2300      	movs	r3, #0
 8004280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004284:	e7f7      	b.n	8004276 <_Balloc+0x58>

08004286 <_Bfree>:
 8004286:	b570      	push	{r4, r5, r6, lr}
 8004288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800428a:	4606      	mov	r6, r0
 800428c:	460d      	mov	r5, r1
 800428e:	b93c      	cbnz	r4, 80042a0 <_Bfree+0x1a>
 8004290:	2010      	movs	r0, #16
 8004292:	f7ff ffb1 	bl	80041f8 <malloc>
 8004296:	6270      	str	r0, [r6, #36]	; 0x24
 8004298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800429c:	6004      	str	r4, [r0, #0]
 800429e:	60c4      	str	r4, [r0, #12]
 80042a0:	b13d      	cbz	r5, 80042b2 <_Bfree+0x2c>
 80042a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042a4:	686a      	ldr	r2, [r5, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042ac:	6029      	str	r1, [r5, #0]
 80042ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042b2:	bd70      	pop	{r4, r5, r6, pc}

080042b4 <__multadd>:
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	690d      	ldr	r5, [r1, #16]
 80042ba:	461f      	mov	r7, r3
 80042bc:	4606      	mov	r6, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	f101 0c14 	add.w	ip, r1, #20
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8dc 0000 	ldr.w	r0, [ip]
 80042ca:	b281      	uxth	r1, r0
 80042cc:	fb02 7101 	mla	r1, r2, r1, r7
 80042d0:	0c0f      	lsrs	r7, r1, #16
 80042d2:	0c00      	lsrs	r0, r0, #16
 80042d4:	fb02 7000 	mla	r0, r2, r0, r7
 80042d8:	b289      	uxth	r1, r1
 80042da:	3301      	adds	r3, #1
 80042dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80042e0:	429d      	cmp	r5, r3
 80042e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80042e6:	f84c 1b04 	str.w	r1, [ip], #4
 80042ea:	dcec      	bgt.n	80042c6 <__multadd+0x12>
 80042ec:	b1d7      	cbz	r7, 8004324 <__multadd+0x70>
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	42ab      	cmp	r3, r5
 80042f2:	dc12      	bgt.n	800431a <__multadd+0x66>
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4630      	mov	r0, r6
 80042f8:	3101      	adds	r1, #1
 80042fa:	f7ff ff90 	bl	800421e <_Balloc>
 80042fe:	6922      	ldr	r2, [r4, #16]
 8004300:	3202      	adds	r2, #2
 8004302:	f104 010c 	add.w	r1, r4, #12
 8004306:	4680      	mov	r8, r0
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	300c      	adds	r0, #12
 800430c:	f7ff ff7c 	bl	8004208 <memcpy>
 8004310:	4621      	mov	r1, r4
 8004312:	4630      	mov	r0, r6
 8004314:	f7ff ffb7 	bl	8004286 <_Bfree>
 8004318:	4644      	mov	r4, r8
 800431a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800431e:	3501      	adds	r5, #1
 8004320:	615f      	str	r7, [r3, #20]
 8004322:	6125      	str	r5, [r4, #16]
 8004324:	4620      	mov	r0, r4
 8004326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800432a <__hi0bits>:
 800432a:	0c02      	lsrs	r2, r0, #16
 800432c:	0412      	lsls	r2, r2, #16
 800432e:	4603      	mov	r3, r0
 8004330:	b9b2      	cbnz	r2, 8004360 <__hi0bits+0x36>
 8004332:	0403      	lsls	r3, r0, #16
 8004334:	2010      	movs	r0, #16
 8004336:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800433a:	bf04      	itt	eq
 800433c:	021b      	lsleq	r3, r3, #8
 800433e:	3008      	addeq	r0, #8
 8004340:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004344:	bf04      	itt	eq
 8004346:	011b      	lsleq	r3, r3, #4
 8004348:	3004      	addeq	r0, #4
 800434a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800434e:	bf04      	itt	eq
 8004350:	009b      	lsleq	r3, r3, #2
 8004352:	3002      	addeq	r0, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	db06      	blt.n	8004366 <__hi0bits+0x3c>
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	d503      	bpl.n	8004364 <__hi0bits+0x3a>
 800435c:	3001      	adds	r0, #1
 800435e:	4770      	bx	lr
 8004360:	2000      	movs	r0, #0
 8004362:	e7e8      	b.n	8004336 <__hi0bits+0xc>
 8004364:	2020      	movs	r0, #32
 8004366:	4770      	bx	lr

08004368 <__lo0bits>:
 8004368:	6803      	ldr	r3, [r0, #0]
 800436a:	f013 0207 	ands.w	r2, r3, #7
 800436e:	4601      	mov	r1, r0
 8004370:	d00b      	beq.n	800438a <__lo0bits+0x22>
 8004372:	07da      	lsls	r2, r3, #31
 8004374:	d423      	bmi.n	80043be <__lo0bits+0x56>
 8004376:	0798      	lsls	r0, r3, #30
 8004378:	bf49      	itett	mi
 800437a:	085b      	lsrmi	r3, r3, #1
 800437c:	089b      	lsrpl	r3, r3, #2
 800437e:	2001      	movmi	r0, #1
 8004380:	600b      	strmi	r3, [r1, #0]
 8004382:	bf5c      	itt	pl
 8004384:	600b      	strpl	r3, [r1, #0]
 8004386:	2002      	movpl	r0, #2
 8004388:	4770      	bx	lr
 800438a:	b298      	uxth	r0, r3
 800438c:	b9a8      	cbnz	r0, 80043ba <__lo0bits+0x52>
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	2010      	movs	r0, #16
 8004392:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004396:	bf04      	itt	eq
 8004398:	0a1b      	lsreq	r3, r3, #8
 800439a:	3008      	addeq	r0, #8
 800439c:	071a      	lsls	r2, r3, #28
 800439e:	bf04      	itt	eq
 80043a0:	091b      	lsreq	r3, r3, #4
 80043a2:	3004      	addeq	r0, #4
 80043a4:	079a      	lsls	r2, r3, #30
 80043a6:	bf04      	itt	eq
 80043a8:	089b      	lsreq	r3, r3, #2
 80043aa:	3002      	addeq	r0, #2
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	d402      	bmi.n	80043b6 <__lo0bits+0x4e>
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	d006      	beq.n	80043c2 <__lo0bits+0x5a>
 80043b4:	3001      	adds	r0, #1
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	4770      	bx	lr
 80043ba:	4610      	mov	r0, r2
 80043bc:	e7e9      	b.n	8004392 <__lo0bits+0x2a>
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr
 80043c2:	2020      	movs	r0, #32
 80043c4:	4770      	bx	lr

080043c6 <__i2b>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	2101      	movs	r1, #1
 80043cc:	f7ff ff27 	bl	800421e <_Balloc>
 80043d0:	2201      	movs	r2, #1
 80043d2:	6144      	str	r4, [r0, #20]
 80043d4:	6102      	str	r2, [r0, #16]
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <__multiply>:
 80043d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	4614      	mov	r4, r2
 80043de:	690a      	ldr	r2, [r1, #16]
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bfb8      	it	lt
 80043e6:	460b      	movlt	r3, r1
 80043e8:	4688      	mov	r8, r1
 80043ea:	bfbc      	itt	lt
 80043ec:	46a0      	movlt	r8, r4
 80043ee:	461c      	movlt	r4, r3
 80043f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80043f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80043f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80043fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004400:	eb07 0609 	add.w	r6, r7, r9
 8004404:	42b3      	cmp	r3, r6
 8004406:	bfb8      	it	lt
 8004408:	3101      	addlt	r1, #1
 800440a:	f7ff ff08 	bl	800421e <_Balloc>
 800440e:	f100 0514 	add.w	r5, r0, #20
 8004412:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004416:	462b      	mov	r3, r5
 8004418:	2200      	movs	r2, #0
 800441a:	4573      	cmp	r3, lr
 800441c:	d316      	bcc.n	800444c <__multiply+0x74>
 800441e:	f104 0214 	add.w	r2, r4, #20
 8004422:	f108 0114 	add.w	r1, r8, #20
 8004426:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800442a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	9b00      	ldr	r3, [sp, #0]
 8004432:	9201      	str	r2, [sp, #4]
 8004434:	4293      	cmp	r3, r2
 8004436:	d80c      	bhi.n	8004452 <__multiply+0x7a>
 8004438:	2e00      	cmp	r6, #0
 800443a:	dd03      	ble.n	8004444 <__multiply+0x6c>
 800443c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05d      	beq.n	8004500 <__multiply+0x128>
 8004444:	6106      	str	r6, [r0, #16]
 8004446:	b003      	add	sp, #12
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444c:	f843 2b04 	str.w	r2, [r3], #4
 8004450:	e7e3      	b.n	800441a <__multiply+0x42>
 8004452:	f8b2 b000 	ldrh.w	fp, [r2]
 8004456:	f1bb 0f00 	cmp.w	fp, #0
 800445a:	d023      	beq.n	80044a4 <__multiply+0xcc>
 800445c:	4689      	mov	r9, r1
 800445e:	46ac      	mov	ip, r5
 8004460:	f04f 0800 	mov.w	r8, #0
 8004464:	f859 4b04 	ldr.w	r4, [r9], #4
 8004468:	f8dc a000 	ldr.w	sl, [ip]
 800446c:	b2a3      	uxth	r3, r4
 800446e:	fa1f fa8a 	uxth.w	sl, sl
 8004472:	fb0b a303 	mla	r3, fp, r3, sl
 8004476:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800447a:	f8dc 4000 	ldr.w	r4, [ip]
 800447e:	4443      	add	r3, r8
 8004480:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004484:	fb0b 840a 	mla	r4, fp, sl, r8
 8004488:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800448c:	46e2      	mov	sl, ip
 800448e:	b29b      	uxth	r3, r3
 8004490:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004494:	454f      	cmp	r7, r9
 8004496:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800449a:	f84a 3b04 	str.w	r3, [sl], #4
 800449e:	d82b      	bhi.n	80044f8 <__multiply+0x120>
 80044a0:	f8cc 8004 	str.w	r8, [ip, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
 80044a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80044aa:	3204      	adds	r2, #4
 80044ac:	f1ba 0f00 	cmp.w	sl, #0
 80044b0:	d020      	beq.n	80044f4 <__multiply+0x11c>
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	4689      	mov	r9, r1
 80044b6:	46a8      	mov	r8, r5
 80044b8:	f04f 0b00 	mov.w	fp, #0
 80044bc:	f8b9 c000 	ldrh.w	ip, [r9]
 80044c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80044c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80044c8:	445c      	add	r4, fp
 80044ca:	46c4      	mov	ip, r8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044d2:	f84c 3b04 	str.w	r3, [ip], #4
 80044d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80044da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	fb0a b303 	mla	r3, sl, r3, fp
 80044e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80044e8:	454f      	cmp	r7, r9
 80044ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80044ee:	d805      	bhi.n	80044fc <__multiply+0x124>
 80044f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80044f4:	3504      	adds	r5, #4
 80044f6:	e79b      	b.n	8004430 <__multiply+0x58>
 80044f8:	46d4      	mov	ip, sl
 80044fa:	e7b3      	b.n	8004464 <__multiply+0x8c>
 80044fc:	46e0      	mov	r8, ip
 80044fe:	e7dd      	b.n	80044bc <__multiply+0xe4>
 8004500:	3e01      	subs	r6, #1
 8004502:	e799      	b.n	8004438 <__multiply+0x60>

08004504 <__pow5mult>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4615      	mov	r5, r2
 800450a:	f012 0203 	ands.w	r2, r2, #3
 800450e:	4606      	mov	r6, r0
 8004510:	460f      	mov	r7, r1
 8004512:	d007      	beq.n	8004524 <__pow5mult+0x20>
 8004514:	3a01      	subs	r2, #1
 8004516:	4c21      	ldr	r4, [pc, #132]	; (800459c <__pow5mult+0x98>)
 8004518:	2300      	movs	r3, #0
 800451a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800451e:	f7ff fec9 	bl	80042b4 <__multadd>
 8004522:	4607      	mov	r7, r0
 8004524:	10ad      	asrs	r5, r5, #2
 8004526:	d035      	beq.n	8004594 <__pow5mult+0x90>
 8004528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800452a:	b93c      	cbnz	r4, 800453c <__pow5mult+0x38>
 800452c:	2010      	movs	r0, #16
 800452e:	f7ff fe63 	bl	80041f8 <malloc>
 8004532:	6270      	str	r0, [r6, #36]	; 0x24
 8004534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004538:	6004      	str	r4, [r0, #0]
 800453a:	60c4      	str	r4, [r0, #12]
 800453c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004544:	b94c      	cbnz	r4, 800455a <__pow5mult+0x56>
 8004546:	f240 2171 	movw	r1, #625	; 0x271
 800454a:	4630      	mov	r0, r6
 800454c:	f7ff ff3b 	bl	80043c6 <__i2b>
 8004550:	2300      	movs	r3, #0
 8004552:	f8c8 0008 	str.w	r0, [r8, #8]
 8004556:	4604      	mov	r4, r0
 8004558:	6003      	str	r3, [r0, #0]
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	07eb      	lsls	r3, r5, #31
 8004560:	d50a      	bpl.n	8004578 <__pow5mult+0x74>
 8004562:	4639      	mov	r1, r7
 8004564:	4622      	mov	r2, r4
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff ff36 	bl	80043d8 <__multiply>
 800456c:	4639      	mov	r1, r7
 800456e:	4681      	mov	r9, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff fe88 	bl	8004286 <_Bfree>
 8004576:	464f      	mov	r7, r9
 8004578:	106d      	asrs	r5, r5, #1
 800457a:	d00b      	beq.n	8004594 <__pow5mult+0x90>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	b938      	cbnz	r0, 8004590 <__pow5mult+0x8c>
 8004580:	4622      	mov	r2, r4
 8004582:	4621      	mov	r1, r4
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff ff27 	bl	80043d8 <__multiply>
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f8c0 8000 	str.w	r8, [r0]
 8004590:	4604      	mov	r4, r0
 8004592:	e7e4      	b.n	800455e <__pow5mult+0x5a>
 8004594:	4638      	mov	r0, r7
 8004596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459a:	bf00      	nop
 800459c:	08004cb0 	.word	0x08004cb0

080045a0 <__lshift>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	eb0a 0903 	add.w	r9, sl, r3
 80045b2:	68a3      	ldr	r3, [r4, #8]
 80045b4:	4607      	mov	r7, r0
 80045b6:	4616      	mov	r6, r2
 80045b8:	f109 0501 	add.w	r5, r9, #1
 80045bc:	42ab      	cmp	r3, r5
 80045be:	db32      	blt.n	8004626 <__lshift+0x86>
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff fe2c 	bl	800421e <_Balloc>
 80045c6:	2300      	movs	r3, #0
 80045c8:	4680      	mov	r8, r0
 80045ca:	f100 0114 	add.w	r1, r0, #20
 80045ce:	461a      	mov	r2, r3
 80045d0:	4553      	cmp	r3, sl
 80045d2:	db2b      	blt.n	800462c <__lshift+0x8c>
 80045d4:	6920      	ldr	r0, [r4, #16]
 80045d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045da:	f104 0314 	add.w	r3, r4, #20
 80045de:	f016 021f 	ands.w	r2, r6, #31
 80045e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045ea:	d025      	beq.n	8004638 <__lshift+0x98>
 80045ec:	f1c2 0e20 	rsb	lr, r2, #32
 80045f0:	2000      	movs	r0, #0
 80045f2:	681e      	ldr	r6, [r3, #0]
 80045f4:	468a      	mov	sl, r1
 80045f6:	4096      	lsls	r6, r2
 80045f8:	4330      	orrs	r0, r6
 80045fa:	f84a 0b04 	str.w	r0, [sl], #4
 80045fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8004602:	459c      	cmp	ip, r3
 8004604:	fa20 f00e 	lsr.w	r0, r0, lr
 8004608:	d814      	bhi.n	8004634 <__lshift+0x94>
 800460a:	6048      	str	r0, [r1, #4]
 800460c:	b108      	cbz	r0, 8004612 <__lshift+0x72>
 800460e:	f109 0502 	add.w	r5, r9, #2
 8004612:	3d01      	subs	r5, #1
 8004614:	4638      	mov	r0, r7
 8004616:	f8c8 5010 	str.w	r5, [r8, #16]
 800461a:	4621      	mov	r1, r4
 800461c:	f7ff fe33 	bl	8004286 <_Bfree>
 8004620:	4640      	mov	r0, r8
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	3101      	adds	r1, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	e7c7      	b.n	80045bc <__lshift+0x1c>
 800462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004630:	3301      	adds	r3, #1
 8004632:	e7cd      	b.n	80045d0 <__lshift+0x30>
 8004634:	4651      	mov	r1, sl
 8004636:	e7dc      	b.n	80045f2 <__lshift+0x52>
 8004638:	3904      	subs	r1, #4
 800463a:	f853 2b04 	ldr.w	r2, [r3], #4
 800463e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004642:	459c      	cmp	ip, r3
 8004644:	d8f9      	bhi.n	800463a <__lshift+0x9a>
 8004646:	e7e4      	b.n	8004612 <__lshift+0x72>

08004648 <__mcmp>:
 8004648:	6903      	ldr	r3, [r0, #16]
 800464a:	690a      	ldr	r2, [r1, #16]
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	b530      	push	{r4, r5, lr}
 8004650:	d10c      	bne.n	800466c <__mcmp+0x24>
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	3014      	adds	r0, #20
 8004656:	3114      	adds	r1, #20
 8004658:	1884      	adds	r4, r0, r2
 800465a:	4411      	add	r1, r2
 800465c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004664:	4295      	cmp	r5, r2
 8004666:	d003      	beq.n	8004670 <__mcmp+0x28>
 8004668:	d305      	bcc.n	8004676 <__mcmp+0x2e>
 800466a:	2301      	movs	r3, #1
 800466c:	4618      	mov	r0, r3
 800466e:	bd30      	pop	{r4, r5, pc}
 8004670:	42a0      	cmp	r0, r4
 8004672:	d3f3      	bcc.n	800465c <__mcmp+0x14>
 8004674:	e7fa      	b.n	800466c <__mcmp+0x24>
 8004676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467a:	e7f7      	b.n	800466c <__mcmp+0x24>

0800467c <__mdiff>:
 800467c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	460d      	mov	r5, r1
 8004682:	4607      	mov	r7, r0
 8004684:	4611      	mov	r1, r2
 8004686:	4628      	mov	r0, r5
 8004688:	4614      	mov	r4, r2
 800468a:	f7ff ffdd 	bl	8004648 <__mcmp>
 800468e:	1e06      	subs	r6, r0, #0
 8004690:	d108      	bne.n	80046a4 <__mdiff+0x28>
 8004692:	4631      	mov	r1, r6
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff fdc2 	bl	800421e <_Balloc>
 800469a:	2301      	movs	r3, #1
 800469c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	bfa4      	itt	ge
 80046a6:	4623      	movge	r3, r4
 80046a8:	462c      	movge	r4, r5
 80046aa:	4638      	mov	r0, r7
 80046ac:	6861      	ldr	r1, [r4, #4]
 80046ae:	bfa6      	itte	ge
 80046b0:	461d      	movge	r5, r3
 80046b2:	2600      	movge	r6, #0
 80046b4:	2601      	movlt	r6, #1
 80046b6:	f7ff fdb2 	bl	800421e <_Balloc>
 80046ba:	692b      	ldr	r3, [r5, #16]
 80046bc:	60c6      	str	r6, [r0, #12]
 80046be:	6926      	ldr	r6, [r4, #16]
 80046c0:	f105 0914 	add.w	r9, r5, #20
 80046c4:	f104 0214 	add.w	r2, r4, #20
 80046c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80046cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80046d0:	f100 0514 	add.w	r5, r0, #20
 80046d4:	f04f 0e00 	mov.w	lr, #0
 80046d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80046dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80046e0:	fa1e f18a 	uxtah	r1, lr, sl
 80046e4:	b2a3      	uxth	r3, r4
 80046e6:	1ac9      	subs	r1, r1, r3
 80046e8:	0c23      	lsrs	r3, r4, #16
 80046ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80046ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80046f2:	b289      	uxth	r1, r1
 80046f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80046f8:	45c8      	cmp	r8, r9
 80046fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80046fe:	4694      	mov	ip, r2
 8004700:	f845 3b04 	str.w	r3, [r5], #4
 8004704:	d8e8      	bhi.n	80046d8 <__mdiff+0x5c>
 8004706:	45bc      	cmp	ip, r7
 8004708:	d304      	bcc.n	8004714 <__mdiff+0x98>
 800470a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800470e:	b183      	cbz	r3, 8004732 <__mdiff+0xb6>
 8004710:	6106      	str	r6, [r0, #16]
 8004712:	e7c5      	b.n	80046a0 <__mdiff+0x24>
 8004714:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004718:	fa1e f381 	uxtah	r3, lr, r1
 800471c:	141a      	asrs	r2, r3, #16
 800471e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004722:	b29b      	uxth	r3, r3
 8004724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004728:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800472c:	f845 3b04 	str.w	r3, [r5], #4
 8004730:	e7e9      	b.n	8004706 <__mdiff+0x8a>
 8004732:	3e01      	subs	r6, #1
 8004734:	e7e9      	b.n	800470a <__mdiff+0x8e>

08004736 <__d2b>:
 8004736:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	2101      	movs	r1, #1
 800473e:	ec59 8b10 	vmov	r8, r9, d0
 8004742:	4615      	mov	r5, r2
 8004744:	f7ff fd6b 	bl	800421e <_Balloc>
 8004748:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800474c:	4607      	mov	r7, r0
 800474e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004752:	bb34      	cbnz	r4, 80047a2 <__d2b+0x6c>
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f1b8 0300 	subs.w	r3, r8, #0
 800475a:	d027      	beq.n	80047ac <__d2b+0x76>
 800475c:	a802      	add	r0, sp, #8
 800475e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004762:	f7ff fe01 	bl	8004368 <__lo0bits>
 8004766:	9900      	ldr	r1, [sp, #0]
 8004768:	b1f0      	cbz	r0, 80047a8 <__d2b+0x72>
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	f1c0 0320 	rsb	r3, r0, #32
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	430b      	orrs	r3, r1
 8004776:	40c2      	lsrs	r2, r0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	9201      	str	r2, [sp, #4]
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2102      	movne	r1, #2
 8004786:	2101      	moveq	r1, #1
 8004788:	6139      	str	r1, [r7, #16]
 800478a:	b1c4      	cbz	r4, 80047be <__d2b+0x88>
 800478c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004790:	4404      	add	r4, r0
 8004792:	6034      	str	r4, [r6, #0]
 8004794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004798:	6028      	str	r0, [r5, #0]
 800479a:	4638      	mov	r0, r7
 800479c:	b003      	add	sp, #12
 800479e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a6:	e7d5      	b.n	8004754 <__d2b+0x1e>
 80047a8:	6179      	str	r1, [r7, #20]
 80047aa:	e7e7      	b.n	800477c <__d2b+0x46>
 80047ac:	a801      	add	r0, sp, #4
 80047ae:	f7ff fddb 	bl	8004368 <__lo0bits>
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	2101      	movs	r1, #1
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	3020      	adds	r0, #32
 80047bc:	e7e5      	b.n	800478a <__d2b+0x54>
 80047be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80047c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047c6:	6030      	str	r0, [r6, #0]
 80047c8:	6918      	ldr	r0, [r3, #16]
 80047ca:	f7ff fdae 	bl	800432a <__hi0bits>
 80047ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80047d2:	e7e1      	b.n	8004798 <__d2b+0x62>

080047d4 <_calloc_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	fb02 f401 	mul.w	r4, r2, r1
 80047da:	4621      	mov	r1, r4
 80047dc:	f000 f856 	bl	800488c <_malloc_r>
 80047e0:	4605      	mov	r5, r0
 80047e2:	b118      	cbz	r0, 80047ec <_calloc_r+0x18>
 80047e4:	4622      	mov	r2, r4
 80047e6:	2100      	movs	r1, #0
 80047e8:	f7fd ffa8 	bl	800273c <memset>
 80047ec:	4628      	mov	r0, r5
 80047ee:	bd38      	pop	{r3, r4, r5, pc}

080047f0 <_free_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d045      	beq.n	8004884 <_free_r+0x94>
 80047f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fc:	1f0c      	subs	r4, r1, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	18e4      	addlt	r4, r4, r3
 8004804:	f000 f958 	bl	8004ab8 <__malloc_lock>
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <_free_r+0x98>)
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	4610      	mov	r0, r2
 800480e:	b933      	cbnz	r3, 800481e <_free_r+0x2e>
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6014      	str	r4, [r2, #0]
 8004814:	4628      	mov	r0, r5
 8004816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800481a:	f000 b94e 	b.w	8004aba <__malloc_unlock>
 800481e:	42a3      	cmp	r3, r4
 8004820:	d90c      	bls.n	800483c <_free_r+0x4c>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	1862      	adds	r2, r4, r1
 8004826:	4293      	cmp	r3, r2
 8004828:	bf04      	itt	eq
 800482a:	681a      	ldreq	r2, [r3, #0]
 800482c:	685b      	ldreq	r3, [r3, #4]
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	bf04      	itt	eq
 8004832:	1852      	addeq	r2, r2, r1
 8004834:	6022      	streq	r2, [r4, #0]
 8004836:	6004      	str	r4, [r0, #0]
 8004838:	e7ec      	b.n	8004814 <_free_r+0x24>
 800483a:	4613      	mov	r3, r2
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	b10a      	cbz	r2, 8004844 <_free_r+0x54>
 8004840:	42a2      	cmp	r2, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x4a>
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	1858      	adds	r0, r3, r1
 8004848:	42a0      	cmp	r0, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x74>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4401      	add	r1, r0
 8004850:	1858      	adds	r0, r3, r1
 8004852:	4282      	cmp	r2, r0
 8004854:	6019      	str	r1, [r3, #0]
 8004856:	d1dd      	bne.n	8004814 <_free_r+0x24>
 8004858:	6810      	ldr	r0, [r2, #0]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	4401      	add	r1, r0
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e7d7      	b.n	8004814 <_free_r+0x24>
 8004864:	d902      	bls.n	800486c <_free_r+0x7c>
 8004866:	230c      	movs	r3, #12
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	e7d3      	b.n	8004814 <_free_r+0x24>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428a      	cmp	r2, r1
 8004872:	bf04      	itt	eq
 8004874:	6811      	ldreq	r1, [r2, #0]
 8004876:	6852      	ldreq	r2, [r2, #4]
 8004878:	6062      	str	r2, [r4, #4]
 800487a:	bf04      	itt	eq
 800487c:	1809      	addeq	r1, r1, r0
 800487e:	6021      	streq	r1, [r4, #0]
 8004880:	605c      	str	r4, [r3, #4]
 8004882:	e7c7      	b.n	8004814 <_free_r+0x24>
 8004884:	bd38      	pop	{r3, r4, r5, pc}
 8004886:	bf00      	nop
 8004888:	2000020c 	.word	0x2000020c

0800488c <_malloc_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	1ccd      	adds	r5, r1, #3
 8004890:	f025 0503 	bic.w	r5, r5, #3
 8004894:	3508      	adds	r5, #8
 8004896:	2d0c      	cmp	r5, #12
 8004898:	bf38      	it	cc
 800489a:	250c      	movcc	r5, #12
 800489c:	2d00      	cmp	r5, #0
 800489e:	4606      	mov	r6, r0
 80048a0:	db01      	blt.n	80048a6 <_malloc_r+0x1a>
 80048a2:	42a9      	cmp	r1, r5
 80048a4:	d903      	bls.n	80048ae <_malloc_r+0x22>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	f000 f903 	bl	8004ab8 <__malloc_lock>
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <_malloc_r+0xac>)
 80048b4:	6814      	ldr	r4, [r2, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	b991      	cbnz	r1, 80048e0 <_malloc_r+0x54>
 80048ba:	4c20      	ldr	r4, [pc, #128]	; (800493c <_malloc_r+0xb0>)
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	b91b      	cbnz	r3, 80048c8 <_malloc_r+0x3c>
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f83d 	bl	8004940 <_sbrk_r>
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	4629      	mov	r1, r5
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f838 	bl	8004940 <_sbrk_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d124      	bne.n	800491e <_malloc_r+0x92>
 80048d4:	230c      	movs	r3, #12
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f8ee 	bl	8004aba <__malloc_unlock>
 80048de:	e7e4      	b.n	80048aa <_malloc_r+0x1e>
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	1b5b      	subs	r3, r3, r5
 80048e4:	d418      	bmi.n	8004918 <_malloc_r+0x8c>
 80048e6:	2b0b      	cmp	r3, #11
 80048e8:	d90f      	bls.n	800490a <_malloc_r+0x7e>
 80048ea:	600b      	str	r3, [r1, #0]
 80048ec:	50cd      	str	r5, [r1, r3]
 80048ee:	18cc      	adds	r4, r1, r3
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 f8e2 	bl	8004aba <__malloc_unlock>
 80048f6:	f104 000b 	add.w	r0, r4, #11
 80048fa:	1d23      	adds	r3, r4, #4
 80048fc:	f020 0007 	bic.w	r0, r0, #7
 8004900:	1ac3      	subs	r3, r0, r3
 8004902:	d0d3      	beq.n	80048ac <_malloc_r+0x20>
 8004904:	425a      	negs	r2, r3
 8004906:	50e2      	str	r2, [r4, r3]
 8004908:	e7d0      	b.n	80048ac <_malloc_r+0x20>
 800490a:	428c      	cmp	r4, r1
 800490c:	684b      	ldr	r3, [r1, #4]
 800490e:	bf16      	itet	ne
 8004910:	6063      	strne	r3, [r4, #4]
 8004912:	6013      	streq	r3, [r2, #0]
 8004914:	460c      	movne	r4, r1
 8004916:	e7eb      	b.n	80048f0 <_malloc_r+0x64>
 8004918:	460c      	mov	r4, r1
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	e7cc      	b.n	80048b8 <_malloc_r+0x2c>
 800491e:	1cc4      	adds	r4, r0, #3
 8004920:	f024 0403 	bic.w	r4, r4, #3
 8004924:	42a0      	cmp	r0, r4
 8004926:	d005      	beq.n	8004934 <_malloc_r+0xa8>
 8004928:	1a21      	subs	r1, r4, r0
 800492a:	4630      	mov	r0, r6
 800492c:	f000 f808 	bl	8004940 <_sbrk_r>
 8004930:	3001      	adds	r0, #1
 8004932:	d0cf      	beq.n	80048d4 <_malloc_r+0x48>
 8004934:	6025      	str	r5, [r4, #0]
 8004936:	e7db      	b.n	80048f0 <_malloc_r+0x64>
 8004938:	2000020c 	.word	0x2000020c
 800493c:	20000210 	.word	0x20000210

08004940 <_sbrk_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4c06      	ldr	r4, [pc, #24]	; (800495c <_sbrk_r+0x1c>)
 8004944:	2300      	movs	r3, #0
 8004946:	4605      	mov	r5, r0
 8004948:	4608      	mov	r0, r1
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	f7fd f82e 	bl	80019ac <_sbrk>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_sbrk_r+0x1a>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	b103      	cbz	r3, 800495a <_sbrk_r+0x1a>
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000214 	.word	0x20000214

08004960 <__sread>:
 8004960:	b510      	push	{r4, lr}
 8004962:	460c      	mov	r4, r1
 8004964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004968:	f000 f8a8 	bl	8004abc <_read_r>
 800496c:	2800      	cmp	r0, #0
 800496e:	bfab      	itete	ge
 8004970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004972:	89a3      	ldrhlt	r3, [r4, #12]
 8004974:	181b      	addge	r3, r3, r0
 8004976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800497a:	bfac      	ite	ge
 800497c:	6563      	strge	r3, [r4, #84]	; 0x54
 800497e:	81a3      	strhlt	r3, [r4, #12]
 8004980:	bd10      	pop	{r4, pc}

08004982 <__swrite>:
 8004982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	461f      	mov	r7, r3
 8004988:	898b      	ldrh	r3, [r1, #12]
 800498a:	05db      	lsls	r3, r3, #23
 800498c:	4605      	mov	r5, r0
 800498e:	460c      	mov	r4, r1
 8004990:	4616      	mov	r6, r2
 8004992:	d505      	bpl.n	80049a0 <__swrite+0x1e>
 8004994:	2302      	movs	r3, #2
 8004996:	2200      	movs	r2, #0
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	f000 f868 	bl	8004a70 <_lseek_r>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	4632      	mov	r2, r6
 80049ae:	463b      	mov	r3, r7
 80049b0:	4628      	mov	r0, r5
 80049b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049b6:	f000 b817 	b.w	80049e8 <_write_r>

080049ba <__sseek>:
 80049ba:	b510      	push	{r4, lr}
 80049bc:	460c      	mov	r4, r1
 80049be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c2:	f000 f855 	bl	8004a70 <_lseek_r>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	bf15      	itete	ne
 80049cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80049ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049d6:	81a3      	strheq	r3, [r4, #12]
 80049d8:	bf18      	it	ne
 80049da:	81a3      	strhne	r3, [r4, #12]
 80049dc:	bd10      	pop	{r4, pc}

080049de <__sclose>:
 80049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e2:	f000 b813 	b.w	8004a0c <_close_r>
	...

080049e8 <_write_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4c07      	ldr	r4, [pc, #28]	; (8004a08 <_write_r+0x20>)
 80049ec:	4605      	mov	r5, r0
 80049ee:	4608      	mov	r0, r1
 80049f0:	4611      	mov	r1, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7fc ff87 	bl	800190a <_write>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_write_r+0x1e>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_write_r+0x1e>
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000214 	.word	0x20000214

08004a0c <_close_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4c06      	ldr	r4, [pc, #24]	; (8004a28 <_close_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4605      	mov	r5, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	f7fc ff93 	bl	8001942 <_close>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_close_r+0x1a>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_close_r+0x1a>
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000214 	.word	0x20000214

08004a2c <_fstat_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4c07      	ldr	r4, [pc, #28]	; (8004a4c <_fstat_r+0x20>)
 8004a30:	2300      	movs	r3, #0
 8004a32:	4605      	mov	r5, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	f7fc ff8e 	bl	800195a <_fstat>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d102      	bne.n	8004a48 <_fstat_r+0x1c>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	b103      	cbz	r3, 8004a48 <_fstat_r+0x1c>
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000214 	.word	0x20000214

08004a50 <_isatty_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4c06      	ldr	r4, [pc, #24]	; (8004a6c <_isatty_r+0x1c>)
 8004a54:	2300      	movs	r3, #0
 8004a56:	4605      	mov	r5, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	f7fc ff8d 	bl	800197a <_isatty>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_isatty_r+0x1a>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_isatty_r+0x1a>
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	20000214 	.word	0x20000214

08004a70 <_lseek_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4c07      	ldr	r4, [pc, #28]	; (8004a90 <_lseek_r+0x20>)
 8004a74:	4605      	mov	r5, r0
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6022      	str	r2, [r4, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7fc ff86 	bl	8001990 <_lseek>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_lseek_r+0x1e>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_lseek_r+0x1e>
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	20000214 	.word	0x20000214

08004a94 <__ascii_mbtowc>:
 8004a94:	b082      	sub	sp, #8
 8004a96:	b901      	cbnz	r1, 8004a9a <__ascii_mbtowc+0x6>
 8004a98:	a901      	add	r1, sp, #4
 8004a9a:	b142      	cbz	r2, 8004aae <__ascii_mbtowc+0x1a>
 8004a9c:	b14b      	cbz	r3, 8004ab2 <__ascii_mbtowc+0x1e>
 8004a9e:	7813      	ldrb	r3, [r2, #0]
 8004aa0:	600b      	str	r3, [r1, #0]
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	1c10      	adds	r0, r2, #0
 8004aa6:	bf18      	it	ne
 8004aa8:	2001      	movne	r0, #1
 8004aaa:	b002      	add	sp, #8
 8004aac:	4770      	bx	lr
 8004aae:	4610      	mov	r0, r2
 8004ab0:	e7fb      	b.n	8004aaa <__ascii_mbtowc+0x16>
 8004ab2:	f06f 0001 	mvn.w	r0, #1
 8004ab6:	e7f8      	b.n	8004aaa <__ascii_mbtowc+0x16>

08004ab8 <__malloc_lock>:
 8004ab8:	4770      	bx	lr

08004aba <__malloc_unlock>:
 8004aba:	4770      	bx	lr

08004abc <_read_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4c07      	ldr	r4, [pc, #28]	; (8004adc <_read_r+0x20>)
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7fc ff00 	bl	80018d0 <_read>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_read_r+0x1e>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_read_r+0x1e>
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000214 	.word	0x20000214

08004ae0 <__ascii_wctomb>:
 8004ae0:	b149      	cbz	r1, 8004af6 <__ascii_wctomb+0x16>
 8004ae2:	2aff      	cmp	r2, #255	; 0xff
 8004ae4:	bf85      	ittet	hi
 8004ae6:	238a      	movhi	r3, #138	; 0x8a
 8004ae8:	6003      	strhi	r3, [r0, #0]
 8004aea:	700a      	strbls	r2, [r1, #0]
 8004aec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004af0:	bf98      	it	ls
 8004af2:	2001      	movls	r0, #1
 8004af4:	4770      	bx	lr
 8004af6:	4608      	mov	r0, r1
 8004af8:	4770      	bx	lr
	...

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
