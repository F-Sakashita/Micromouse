
TestCircuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a4  080068a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068ac  080068ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080068b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba8  20000010  080068c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb8  080068c4  00024bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d74a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000390e  00000000  00000000  0003d78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d0  00000000  00000000  00041098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00042968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000225b8  00000000  00000000  00044098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000154e0  00000000  00000000  00066650  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0f7b  00000000  00000000  0007bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014caab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000687c  00000000  00000000  0014cb28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800682c 	.word	0x0800682c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800682c 	.word	0x0800682c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_ADC1_Init+0x98>)
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <MX_ADC1_Init+0x9c>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <MX_ADC1_Init+0x98>)
 80004ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC1_Init+0x98>)
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_ADC1_Init+0xa0>)
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x98>)
 8000532:	f000 ff39 	bl	80013a8 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 fad0 	bl	8000ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000540:	2306      	movs	r3, #6
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x98>)
 8000552:	f000 ff6d 	bl	8001430 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fac0 	bl	8000ae0 <Error_Handler>
  }

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000497c 	.word	0x2000497c
 800056c:	40012000 	.word	0x40012000
 8000570:	0f000001 	.word	0x0f000001

08000574 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC2_Init+0x98>)
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <MX_ADC2_Init+0x9c>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC2_Init+0x98>)
 800058e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000592:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC2_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_ADC2_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC2_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC2_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_ADC2_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_ADC2_Init+0x98>)
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_ADC2_Init+0xa0>)
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC2_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_ADC2_Init+0x98>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_ADC2_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC2_Init+0x98>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_ADC2_Init+0x98>)
 80005d6:	f000 fee7 	bl	80013a8 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80005e0:	f000 fa7e 	bl	8000ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC2_Init+0x98>)
 80005f6:	f000 ff1b 	bl	8001430 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000600:	f000 fa6e 	bl	8000ae0 <Error_Handler>
  }

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20004934 	.word	0x20004934
 8000610:	40012100 	.word	0x40012100
 8000614:	0f000001 	.word	0x0f000001

08000618 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a3b      	ldr	r2, [pc, #236]	; (8000724 <HAL_ADC_MspInit+0x10c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d142      	bne.n	80006c0 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	4a39      	ldr	r2, [pc, #228]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	4b37      	ldr	r3, [pc, #220]	; (8000728 <HAL_ADC_MspInit+0x110>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000652:	61bb      	str	r3, [r7, #24]
 8000654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <HAL_ADC_MspInit+0x110>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a32      	ldr	r2, [pc, #200]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b30      	ldr	r3, [pc, #192]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <HAL_ADC_MspInit+0x110>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <HAL_ADC_MspInit+0x110>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = WALL_SEN0_Pin|WALL_SEN1_Pin;
 800068e:	23c0      	movs	r3, #192	; 0xc0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4822      	ldr	r0, [pc, #136]	; (800072c <HAL_ADC_MspInit+0x114>)
 80006a2:	f001 f9c9 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WALL_SEN2_Pin|WALL_SEN3_Pin;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <HAL_ADC_MspInit+0x118>)
 80006ba:	f001 f9bd 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006be:	e02c      	b.n	800071a <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <HAL_ADC_MspInit+0x11c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d127      	bne.n	800071a <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0x110>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BAT_MONI_Pin;
 8000702:	2310      	movs	r3, #16
 8000704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_MONI_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_ADC_MspInit+0x114>)
 8000716:	f001 f98f 	bl	8001a38 <HAL_GPIO_Init>
}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	; 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012000 	.word	0x40012000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	40020400 	.word	0x40020400
 8000734:	40012100 	.word	0x40012100

08000738 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <MX_FREERTOS_Init+0x18>)
 800073e:	2100      	movs	r1, #0
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_FREERTOS_Init+0x1c>)
 8000742:	f003 fb69 	bl	8003e18 <osThreadNew>
 8000746:	4602      	mov	r2, r0
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <MX_FREERTOS_Init+0x20>)
 800074a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08006868 	.word	0x08006868
 8000754:	0800075d 	.word	0x0800075d
 8000758:	200049c4 	.word	0x200049c4

0800075c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f003 fbfd 	bl	8003f64 <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartDefaultTask+0x8>

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b51      	ldr	r3, [pc, #324]	; (80008cc <MX_GPIO_Init+0x160>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a50      	ldr	r2, [pc, #320]	; (80008cc <MX_GPIO_Init+0x160>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <MX_GPIO_Init+0x160>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <MX_GPIO_Init+0x160>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a49      	ldr	r2, [pc, #292]	; (80008cc <MX_GPIO_Init+0x160>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b47      	ldr	r3, [pc, #284]	; (80008cc <MX_GPIO_Init+0x160>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <MX_GPIO_Init+0x160>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a42      	ldr	r2, [pc, #264]	; (80008cc <MX_GPIO_Init+0x160>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b40      	ldr	r3, [pc, #256]	; (80008cc <MX_GPIO_Init+0x160>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <MX_GPIO_Init+0x160>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a3b      	ldr	r2, [pc, #236]	; (80008cc <MX_GPIO_Init+0x160>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b39      	ldr	r3, [pc, #228]	; (80008cc <MX_GPIO_Init+0x160>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24e 311f 	movw	r1, #58143	; 0xe31f
 80007f8:	4835      	ldr	r0, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x164>)
 80007fa:	f001 fab7 	bl	8001d6c <HAL_GPIO_WritePin>
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000804:	4833      	ldr	r0, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x168>)
 8000806:	f001 fab1 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2104      	movs	r1, #4
 800080e:	4832      	ldr	r0, [pc, #200]	; (80008d8 <MX_GPIO_Init+0x16c>)
 8000810:	f001 faac 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	4830      	ldr	r0, [pc, #192]	; (80008dc <MX_GPIO_Init+0x170>)
 800081a:	f001 faa7 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 800081e:	f24e 331f 	movw	r3, #58143	; 0xe31f
 8000822:	617b      	str	r3, [r7, #20]
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4826      	ldr	r0, [pc, #152]	; (80008d0 <MX_GPIO_Init+0x164>)
 8000838:	f001 f8fe 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW0_Pin;
 800083c:	2320      	movs	r3, #32
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4820      	ldr	r0, [pc, #128]	; (80008d0 <MX_GPIO_Init+0x164>)
 8000850:	f001 f8f2 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|IMU_INT_Pin;
 8000854:	2384      	movs	r3, #132	; 0x84
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_GPIO_Init+0x170>)
 8000868:	f001 f8e6 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin;
 800086c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x168>)
 8000886:	f001 f8d7 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800088a:	2304      	movs	r3, #4
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_GPIO_Init+0x16c>)
 80008a2:	f001 f8c9 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_GPIO_Init+0x170>)
 80008be:	f001 f8bb 	bl	8001a38 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020400 	.word	0x40020400

080008e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C2_Init+0x50>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_I2C2_Init+0x54>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C2_Init+0x50>)
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_I2C2_Init+0x58>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C2_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C2_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_I2C2_Init+0x50>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C2_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2C2_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_I2C2_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2C2_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_I2C2_Init+0x50>)
 800091e:	f001 fa3f 	bl	8001da0 <HAL_I2C_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000928:	f000 f8da 	bl	8000ae0 <Error_Handler>
  }

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200049c8 	.word	0x200049c8
 8000934:	40005800 	.word	0x40005800
 8000938:	000186a0 	.word	0x000186a0

0800093c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_I2C_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12c      	bne.n	80009b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800097a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800098c:	2304      	movs	r3, #4
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <HAL_I2C_MspInit+0x8c>)
 8000998:	f001 f84e 	bl	8001a38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 80009a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_I2C_MspInit+0x88>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40005800 	.word	0x40005800
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fc78 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f81a 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f7ff fec8 	bl	800076c <MX_GPIO_Init>
  MX_TIM2_Init();
 80009dc:	f000 fa38 	bl	8000e50 <MX_TIM2_Init>
  MX_TIM1_Init();
 80009e0:	f000 f98a 	bl	8000cf8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80009e4:	f000 fa88 	bl	8000ef8 <MX_TIM5_Init>
  MX_ADC1_Init();
 80009e8:	f7ff fd72 	bl	80004d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009ec:	f7ff fdc2 	bl	8000574 <MX_ADC2_Init>
  MX_SPI1_Init();
 80009f0:	f000 f87e 	bl	8000af0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009f4:	f000 fbca 	bl	800118c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80009f8:	f7ff ff72 	bl	80008e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009fc:	f003 f9a2 	bl	8003d44 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a00:	f7ff fe9a 	bl	8000738 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a04:	f003 f9d2 	bl	8003dac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x3c>
	...

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fefd 	bl	800681a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <SystemClock_Config+0xcc>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <SystemClock_Config+0xd0>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	2310      	movs	r3, #16
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a80:	23a8      	movs	r3, #168	; 0xa8
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fabd 	bl	8002010 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a9c:	f000 f820 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2105      	movs	r1, #5
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fd16 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aca:	f000 f809 	bl	8000ae0 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3750      	adds	r7, #80	; 0x50
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b42:	f001 fea1 	bl	8002888 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f7ff ffc8 	bl	8000ae0 <Error_Handler>
  }

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20004a1c 	.word	0x20004a1c
 8000b58:	40013000 	.word	0x40013000

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <HAL_SPI_MspInit+0xc0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d149      	bne.n	8000c12 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bee:	f000 ff23 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_MISO_Pin|IMU_MOSI_Pin;
 8000bf2:	2330      	movs	r3, #48	; 0x30
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c02:	2305      	movs	r3, #5
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_SPI_MspInit+0xcc>)
 8000c0e:	f000 ff13 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 fb58 	bl	8001368 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cb8:	f004 fd46 	bl	8005748 <xTaskGetSchedulerState>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cc2:	f005 fb19 	bl	80062f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SystemInit+0x28>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <SystemInit+0x28>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SystemInit+0x28>)
 8000ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 fd72 	bl	800681a <memset>

  htim1.Instance = TIM1;
 8000d36:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <MX_TIM1_Init+0x154>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d4a:	f240 3247 	movw	r2, #839	; 0x347
 8000d4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d56:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d62:	4839      	ldr	r0, [pc, #228]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d64:	f001 fdf4 	bl	8002950 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d6e:	f7ff feb7 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4832      	ldr	r0, [pc, #200]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d80:	f001 ff9e 	bl	8002cc0 <HAL_TIM_ConfigClockSource>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d8a:	f7ff fea9 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8e:	482e      	ldr	r0, [pc, #184]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000d90:	f001 fe09 	bl	80029a6 <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d9a:	f7ff fea1 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000daa:	4619      	mov	r1, r3
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000dae:	f002 fb29 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000db8:	f7ff fe92 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4819      	ldr	r0, [pc, #100]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000de2:	f001 fea7 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000dec:	f7ff fe78 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	2204      	movs	r2, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000dfa:	f001 fe9b 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e04:	f7ff fe6c 	bl	8000ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000e2c:	f002 fb66 	bl	80034fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e36:	f7ff fe53 	bl	8000ae0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM1_Init+0x150>)
 8000e3c:	f000 f96c 	bl	8001118 <HAL_TIM_MspPostInit>

}
 8000e40:	bf00      	nop
 8000e42:	3758      	adds	r7, #88	; 0x58
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20004ab4 	.word	0x20004ab4
 8000e4c:	40010000 	.word	0x40010000

08000e50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2224      	movs	r2, #36	; 0x24
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fcdb 	bl	800681a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000ec0:	f001 fda6 	bl	8002a10 <HAL_TIM_Encoder_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eca:	f7ff fe09 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000edc:	f002 fa92 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ee6:	f7ff fdfb 	bl	8000ae0 <Error_Handler>
  }

}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004af4 	.word	0x20004af4

08000ef8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2224      	movs	r2, #36	; 0x24
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 fc87 	bl	800681a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_TIM5_Init+0xa4>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f52:	2301      	movs	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f66:	f001 fd53 	bl	8002a10 <HAL_TIM_Encoder_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f7ff fdb6 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM5_Init+0xa0>)
 8000f82:	f002 fa3f 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f7ff fda8 	bl	8000ae0 <Error_Handler>
  }

}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	; 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20004a74 	.word	0x20004a74
 8000f9c:	40000c00 	.word	0x40000c00

08000fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d14b      	bne.n	800109e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a3e      	ldr	r2, [pc, #248]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a37      	ldr	r2, [pc, #220]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 800105a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4825      	ldr	r0, [pc, #148]	; (800110c <HAL_TIM_Encoder_MspInit+0x128>)
 8001078:	f000 fcde 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 800107c:	2308      	movs	r3, #8
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001098:	f000 fcce 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800109c:	e030      	b.n	8001100 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM5)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_TIM_Encoder_MspInit+0x130>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d12b      	bne.n	8001100 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_TIM_Encoder_MspInit+0x124>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <HAL_TIM_Encoder_MspInit+0x128>)
 80010fc:	f000 fc9c 	bl	8001a38 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40000c00 	.word	0x40000c00

08001118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_TIM_MspPostInit+0x68>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d11e      	bne.n	8001178 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8001156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_TIM_MspPostInit+0x70>)
 8001174:	f000 fc60 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_USART2_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f002 f9ec 	bl	80035a0 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f7ff fc87 	bl	8000ae0 <Error_Handler>
  }

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20004b34 	.word	0x20004b34
 80011dc:	40004400 	.word	0x40004400

080011e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_UART_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x88>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0x88>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_UART_MspInit+0x88>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800123a:	230c      	movs	r3, #12
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124a:	2307      	movs	r3, #7
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0x8c>)
 8001256:	f000 fbef 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004400 	.word	0x40004400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001274:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001276:	e003      	b.n	8001280 <LoopCopyDataInit>

08001278 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800127a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800127c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800127e:	3104      	adds	r1, #4

08001280 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001284:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001286:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001288:	d3f6      	bcc.n	8001278 <CopyDataInit>
  ldr  r2, =_sbss
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800128c:	e002      	b.n	8001294 <LoopFillZerobss>

0800128e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800128e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001290:	f842 3b04 	str.w	r3, [r2], #4

08001294 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001296:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001298:	d3f9      	bcc.n	800128e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129a:	f7ff fd17 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129e:	f005 fa8d 	bl	80067bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fb93 	bl	80009cc <main>
  bx  lr    
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012ac:	080068b4 	.word	0x080068b4
  ldr  r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80012b8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80012bc:	20004bb8 	.word	0x20004bb8

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_Init+0x40>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_Init+0x40>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x40>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 fb6f 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fc98 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fb79 	bl	8001a1e <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f000 fb4f 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20004b74 	.word	0x20004b74

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20004b74 	.word	0x20004b74

080013a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e033      	b.n	8001426 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff f926 	bl	8000618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ee:	f023 0302 	bic.w	r3, r3, #2
 80013f2:	f043 0202 	orr.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f93a 	bl	8001674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
 8001416:	e001      	b.n	800141c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1c>
 8001448:	2302      	movs	r3, #2
 800144a:	e105      	b.n	8001658 <HAL_ADC_ConfigChannel+0x228>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d925      	bls.n	80014a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68d9      	ldr	r1, [r3, #12]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3b1e      	subs	r3, #30
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68d9      	ldr	r1, [r3, #12]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	4603      	mov	r3, r0
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4403      	add	r3, r0
 800149a:	3b1e      	subs	r3, #30
 800149c:	409a      	lsls	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	e022      	b.n	80014ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6919      	ldr	r1, [r3, #16]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	2207      	movs	r2, #7
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6919      	ldr	r1, [r3, #16]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4403      	add	r3, r0
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d824      	bhi.n	8001540 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3b05      	subs	r3, #5
 8001508:	221f      	movs	r2, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	400a      	ands	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b05      	subs	r3, #5
 8001532:	fa00 f203 	lsl.w	r2, r0, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
 800153e:	e04c      	b.n	80015da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d824      	bhi.n	8001592 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b23      	subs	r3, #35	; 0x23
 800155a:	221f      	movs	r2, #31
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43da      	mvns	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	400a      	ands	r2, r1
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b23      	subs	r3, #35	; 0x23
 8001584:	fa00 f203 	lsl.w	r2, r0, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
 8001590:	e023      	b.n	80015da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b41      	subs	r3, #65	; 0x41
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b41      	subs	r3, #65	; 0x41
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_ADC_ConfigChannel+0x234>)
 80015dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <HAL_ADC_ConfigChannel+0x238>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d109      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1cc>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_ADC_ConfigChannel+0x238>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d123      	bne.n	800164e <HAL_ADC_ConfigChannel+0x21e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d003      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x1e6>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b11      	cmp	r3, #17
 8001614:	d11b      	bne.n	800164e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b10      	cmp	r3, #16
 8001628:	d111      	bne.n	800164e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_ADC_ConfigChannel+0x23c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_ADC_ConfigChannel+0x240>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9a      	lsrs	r2, r3, #18
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001640:	e002      	b.n	8001648 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f9      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40012300 	.word	0x40012300
 8001668:	40012000 	.word	0x40012000
 800166c:	20000000 	.word	0x20000000
 8001670:	431bde83 	.word	0x431bde83

08001674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167c:	4b79      	ldr	r3, [pc, #484]	; (8001864 <ADC_Init+0x1f0>)
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	021a      	lsls	r2, r3, #8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <ADC_Init+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800171a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6899      	ldr	r1, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800173c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	e00f      	b.n	8001772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0202 	bic.w	r2, r2, #2
 8001780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
 800178c:	005a      	lsls	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01b      	beq.n	80017d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	3b01      	subs	r3, #1
 80017cc:	035a      	lsls	r2, r3, #13
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e007      	b.n	80017e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	3b01      	subs	r3, #1
 8001804:	051a      	lsls	r2, r3, #20
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800181c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800182a:	025a      	lsls	r2, r3, #9
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	029a      	lsls	r2, r3, #10
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40012300 	.word	0x40012300
 8001868:	0f000001 	.word	0x0f000001

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff47 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff5c 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb0 	bl	800198c <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e16b      	b.n	8001d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 815a 	bne.w	8001d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0xfc>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80b4 	beq.w	8001d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a5e      	ldr	r2, [pc, #376]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00e      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae90 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e11f      	b.n	8001ff2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fdb8 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e04:	f000 fd18 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8001e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d807      	bhi.n	8001e24 <HAL_I2C_Init+0x84>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_I2C_Init+0x260>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e006      	b.n	8001e32 <HAL_I2C_Init+0x92>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a77      	ldr	r2, [pc, #476]	; (8002004 <HAL_I2C_Init+0x264>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0db      	b.n	8001ff2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_I2C_Init+0x268>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a64      	ldr	r2, [pc, #400]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d802      	bhi.n	8001e74 <HAL_I2C_Init+0xd4>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	e009      	b.n	8001e88 <HAL_I2C_Init+0xe8>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_I2C_Init+0x26c>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	3301      	adds	r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4956      	ldr	r1, [pc, #344]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	d80d      	bhi.n	8001ec4 <HAL_I2C_Init+0x124>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e59      	subs	r1, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	bf38      	it	cc
 8001ec0:	2304      	movcc	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x150>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x176>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x17e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x1a4>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e25b      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d075      	beq.n	800211a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	4ba3      	ldr	r3, [pc, #652]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d00c      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b9d      	ldr	r3, [pc, #628]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b99      	ldr	r3, [pc, #612]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05b      	beq.n	8002118 <HAL_RCC_OscConfig+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d157      	bne.n	8002118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e236      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x74>
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a90      	ldr	r2, [pc, #576]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a83      	ldr	r2, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f962 	bl	8001390 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f95e 	bl	8001390 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1fb      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xc0>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff f94e 	bl	8001390 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f94a 	bl	8001390 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1e7      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe8>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d063      	beq.n	80021ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1bb      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4952      	ldr	r1, [pc, #328]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x2b0>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff f903 	bl	8001390 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff f8ff 	bl	8001390 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e19c      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4940      	ldr	r1, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x2b0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f8e2 	bl	8001390 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7ff f8de 	bl	8001390 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e17b      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d030      	beq.n	800225c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x2b4>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f8c2 	bl	8001390 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff f8be 	bl	8001390 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e15b      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x200>
 800222e:	e015      	b.n	800225c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x2b4>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff f8ab 	bl	8001390 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff f8a7 	bl	8001390 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e144      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d121      	bne.n	80022ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7ff f86d 	bl	8001390 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e011      	b.n	80022de <HAL_RCC_OscConfig+0x2ce>
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	42470000 	.word	0x42470000
 80022c4:	42470e80 	.word	0x42470e80
 80022c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7ff f860 	bl	8001390 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0fd      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b81      	ldr	r3, [pc, #516]	; (80024e4 <HAL_RCC_OscConfig+0x4d4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x2f0>
 80022f2:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a7c      	ldr	r2, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x312>
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a76      	ldr	r2, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
 8002314:	4b74      	ldr	r3, [pc, #464]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a73      	ldr	r2, [pc, #460]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x32a>
 8002322:	4b71      	ldr	r3, [pc, #452]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a70      	ldr	r2, [pc, #448]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	4b6e      	ldr	r3, [pc, #440]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a6d      	ldr	r2, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7ff f825 	bl	8001390 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff f821 	bl	8001390 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0bc      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x33a>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff f80f 	bl	8001390 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff f80b 	bl	8001390 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0a6      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8092 	beq.w	80024d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d05c      	beq.n	800247a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d141      	bne.n	800244c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe ffdf 	bl	8001390 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe ffdb 	bl	8001390 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e078      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	019b      	lsls	r3, r3, #6
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	4933      	ldr	r1, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_OscConfig+0x4dc>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe ffb4 	bl	8001390 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe ffb0 	bl	8001390 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04d      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x41c>
 800244a:	e045      	b.n	80024d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x4dc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe ff9d 	bl	8001390 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe ff99 	bl	8001390 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e036      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x44a>
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e029      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_OscConfig+0x4d8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	429a      	cmp	r2, r3
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d115      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10d      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470060 	.word	0x42470060

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fed6 	bl	8001390 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fed2 	bl	8001390 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4601      	mov	r1, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	fa21 f303 	lsr.w	r3, r1, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fe36 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	0800688c 	.word	0x0800688c
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d2:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x32>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d008      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x38>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 808d 	bne.w	8002802 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026ea:	60bb      	str	r3, [r7, #8]
       break;
 80026ec:	e08c      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_RCC_GetSysClockFreq+0x160>)
 80026f0:	60bb      	str	r3, [r7, #8]
      break;
 80026f2:	e089      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	ea03 0501 	and.w	r5, r3, r1
 8002720:	ea04 0602 	and.w	r6, r4, r2
 8002724:	4a3d      	ldr	r2, [pc, #244]	; (800281c <HAL_RCC_GetSysClockFreq+0x160>)
 8002726:	fb02 f106 	mul.w	r1, r2, r6
 800272a:	2200      	movs	r2, #0
 800272c:	fb02 f205 	mul.w	r2, r2, r5
 8002730:	440a      	add	r2, r1
 8002732:	493a      	ldr	r1, [pc, #232]	; (800281c <HAL_RCC_GetSysClockFreq+0x160>)
 8002734:	fba5 0101 	umull	r0, r1, r5, r1
 8002738:	1853      	adds	r3, r2, r1
 800273a:	4619      	mov	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f04f 0400 	mov.w	r4, #0
 8002742:	461a      	mov	r2, r3
 8002744:	4623      	mov	r3, r4
 8002746:	f7fd fd43 	bl	80001d0 <__aeabi_uldivmod>
 800274a:	4603      	mov	r3, r0
 800274c:	460c      	mov	r4, r1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e049      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	f04f 0400 	mov.w	r4, #0
 800275c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	ea03 0501 	and.w	r5, r3, r1
 8002768:	ea04 0602 	and.w	r6, r4, r2
 800276c:	4629      	mov	r1, r5
 800276e:	4632      	mov	r2, r6
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f04f 0400 	mov.w	r4, #0
 8002778:	0154      	lsls	r4, r2, #5
 800277a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800277e:	014b      	lsls	r3, r1, #5
 8002780:	4619      	mov	r1, r3
 8002782:	4622      	mov	r2, r4
 8002784:	1b49      	subs	r1, r1, r5
 8002786:	eb62 0206 	sbc.w	r2, r2, r6
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	0194      	lsls	r4, r2, #6
 8002794:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002798:	018b      	lsls	r3, r1, #6
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	eb64 0402 	sbc.w	r4, r4, r2
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	00e2      	lsls	r2, r4, #3
 80027aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027ae:	00d9      	lsls	r1, r3, #3
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	195b      	adds	r3, r3, r5
 80027b6:	eb44 0406 	adc.w	r4, r4, r6
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	02a2      	lsls	r2, r4, #10
 80027c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027c8:	0299      	lsls	r1, r3, #10
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	461a      	mov	r2, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	f7fd fcf8 	bl	80001d0 <__aeabi_uldivmod>
 80027e0:	4603      	mov	r3, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_GetSysClockFreq+0x158>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	3301      	adds	r3, #1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	60bb      	str	r3, [r7, #8]
      break;
 8002800:	e002      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002804:	60bb      	str	r3, [r7, #8]
      break;
 8002806:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002808:	68bb      	ldr	r3, [r7, #8]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	00f42400 	.word	0x00f42400
 800281c:	017d7840 	.word	0x017d7840

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4601      	mov	r1, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4a03      	ldr	r2, [pc, #12]	; (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	0800689c 	.word	0x0800689c

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002864:	f7ff ffdc 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0b5b      	lsrs	r3, r3, #13
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	0800689c 	.word	0x0800689c

08002888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e056      	b.n	8002948 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe f951 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0104 	and.w	r1, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002936:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e01d      	b.n	800299e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb12 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fa4e 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01d      	b.n	80029f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f815 	bl	80029fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f000 fa23 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e083      	b.n	8002b2c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe fad3 	bl	8000fe4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 f9e3 	bl	8002e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ab0:	f023 030c 	bic.w	r3, r3, #12
 8002ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4313      	orrs	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	011a      	lsls	r2, r3, #4
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4313      	orrs	r3, r2
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0b4      	b.n	8002cb8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	f200 809f 	bhi.w	8002ca4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002ba1 	.word	0x08002ba1
 8002b70:	08002ca5 	.word	0x08002ca5
 8002b74:	08002ca5 	.word	0x08002ca5
 8002b78:	08002ca5 	.word	0x08002ca5
 8002b7c:	08002be1 	.word	0x08002be1
 8002b80:	08002ca5 	.word	0x08002ca5
 8002b84:	08002ca5 	.word	0x08002ca5
 8002b88:	08002ca5 	.word	0x08002ca5
 8002b8c:	08002c23 	.word	0x08002c23
 8002b90:	08002ca5 	.word	0x08002ca5
 8002b94:	08002ca5 	.word	0x08002ca5
 8002b98:	08002ca5 	.word	0x08002ca5
 8002b9c:	08002c63 	.word	0x08002c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f9e2 	bl	8002f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6999      	ldr	r1, [r3, #24]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	619a      	str	r2, [r3, #24]
      break;
 8002bde:	e062      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fa32 	bl	8003050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6999      	ldr	r1, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	021a      	lsls	r2, r3, #8
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	619a      	str	r2, [r3, #24]
      break;
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fa87 	bl	800313c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0208 	orr.w	r2, r2, #8
 8002c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0204 	bic.w	r2, r2, #4
 8002c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69d9      	ldr	r1, [r3, #28]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
      break;
 8002c60:	e021      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fadb 	bl	8003224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	021a      	lsls	r2, r3, #8
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	61da      	str	r2, [r3, #28]
      break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ca4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_ConfigClockSource+0x18>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0a6      	b.n	8002e26 <HAL_TIM_ConfigClockSource+0x166>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d067      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0x120>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d80b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x6c>
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d073      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x140>
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d802      	bhi.n	8002d22 <HAL_TIM_ConfigClockSource+0x62>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d06f      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d20:	e078      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d06c      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x140>
 8002d26:	2b30      	cmp	r3, #48	; 0x30
 8002d28:	d06a      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d2a:	e073      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d00d      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x8c>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d804      	bhi.n	8002d3e <HAL_TIM_ConfigClockSource+0x7e>
 8002d34:	2b50      	cmp	r3, #80	; 0x50
 8002d36:	d033      	beq.n	8002da0 <HAL_TIM_ConfigClockSource+0xe0>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d041      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d3c:	e06a      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d066      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x152>
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d017      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d4a:	e063      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f000 fb32 	bl	80033c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
      break;
 8002d78:	e04c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f000 fb1b 	bl	80033c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9c:	609a      	str	r2, [r3, #8]
      break;
 8002d9e:	e039      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f000 fa8f 	bl	80032d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2150      	movs	r1, #80	; 0x50
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fae8 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002dbe:	e029      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 faae 	bl	800332e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2160      	movs	r1, #96	; 0x60
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fad8 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002dde:	e019      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f000 fa6f 	bl	80032d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fac8 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002dfe:	e009      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 fabf 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e10:	e000      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d00f      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3d      	ldr	r2, [pc, #244]	; (8002f48 <TIM_Base_SetConfig+0x118>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <TIM_Base_SetConfig+0x11c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	; (8002f50 <TIM_Base_SetConfig+0x120>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d027      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <TIM_Base_SetConfig+0x118>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d023      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <TIM_Base_SetConfig+0x11c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <TIM_Base_SetConfig+0x120>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d017      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a28      	ldr	r2, [pc, #160]	; (8002f58 <TIM_Base_SetConfig+0x128>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <TIM_Base_SetConfig+0x12c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <TIM_Base_SetConfig+0x130>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <TIM_Base_SetConfig+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <TIM_Base_SetConfig+0x138>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <TIM_Base_SetConfig+0x13c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <TIM_Base_SetConfig+0xf8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d103      	bne.n	8002f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	615a      	str	r2, [r3, #20]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	40010400 	.word	0x40010400
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	40001800 	.word	0x40001800
 8002f68:	40001c00 	.word	0x40001c00
 8002f6c:	40002000 	.word	0x40002000

08002f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f023 0302 	bic.w	r3, r3, #2
 8002fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a20      	ldr	r2, [pc, #128]	; (8003048 <TIM_OC1_SetConfig+0xd8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x64>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <TIM_OC1_SetConfig+0xdc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0308 	bic.w	r3, r3, #8
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <TIM_OC1_SetConfig+0xd8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_OC1_SetConfig+0x8e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <TIM_OC1_SetConfig+0xdc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800300c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40010000 	.word	0x40010000
 800304c:	40010400 	.word	0x40010400

08003050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0210 	bic.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0320 	bic.w	r3, r3, #32
 800309a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a22      	ldr	r2, [pc, #136]	; (8003134 <TIM_OC2_SetConfig+0xe4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_OC2_SetConfig+0x68>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <TIM_OC2_SetConfig+0xe8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10d      	bne.n	80030d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <TIM_OC2_SetConfig+0xe4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_OC2_SetConfig+0x94>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <TIM_OC2_SetConfig+0xe8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d113      	bne.n	800310c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40010000 	.word	0x40010000
 8003138:	40010400 	.word	0x40010400

0800313c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <TIM_OC3_SetConfig+0xe0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_OC3_SetConfig+0x66>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_OC3_SetConfig+0xe4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10d      	bne.n	80031be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <TIM_OC3_SetConfig+0xe0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_OC3_SetConfig+0x92>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <TIM_OC3_SetConfig+0xe4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d113      	bne.n	80031f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40010000 	.word	0x40010000
 8003220:	40010400 	.word	0x40010400

08003224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800326e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	031b      	lsls	r3, r3, #12
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <TIM_OC4_SetConfig+0xa4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_OC4_SetConfig+0x68>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <TIM_OC4_SetConfig+0xa8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d109      	bne.n	80032a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40010400 	.word	0x40010400

080032d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 030a 	bic.w	r3, r3, #10
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332e:	b480      	push	{r7}
 8003330:	b087      	sub	sp, #28
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0210 	bic.w	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800336a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f043 0307 	orr.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e05a      	b.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d01d      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10c      	bne.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40010400 	.word	0x40010400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40001800 	.word	0x40001800

080034fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003514:	2302      	movs	r3, #2
 8003516:	e03d      	b.n	8003594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e03f      	b.n	8003632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fe0a 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f829 	bl	800363c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800367e:	f023 030c 	bic.w	r3, r3, #12
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	430b      	orrs	r3, r1
 800368a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	f040 818b 	bne.w	80039c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4ac1      	ldr	r2, [pc, #772]	; (80039b8 <UART_SetConfig+0x37c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d005      	beq.n	80036c4 <UART_SetConfig+0x88>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4abf      	ldr	r2, [pc, #764]	; (80039bc <UART_SetConfig+0x380>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f040 80bd 	bne.w	800383e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff f8cc 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 80036c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	461d      	mov	r5, r3
 80036ce:	f04f 0600 	mov.w	r6, #0
 80036d2:	46a8      	mov	r8, r5
 80036d4:	46b1      	mov	r9, r6
 80036d6:	eb18 0308 	adds.w	r3, r8, r8
 80036da:	eb49 0409 	adc.w	r4, r9, r9
 80036de:	4698      	mov	r8, r3
 80036e0:	46a1      	mov	r9, r4
 80036e2:	eb18 0805 	adds.w	r8, r8, r5
 80036e6:	eb49 0906 	adc.w	r9, r9, r6
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036fe:	4688      	mov	r8, r1
 8003700:	4691      	mov	r9, r2
 8003702:	eb18 0005 	adds.w	r0, r8, r5
 8003706:	eb49 0106 	adc.w	r1, r9, r6
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	461d      	mov	r5, r3
 8003710:	f04f 0600 	mov.w	r6, #0
 8003714:	196b      	adds	r3, r5, r5
 8003716:	eb46 0406 	adc.w	r4, r6, r6
 800371a:	461a      	mov	r2, r3
 800371c:	4623      	mov	r3, r4
 800371e:	f7fc fd57 	bl	80001d0 <__aeabi_uldivmod>
 8003722:	4603      	mov	r3, r0
 8003724:	460c      	mov	r4, r1
 8003726:	461a      	mov	r2, r3
 8003728:	4ba5      	ldr	r3, [pc, #660]	; (80039c0 <UART_SetConfig+0x384>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	461d      	mov	r5, r3
 8003738:	f04f 0600 	mov.w	r6, #0
 800373c:	46a9      	mov	r9, r5
 800373e:	46b2      	mov	sl, r6
 8003740:	eb19 0309 	adds.w	r3, r9, r9
 8003744:	eb4a 040a 	adc.w	r4, sl, sl
 8003748:	4699      	mov	r9, r3
 800374a:	46a2      	mov	sl, r4
 800374c:	eb19 0905 	adds.w	r9, r9, r5
 8003750:	eb4a 0a06 	adc.w	sl, sl, r6
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003768:	4689      	mov	r9, r1
 800376a:	4692      	mov	sl, r2
 800376c:	eb19 0005 	adds.w	r0, r9, r5
 8003770:	eb4a 0106 	adc.w	r1, sl, r6
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	461d      	mov	r5, r3
 800377a:	f04f 0600 	mov.w	r6, #0
 800377e:	196b      	adds	r3, r5, r5
 8003780:	eb46 0406 	adc.w	r4, r6, r6
 8003784:	461a      	mov	r2, r3
 8003786:	4623      	mov	r3, r4
 8003788:	f7fc fd22 	bl	80001d0 <__aeabi_uldivmod>
 800378c:	4603      	mov	r3, r0
 800378e:	460c      	mov	r4, r1
 8003790:	461a      	mov	r2, r3
 8003792:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <UART_SetConfig+0x384>)
 8003794:	fba3 1302 	umull	r1, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2164      	movs	r1, #100	; 0x64
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	3332      	adds	r3, #50	; 0x32
 80037a6:	4a86      	ldr	r2, [pc, #536]	; (80039c0 <UART_SetConfig+0x384>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b4:	4498      	add	r8, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	461d      	mov	r5, r3
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	46a9      	mov	r9, r5
 80037c0:	46b2      	mov	sl, r6
 80037c2:	eb19 0309 	adds.w	r3, r9, r9
 80037c6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ca:	4699      	mov	r9, r3
 80037cc:	46a2      	mov	sl, r4
 80037ce:	eb19 0905 	adds.w	r9, r9, r5
 80037d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ea:	4689      	mov	r9, r1
 80037ec:	4692      	mov	sl, r2
 80037ee:	eb19 0005 	adds.w	r0, r9, r5
 80037f2:	eb4a 0106 	adc.w	r1, sl, r6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	461d      	mov	r5, r3
 80037fc:	f04f 0600 	mov.w	r6, #0
 8003800:	196b      	adds	r3, r5, r5
 8003802:	eb46 0406 	adc.w	r4, r6, r6
 8003806:	461a      	mov	r2, r3
 8003808:	4623      	mov	r3, r4
 800380a:	f7fc fce1 	bl	80001d0 <__aeabi_uldivmod>
 800380e:	4603      	mov	r3, r0
 8003810:	460c      	mov	r4, r1
 8003812:	461a      	mov	r2, r3
 8003814:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <UART_SetConfig+0x384>)
 8003816:	fba3 1302 	umull	r1, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2164      	movs	r1, #100	; 0x64
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	3332      	adds	r3, #50	; 0x32
 8003828:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <UART_SetConfig+0x384>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 0207 	and.w	r2, r3, #7
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4442      	add	r2, r8
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e26f      	b.n	8003d1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7fe fffb 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	461d      	mov	r5, r3
 8003848:	f04f 0600 	mov.w	r6, #0
 800384c:	46a8      	mov	r8, r5
 800384e:	46b1      	mov	r9, r6
 8003850:	eb18 0308 	adds.w	r3, r8, r8
 8003854:	eb49 0409 	adc.w	r4, r9, r9
 8003858:	4698      	mov	r8, r3
 800385a:	46a1      	mov	r9, r4
 800385c:	eb18 0805 	adds.w	r8, r8, r5
 8003860:	eb49 0906 	adc.w	r9, r9, r6
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003878:	4688      	mov	r8, r1
 800387a:	4691      	mov	r9, r2
 800387c:	eb18 0005 	adds.w	r0, r8, r5
 8003880:	eb49 0106 	adc.w	r1, r9, r6
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	461d      	mov	r5, r3
 800388a:	f04f 0600 	mov.w	r6, #0
 800388e:	196b      	adds	r3, r5, r5
 8003890:	eb46 0406 	adc.w	r4, r6, r6
 8003894:	461a      	mov	r2, r3
 8003896:	4623      	mov	r3, r4
 8003898:	f7fc fc9a 	bl	80001d0 <__aeabi_uldivmod>
 800389c:	4603      	mov	r3, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <UART_SetConfig+0x384>)
 80038a4:	fba3 2302 	umull	r2, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	461d      	mov	r5, r3
 80038b2:	f04f 0600 	mov.w	r6, #0
 80038b6:	46a9      	mov	r9, r5
 80038b8:	46b2      	mov	sl, r6
 80038ba:	eb19 0309 	adds.w	r3, r9, r9
 80038be:	eb4a 040a 	adc.w	r4, sl, sl
 80038c2:	4699      	mov	r9, r3
 80038c4:	46a2      	mov	sl, r4
 80038c6:	eb19 0905 	adds.w	r9, r9, r5
 80038ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ce:	f04f 0100 	mov.w	r1, #0
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038e2:	4689      	mov	r9, r1
 80038e4:	4692      	mov	sl, r2
 80038e6:	eb19 0005 	adds.w	r0, r9, r5
 80038ea:	eb4a 0106 	adc.w	r1, sl, r6
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	461d      	mov	r5, r3
 80038f4:	f04f 0600 	mov.w	r6, #0
 80038f8:	196b      	adds	r3, r5, r5
 80038fa:	eb46 0406 	adc.w	r4, r6, r6
 80038fe:	461a      	mov	r2, r3
 8003900:	4623      	mov	r3, r4
 8003902:	f7fc fc65 	bl	80001d0 <__aeabi_uldivmod>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	461a      	mov	r2, r3
 800390c:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <UART_SetConfig+0x384>)
 800390e:	fba3 1302 	umull	r1, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2164      	movs	r1, #100	; 0x64
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <UART_SetConfig+0x384>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800392e:	4498      	add	r8, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	461d      	mov	r5, r3
 8003934:	f04f 0600 	mov.w	r6, #0
 8003938:	46a9      	mov	r9, r5
 800393a:	46b2      	mov	sl, r6
 800393c:	eb19 0309 	adds.w	r3, r9, r9
 8003940:	eb4a 040a 	adc.w	r4, sl, sl
 8003944:	4699      	mov	r9, r3
 8003946:	46a2      	mov	sl, r4
 8003948:	eb19 0905 	adds.w	r9, r9, r5
 800394c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003964:	4689      	mov	r9, r1
 8003966:	4692      	mov	sl, r2
 8003968:	eb19 0005 	adds.w	r0, r9, r5
 800396c:	eb4a 0106 	adc.w	r1, sl, r6
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	461d      	mov	r5, r3
 8003976:	f04f 0600 	mov.w	r6, #0
 800397a:	196b      	adds	r3, r5, r5
 800397c:	eb46 0406 	adc.w	r4, r6, r6
 8003980:	461a      	mov	r2, r3
 8003982:	4623      	mov	r3, r4
 8003984:	f7fc fc24 	bl	80001d0 <__aeabi_uldivmod>
 8003988:	4603      	mov	r3, r0
 800398a:	460c      	mov	r4, r1
 800398c:	461a      	mov	r2, r3
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <UART_SetConfig+0x384>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <UART_SetConfig+0x384>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 0207 	and.w	r2, r3, #7
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4442      	add	r2, r8
 80039b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039b6:	e1b2      	b.n	8003d1e <UART_SetConfig+0x6e2>
 80039b8:	40011000 	.word	0x40011000
 80039bc:	40011400 	.word	0x40011400
 80039c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4ad7      	ldr	r2, [pc, #860]	; (8003d28 <UART_SetConfig+0x6ec>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d005      	beq.n	80039da <UART_SetConfig+0x39e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4ad6      	ldr	r2, [pc, #856]	; (8003d2c <UART_SetConfig+0x6f0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 80d1 	bne.w	8003b7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039da:	f7fe ff41 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 80039de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	469a      	mov	sl, r3
 80039e4:	f04f 0b00 	mov.w	fp, #0
 80039e8:	46d0      	mov	r8, sl
 80039ea:	46d9      	mov	r9, fp
 80039ec:	eb18 0308 	adds.w	r3, r8, r8
 80039f0:	eb49 0409 	adc.w	r4, r9, r9
 80039f4:	4698      	mov	r8, r3
 80039f6:	46a1      	mov	r9, r4
 80039f8:	eb18 080a 	adds.w	r8, r8, sl
 80039fc:	eb49 090b 	adc.w	r9, r9, fp
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a14:	4688      	mov	r8, r1
 8003a16:	4691      	mov	r9, r2
 8003a18:	eb1a 0508 	adds.w	r5, sl, r8
 8003a1c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4619      	mov	r1, r3
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	f04f 0400 	mov.w	r4, #0
 8003a32:	0094      	lsls	r4, r2, #2
 8003a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a38:	008b      	lsls	r3, r1, #2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	4631      	mov	r1, r6
 8003a42:	f7fc fbc5 	bl	80001d0 <__aeabi_uldivmod>
 8003a46:	4603      	mov	r3, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4bb8      	ldr	r3, [pc, #736]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	f04f 0c00 	mov.w	ip, #0
 8003a60:	46d9      	mov	r9, fp
 8003a62:	46e2      	mov	sl, ip
 8003a64:	eb19 0309 	adds.w	r3, r9, r9
 8003a68:	eb4a 040a 	adc.w	r4, sl, sl
 8003a6c:	4699      	mov	r9, r3
 8003a6e:	46a2      	mov	sl, r4
 8003a70:	eb19 090b 	adds.w	r9, r9, fp
 8003a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a8c:	4689      	mov	r9, r1
 8003a8e:	4692      	mov	sl, r2
 8003a90:	eb1b 0509 	adds.w	r5, fp, r9
 8003a94:	eb4c 060a 	adc.w	r6, ip, sl
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f04f 0400 	mov.w	r4, #0
 8003aaa:	0094      	lsls	r4, r2, #2
 8003aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	4631      	mov	r1, r6
 8003aba:	f7fc fb89 	bl	80001d0 <__aeabi_uldivmod>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b9a      	ldr	r3, [pc, #616]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	3332      	adds	r3, #50	; 0x32
 8003ad8:	4a95      	ldr	r2, [pc, #596]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae4:	4498      	add	r8, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	469b      	mov	fp, r3
 8003aea:	f04f 0c00 	mov.w	ip, #0
 8003aee:	46d9      	mov	r9, fp
 8003af0:	46e2      	mov	sl, ip
 8003af2:	eb19 0309 	adds.w	r3, r9, r9
 8003af6:	eb4a 040a 	adc.w	r4, sl, sl
 8003afa:	4699      	mov	r9, r3
 8003afc:	46a2      	mov	sl, r4
 8003afe:	eb19 090b 	adds.w	r9, r9, fp
 8003b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1a:	4689      	mov	r9, r1
 8003b1c:	4692      	mov	sl, r2
 8003b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b22:	eb4c 060a 	adc.w	r6, ip, sl
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	0094      	lsls	r4, r2, #2
 8003b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4623      	mov	r3, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	4631      	mov	r1, r6
 8003b48:	f7fc fb42 	bl	80001d0 <__aeabi_uldivmod>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a72      	ldr	r2, [pc, #456]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4442      	add	r2, r8
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	e0d0      	b.n	8003d1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7fe fe5c 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	469a      	mov	sl, r3
 8003b86:	f04f 0b00 	mov.w	fp, #0
 8003b8a:	46d0      	mov	r8, sl
 8003b8c:	46d9      	mov	r9, fp
 8003b8e:	eb18 0308 	adds.w	r3, r8, r8
 8003b92:	eb49 0409 	adc.w	r4, r9, r9
 8003b96:	4698      	mov	r8, r3
 8003b98:	46a1      	mov	r9, r4
 8003b9a:	eb18 080a 	adds.w	r8, r8, sl
 8003b9e:	eb49 090b 	adc.w	r9, r9, fp
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bb6:	4688      	mov	r8, r1
 8003bb8:	4691      	mov	r9, r2
 8003bba:	eb1a 0508 	adds.w	r5, sl, r8
 8003bbe:	eb4b 0609 	adc.w	r6, fp, r9
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	f04f 0400 	mov.w	r4, #0
 8003bd4:	0094      	lsls	r4, r2, #2
 8003bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bda:	008b      	lsls	r3, r1, #2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	4628      	mov	r0, r5
 8003be2:	4631      	mov	r1, r6
 8003be4:	f7fc faf4 	bl	80001d0 <__aeabi_uldivmod>
 8003be8:	4603      	mov	r3, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	469b      	mov	fp, r3
 8003bfe:	f04f 0c00 	mov.w	ip, #0
 8003c02:	46d9      	mov	r9, fp
 8003c04:	46e2      	mov	sl, ip
 8003c06:	eb19 0309 	adds.w	r3, r9, r9
 8003c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c0e:	4699      	mov	r9, r3
 8003c10:	46a2      	mov	sl, r4
 8003c12:	eb19 090b 	adds.w	r9, r9, fp
 8003c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c2e:	4689      	mov	r9, r1
 8003c30:	4692      	mov	sl, r2
 8003c32:	eb1b 0509 	adds.w	r5, fp, r9
 8003c36:	eb4c 060a 	adc.w	r6, ip, sl
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	0094      	lsls	r4, r2, #2
 8003c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c52:	008b      	lsls	r3, r1, #2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4623      	mov	r3, r4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	f7fc fab8 	bl	80001d0 <__aeabi_uldivmod>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a2d      	ldr	r2, [pc, #180]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c86:	4498      	add	r8, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	469b      	mov	fp, r3
 8003c8c:	f04f 0c00 	mov.w	ip, #0
 8003c90:	46d9      	mov	r9, fp
 8003c92:	46e2      	mov	sl, ip
 8003c94:	eb19 0309 	adds.w	r3, r9, r9
 8003c98:	eb4a 040a 	adc.w	r4, sl, sl
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	46a2      	mov	sl, r4
 8003ca0:	eb19 090b 	adds.w	r9, r9, fp
 8003ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cbc:	4689      	mov	r9, r1
 8003cbe:	4692      	mov	sl, r2
 8003cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8003cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	0094      	lsls	r4, r2, #2
 8003cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	4631      	mov	r1, r6
 8003cea:	f7fc fa71 	bl	80001d0 <__aeabi_uldivmod>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2164      	movs	r1, #100	; 0x64
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	; 0x32
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <UART_SetConfig+0x6f4>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4442      	add	r2, r8
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	e7ff      	b.n	8003d1e <UART_SetConfig+0x6e2>
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f

08003d34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4a:	f3ef 8305 	mrs	r3, IPSR
 8003d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d56:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d62:	f3ef 8311 	mrs	r3, BASEPRI
 8003d66:	603b      	str	r3, [r7, #0]
  return(result);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <osKernelInitialize+0x3a>
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <osKernelInitialize+0x64>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d103      	bne.n	8003d7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d76:	f06f 0305 	mvn.w	r3, #5
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e00c      	b.n	8003d98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <osKernelInitialize+0x64>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <osKernelInitialize+0x64>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e002      	b.n	8003d98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d98:	68fb      	ldr	r3, [r7, #12]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000002c 	.word	0x2000002c

08003dac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db2:	f3ef 8305 	mrs	r3, IPSR
 8003db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc2:	607b      	str	r3, [r7, #4]
  return(result);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dca:	f3ef 8311 	mrs	r3, BASEPRI
 8003dce:	603b      	str	r3, [r7, #0]
  return(result);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <osKernelStart+0x3a>
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <osKernelStart+0x68>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d103      	bne.n	8003de6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003dde:	f06f 0305 	mvn.w	r3, #5
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e010      	b.n	8003e08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <osKernelStart+0x68>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d109      	bne.n	8003e02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dee:	f7ff ffa1 	bl	8003d34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <osKernelStart+0x68>)
 8003df4:	2202      	movs	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003df8:	f001 f870 	bl	8004edc <vTaskStartScheduler>
      stat = osOK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e002      	b.n	8003e08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000002c 	.word	0x2000002c

08003e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b090      	sub	sp, #64	; 0x40
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e28:	f3ef 8305 	mrs	r3, IPSR
 8003e2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 808f 	bne.w	8003f54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d105      	bne.n	8003e4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e42:	f3ef 8311 	mrs	r3, BASEPRI
 8003e46:	617b      	str	r3, [r7, #20]
  return(result);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <osThreadNew+0x3e>
 8003e4e:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <osThreadNew+0x148>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d07e      	beq.n	8003f54 <osThreadNew+0x13c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d07b      	beq.n	8003f54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003e60:	2318      	movs	r3, #24
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d045      	beq.n	8003f00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <osThreadNew+0x6a>
        name = attr->name;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <osThreadNew+0x90>
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2b38      	cmp	r3, #56	; 0x38
 8003e9a:	d805      	bhi.n	8003ea8 <osThreadNew+0x90>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <osThreadNew+0x94>
        return (NULL);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e054      	b.n	8003f56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <osThreadNew+0xca>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b5b      	cmp	r3, #91	; 0x5b
 8003eca:	d90a      	bls.n	8003ee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <osThreadNew+0xca>
        mem = 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	e010      	b.n	8003f04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <osThreadNew+0xec>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <osThreadNew+0xec>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <osThreadNew+0xec>
          mem = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	e001      	b.n	8003f04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d110      	bne.n	8003f2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fe09 	bl	8004b38 <xTaskCreateStatic>
 8003f26:	4603      	mov	r3, r0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e013      	b.n	8003f54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d110      	bne.n	8003f54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fe51 	bl	8004bec <xTaskCreate>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <osThreadNew+0x13c>
          hTask = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f54:	693b      	ldr	r3, [r7, #16]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3730      	adds	r7, #48	; 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000002c 	.word	0x2000002c

08003f64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6c:	f3ef 8305 	mrs	r3, IPSR
 8003f70:	613b      	str	r3, [r7, #16]
  return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f78:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f84:	f3ef 8311 	mrs	r3, BASEPRI
 8003f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <osDelay+0x3c>
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <osDelay+0x58>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d103      	bne.n	8003fa0 <osDelay+0x3c>
    stat = osErrorISR;
 8003f98:	f06f 0305 	mvn.w	r3, #5
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e007      	b.n	8003fb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 ff62 	bl	8004e74 <vTaskDelay>
    }
  }

  return (stat);
 8003fb0:	697b      	ldr	r3, [r7, #20]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000002c 	.word	0x2000002c

08003fc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a07      	ldr	r2, [pc, #28]	; (8003fec <vApplicationGetIdleTaskMemory+0x2c>)
 8003fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8003fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000030 	.word	0x20000030
 8003ff0:	2000008c 	.word	0x2000008c

08003ff4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a07      	ldr	r2, [pc, #28]	; (8004020 <vApplicationGetTimerTaskMemory+0x2c>)
 8004004:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a06      	ldr	r2, [pc, #24]	; (8004024 <vApplicationGetTimerTaskMemory+0x30>)
 800400a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	2000028c 	.word	0x2000028c
 8004024:	200002e8 	.word	0x200002e8

08004028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f103 0208 	add.w	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0208 	add.w	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f103 0208 	add.w	r2, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e0:	d103      	bne.n	80040ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e00c      	b.n	8004104 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3308      	adds	r3, #8
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e002      	b.n	80040f8 <vListInsert+0x2e>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	d2f6      	bcs.n	80040f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d103      	bne.n	8004170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	e7fe      	b.n	80041b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80041b8:	f002 f810 	bl	80061dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	3b01      	subs	r3, #1
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22ff      	movs	r2, #255	; 0xff
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d114      	bne.n	8004238 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01a      	beq.n	800424c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3310      	adds	r3, #16
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f8de 	bl	80053dc <xTaskRemoveFromEventList>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <xQueueGenericReset+0xcc>)
 8004228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	e009      	b.n	800424c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3310      	adds	r3, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fef3 	bl	8004028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3324      	adds	r3, #36	; 0x24
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff feee 	bl	8004028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800424c:	f001 fff4 	bl	8006238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004250:	2301      	movs	r3, #1
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <xQueueGenericCreateStatic+0x28>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
 8004286:	e7fe      	b.n	8004286 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <xQueueGenericCreateStatic+0x42>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <xQueueGenericCreateStatic+0x4e>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <xQueueGenericCreateStatic+0x52>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <xQueueGenericCreateStatic+0x54>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <xQueueGenericCreateStatic+0x6c>
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	e7fe      	b.n	80042ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <xQueueGenericCreateStatic+0x78>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <xQueueGenericCreateStatic+0x7c>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <xQueueGenericCreateStatic+0x7e>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <xQueueGenericCreateStatic+0x96>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042f6:	2350      	movs	r3, #80	; 0x50
 80042f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b50      	cmp	r3, #80	; 0x50
 80042fe:	d009      	beq.n	8004314 <xQueueGenericCreateStatic+0xb4>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e7fe      	b.n	8004312 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004314:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004328:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f805 	bl	8004346 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3730      	adds	r7, #48	; 0x30
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e002      	b.n	8004368 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004374:	2101      	movs	r1, #1
 8004376:	69b8      	ldr	r0, [r7, #24]
 8004378:	f7ff ff0a 	bl	8004190 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <xQueueGenericSend+0x30>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ba:	e7fe      	b.n	80043ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSend+0x3e>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSend+0x42>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericSend+0x44>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <xQueueGenericSend+0x5c>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
 80043e6:	e7fe      	b.n	80043e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x6a>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <xQueueGenericSend+0x6e>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <xQueueGenericSend+0x70>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <xQueueGenericSend+0x88>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	e7fe      	b.n	8004412 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004414:	f001 f998 	bl	8005748 <xTaskGetSchedulerState>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <xQueueGenericSend+0x98>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <xQueueGenericSend+0x9c>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <xQueueGenericSend+0x9e>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <xQueueGenericSend+0xb6>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e7fe      	b.n	8004440 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004442:	f001 fecb 	bl	80061dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <xQueueGenericSend+0xcc>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d129      	bne.n	80044ac <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445e:	f000 f9ff 	bl	8004860 <prvCopyDataToQueue>
 8004462:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	4618      	mov	r0, r3
 8004472:	f000 ffb3 	bl	80053dc <xTaskRemoveFromEventList>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <xQueueGenericSend+0x1f0>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	e00a      	b.n	80044a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004494:	4b39      	ldr	r3, [pc, #228]	; (800457c <xQueueGenericSend+0x1f0>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a4:	f001 fec8 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e063      	b.n	8004574 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b2:	f001 fec1 	bl	8006238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e05c      	b.n	8004574 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ffeb 	bl	80054a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044ce:	f001 feb3 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d2:	f000 fd67 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d6:	f001 fe81 	bl	80061dc <vPortEnterCritical>
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d103      	bne.n	80044f0 <xQueueGenericSend+0x164>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fc:	d103      	bne.n	8004506 <xQueueGenericSend+0x17a>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004506:	f001 fe97 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ffda 	bl	80054cc <xTaskCheckForTimeOut>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d124      	bne.n	8004568 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800451e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004520:	f000 fa96 	bl	8004a50 <prvIsQueueFull>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d018      	beq.n	800455c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	3310      	adds	r3, #16
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ff04 	bl	8005340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453a:	f000 fa21 	bl	8004980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800453e:	f000 fd3f 	bl	8004fc0 <xTaskResumeAll>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f af7c 	bne.w	8004442 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <xQueueGenericSend+0x1f0>)
 800454c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	e772      	b.n	8004442 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800455c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800455e:	f000 fa0f 	bl	8004980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004562:	f000 fd2d 	bl	8004fc0 <xTaskResumeAll>
 8004566:	e76c      	b.n	8004442 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456a:	f000 fa09 	bl	8004980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456e:	f000 fd27 	bl	8004fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004574:	4618      	mov	r0, r3
 8004576:	3738      	adds	r7, #56	; 0x38
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08e      	sub	sp, #56	; 0x38
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <xQueueGenericSendFromISR+0x2c>
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e7fe      	b.n	80045aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <xQueueGenericSendFromISR+0x3a>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <xQueueGenericSendFromISR+0x3e>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericSendFromISR+0x40>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <xQueueGenericSendFromISR+0x58>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	e7fe      	b.n	80045d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d103      	bne.n	80045e6 <xQueueGenericSendFromISR+0x66>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <xQueueGenericSendFromISR+0x6a>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueGenericSendFromISR+0x6c>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <xQueueGenericSendFromISR+0x84>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	e7fe      	b.n	8004602 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004604:	f001 fec6 	bl	8006394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004608:	f3ef 8211 	mrs	r2, BASEPRI
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61ba      	str	r2, [r7, #24]
 800461e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004620:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <xQueueGenericSendFromISR+0xb6>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d12c      	bne.n	8004690 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004646:	f000 f90b 	bl	8004860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800464a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004652:	d112      	bne.n	800467a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d016      	beq.n	800468a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	3324      	adds	r3, #36	; 0x24
 8004660:	4618      	mov	r0, r3
 8004662:	f000 febb 	bl	80053dc <xTaskRemoveFromEventList>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e007      	b.n	800468a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800467a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800467e:	3301      	adds	r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	b25a      	sxtb	r2, r3
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800468a:	2301      	movs	r3, #1
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800468e:	e001      	b.n	8004694 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3738      	adds	r7, #56	; 0x38
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <xQueueReceive+0x2e>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	e7fe      	b.n	80046d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <xQueueReceive+0x3c>
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <xQueueReceive+0x40>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <xQueueReceive+0x42>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <xQueueReceive+0x5a>
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e7fe      	b.n	8004700 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004702:	f001 f821 	bl	8005748 <xTaskGetSchedulerState>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <xQueueReceive+0x6a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <xQueueReceive+0x6e>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <xQueueReceive+0x70>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <xQueueReceive+0x88>
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e7fe      	b.n	800472e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004730:	f001 fd54 	bl	80061dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01f      	beq.n	8004780 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004744:	f000 f8f6 	bl	8004934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1e5a      	subs	r2, r3, #1
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	3310      	adds	r3, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fe3d 	bl	80053dc <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <xQueueReceive+0x1b4>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004778:	f001 fd5e 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	e069      	b.n	8004854 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004786:	f001 fd57 	bl	8006238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800478a:	2300      	movs	r3, #0
 800478c:	e062      	b.n	8004854 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004794:	f107 0310 	add.w	r3, r7, #16
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fe81 	bl	80054a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a2:	f001 fd49 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a6:	f000 fbfd 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047aa:	f001 fd17 	bl	80061dc <vPortEnterCritical>
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ba:	d103      	bne.n	80047c4 <xQueueReceive+0x11c>
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d103      	bne.n	80047da <xQueueReceive+0x132>
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047da:	f001 fd2d 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047de:	1d3a      	adds	r2, r7, #4
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fe70 	bl	80054cc <xTaskCheckForTimeOut>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d123      	bne.n	800483a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f4:	f000 f916 	bl	8004a24 <prvIsQueueEmpty>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd9a 	bl	8005340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800480c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480e:	f000 f8b7 	bl	8004980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004812:	f000 fbd5 	bl	8004fc0 <xTaskResumeAll>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d189      	bne.n	8004730 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <xQueueReceive+0x1b4>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	e780      	b.n	8004730 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800482e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004830:	f000 f8a6 	bl	8004980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004834:	f000 fbc4 	bl	8004fc0 <xTaskResumeAll>
 8004838:	e77a      	b.n	8004730 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800483a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800483c:	f000 f8a0 	bl	8004980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004840:	f000 fbbe 	bl	8004fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004846:	f000 f8ed 	bl	8004a24 <prvIsQueueEmpty>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f43f af6f 	beq.w	8004730 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004854:	4618      	mov	r0, r3
 8004856:	3730      	adds	r7, #48	; 0x30
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	e000ed04 	.word	0xe000ed04

08004860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d14d      	bne.n	8004922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 ff7a 	bl	8005784 <xTaskPriorityDisinherit>
 8004890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e043      	b.n	8004922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d119      	bne.n	80048d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6858      	ldr	r0, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f001 ffaa 	bl	8006804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d32b      	bcc.n	8004922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	e026      	b.n	8004922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68d8      	ldr	r0, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	461a      	mov	r2, r3
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	f001 ff90 	bl	8006804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	425b      	negs	r3, r3
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d207      	bcs.n	8004910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	425b      	negs	r3, r3
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d105      	bne.n	8004922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3b01      	subs	r3, #1
 8004920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800492a:	697b      	ldr	r3, [r7, #20]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d303      	bcc.n	8004968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68d9      	ldr	r1, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	461a      	mov	r2, r3
 8004972:	6838      	ldr	r0, [r7, #0]
 8004974:	f001 ff46 	bl	8006804 <memcpy>
	}
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004988:	f001 fc28 	bl	80061dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004994:	e011      	b.n	80049ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3324      	adds	r3, #36	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fd1a 	bl	80053dc <xTaskRemoveFromEventList>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049ae:	f000 fded 	bl	800558c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dce9      	bgt.n	8004996 <prvUnlockQueue+0x16>
 80049c2:	e000      	b.n	80049c6 <prvUnlockQueue+0x46>
					break;
 80049c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049ce:	f001 fc33 	bl	8006238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049d2:	f001 fc03 	bl	80061dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049de:	e011      	b.n	8004a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3310      	adds	r3, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fcf5 	bl	80053dc <xTaskRemoveFromEventList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049f8:	f000 fdc8 	bl	800558c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dce9      	bgt.n	80049e0 <prvUnlockQueue+0x60>
 8004a0c:	e000      	b.n	8004a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a18:	f001 fc0e 	bl	8006238 <vPortExitCritical>
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a2c:	f001 fbd6 	bl	80061dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e001      	b.n	8004a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f001 fbf9 	bl	8006238 <vPortExitCritical>

	return xReturn;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a58:	f001 fbc0 	bl	80061dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d102      	bne.n	8004a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e001      	b.n	8004a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a72:	f001 fbe1 	bl	8006238 <vPortExitCritical>

	return xReturn;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e014      	b.n	8004aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <vQueueAddToRegistry+0x4c>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a9c:	490b      	ldr	r1, [pc, #44]	; (8004acc <vQueueAddToRegistry+0x4c>)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <vQueueAddToRegistry+0x4c>)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ab2:	e005      	b.n	8004ac0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d9e7      	bls.n	8004a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20004b78 	.word	0x20004b78

08004ad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ae0:	f001 fb7c 	bl	80061dc <vPortEnterCritical>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aea:	b25b      	sxtb	r3, r3
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af0:	d103      	bne.n	8004afa <vQueueWaitForMessageRestricted+0x2a>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d103      	bne.n	8004b10 <vQueueWaitForMessageRestricted+0x40>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b10:	f001 fb92 	bl	8006238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fc2f 	bl	8005388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff28 	bl	8004980 <prvUnlockQueue>
	}
 8004b30:	bf00      	nop
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <xTaskCreateStatic+0x28>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	e7fe      	b.n	8004b5e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <xTaskCreateStatic+0x42>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e7fe      	b.n	8004b78 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b7a:	235c      	movs	r3, #92	; 0x5c
 8004b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b5c      	cmp	r3, #92	; 0x5c
 8004b82:	d009      	beq.n	8004b98 <xTaskCreateStatic+0x60>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e7fe      	b.n	8004b96 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01e      	beq.n	8004bde <xTaskCreateStatic+0xa6>
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01b      	beq.n	8004bde <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9303      	str	r3, [sp, #12]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f850 	bl	8004c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd8:	f000 f8dc 	bl	8004d94 <prvAddNewTaskToReadyList>
 8004bdc:	e001      	b.n	8004be2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004be2:	697b      	ldr	r3, [r7, #20]
	}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af04      	add	r7, sp, #16
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fc05 	bl	8006410 <pvPortMalloc>
 8004c06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c0e:	205c      	movs	r0, #92	; 0x5c
 8004c10:	f001 fbfe 	bl	8006410 <pvPortMalloc>
 8004c14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
 8004c22:	e005      	b.n	8004c30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f001 fcb5 	bl	8006594 <vPortFree>
 8004c2a:	e001      	b.n	8004c30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d017      	beq.n	8004c66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9303      	str	r3, [sp, #12]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	9302      	str	r3, [sp, #8]
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f80e 	bl	8004c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c5a:	69f8      	ldr	r0, [r7, #28]
 8004c5c:	f000 f89a 	bl	8004d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c60:	2301      	movs	r3, #1
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e002      	b.n	8004c6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	21a5      	movs	r1, #165	; 0xa5
 8004c90:	f001 fdc3 	bl	800681a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <prvInitialiseNewTask+0x56>
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e7fe      	b.n	8004cca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01f      	beq.n	8004d12 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	e012      	b.n	8004cfe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	7819      	ldrb	r1, [r3, #0]
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3334      	adds	r3, #52	; 0x34
 8004ce8:	460a      	mov	r2, r1
 8004cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d006      	beq.n	8004d06 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b0f      	cmp	r3, #15
 8004d02:	d9e9      	bls.n	8004cd8 <prvInitialiseNewTask+0x62>
 8004d04:	e000      	b.n	8004d08 <prvInitialiseNewTask+0x92>
			{
				break;
 8004d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d10:	e003      	b.n	8004d1a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	2b37      	cmp	r3, #55	; 0x37
 8004d1e:	d901      	bls.n	8004d24 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d20:	2337      	movs	r3, #55	; 0x37
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f994 	bl	8004068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	3318      	adds	r3, #24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff f98f 	bl	8004068 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	69b8      	ldr	r0, [r7, #24]
 8004d74:	f001 f90c 	bl	8005f90 <pxPortInitialiseStack>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d9c:	f001 fa1e 	bl	80061dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <prvAddNewTaskToReadyList+0xc4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <prvAddNewTaskToReadyList+0xc4>)
 8004da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004daa:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <prvAddNewTaskToReadyList+0xc8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004db2:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <prvAddNewTaskToReadyList+0xc8>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <prvAddNewTaskToReadyList+0xc4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d110      	bne.n	8004de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dc0:	f000 fc08 	bl	80055d4 <prvInitialiseTaskLists>
 8004dc4:	e00d      	b.n	8004de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <prvAddNewTaskToReadyList+0xcc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <prvAddNewTaskToReadyList+0xc8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d802      	bhi.n	8004de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <prvAddNewTaskToReadyList+0xc8>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <prvAddNewTaskToReadyList+0xd0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <prvAddNewTaskToReadyList+0xd0>)
 8004dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <prvAddNewTaskToReadyList+0xd0>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <prvAddNewTaskToReadyList+0xd4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d903      	bls.n	8004e08 <prvAddNewTaskToReadyList+0x74>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <prvAddNewTaskToReadyList+0xd4>)
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <prvAddNewTaskToReadyList+0xd8>)
 8004e16:	441a      	add	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7ff f92f 	bl	8004082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e24:	f001 fa08 	bl	8006238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <prvAddNewTaskToReadyList+0xcc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d207      	bcs.n	8004e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <prvAddNewTaskToReadyList+0xdc>)
 8004e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000bbc 	.word	0x20000bbc
 8004e5c:	200006e8 	.word	0x200006e8
 8004e60:	20000bc8 	.word	0x20000bc8
 8004e64:	20000bd8 	.word	0x20000bd8
 8004e68:	20000bc4 	.word	0x20000bc4
 8004e6c:	200006ec 	.word	0x200006ec
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <vTaskDelay+0x60>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <vTaskDelay+0x2e>
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	e7fe      	b.n	8004ea0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004ea2:	f000 f87f 	bl	8004fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fcd7 	bl	800585c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eae:	f000 f887 	bl	8004fc0 <xTaskResumeAll>
 8004eb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <vTaskDelay+0x64>)
 8004ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000be4 	.word	0x20000be4
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eea:	463a      	mov	r2, r7
 8004eec:	1d39      	adds	r1, r7, #4
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f864 	bl	8003fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	9202      	str	r2, [sp, #8]
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	460a      	mov	r2, r1
 8004f0a:	4920      	ldr	r1, [pc, #128]	; (8004f8c <vTaskStartScheduler+0xb0>)
 8004f0c:	4820      	ldr	r0, [pc, #128]	; (8004f90 <vTaskStartScheduler+0xb4>)
 8004f0e:	f7ff fe13 	bl	8004b38 <xTaskCreateStatic>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <vTaskStartScheduler+0xb8>)
 8004f16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <vTaskStartScheduler+0xb8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e001      	b.n	8004f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f30:	f000 fce8 	bl	8005904 <xTimerCreateTimerTask>
 8004f34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d115      	bne.n	8004f68 <vTaskStartScheduler+0x8c>
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <vTaskStartScheduler+0xbc>)
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <vTaskStartScheduler+0xc0>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <vTaskStartScheduler+0xc4>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f62:	f001 f89d 	bl	80060a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f66:	e00d      	b.n	8004f84 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f6e:	d109      	bne.n	8004f84 <vTaskStartScheduler+0xa8>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e7fe      	b.n	8004f82 <vTaskStartScheduler+0xa6>
}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	08006850 	.word	0x08006850
 8004f90:	080055a5 	.word	0x080055a5
 8004f94:	20000be0 	.word	0x20000be0
 8004f98:	20000bdc 	.word	0x20000bdc
 8004f9c:	20000bc8 	.word	0x20000bc8
 8004fa0:	20000bc0 	.word	0x20000bc0

08004fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004fb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000be4 	.word	0x20000be4

08004fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <xTaskResumeAll+0x114>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <xTaskResumeAll+0x2a>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fea:	f001 f8f7 	bl	80061dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fee:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <xTaskResumeAll+0x114>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	4a37      	ldr	r2, [pc, #220]	; (80050d4 <xTaskResumeAll+0x114>)
 8004ff6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <xTaskResumeAll+0x114>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d162      	bne.n	80050c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <xTaskResumeAll+0x118>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05e      	beq.n	80050c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005008:	e02f      	b.n	800506a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500a:	4b34      	ldr	r3, [pc, #208]	; (80050dc <xTaskResumeAll+0x11c>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3318      	adds	r3, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f890 	bl	800413c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff f88b 	bl	800413c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <xTaskResumeAll+0x120>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <xTaskResumeAll+0x7a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <xTaskResumeAll+0x120>)
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <xTaskResumeAll+0x124>)
 8005048:	441a      	add	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7ff f816 	bl	8004082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <xTaskResumeAll+0x128>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <xTaskResumeAll+0x12c>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <xTaskResumeAll+0x11c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1cb      	bne.n	800500a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005078:	f000 fb46 	bl	8005708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <xTaskResumeAll+0x130>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005088:	f000 f846 	bl	8005118 <xTaskIncrementTick>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005092:	4b16      	ldr	r3, [pc, #88]	; (80050ec <xTaskResumeAll+0x12c>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3b01      	subs	r3, #1
 800509c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f1      	bne.n	8005088 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <xTaskResumeAll+0x130>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <xTaskResumeAll+0x12c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <xTaskResumeAll+0x134>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050c6:	f001 f8b7 	bl	8006238 <vPortExitCritical>

	return xAlreadyYielded;
 80050ca:	68bb      	ldr	r3, [r7, #8]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000be4 	.word	0x20000be4
 80050d8:	20000bbc 	.word	0x20000bbc
 80050dc:	20000b7c 	.word	0x20000b7c
 80050e0:	20000bc4 	.word	0x20000bc4
 80050e4:	200006ec 	.word	0x200006ec
 80050e8:	200006e8 	.word	0x200006e8
 80050ec:	20000bd0 	.word	0x20000bd0
 80050f0:	20000bcc 	.word	0x20000bcc
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <xTaskGetTickCount+0x1c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005104:	687b      	ldr	r3, [r7, #4]
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000bc0 	.word	0x20000bc0

08005118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005122:	4b4e      	ldr	r3, [pc, #312]	; (800525c <xTaskIncrementTick+0x144>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 8088 	bne.w	800523c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <xTaskIncrementTick+0x148>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005134:	4a4a      	ldr	r2, [pc, #296]	; (8005260 <xTaskIncrementTick+0x148>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11f      	bne.n	8005180 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <xTaskIncrementTick+0x14c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <xTaskIncrementTick+0x46>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	e7fe      	b.n	800515c <xTaskIncrementTick+0x44>
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <xTaskIncrementTick+0x14c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <xTaskIncrementTick+0x150>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <xTaskIncrementTick+0x14c>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4a3e      	ldr	r2, [pc, #248]	; (8005268 <xTaskIncrementTick+0x150>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4b3e      	ldr	r3, [pc, #248]	; (800526c <xTaskIncrementTick+0x154>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a3c      	ldr	r2, [pc, #240]	; (800526c <xTaskIncrementTick+0x154>)
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	f000 fac4 	bl	8005708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <xTaskIncrementTick+0x158>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d349      	bcc.n	800521e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518a:	4b36      	ldr	r3, [pc, #216]	; (8005264 <xTaskIncrementTick+0x14c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005194:	4b36      	ldr	r3, [pc, #216]	; (8005270 <xTaskIncrementTick+0x158>)
 8005196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800519a:	601a      	str	r2, [r3, #0]
					break;
 800519c:	e03f      	b.n	800521e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <xTaskIncrementTick+0x14c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d203      	bcs.n	80051be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051b6:	4a2e      	ldr	r2, [pc, #184]	; (8005270 <xTaskIncrementTick+0x158>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051bc:	e02f      	b.n	800521e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe ffba 	bl	800413c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3318      	adds	r3, #24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe ffb1 	bl	800413c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	4b25      	ldr	r3, [pc, #148]	; (8005274 <xTaskIncrementTick+0x15c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d903      	bls.n	80051ee <xTaskIncrementTick+0xd6>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <xTaskIncrementTick+0x15c>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <xTaskIncrementTick+0x160>)
 80051fc:	441a      	add	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fe ff3c 	bl	8004082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <xTaskIncrementTick+0x164>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b8      	bcc.n	800518a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521c:	e7b5      	b.n	800518a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <xTaskIncrementTick+0x164>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4914      	ldr	r1, [pc, #80]	; (8005278 <xTaskIncrementTick+0x160>)
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d907      	bls.n	8005246 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e004      	b.n	8005246 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <xTaskIncrementTick+0x168>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <xTaskIncrementTick+0x168>)
 8005244:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <xTaskIncrementTick+0x16c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800524e:	2301      	movs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000be4 	.word	0x20000be4
 8005260:	20000bc0 	.word	0x20000bc0
 8005264:	20000b74 	.word	0x20000b74
 8005268:	20000b78 	.word	0x20000b78
 800526c:	20000bd4 	.word	0x20000bd4
 8005270:	20000bdc 	.word	0x20000bdc
 8005274:	20000bc4 	.word	0x20000bc4
 8005278:	200006ec 	.word	0x200006ec
 800527c:	200006e8 	.word	0x200006e8
 8005280:	20000bcc 	.word	0x20000bcc
 8005284:	20000bd0 	.word	0x20000bd0

08005288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <vTaskSwitchContext+0xa4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <vTaskSwitchContext+0xa8>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800529c:	e040      	b.n	8005320 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <vTaskSwitchContext+0xa8>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <vTaskSwitchContext+0xac>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e00f      	b.n	80052cc <vTaskSwitchContext+0x44>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <vTaskSwitchContext+0x3e>
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	e7fe      	b.n	80052c4 <vTaskSwitchContext+0x3c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	491a      	ldr	r1, [pc, #104]	; (8005338 <vTaskSwitchContext+0xb0>)
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0e5      	beq.n	80052ac <vTaskSwitchContext+0x24>
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4a13      	ldr	r2, [pc, #76]	; (8005338 <vTaskSwitchContext+0xb0>)
 80052ec:	4413      	add	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3308      	adds	r3, #8
 8005302:	429a      	cmp	r2, r3
 8005304:	d104      	bne.n	8005310 <vTaskSwitchContext+0x88>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <vTaskSwitchContext+0xb4>)
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vTaskSwitchContext+0xac>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000be4 	.word	0x20000be4
 8005330:	20000bd0 	.word	0x20000bd0
 8005334:	20000bc4 	.word	0x20000bc4
 8005338:	200006ec 	.word	0x200006ec
 800533c:	200006e8 	.word	0x200006e8

08005340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <vTaskPlaceOnEventList+0x24>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e7fe      	b.n	8005362 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <vTaskPlaceOnEventList+0x44>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3318      	adds	r3, #24
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fe feac 	bl	80040ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005372:	2101      	movs	r1, #1
 8005374:	6838      	ldr	r0, [r7, #0]
 8005376:	f000 fa71 	bl	800585c <prvAddCurrentTaskToDelayedList>
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200006e8 	.word	0x200006e8

08005388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <vTaskPlaceOnEventListRestricted+0x26>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e7fe      	b.n	80053ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3318      	adds	r3, #24
 80053b4:	4619      	mov	r1, r3
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7fe fe63 	bl	8004082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f000 fa46 	bl	800585c <prvAddCurrentTaskToDelayedList>
	}
 80053d0:	bf00      	nop
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200006e8 	.word	0x200006e8

080053dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <xTaskRemoveFromEventList+0x2a>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e7fe      	b.n	8005404 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3318      	adds	r3, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fe96 	bl	800413c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <xTaskRemoveFromEventList+0xac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11d      	bne.n	8005454 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fe8d 	bl	800413c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <xTaskRemoveFromEventList+0xb0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d903      	bls.n	8005436 <xTaskRemoveFromEventList+0x5a>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <xTaskRemoveFromEventList+0xb0>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <xTaskRemoveFromEventList+0xb4>)
 8005444:	441a      	add	r2, r3
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7fe fe18 	bl	8004082 <vListInsertEnd>
 8005452:	e005      	b.n	8005460 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3318      	adds	r3, #24
 8005458:	4619      	mov	r1, r3
 800545a:	480e      	ldr	r0, [pc, #56]	; (8005494 <xTaskRemoveFromEventList+0xb8>)
 800545c:	f7fe fe11 	bl	8004082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <xTaskRemoveFromEventList+0xbc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	429a      	cmp	r2, r3
 800546c:	d905      	bls.n	800547a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <xTaskRemoveFromEventList+0xc0>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e001      	b.n	800547e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000be4 	.word	0x20000be4
 800548c:	20000bc4 	.word	0x20000bc4
 8005490:	200006ec 	.word	0x200006ec
 8005494:	20000b7c 	.word	0x20000b7c
 8005498:	200006e8 	.word	0x200006e8
 800549c:	20000bd0 	.word	0x20000bd0

080054a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <vTaskInternalSetTimeOutState+0x24>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <vTaskInternalSetTimeOutState+0x28>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000bd4 	.word	0x20000bd4
 80054c8:	20000bc0 	.word	0x20000bc0

080054cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <xTaskCheckForTimeOut+0x24>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e7fe      	b.n	80054ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <xTaskCheckForTimeOut+0x3e>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e7fe      	b.n	8005508 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800550a:	f000 fe67 	bl	80061dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800550e:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <xTaskCheckForTimeOut+0xb8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005526:	d102      	bne.n	800552e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	e023      	b.n	8005576 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <xTaskCheckForTimeOut+0xbc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d007      	beq.n	800554a <xTaskCheckForTimeOut+0x7e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e015      	b.n	8005576 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	429a      	cmp	r2, r3
 8005552:	d20b      	bcs.n	800556c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ff9d 	bl	80054a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e004      	b.n	8005576 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005576:	f000 fe5f 	bl	8006238 <vPortExitCritical>

	return xReturn;
 800557a:	69fb      	ldr	r3, [r7, #28]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000bc0 	.word	0x20000bc0
 8005588:	20000bd4 	.word	0x20000bd4

0800558c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <vTaskMissedYield+0x14>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000bd0 	.word	0x20000bd0

080055a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055ac:	f000 f852 	bl	8005654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <prvIdleTask+0x28>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d9f9      	bls.n	80055ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <prvIdleTask+0x2c>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055c8:	e7f0      	b.n	80055ac <prvIdleTask+0x8>
 80055ca:	bf00      	nop
 80055cc:	200006ec 	.word	0x200006ec
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	e00c      	b.n	80055fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a12      	ldr	r2, [pc, #72]	; (8005634 <prvInitialiseTaskLists+0x60>)
 80055ec:	4413      	add	r3, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fd1a 	bl	8004028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3301      	adds	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b37      	cmp	r3, #55	; 0x37
 80055fe:	d9ef      	bls.n	80055e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005600:	480d      	ldr	r0, [pc, #52]	; (8005638 <prvInitialiseTaskLists+0x64>)
 8005602:	f7fe fd11 	bl	8004028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005606:	480d      	ldr	r0, [pc, #52]	; (800563c <prvInitialiseTaskLists+0x68>)
 8005608:	f7fe fd0e 	bl	8004028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800560c:	480c      	ldr	r0, [pc, #48]	; (8005640 <prvInitialiseTaskLists+0x6c>)
 800560e:	f7fe fd0b 	bl	8004028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005612:	480c      	ldr	r0, [pc, #48]	; (8005644 <prvInitialiseTaskLists+0x70>)
 8005614:	f7fe fd08 	bl	8004028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005618:	480b      	ldr	r0, [pc, #44]	; (8005648 <prvInitialiseTaskLists+0x74>)
 800561a:	f7fe fd05 	bl	8004028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <prvInitialiseTaskLists+0x78>)
 8005620:	4a05      	ldr	r2, [pc, #20]	; (8005638 <prvInitialiseTaskLists+0x64>)
 8005622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005624:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <prvInitialiseTaskLists+0x7c>)
 8005626:	4a05      	ldr	r2, [pc, #20]	; (800563c <prvInitialiseTaskLists+0x68>)
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200006ec 	.word	0x200006ec
 8005638:	20000b4c 	.word	0x20000b4c
 800563c:	20000b60 	.word	0x20000b60
 8005640:	20000b7c 	.word	0x20000b7c
 8005644:	20000b90 	.word	0x20000b90
 8005648:	20000ba8 	.word	0x20000ba8
 800564c:	20000b74 	.word	0x20000b74
 8005650:	20000b78 	.word	0x20000b78

08005654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800565a:	e019      	b.n	8005690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800565c:	f000 fdbe 	bl	80061dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <prvCheckTasksWaitingTermination+0x4c>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fd65 	bl	800413c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <prvCheckTasksWaitingTermination+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <prvCheckTasksWaitingTermination+0x50>)
 800567a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <prvCheckTasksWaitingTermination+0x54>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3b01      	subs	r3, #1
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <prvCheckTasksWaitingTermination+0x54>)
 8005684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005686:	f000 fdd7 	bl	8006238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f80e 	bl	80056ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <prvCheckTasksWaitingTermination+0x54>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e1      	bne.n	800565c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000b90 	.word	0x20000b90
 80056a4:	20000bbc 	.word	0x20000bbc
 80056a8:	20000ba4 	.word	0x20000ba4

080056ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ff66 	bl	8006594 <vPortFree>
				vPortFree( pxTCB );
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 ff63 	bl	8006594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ce:	e017      	b.n	8005700 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d103      	bne.n	80056e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 ff5a 	bl	8006594 <vPortFree>
	}
 80056e0:	e00e      	b.n	8005700 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d009      	beq.n	8005700 <prvDeleteTCB+0x54>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e7fe      	b.n	80056fe <prvDeleteTCB+0x52>
	}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <prvResetNextTaskUnblockTime+0x38>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <prvResetNextTaskUnblockTime+0x3c>)
 800571a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800571e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005720:	e008      	b.n	8005734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <prvResetNextTaskUnblockTime+0x38>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <prvResetNextTaskUnblockTime+0x3c>)
 8005732:	6013      	str	r3, [r2, #0]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000b74 	.word	0x20000b74
 8005744:	20000bdc 	.word	0x20000bdc

08005748 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <xTaskGetSchedulerState+0x34>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005756:	2301      	movs	r3, #1
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	e008      	b.n	800576e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <xTaskGetSchedulerState+0x38>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005764:	2302      	movs	r3, #2
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	e001      	b.n	800576e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800576e:	687b      	ldr	r3, [r7, #4]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000bc8 	.word	0x20000bc8
 8005780:	20000be4 	.word	0x20000be4

08005784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d054      	beq.n	8005844 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800579a:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <xTaskPriorityDisinherit+0xcc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d009      	beq.n	80057b8 <xTaskPriorityDisinherit+0x34>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e7fe      	b.n	80057b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <xTaskPriorityDisinherit+0x50>
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	e7fe      	b.n	80057d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d02c      	beq.n	8005844 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d128      	bne.n	8005844 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fca0 	bl	800413c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <xTaskPriorityDisinherit+0xd0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d903      	bls.n	8005824 <xTaskPriorityDisinherit+0xa0>
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <xTaskPriorityDisinherit+0xd0>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <xTaskPriorityDisinherit+0xd4>)
 8005832:	441a      	add	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fc21 	bl	8004082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200006e8 	.word	0x200006e8
 8005854:	20000bc4 	.word	0x20000bc4
 8005858:	200006ec 	.word	0x200006ec

0800585c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3304      	adds	r3, #4
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe fc62 	bl	800413c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587e:	d10a      	bne.n	8005896 <prvAddCurrentTaskToDelayedList+0x3a>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4819      	ldr	r0, [pc, #100]	; (80058f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005890:	f7fe fbf7 	bl	8004082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005894:	e026      	b.n	80058e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800589e:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d209      	bcs.n	80058c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7fe fc05 	bl	80040ca <vListInsert>
}
 80058c0:	e010      	b.n	80058e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c2:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe fbfb 	bl	80040ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d202      	bcs.n	80058e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058de:	4a08      	ldr	r2, [pc, #32]	; (8005900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000bc0 	.word	0x20000bc0
 80058f0:	200006e8 	.word	0x200006e8
 80058f4:	20000ba8 	.word	0x20000ba8
 80058f8:	20000b78 	.word	0x20000b78
 80058fc:	20000b74 	.word	0x20000b74
 8005900:	20000bdc 	.word	0x20000bdc

08005904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800590e:	f000 faff 	bl	8005f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <xTimerCreateTimerTask+0x80>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d021      	beq.n	800595e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005922:	1d3a      	adds	r2, r7, #4
 8005924:	f107 0108 	add.w	r1, r7, #8
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fb61 	bl	8003ff4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	9202      	str	r2, [sp, #8]
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	2302      	movs	r3, #2
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2300      	movs	r3, #0
 8005942:	460a      	mov	r2, r1
 8005944:	4910      	ldr	r1, [pc, #64]	; (8005988 <xTimerCreateTimerTask+0x84>)
 8005946:	4811      	ldr	r0, [pc, #68]	; (800598c <xTimerCreateTimerTask+0x88>)
 8005948:	f7ff f8f6 	bl	8004b38 <xTaskCreateStatic>
 800594c:	4602      	mov	r2, r0
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <xTimerCreateTimerTask+0x8c>)
 8005950:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <xTimerCreateTimerTask+0x8c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800595a:	2301      	movs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <xTimerCreateTimerTask+0x74>
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e7fe      	b.n	8005976 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000c18 	.word	0x20000c18
 8005988:	08006858 	.word	0x08006858
 800598c:	08005ac5 	.word	0x08005ac5
 8005990:	20000c1c 	.word	0x20000c1c

08005994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <xTimerGenericCommand+0x2c>
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	e7fe      	b.n	80059be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <xTimerGenericCommand+0x94>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02a      	beq.n	8005a1e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	dc18      	bgt.n	8005a0c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059da:	f7ff feb5 	bl	8005748 <xTaskGetSchedulerState>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d109      	bne.n	80059f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059e4:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <xTimerGenericCommand+0x94>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	f107 0110 	add.w	r1, r7, #16
 80059ec:	2300      	movs	r3, #0
 80059ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f0:	f7fe fccc 	bl	800438c <xQueueGenericSend>
 80059f4:	6278      	str	r0, [r7, #36]	; 0x24
 80059f6:	e012      	b.n	8005a1e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <xTimerGenericCommand+0x94>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	f107 0110 	add.w	r1, r7, #16
 8005a00:	2300      	movs	r3, #0
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fe fcc2 	bl	800438c <xQueueGenericSend>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24
 8005a0a:	e008      	b.n	8005a1e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <xTimerGenericCommand+0x94>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	f107 0110 	add.w	r1, r7, #16
 8005a14:	2300      	movs	r3, #0
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	f7fe fdb2 	bl	8004580 <xQueueGenericSendFromISR>
 8005a1c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000c18 	.word	0x20000c18

08005a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <prvProcessExpiredTimer+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fb79 	bl	800413c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d021      	beq.n	8005a9c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	18d1      	adds	r1, r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f000 f8d1 	bl	8005c0c <prvInsertTimerInActiveList>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f7ff ff8a 	bl	8005994 <xTimerGenericCommand>
 8005a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d112      	bne.n	8005aae <prvProcessExpiredTimer+0x82>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e7fe      	b.n	8005a9a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	4798      	blx	r3
}
 8005ab6:	bf00      	nop
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000c10 	.word	0x20000c10

08005ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005acc:	f107 0308 	add.w	r3, r7, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f857 	bl	8005b84 <prvGetNextExpireTime>
 8005ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f803 	bl	8005ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ae2:	f000 f8d5 	bl	8005c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae6:	e7f1      	b.n	8005acc <prvTimerTask+0x8>

08005ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005af2:	f7ff fa57 	bl	8004fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f866 	bl	8005bcc <prvSampleTimeNow>
 8005b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d130      	bne.n	8005b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d806      	bhi.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b16:	f7ff fa53 	bl	8004fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff85 	bl	8005a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b22:	e024      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <prvProcessTimerOrBlockTask+0x90>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <prvProcessTimerOrBlockTask+0x50>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <prvProcessTimerOrBlockTask+0x52>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvProcessTimerOrBlockTask+0x94>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fe ffc1 	bl	8004ad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f7ff fa37 	bl	8004fc0 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <prvProcessTimerOrBlockTask+0x98>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
}
 8005b68:	e001      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b6a:	f7ff fa29 	bl	8004fc0 <xTaskResumeAll>
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000c14 	.word	0x20000c14
 8005b7c:	20000c18 	.word	0x20000c18
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <prvGetNextExpireTime+0x16>
 8005b96:	2201      	movs	r2, #1
 8005b98:	e000      	b.n	8005b9c <prvGetNextExpireTime+0x18>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e001      	b.n	8005bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000c10 	.word	0x20000c10

08005bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd4:	f7ff fa90 	bl	80050f8 <xTaskGetTickCount>
 8005bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d205      	bcs.n	8005bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be4:	f000 f930 	bl	8005e48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bf6:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000c20 	.word	0x20000c20

08005c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d812      	bhi.n	8005c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e01b      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <prvInsertTimerInActiveList+0x7c>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fe fa3a 	bl	80040ca <vListInsert>
 8005c56:	e012      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d206      	bcs.n	8005c6e <prvInsertTimerInActiveList+0x62>
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e007      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <prvInsertTimerInActiveList+0x80>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fe fa26 	bl	80040ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000c14 	.word	0x20000c14
 8005c8c:	20000c10 	.word	0x20000c10

08005c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	; 0x38
 8005c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c96:	e0c6      	b.n	8005e26 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da17      	bge.n	8005cce <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <prvProcessReceivedCommands+0x2e>
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	e7fe      	b.n	8005cbc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc4:	6850      	ldr	r0, [r2, #4]
 8005cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc8:	6892      	ldr	r2, [r2, #8]
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f2c0 80a7 	blt.w	8005e24 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fa28 	bl	800413c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cec:	463b      	mov	r3, r7
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ff6c 	bl	8005bcc <prvSampleTimeNow>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	f200 8094 	bhi.w	8005e26 <prvProcessReceivedCommands+0x196>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <prvProcessReceivedCommands+0x74>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d9f 	.word	0x08005d9f
 8005d14:	08005db3 	.word	0x08005db3
 8005d18:	08005dfb 	.word	0x08005dfb
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d2d 	.word	0x08005d2d
 8005d24:	08005d9f 	.word	0x08005d9f
 8005d28:	08005db3 	.word	0x08005db3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	18d1      	adds	r1, r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4c:	f7ff ff5e 	bl	8005c0c <prvInsertTimerInActiveList>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d067      	beq.n	8005e26 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05c      	beq.n	8005e26 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	441a      	add	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7e:	f7ff fe09 	bl	8005994 <xTimerGenericCommand>
 8005d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14d      	bne.n	8005e26 <prvProcessReceivedCommands+0x196>
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e7fe      	b.n	8005d9c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005db0:	e039      	b.n	8005e26 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <prvProcessReceivedCommands+0x156>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e7fe      	b.n	8005de4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	18d1      	adds	r1, r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df4:	f7ff ff0a 	bl	8005c0c <prvInsertTimerInActiveList>
					break;
 8005df8:	e015      	b.n	8005e26 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0a:	f000 fbc3 	bl	8006594 <vPortFree>
 8005e0e:	e00a      	b.n	8005e26 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e22:	e000      	b.n	8005e26 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <prvProcessReceivedCommands+0x1b4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1d39      	adds	r1, r7, #4
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fc3a 	bl	80046a8 <xQueueReceive>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f47f af2e 	bne.w	8005c98 <prvProcessReceivedCommands+0x8>
	}
}
 8005e3c:	bf00      	nop
 8005e3e:	3730      	adds	r7, #48	; 0x30
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000c18 	.word	0x20000c18

08005e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e4e:	e047      	b.n	8005ee0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5a:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe f967 	bl	800413c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d02d      	beq.n	8005ee0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d90e      	bls.n	8005eb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fe f90c 	bl	80040ca <vListInsert>
 8005eb2:	e015      	b.n	8005ee0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fd68 	bl	8005994 <xTimerGenericCommand>
 8005ec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d109      	bne.n	8005ee0 <prvSwitchTimerLists+0x98>
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	e7fe      	b.n	8005ede <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1b2      	bne.n	8005e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005eea:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <prvSwitchTimerLists+0xc4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ef6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ef8:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <prvSwitchTimerLists+0xc4>)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000c10 	.word	0x20000c10
 8005f0c:	20000c14 	.word	0x20000c14

08005f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f16:	f000 f961 	bl	80061dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f1a:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d120      	bne.n	8005f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f22:	4814      	ldr	r0, [pc, #80]	; (8005f74 <prvCheckForValidListAndQueue+0x64>)
 8005f24:	f7fe f880 	bl	8004028 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f28:	4813      	ldr	r0, [pc, #76]	; (8005f78 <prvCheckForValidListAndQueue+0x68>)
 8005f2a:	f7fe f87d 	bl	8004028 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <prvCheckForValidListAndQueue+0x6c>)
 8005f30:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <prvCheckForValidListAndQueue+0x64>)
 8005f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <prvCheckForValidListAndQueue+0x70>)
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <prvCheckForValidListAndQueue+0x68>)
 8005f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <prvCheckForValidListAndQueue+0x74>)
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <prvCheckForValidListAndQueue+0x78>)
 8005f42:	2110      	movs	r1, #16
 8005f44:	200a      	movs	r0, #10
 8005f46:	f7fe f98b 	bl	8004260 <xQueueGenericCreateStatic>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	490b      	ldr	r1, [pc, #44]	; (8005f8c <prvCheckForValidListAndQueue+0x7c>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fd8e 	bl	8004a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f000 f968 	bl	8006238 <vPortExitCritical>
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000c18 	.word	0x20000c18
 8005f74:	20000be8 	.word	0x20000be8
 8005f78:	20000bfc 	.word	0x20000bfc
 8005f7c:	20000c10 	.word	0x20000c10
 8005f80:	20000c14 	.word	0x20000c14
 8005f84:	20000cc4 	.word	0x20000cc4
 8005f88:	20000c24 	.word	0x20000c24
 8005f8c:	08006860 	.word	0x08006860

08005f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc0:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <pxPortInitialiseStack+0x64>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b14      	subs	r3, #20
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f06f 0202 	mvn.w	r2, #2
 8005fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b20      	subs	r3, #32
 8005fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	08005ff9 	.word	0x08005ff9

08005ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <prvTaskExitError+0x50>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800600a:	d009      	beq.n	8006020 <prvTaskExitError+0x28>
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e7fe      	b.n	800601e <prvTaskExitError+0x26>
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006032:	bf00      	nop
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0fc      	beq.n	8006034 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c
 800604c:	00000000 	.word	0x00000000

08006050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pxCurrentTCBConst2>)
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f380 8809 	msr	PSP, r0
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	4770      	bx	lr
 800606c:	f3af 8000 	nop.w

08006070 <pxCurrentTCBConst2>:
 8006070:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <prvPortStartFirstTask+0x24>)
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f380 8808 	msr	MSP, r0
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8814 	msr	CONTROL, r0
 800608a:	b662      	cpsie	i
 800608c:	b661      	cpsie	f
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	df00      	svc	0
 8006098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800609a:	bf00      	nop
 800609c:	e000ed08 	.word	0xe000ed08

080060a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060a6:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <xPortStartScheduler+0x118>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a44      	ldr	r2, [pc, #272]	; (80061bc <xPortStartScheduler+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d109      	bne.n	80060c4 <xPortStartScheduler+0x24>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e7fe      	b.n	80060c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c4:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <xPortStartScheduler+0x118>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3d      	ldr	r2, [pc, #244]	; (80061c0 <xPortStartScheduler+0x120>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d109      	bne.n	80060e2 <xPortStartScheduler+0x42>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e7fe      	b.n	80060e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060e2:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <xPortStartScheduler+0x124>)
 80060e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <xPortStartScheduler+0x128>)
 8006108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <xPortStartScheduler+0x12c>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006110:	e009      	b.n	8006126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006112:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <xPortStartScheduler+0x12c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <xPortStartScheduler+0x12c>)
 800611a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d0ef      	beq.n	8006112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <xPortStartScheduler+0x12c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1c3 0307 	rsb	r3, r3, #7
 800613a:	2b04      	cmp	r3, #4
 800613c:	d009      	beq.n	8006152 <xPortStartScheduler+0xb2>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	e7fe      	b.n	8006150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006152:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <xPortStartScheduler+0x12c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <xPortStartScheduler+0x12c>)
 800615a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <xPortStartScheduler+0x12c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <xPortStartScheduler+0x12c>)
 8006166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <xPortStartScheduler+0x130>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <xPortStartScheduler+0x130>)
 8006176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800617a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <xPortStartScheduler+0x130>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <xPortStartScheduler+0x130>)
 8006182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006188:	f000 f8d6 	bl	8006338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xPortStartScheduler+0x134>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006192:	f000 f8f5 	bl	8006380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <xPortStartScheduler+0x138>)
 800619c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061a2:	f7ff ff69 	bl	8006078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061a6:	f7ff f86f 	bl	8005288 <vTaskSwitchContext>
	prvTaskExitError();
 80061aa:	f7ff ff25 	bl	8005ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	410fc271 	.word	0x410fc271
 80061c0:	410fc270 	.word	0x410fc270
 80061c4:	e000e400 	.word	0xe000e400
 80061c8:	20000d14 	.word	0x20000d14
 80061cc:	20000d18 	.word	0x20000d18
 80061d0:	e000ed20 	.word	0xe000ed20
 80061d4:	2000000c 	.word	0x2000000c
 80061d8:	e000ef34 	.word	0xe000ef34

080061dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <vPortEnterCritical+0x54>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <vPortEnterCritical+0x54>)
 80061fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <vPortEnterCritical+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10e      	bne.n	8006224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <vPortEnterCritical+0x58>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <vPortEnterCritical+0x48>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	e7fe      	b.n	8006222 <vPortEnterCritical+0x46>
	}
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	2000000c 	.word	0x2000000c
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <vPortExitCritical+0x4c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <vPortExitCritical+0x22>
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	e7fe      	b.n	8006258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <vPortExitCritical+0x4c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3b01      	subs	r3, #1
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <vPortExitCritical+0x4c>)
 8006262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <vPortExitCritical+0x4c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <vPortExitCritical+0x3e>
 800626c:	2300      	movs	r3, #0
 800626e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
	...

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f01e 0f10 	tst.w	lr, #16
 80062a0:	bf08      	it	eq
 80062a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062b4:	f380 8811 	msr	BASEPRI, r0
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f7fe ffe2 	bl	8005288 <vTaskSwitchContext>
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f380 8811 	msr	BASEPRI, r0
 80062cc:	bc09      	pop	{r0, r3}
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	6808      	ldr	r0, [r1, #0]
 80062d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d6:	f01e 0f10 	tst.w	lr, #16
 80062da:	bf08      	it	eq
 80062dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062e0:	f380 8809 	msr	PSP, r0
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst>:
 80062f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006310:	f7fe ff02 	bl	8005118 <xTaskIncrementTick>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <xPortSysTickHandler+0x3c>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	2300      	movs	r3, #0
 8006324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <vPortSetupTimerInterrupt+0x34>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortSetupTimerInterrupt+0x38>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortSetupTimerInterrupt+0x3c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <vPortSetupTimerInterrupt+0x40>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <vPortSetupTimerInterrupt+0x44>)
 8006356:	3b01      	subs	r3, #1
 8006358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <vPortSetupTimerInterrupt+0x34>)
 800635c:	2207      	movs	r2, #7
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	e000e010 	.word	0xe000e010
 8006370:	e000e018 	.word	0xe000e018
 8006374:	20000000 	.word	0x20000000
 8006378:	10624dd3 	.word	0x10624dd3
 800637c:	e000e014 	.word	0xe000e014

08006380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006390 <vPortEnableVFP+0x10>
 8006384:	6801      	ldr	r1, [r0, #0]
 8006386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800638a:	6001      	str	r1, [r0, #0]
 800638c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800638e:	bf00      	nop
 8006390:	e000ed88 	.word	0xe000ed88

08006394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800639a:	f3ef 8305 	mrs	r3, IPSR
 800639e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	d913      	bls.n	80063ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <vPortValidateInterruptPriority+0x6c>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <vPortValidateInterruptPriority+0x70>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	7afa      	ldrb	r2, [r7, #11]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d209      	bcs.n	80063ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e7fe      	b.n	80063cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063ce:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <vPortValidateInterruptPriority+0x74>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <vPortValidateInterruptPriority+0x78>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d909      	bls.n	80063f2 <vPortValidateInterruptPriority+0x5e>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	e7fe      	b.n	80063f0 <vPortValidateInterruptPriority+0x5c>
	}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	e000e3f0 	.word	0xe000e3f0
 8006404:	20000d14 	.word	0x20000d14
 8006408:	e000ed0c 	.word	0xe000ed0c
 800640c:	20000d18 	.word	0x20000d18

08006410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800641c:	f7fe fdc2 	bl	8004fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006420:	4b57      	ldr	r3, [pc, #348]	; (8006580 <pvPortMalloc+0x170>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006428:	f000 f90c 	bl	8006644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800642c:	4b55      	ldr	r3, [pc, #340]	; (8006584 <pvPortMalloc+0x174>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 808c 	bne.w	8006552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01c      	beq.n	800647a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006440:	2208      	movs	r2, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	3308      	adds	r3, #8
 800645a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <pvPortMalloc+0x6a>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e7fe      	b.n	8006478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d068      	beq.n	8006552 <pvPortMalloc+0x142>
 8006480:	4b41      	ldr	r3, [pc, #260]	; (8006588 <pvPortMalloc+0x178>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d863      	bhi.n	8006552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800648a:	4b40      	ldr	r3, [pc, #256]	; (800658c <pvPortMalloc+0x17c>)
 800648c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800648e:	4b3f      	ldr	r3, [pc, #252]	; (800658c <pvPortMalloc+0x17c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006494:	e004      	b.n	80064a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <pvPortMalloc+0xa2>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064b2:	4b33      	ldr	r3, [pc, #204]	; (8006580 <pvPortMalloc+0x170>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d04a      	beq.n	8006552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	2308      	movs	r3, #8
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d91e      	bls.n	800651c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <pvPortMalloc+0xf4>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e7fe      	b.n	8006502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006516:	69b8      	ldr	r0, [r7, #24]
 8006518:	f000 f8f6 	bl	8006708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <pvPortMalloc+0x178>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <pvPortMalloc+0x178>)
 8006528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800652a:	4b17      	ldr	r3, [pc, #92]	; (8006588 <pvPortMalloc+0x178>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <pvPortMalloc+0x180>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d203      	bcs.n	800653e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <pvPortMalloc+0x178>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a15      	ldr	r2, [pc, #84]	; (8006590 <pvPortMalloc+0x180>)
 800653c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4b10      	ldr	r3, [pc, #64]	; (8006584 <pvPortMalloc+0x174>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	431a      	orrs	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006552:	f7fe fd35 	bl	8004fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <pvPortMalloc+0x164>
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e7fe      	b.n	8006572 <pvPortMalloc+0x162>
	return pvReturn;
 8006574:	69fb      	ldr	r3, [r7, #28]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3728      	adds	r7, #40	; 0x28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20004924 	.word	0x20004924
 8006584:	20004930 	.word	0x20004930
 8006588:	20004928 	.word	0x20004928
 800658c:	2000491c 	.word	0x2000491c
 8006590:	2000492c 	.word	0x2000492c

08006594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d046      	beq.n	8006634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065a6:	2308      	movs	r3, #8
 80065a8:	425b      	negs	r3, r3
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <vPortFree+0xa8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <vPortFree+0x42>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e7fe      	b.n	80065d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <vPortFree+0x5e>
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	e7fe      	b.n	80065f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <vPortFree+0xa8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d019      	beq.n	8006634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d115      	bne.n	8006634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <vPortFree+0xa8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006618:	f7fe fcc4 	bl	8004fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <vPortFree+0xac>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4413      	add	r3, r2
 8006626:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vPortFree+0xac>)
 8006628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f000 f86c 	bl	8006708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006630:	f7fe fcc6 	bl	8004fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006634:	bf00      	nop
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20004930 	.word	0x20004930
 8006640:	20004928 	.word	0x20004928

08006644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800664a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800664e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <prvHeapInit+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3307      	adds	r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <prvHeapInit+0xac>)
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <prvHeapInit+0xb0>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <prvHeapInit+0xb0>)
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <prvHeapInit+0xb4>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvHeapInit+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvHeapInit+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvHeapInit+0xb4>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <prvHeapInit+0xb8>)
 80066d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <prvHeapInit+0xbc>)
 80066da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvHeapInit+0xc0>)
 80066de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000d1c 	.word	0x20000d1c
 80066f4:	2000491c 	.word	0x2000491c
 80066f8:	20004924 	.word	0x20004924
 80066fc:	2000492c 	.word	0x2000492c
 8006700:	20004928 	.word	0x20004928
 8006704:	20004930 	.word	0x20004930

08006708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <prvInsertBlockIntoFreeList+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <prvInsertBlockIntoFreeList+0x14>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d8f7      	bhi.n	8006716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d118      	bne.n	8006790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d00d      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e008      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e003      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d002      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000491c 	.word	0x2000491c
 80067b8:	20004924 	.word	0x20004924

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4e0d      	ldr	r6, [pc, #52]	; (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	; (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1ba4      	subs	r4, r4, r6
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2500      	movs	r5, #0
 80067c8:	42a5      	cmp	r5, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4e0b      	ldr	r6, [pc, #44]	; (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	; (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 f82c 	bl	800682c <_init>
 80067d4:	1ba4      	subs	r4, r4, r6
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2500      	movs	r5, #0
 80067da:	42a5      	cmp	r5, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067e4:	4798      	blx	r3
 80067e6:	3501      	adds	r5, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ee:	4798      	blx	r3
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	080068ac 	.word	0x080068ac
 80067f8:	080068ac 	.word	0x080068ac
 80067fc:	080068ac 	.word	0x080068ac
 8006800:	080068b0 	.word	0x080068b0

08006804 <memcpy>:
 8006804:	b510      	push	{r4, lr}
 8006806:	1e43      	subs	r3, r0, #1
 8006808:	440a      	add	r2, r1
 800680a:	4291      	cmp	r1, r2
 800680c:	d100      	bne.n	8006810 <memcpy+0xc>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	e7f7      	b.n	800680a <memcpy+0x6>

0800681a <memset>:
 800681a:	4402      	add	r2, r0
 800681c:	4603      	mov	r3, r0
 800681e:	4293      	cmp	r3, r2
 8006820:	d100      	bne.n	8006824 <memset+0xa>
 8006822:	4770      	bx	lr
 8006824:	f803 1b01 	strb.w	r1, [r3], #1
 8006828:	e7f9      	b.n	800681e <memset+0x4>
	...

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
