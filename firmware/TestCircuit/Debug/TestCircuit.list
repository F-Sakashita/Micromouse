
TestCircuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08008af8  08008af8  00018af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e90  08008e90  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e98  08008e98  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  200001d8  08009078  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08009078  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014749  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000387b  00000000  00000000  0003494f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  000381d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  00039108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d0a  00000000  00000000  00039e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d545  00000000  00000000  0005cb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a937a  00000000  00000000  0006a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc0  00000000  00000000  001134cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008adc 	.word	0x08008adc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008adc 	.word	0x08008adc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	d1ed      	bne.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f000 b972 	b.w	80010c0 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	4688      	mov	r8, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14b      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4615      	mov	r5, r2
 8000e06:	d967      	bls.n	8000ed8 <__udivmoddi4+0xe4>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0720 	rsb	r7, r2, #32
 8000e12:	fa01 f302 	lsl.w	r3, r1, r2
 8000e16:	fa20 f707 	lsr.w	r7, r0, r7
 8000e1a:	4095      	lsls	r5, r2
 8000e1c:	ea47 0803 	orr.w	r8, r7, r3
 8000e20:	4094      	lsls	r4, r2
 8000e22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e26:	0c23      	lsrs	r3, r4, #16
 8000e28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000e2c:	fa1f fc85 	uxth.w	ip, r5
 8000e30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000e34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e38:	fb07 f10c 	mul.w	r1, r7, ip
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x60>
 8000e40:	18eb      	adds	r3, r5, r3
 8000e42:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e46:	f080 811b 	bcs.w	8001080 <__udivmoddi4+0x28c>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 8118 	bls.w	8001080 <__udivmoddi4+0x28c>
 8000e50:	3f02      	subs	r7, #2
 8000e52:	442b      	add	r3, r5
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e68:	45a4      	cmp	ip, r4
 8000e6a:	d909      	bls.n	8000e80 <__udivmoddi4+0x8c>
 8000e6c:	192c      	adds	r4, r5, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e72:	f080 8107 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	f240 8104 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	442c      	add	r4, r5
 8000e80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e84:	eba4 040c 	sub.w	r4, r4, ip
 8000e88:	2700      	movs	r7, #0
 8000e8a:	b11e      	cbz	r6, 8000e94 <__udivmoddi4+0xa0>
 8000e8c:	40d4      	lsrs	r4, r2
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e9c6 4300 	strd	r4, r3, [r6]
 8000e94:	4639      	mov	r1, r7
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0xbe>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80eb 	beq.w	800107a <__udivmoddi4+0x286>
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e9c6 0100 	strd	r0, r1, [r6]
 8000eaa:	4638      	mov	r0, r7
 8000eac:	4639      	mov	r1, r7
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f783 	clz	r7, r3
 8000eb6:	2f00      	cmp	r7, #0
 8000eb8:	d147      	bne.n	8000f4a <__udivmoddi4+0x156>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0xd0>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80fa 	bhi.w	80010b8 <__udivmoddi4+0x2c4>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0303 	sbc.w	r3, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	4698      	mov	r8, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d0e0      	beq.n	8000e94 <__udivmoddi4+0xa0>
 8000ed2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ed6:	e7dd      	b.n	8000e94 <__udivmoddi4+0xa0>
 8000ed8:	b902      	cbnz	r2, 8000edc <__udivmoddi4+0xe8>
 8000eda:	deff      	udf	#255	; 0xff
 8000edc:	fab2 f282 	clz	r2, r2
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	f040 808f 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee6:	1b49      	subs	r1, r1, r5
 8000ee8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eec:	fa1f f885 	uxth.w	r8, r5
 8000ef0:	2701      	movs	r7, #1
 8000ef2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ef6:	0c23      	lsrs	r3, r4, #16
 8000ef8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb08 f10c 	mul.w	r1, r8, ip
 8000f04:	4299      	cmp	r1, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f08:	18eb      	adds	r3, r5, r3
 8000f0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4299      	cmp	r1, r3
 8000f12:	f200 80cd 	bhi.w	80010b0 <__udivmoddi4+0x2bc>
 8000f16:	4684      	mov	ip, r0
 8000f18:	1a59      	subs	r1, r3, r1
 8000f1a:	b2a3      	uxth	r3, r4
 8000f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000f24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f28:	fb08 f800 	mul.w	r8, r8, r0
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x14c>
 8000f30:	192c      	adds	r4, r5, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x14a>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	f200 80b6 	bhi.w	80010aa <__udivmoddi4+0x2b6>
 8000f3e:	4618      	mov	r0, r3
 8000f40:	eba4 0408 	sub.w	r4, r4, r8
 8000f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f48:	e79f      	b.n	8000e8a <__udivmoddi4+0x96>
 8000f4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000f4e:	40bb      	lsls	r3, r7
 8000f50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f58:	fa01 f407 	lsl.w	r4, r1, r7
 8000f5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f68:	4325      	orrs	r5, r4
 8000f6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f6e:	0c2c      	lsrs	r4, r5, #16
 8000f70:	fb08 3319 	mls	r3, r8, r9, r3
 8000f74:	fa1f fa8e 	uxth.w	sl, lr
 8000f78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000f80:	429c      	cmp	r4, r3
 8000f82:	fa02 f207 	lsl.w	r2, r2, r7
 8000f86:	fa00 f107 	lsl.w	r1, r0, r7
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000f90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f94:	f080 8087 	bcs.w	80010a6 <__udivmoddi4+0x2b2>
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	f240 8084 	bls.w	80010a6 <__udivmoddi4+0x2b2>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4473      	add	r3, lr
 8000fa4:	1b1b      	subs	r3, r3, r4
 8000fa6:	b2ad      	uxth	r5, r5
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000fb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000fb8:	45a2      	cmp	sl, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fc4:	d26b      	bcs.n	800109e <__udivmoddi4+0x2aa>
 8000fc6:	45a2      	cmp	sl, r4
 8000fc8:	d969      	bls.n	800109e <__udivmoddi4+0x2aa>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4474      	add	r4, lr
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fd6:	eba4 040a 	sub.w	r4, r4, sl
 8000fda:	454c      	cmp	r4, r9
 8000fdc:	46c2      	mov	sl, r8
 8000fde:	464b      	mov	r3, r9
 8000fe0:	d354      	bcc.n	800108c <__udivmoddi4+0x298>
 8000fe2:	d051      	beq.n	8001088 <__udivmoddi4+0x294>
 8000fe4:	2e00      	cmp	r6, #0
 8000fe6:	d069      	beq.n	80010bc <__udivmoddi4+0x2c8>
 8000fe8:	ebb1 050a 	subs.w	r5, r1, sl
 8000fec:	eb64 0403 	sbc.w	r4, r4, r3
 8000ff0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ff4:	40fd      	lsrs	r5, r7
 8000ff6:	40fc      	lsrs	r4, r7
 8000ff8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ffc:	e9c6 5400 	strd	r5, r4, [r6]
 8001000:	2700      	movs	r7, #0
 8001002:	e747      	b.n	8000e94 <__udivmoddi4+0xa0>
 8001004:	f1c2 0320 	rsb	r3, r2, #32
 8001008:	fa20 f703 	lsr.w	r7, r0, r3
 800100c:	4095      	lsls	r5, r2
 800100e:	fa01 f002 	lsl.w	r0, r1, r2
 8001012:	fa21 f303 	lsr.w	r3, r1, r3
 8001016:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800101a:	4338      	orrs	r0, r7
 800101c:	0c01      	lsrs	r1, r0, #16
 800101e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001022:	fa1f f885 	uxth.w	r8, r5
 8001026:	fb0e 3317 	mls	r3, lr, r7, r3
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb07 f308 	mul.w	r3, r7, r8
 8001032:	428b      	cmp	r3, r1
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d907      	bls.n	800104a <__udivmoddi4+0x256>
 800103a:	1869      	adds	r1, r5, r1
 800103c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001040:	d22f      	bcs.n	80010a2 <__udivmoddi4+0x2ae>
 8001042:	428b      	cmp	r3, r1
 8001044:	d92d      	bls.n	80010a2 <__udivmoddi4+0x2ae>
 8001046:	3f02      	subs	r7, #2
 8001048:	4429      	add	r1, r5
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	b281      	uxth	r1, r0
 800104e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001052:	fb0e 3310 	mls	r3, lr, r0, r3
 8001056:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105a:	fb00 f308 	mul.w	r3, r0, r8
 800105e:	428b      	cmp	r3, r1
 8001060:	d907      	bls.n	8001072 <__udivmoddi4+0x27e>
 8001062:	1869      	adds	r1, r5, r1
 8001064:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001068:	d217      	bcs.n	800109a <__udivmoddi4+0x2a6>
 800106a:	428b      	cmp	r3, r1
 800106c:	d915      	bls.n	800109a <__udivmoddi4+0x2a6>
 800106e:	3802      	subs	r0, #2
 8001070:	4429      	add	r1, r5
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001078:	e73b      	b.n	8000ef2 <__udivmoddi4+0xfe>
 800107a:	4637      	mov	r7, r6
 800107c:	4630      	mov	r0, r6
 800107e:	e709      	b.n	8000e94 <__udivmoddi4+0xa0>
 8001080:	4607      	mov	r7, r0
 8001082:	e6e7      	b.n	8000e54 <__udivmoddi4+0x60>
 8001084:	4618      	mov	r0, r3
 8001086:	e6fb      	b.n	8000e80 <__udivmoddi4+0x8c>
 8001088:	4541      	cmp	r1, r8
 800108a:	d2ab      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 800108c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001090:	eb69 020e 	sbc.w	r2, r9, lr
 8001094:	3801      	subs	r0, #1
 8001096:	4613      	mov	r3, r2
 8001098:	e7a4      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109a:	4660      	mov	r0, ip
 800109c:	e7e9      	b.n	8001072 <__udivmoddi4+0x27e>
 800109e:	4618      	mov	r0, r3
 80010a0:	e795      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a2:	4667      	mov	r7, ip
 80010a4:	e7d1      	b.n	800104a <__udivmoddi4+0x256>
 80010a6:	4681      	mov	r9, r0
 80010a8:	e77c      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010aa:	3802      	subs	r0, #2
 80010ac:	442c      	add	r4, r5
 80010ae:	e747      	b.n	8000f40 <__udivmoddi4+0x14c>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	442b      	add	r3, r5
 80010b6:	e72f      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b8:	4638      	mov	r0, r7
 80010ba:	e708      	b.n	8000ece <__udivmoddi4+0xda>
 80010bc:	4637      	mov	r7, r6
 80010be:	e6e9      	b.n	8000e94 <__udivmoddi4+0xa0>

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <GetSequentialAverage>:
float ConvertRtoD(float fRadian)
{
    return fRadian * 180.0f / M_PI;
}
float GetSequentialAverage(float fLastAverage, float fData, uint32_t uiSamplingCnt)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
    return (fLastAverage * (float)uiSamplingCnt + fData) / ((float)uiSamplingCnt + 1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010da:	edd7 7a03 	vldr	s15, [r7, #12]
 80010de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001100:	ee16 3a90 	vmov	r3, s13
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_ZN14BatteryMonitorC1Ef>:
};

const float BatteryMonitor::fGain = 3.3f * 3.0f;    /* Vref * (10k+20k)/10k */


BatteryMonitor::BatteryMonitor(float fFullVoltage)
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
{
    fVoltage = 0.0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
    fOffset = 0.0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    fPercentage = 0.0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    bIsUpperError = false;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	741a      	strb	r2, [r3, #16]
    bIsLowerError = false;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	745a      	strb	r2, [r3, #17]
    this->fFullVoltage = fFullVoltage;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	609a      	str	r2, [r3, #8]

    if(!Adc_IsStartConvert(EN_ADC_NUM_1)){
 8001144:	2000      	movs	r0, #0
 8001146:	f001 fed3 	bl	8002ef0 <Adc_IsStartConvert>
 800114a:	4603      	mov	r3, r0
 800114c:	f083 0301 	eor.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <_ZN14BatteryMonitorC1Ef+0x4c>
        Adc_StartConvert(EN_ADC_NUM_1);
 8001156:	2000      	movs	r0, #0
 8001158:	f001 feb4 	bl	8002ec4 <Adc_StartConvert>
    }
}
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <_ZN14BatteryMonitor6UpdateEv>:
{

}

void BatteryMonitor::Update()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if(fFullVoltage < 0.0){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edd3 7a02 	vldr	s15, [r3, #8]
 8001176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d445      	bmi.n	800120c <_ZN14BatteryMonitor6UpdateEv+0xa4>
        return;
    }

    fVoltage = fGain * Adc_GetRateAdcChannelValue(EN_ADC_NUM_1, DEF_ADC_CHANNEL_RANK) - fOffset;
 8001180:	2101      	movs	r1, #1
 8001182:	2000      	movs	r0, #0
 8001184:	f001 ff04 	bl	8002f90 <Adc_GetRateAdcChannelValue>
 8001188:	ee07 0a10 	vmov	s14, r0
 800118c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001214 <_ZN14BatteryMonitor6UpdateEv+0xac>
 8001190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a01 	vstr	s15, [r3, #4]
    fPercentage = fVoltage / fFullVoltage;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a03 	vstr	s15, [r3, #12]

    if(fVoltage < stThreshold.fLower){
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001218 <_ZN14BatteryMonitor6UpdateEv+0xb0>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d506      	bpl.n	80011dc <_ZN14BatteryMonitor6UpdateEv+0x74>
        bIsUpperError = false;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	741a      	strb	r2, [r3, #16]
        bIsLowerError = true;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	745a      	strb	r2, [r3, #17]
 80011da:	e018      	b.n	800120e <_ZN14BatteryMonitor6UpdateEv+0xa6>
    }else if(fVoltage > stThreshold.fUpper){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e2:	eeb2 7a01 	vmov.f32	s14, #33	; 0x41080000  8.5
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd06      	ble.n	80011fe <_ZN14BatteryMonitor6UpdateEv+0x96>
        bIsUpperError = true;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	741a      	strb	r2, [r3, #16]
        bIsLowerError = false;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	745a      	strb	r2, [r3, #17]
 80011fc:	e007      	b.n	800120e <_ZN14BatteryMonitor6UpdateEv+0xa6>
    }else{
        bIsUpperError = false;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	741a      	strb	r2, [r3, #16]
        bIsLowerError = false;   
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	745a      	strb	r2, [r3, #17]
 800120a:	e000      	b.n	800120e <_ZN14BatteryMonitor6UpdateEv+0xa6>
        return;
 800120c:	bf00      	nop
    }
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	411e6666 	.word	0x411e6666
 8001218:	40e66666 	.word	0x40e66666

0800121c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_ZN5Blink9SetPeriodEmf>:
public:
    Blink(GPIO_TypeDef *pGPIOx, uint32_t ulOutputPin, uint32_t ulPeriodMs=1000);
    ~Blink();
    Blink(const Blink &other);

    void SetPeriod(uint32_t ulPeriodMs, float fOnPercentage=0.5){
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
        this->ulPeriodMs = ulPeriodMs;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	609a      	str	r2, [r3, #8]
        ulOnTimeMs = (uint32_t)((float)ulPeriodMs * fOnPercentage);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001272:	edd7 7a01 	vldr	s15, [r7, #4]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	60da      	str	r2, [r3, #12]
        ulOffTimeMs = ulPeriodMs - ulOnTimeMs;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	1ad2      	subs	r2, r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	611a      	str	r2, [r3, #16]
    }
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_ZN5BlinkC1EP12GPIO_TypeDefmm>:
#include "SystickTimer.h"

/*
 * Public member functions
 */
Blink::Blink(GPIO_TypeDef *pGPIOx, uint32_t ulOutputPin, uint32_t ulPeriodMs)
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
{
    this->pGPIOx = pGPIOx;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
    this->ulOutputPin = ulOutputPin;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]
    ulOnTimeMs = 0;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    ulOffTimeMs = 0;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
    ulDelayTimeMs = 0;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
    bStartState = false;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
    bNowState = false;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	765a      	strb	r2, [r3, #25]
    bOldState = false;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	769a      	strb	r2, [r3, #26]
    bFinishDelay = false;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	76da      	strb	r2, [r3, #27]
    bFirst = true;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	771a      	strb	r2, [r3, #28]
    bChangeStateFlag = false;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	775a      	strb	r2, [r3, #29]
    ulWaitTime = 0;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    ulStartTimeMs = 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
    SetPeriod(ulPeriodMs);
 80012fa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff ffa8 	bl	8001256 <_ZN5Blink9SetPeriodEmf>
    SetState(false);
 8001306:	2100      	movs	r1, #0
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f898 	bl	800143e <_ZN5Blink8SetStateEb>
}
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZN5Blink6UpdateEv>:
    this->ulStartTimeMs = other.ulStartTimeMs;
    this->ulWaitTime = other.ulWaitTime;
}

void Blink::Update()
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    if(bFirst){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7f1b      	ldrb	r3, [r3, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <_ZN5Blink6UpdateEv+0x2c>
        bFirst = false;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	771a      	strb	r2, [r3, #28]
        bNowState = bStartState;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1a      	ldrb	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	765a      	strb	r2, [r3, #25]
        ulStartTimeMs = SystickTimer_GetTimeMS();
 8001336:	f001 f803 	bl	8002340 <SystickTimer_GetTimeMS>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if(ulDelayTimeMs == 0 && !bFinishDelay){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d113      	bne.n	8001374 <_ZN5Blink6UpdateEv+0x5c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7edb      	ldrb	r3, [r3, #27]
 8001350:	f083 0301 	eor.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <_ZN5Blink6UpdateEv+0x5c>
        bFinishDelay = true;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	76da      	strb	r2, [r3, #27]
        bChangeStateFlag = true;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	775a      	strb	r2, [r3, #29]
        bOldState = !bNowState;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e5b      	ldrb	r3, [r3, #25]
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	769a      	strb	r2, [r3, #26]
    }

    if(!bFinishDelay){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7edb      	ldrb	r3, [r3, #27]
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01a      	beq.n	80013b8 <_ZN5Blink6UpdateEv+0xa0>
        if(SystickTimer_IsTimeElapsed(ulStartTimeMs, ulDelayTimeMs)){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6952      	ldr	r2, [r2, #20]
 800138e:	4618      	mov	r0, r3
 8001390:	4621      	mov	r1, r4
 8001392:	f000 ffec 	bl	800236e <SystickTimer_IsTimeElapsed>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d042      	beq.n	8001422 <_ZN5Blink6UpdateEv+0x10a>
            bFinishDelay = true;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	76da      	strb	r2, [r3, #27]
            ulStartTimeMs = SystickTimer_GetTimeMS();
 80013a2:	f000 ffcd 	bl	8002340 <SystickTimer_GetTimeMS>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
            bChangeStateFlag = true;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	775a      	strb	r2, [r3, #29]
 80013b6:	e034      	b.n	8001422 <_ZN5Blink6UpdateEv+0x10a>
        }
    }else{
        /* 状態の変更 */
        if(bChangeStateFlag){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7f5b      	ldrb	r3, [r3, #29]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d019      	beq.n	80013f4 <_ZN5Blink6UpdateEv+0xdc>
            bChangeStateFlag = false;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	775a      	strb	r2, [r3, #29]
            if(!bOldState){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7e9b      	ldrb	r3, [r3, #26]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <_ZN5Blink6UpdateEv+0xc6>
                ulWaitTime = ulOnTimeMs; 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	e003      	b.n	80013e6 <_ZN5Blink6UpdateEv+0xce>
            }else{
                ulWaitTime = ulOffTimeMs;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	621a      	str	r2, [r3, #32]
            }
            bNowState = !bOldState;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e9b      	ldrb	r3, [r3, #26]
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	765a      	strb	r2, [r3, #25]
        }

        if(SystickTimer_IsTimeElapsed(ulStartTimeMs, ulWaitTime)){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f04f 0400 	mov.w	r4, #0
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6a12      	ldr	r2, [r2, #32]
 8001400:	4618      	mov	r0, r3
 8001402:	4621      	mov	r1, r4
 8001404:	f000 ffb3 	bl	800236e <SystickTimer_IsTimeElapsed>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <_ZN5Blink6UpdateEv+0x10a>
            ulStartTimeMs = SystickTimer_GetTimeMS();
 800140e:	f000 ff97 	bl	8002340 <SystickTimer_GetTimeMS>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
            bChangeStateFlag = true;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	775a      	strb	r2, [r3, #29]
        }
    }

    SetState(bNowState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e5b      	ldrb	r3, [r3, #25]
 8001426:	4619      	mov	r1, r3
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f808 	bl	800143e <_ZN5Blink8SetStateEb>
    bOldState = bNowState;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e5a      	ldrb	r2, [r3, #25]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	769a      	strb	r2, [r3, #26]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}

0800143e <_ZN5Blink8SetStateEb>:

/*
 * Private member functions
 */
void Blink::SetState(bool bState)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    if(true == bState){
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <_ZN5Blink8SetStateEb+0x24>
        LL_GPIO_SetOutputPin(pGPIOx, ulOutputPin);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fede 	bl	800121c <LL_GPIO_SetOutputPin>
    }else{
        LL_GPIO_ResetOutputPin(pGPIOx, ulOutputPin);
    }
 8001460:	e007      	b.n	8001472 <_ZN5Blink8SetStateEb+0x34>
        LL_GPIO_ResetOutputPin(pGPIOx, ulOutputPin);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f7ff fee3 	bl	8001238 <LL_GPIO_ResetOutputPin>
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <LL_GPIO_IsInputPinSet>:
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	401a      	ands	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_ZN6ButtonC1EP12GPIO_TypeDefm>:

/*
 * Public member functions
 */

Button::Button(GPIO_TypeDef *pGPIOx, uint32_t uiInputPin) {
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	// TODO Auto-generated constructor stub
	this->pGPIOx = pGPIOx;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	601a      	str	r2, [r3, #0]
	this->uiInputPin = uiInputPin;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]

	uiPushCount = 0;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	uiReleaseCount = 0;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
	uiPushFilterTimeMs = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
	uiReleaseFilterTimeMs = 0;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
	bPushEdge = false;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	741a      	strb	r2, [r3, #16]
	bReleaseEdge = false;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	745a      	strb	r2, [r3, #17]
	bRawState = false;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	771a      	strb	r2, [r3, #28]
	bRawPushState = false;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	775a      	strb	r2, [r3, #29]
	bPushState = false;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	779a      	strb	r2, [r3, #30]
	bReverseEnable = false;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	77da      	strb	r2, [r3, #31]
	bPushStateOld = false;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
	bFirstFlag = false;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ullPushFilterStartTimeMs = 0;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f04f 0400 	mov.w	r4, #0
 8001512:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	ullReleaseFilterStartTimeMs = 0;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr

08001530 <_ZN6Button6UpdateEv>:

}


void Button::Update()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	bRawState = (bool)LL_GPIO_IsInputPinSet(pGPIOx, uiInputPin);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff ff99 	bl	800147a <LL_GPIO_IsInputPinSet>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2da      	uxtb	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	771a      	strb	r2, [r3, #28]

	if(bReverseEnable){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7fdb      	ldrb	r3, [r3, #31]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d018      	beq.n	8001592 <_ZN6Button6UpdateEv+0x62>
		bRawPushState  = !bRawState;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	775a      	strb	r2, [r3, #29]
		if(!bFirstFlag){
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00d      	beq.n	800159a <_ZN6Button6UpdateEv+0x6a>
			bFirstFlag = true;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			bPushStateOld = bRawPushState;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7f5a      	ldrb	r2, [r3, #29]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f883 2020 	strb.w	r2, [r3, #32]
 8001590:	e003      	b.n	800159a <_ZN6Button6UpdateEv+0x6a>
		}
	}else{
		bRawPushState = bRawState;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7f1a      	ldrb	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	775a      	strb	r2, [r3, #29]
	}

	if((0u < uiPushFilterTimeMs) || (0u < uiReleaseFilterTimeMs)){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <_ZN6Button6UpdateEv+0x7a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <_ZN6Button6UpdateEv+0x82>
		ExecuteEdgeFilter();
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f841 	bl	8001632 <_ZN6Button17ExecuteEdgeFilterEv>
 80015b0:	e003      	b.n	80015ba <_ZN6Button6UpdateEv+0x8a>
	}else{
		bPushState = bRawPushState;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7f5a      	ldrb	r2, [r3, #29]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	779a      	strb	r2, [r3, #30]
	}

	if(bPushStateOld != bPushState){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f9b      	ldrb	r3, [r3, #30]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d013      	beq.n	80015f0 <_ZN6Button6UpdateEv+0xc0>
		if(		bPushStateOld		//bPushStateOld = High
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <_ZN6Button6UpdateEv+0xb8>
			&& !bPushState){		//bPushState = Low
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7f9b      	ldrb	r3, [r3, #30]
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <_ZN6Button6UpdateEv+0xb8>
			bReleaseEdge = true;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	745a      	strb	r2, [r3, #17]
 80015e6:	e009      	b.n	80015fc <_ZN6Button6UpdateEv+0xcc>
		}else{
			bPushEdge = true;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	741a      	strb	r2, [r3, #16]
 80015ee:	e005      	b.n	80015fc <_ZN6Button6UpdateEv+0xcc>
		}
	}else{
		bPushEdge = false;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	741a      	strb	r2, [r3, #16]
		bReleaseEdge = false;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	745a      	strb	r2, [r3, #17]
	}

	if(bPushEdge){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7c1b      	ldrb	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <_ZN6Button6UpdateEv+0xde>
		uiPushCount ++;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
	}
	if(bReleaseEdge){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7c5b      	ldrb	r3, [r3, #17]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <_ZN6Button6UpdateEv+0xf0>
		uiReleaseCount ++;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]
	}

	bPushStateOld = bPushState;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7f9a      	ldrb	r2, [r3, #30]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 2020 	strb.w	r2, [r3, #32]
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN6Button17ExecuteEdgeFilterEv>:
/*
 * Private member functions
 */

void Button::ExecuteEdgeFilter()
{
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	if(bRawPushState && !bPushStateOld && !bPushFilterStartFlag){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7f5b      	ldrb	r3, [r3, #29]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01b      	beq.n	800167a <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d013      	beq.n	800167a <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <_ZN6Button17ExecuteEdgeFilterEv+0x48>
		bPushFilterStartFlag = true;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ullPushFilterStartTimeMs = SystickTimer_GetTimeMS();
 800166a:	f000 fe69 	bl	8002340 <SystickTimer_GetTimeMS>
 800166e:	4603      	mov	r3, r0
 8001670:	460c      	mov	r4, r1
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001678:	e01e      	b.n	80016b8 <_ZN6Button17ExecuteEdgeFilterEv+0x86>
	}else if(!bRawPushState && bPushStateOld && !bReleaseFilterStartFlag){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7f5b      	ldrb	r3, [r3, #29]
 800167e:	f083 0301 	eor.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d017      	beq.n	80016b8 <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <_ZN6Button17ExecuteEdgeFilterEv+0x86>
		bReleaseFilterStartFlag = true;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		ullReleaseFilterStartTimeMs = SystickTimer_GetTimeMS();
 80016aa:	f000 fe49 	bl	8002340 <SystickTimer_GetTimeMS>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	}else{
		//do nothing
	}

	if(bPushFilterStartFlag){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d017      	beq.n	80016f2 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		if(SystickTimer_IsTimeElapsed(ullPushFilterStartTimeMs, uiPushFilterTimeMs)){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6952      	ldr	r2, [r2, #20]
 80016cc:	4618      	mov	r0, r3
 80016ce:	4621      	mov	r1, r4
 80016d0:	f000 fe4d 	bl	800236e <SystickTimer_IsTimeElapsed>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <_ZN6Button17ExecuteEdgeFilterEv+0xba>
			bPushFilterStartFlag = false;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			bPushState = bRawPushState;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7f5a      	ldrb	r2, [r3, #29]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	779a      	strb	r2, [r3, #30]
 80016ea:	e002      	b.n	80016f2 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		}else{
			bPushState = false;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	779a      	strb	r2, [r3, #30]
		}
	}else{
		//do nothing
	}

	if(bReleaseFilterStartFlag){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d017      	beq.n	800172c <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
		if(SystickTimer_IsTimeElapsed(ullReleaseFilterStartTimeMs, uiReleaseFilterTimeMs)){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6992      	ldr	r2, [r2, #24]
 8001706:	4618      	mov	r0, r3
 8001708:	4621      	mov	r1, r4
 800170a:	f000 fe30 	bl	800236e <SystickTimer_IsTimeElapsed>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <_ZN6Button17ExecuteEdgeFilterEv+0xf4>
			bReleaseFilterStartFlag = false;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			bPushState = bRawPushState;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7f5a      	ldrb	r2, [r3, #29]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	779a      	strb	r2, [r3, #30]
		}

	}else{
		//do nothing
	}
}
 8001724:	e002      	b.n	800172c <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
			bPushState = true;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	779a      	strb	r2, [r3, #30]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>:


	void CalcGyroOffset();


	int16_t ConvertHLDataTo16Bits(uint8_t ucHighData, uint8_t ucLowData){
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
 8001740:	4613      	mov	r3, r2
 8001742:	70bb      	strb	r3, [r7, #2]
		return (((int16_t)ucHighData << 8) | ((int16_t)ucLowData));
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	b21b      	sxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b21b      	sxth	r3, r3
	}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>:

	float ConvertRawDataToFloat(int16_t sRawData, float fScaleFactor){
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	460b      	mov	r3, r1
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	817b      	strh	r3, [r7, #10]
		if(fScaleFactor == 0.0){
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d102      	bne.n	8001782 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x22>
			return 0.0;
 800177c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80017a8 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x48>
 8001780:	e009      	b.n	8001796 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x36>
		}
		return ((float)sRawData / fScaleFactor);		//value[LSB] / (LSB/unit) = unit
 8001782:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001796:	ee16 3a90 	vmov	r3, s13
	}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	00000000 	.word	0x00000000

080017ac <LL_GPIO_SetOutputPin>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_GPIO_ResetOutputPin>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b02      	cmp	r3, #2
 800185e:	d101      	bne.n	8001864 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	b2db      	uxtb	r3, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	330c      	adds	r3, #12
 800189c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZN9ICM_20602C1ENS_10CommMode_tE>:
/*
 * Public member function
 */

//Constructor
ICM_20602::ICM_20602(ICM_20602::CommMode_t enCommMode)
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
{
	this->enCommMode = enCommMode;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	701a      	strb	r2, [r3, #0]

	enGyroScaleMode = EN_GYRO_FULLSCALE_PM250DPS;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
	enAccelScaleMode = EN_ACCEL_FULLSCALE_PM2G;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	709a      	strb	r2, [r3, #2]
	bIsConnected = false;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	70da      	strb	r2, [r3, #3]

	ucGyroConfigValue		= 0x00;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	711a      	strb	r2, [r3, #4]
	ucAccelConfigValue		= 0x00;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	715a      	strb	r2, [r3, #5]
	ucAccelConfig2Value		= 0x00;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	719a      	strb	r2, [r3, #6]
	ucGyroConfigValueOld	= 0x00;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld	= 0x00;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld	= 0x00;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	725a      	strb	r2, [r3, #9]

	stGyroRawData.sValueX = 0x0000;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY = 0x0000;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ = 0x0000;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	81da      	strh	r2, [r3, #14]
	stAccelRawData.sValueX = 0x0000;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY = 0x0000;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ = 0x0000;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	829a      	strh	r2, [r3, #20]
	stGyroDPS.fValueX = 0.0f;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = 0.0f;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = 0.0f;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
	stAccelG.fValueX = 0.0f;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = 0.0f;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = 0.0f;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
	stGyroDeg.fValueX = 0.0f;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	669a      	str	r2, [r3, #104]	; 0x68
	stGyroDeg.fValueY = 0.0f;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	66da      	str	r2, [r3, #108]	; 0x6c
	stGyroDeg.fValueZ = 0.0f;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	671a      	str	r2, [r3, #112]	; 0x70
	uiGyroOffsetSamplingNum = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
	uiGyroOffsetSamplingCount = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	649a      	str	r2, [r3, #72]	; 0x48
	uiSamplingTimeMs = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>:
{
	//do nothing
}

bool ICM_20602::SetSPIPort(SPI_TypeDef *pSPIx, GPIO_TypeDef *pSPI_CS_GPIOx, uint32_t SPI_CS_PINx)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
	if(ICM_20602::EN_COMM_MODE_SPI != enCommMode){
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x1a>
		return false;
 800199a:	2300      	movs	r3, #0
 800199c:	e01e      	b.n	80019dc <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}

	if(NULL == pSPIx){
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x24>
		return false;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e019      	b.n	80019dc <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPIx = pSPIx;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	675a      	str	r2, [r3, #116]	; 0x74

	if(NULL == pSPI_CS_GPIOx){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x34>
		return false;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e011      	b.n	80019dc <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPI_CS_GPIOx = pSPI_CS_GPIOx;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	679a      	str	r2, [r3, #120]	; 0x78
	this->ui_SPI_CS_PINx = SPI_CS_PINx;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	67da      	str	r2, [r3, #124]	; 0x7c

	LL_GPIO_SetOutputPin(this->pSPI_CS_GPIOx, this->ui_SPI_CS_PINx);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7ff feec 	bl	80017ac <LL_GPIO_SetOutputPin>
	LL_SPI_Disable(pSPIx);
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f7ff ff16 	bl	8001806 <LL_SPI_Disable>

	return true;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN9ICM_206025SetupEm>:
{
	return true;
}

void ICM_20602::Setup(uint32_t uiSamplingTimeMs)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	this->uiSamplingTimeMs = uiSamplingTimeMs;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
	SystickTimer_DelayMS(500);
 80019f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f8:	f000 fcae 	bl	8002358 <SystickTimer_DelayMS>
	LL_SPI_Enable(pSPIx);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fef0 	bl	80017e6 <LL_SPI_Enable>

	if(WHO_AM_I_VALUE == ReadRegister(EN_REG_ADDR_WHO_AM_I)){
 8001a06:	2175      	movs	r1, #117	; 0x75
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fb3e 	bl	800208a <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <_ZN9ICM_206025SetupEm+0x42>
		bIsConnected = true;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	70da      	strb	r2, [r3, #3]
 8001a24:	e002      	b.n	8001a2c <_ZN9ICM_206025SetupEm+0x48>
	}else{
		bIsConnected = false;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));

#endif
	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x80);	//b10000000 = Device Reset
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	216b      	movs	r1, #107	; 0x6b
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fb0a 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001a36:	2032      	movs	r0, #50	; 0x32
 8001a38:	f000 fc8e 	bl	8002358 <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x01);	//b00000001 = Auto Selects the best available clock source
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	216b      	movs	r1, #107	; 0x6b
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fb02 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001a46:	2032      	movs	r0, #50	; 0x32
 8001a48:	f000 fc86 	bl	8002358 <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_2, 0x00);	//b00000000 = Gyro and Accelerometer are all enabled
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	216c      	movs	r1, #108	; 0x6c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fafa 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001a56:	2032      	movs	r0, #50	; 0x32
 8001a58:	f000 fc7e 	bl	8002358 <SystickTimer_DelayMS>

	//WriteRegister(EN_REG_ADDR_I2C_IF, 0x40);		//SPI mode only
	//SystickTimer_DelayMS(50);

	SetGyroFullScale(EN_GYRO_FULLSCALE_PM2000DPS);	//Set Gyro Full Scale : ±2000 dps
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f940 	bl	8001ce4 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>
	SetAccelFullScale(EN_ACCEL_FULLSCALE_PM16G);	//Set Accel Full Scale : ±16 G
 8001a64:	2103      	movs	r1, #3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f967 	bl	8001d3a <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>
	SetGyroConfig();	//Gyro FullScale
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fabf 	bl	8001ff0 <_ZN9ICM_2060213SetGyroConfigEv>
	SetAccelConfig();	//Accle FullScale
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 facb 	bl	800200e <_ZN9ICM_2060214SetAccelConfigEv>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb>:

void ICM_20602::StartGyroOffestCalc(uint32_t uiSamplingNum, bool bCalcX, bool bCalcY, bool bCalcZ)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71bb      	strb	r3, [r7, #6]
	if(bCalcX || bCalcY || bCalcZ){
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x2a>
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x2a>
 8001aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x34>
		bGyroOffsetCalcStart = true;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab2:	e003      	b.n	8001abc <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x3c>
	}else{
		bGyroOffsetCalcStart = false;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	uiGyroOffsetSamplingNum = uiSamplingNum;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
	bGyroOffsetCalcStartFlag[0] = bCalcX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bGyroOffsetCalcStartFlag[1] = bCalcY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	79ba      	ldrb	r2, [r7, #6]
 8001ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	bGyroOffsetCalcStartFlag[2] = bCalcZ;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d811      	bhi.n	8001b06 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x86>
		bGyroOffsetCalcCompleted[ucCount] = !bGyroOffsetCalcStartFlag[ucCount];
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	f082 0201 	eor.w	r2, r2, #1
 8001af2:	b2d1      	uxtb	r1, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	460a      	mov	r2, r1
 8001afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	3301      	adds	r3, #1
 8001b02:	75fb      	strb	r3, [r7, #23]
 8001b04:	e7ea      	b.n	8001adc <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x5c>
	}
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_ZN9ICM_2060221IsGyroOffsetCompletedEv>:
bool ICM_20602::IsGyroOffsetCompleted()
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	bool bResult = true;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001b1e:	7bbb      	ldrb	r3, [r7, #14]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d80f      	bhi.n	8001b44 <_ZN9ICM_2060221IsGyroOffsetCompletedEv+0x32>
		bResult &= bGyroOffsetCalcCompleted[ucCount];
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	7bba      	ldrb	r2, [r7, #14]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	440a      	add	r2, r1
 8001b2c:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
 8001b42:	e7ec      	b.n	8001b1e <_ZN9ICM_2060221IsGyroOffsetCompletedEv+0xc>
	}
	return bResult;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_ZN9ICM_206026UpdateEv>:
bool ICM_20602::IsConnected()
{
	return bIsConnected;
}
void ICM_20602::Update()
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	uint8_t ucGyroRawDataHL[6] = {0x00};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	809a      	strh	r2, [r3, #4]
	uint8_t ucAccelRawDataHL[6] = {0x00};
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	809a      	strh	r2, [r3, #4]

	if(ucGyroConfigValue != ucGyroConfigValueOld){
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	791a      	ldrb	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	79db      	ldrb	r3, [r3, #7]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d002      	beq.n	8001b80 <_ZN9ICM_206026UpdateEv+0x2e>
		SetGyroConfig();
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fa38 	bl	8001ff0 <_ZN9ICM_2060213SetGyroConfigEv>
	}
	if(ucAccelConfigValue != ucAccelConfigValueOld){
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	795a      	ldrb	r2, [r3, #5]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7a1b      	ldrb	r3, [r3, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d002      	beq.n	8001b92 <_ZN9ICM_206026UpdateEv+0x40>
		SetAccelConfig();
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fa3e 	bl	800200e <_ZN9ICM_2060214SetAccelConfigEv>
	}
	if(ucAccelConfig2Value != ucAccelConfig2ValueOld){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	799a      	ldrb	r2, [r3, #6]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7a5b      	ldrb	r3, [r3, #9]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d002      	beq.n	8001ba4 <_ZN9ICM_206026UpdateEv+0x52>
		SetAccelConfig2();
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fa44 	bl	800202c <_ZN9ICM_2060215SetAccelConfig2Ev>
	}

	//Read Gyro Raw Data
	ReadRegister(EN_REG_ADDR_GYRO_XOUT_H, ucGyroRawDataHL, 6);
 8001ba4:	f107 0210 	add.w	r2, r7, #16
 8001ba8:	2306      	movs	r3, #6
 8001baa:	2143      	movs	r1, #67	; 0x43
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fa8d 	bl	80020cc <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Read Accel Raw Data
	ReadRegister(EN_REG_ADDR_ACCEL_XOUT_H, ucAccelRawDataHL, 6);
 8001bb2:	f107 0208 	add.w	r2, r7, #8
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	213b      	movs	r1, #59	; 0x3b
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fa86 	bl	80020cc <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Convert HL data to 16bits data
	stGyroRawData.sValueX	= ConvertHLDataTo16Bits(ucGyroRawDataHL[0], ucGyroRawDataHL[1]);
 8001bc0:	7c3b      	ldrb	r3, [r7, #16]
 8001bc2:	7c7a      	ldrb	r2, [r7, #17]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fdb4 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY	= ConvertHLDataTo16Bits(ucGyroRawDataHL[2], ucGyroRawDataHL[3]);
 8001bd4:	7cbb      	ldrb	r3, [r7, #18]
 8001bd6:	7cfa      	ldrb	r2, [r7, #19]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fdaa 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ	= ConvertHLDataTo16Bits(ucGyroRawDataHL[4], ucGyroRawDataHL[5]);
 8001be8:	7d3b      	ldrb	r3, [r7, #20]
 8001bea:	7d7a      	ldrb	r2, [r7, #21]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fda0 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	81da      	strh	r2, [r3, #14]

	stAccelRawData.sValueX	= ConvertHLDataTo16Bits(ucAccelRawDataHL[0], ucAccelRawDataHL[1]);
 8001bfc:	7a3b      	ldrb	r3, [r7, #8]
 8001bfe:	7a7a      	ldrb	r2, [r7, #9]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fd96 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY	= ConvertHLDataTo16Bits(ucAccelRawDataHL[2], ucAccelRawDataHL[3]);
 8001c10:	7abb      	ldrb	r3, [r7, #10]
 8001c12:	7afa      	ldrb	r2, [r7, #11]
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fd8c 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ	= ConvertHLDataTo16Bits(ucAccelRawDataHL[4], ucAccelRawDataHL[5]);
 8001c24:	7b3b      	ldrb	r3, [r7, #12]
 8001c26:	7b7a      	ldrb	r2, [r7, #13]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fd82 	bl	8001734 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	829a      	strh	r2, [r3, #20]

	ScaleConvert();
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f967 	bl	8001f0c <_ZN9ICM_2060212ScaleConvertEv>

	if(bGyroOffsetCalcStart){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d019      	beq.n	8001c7c <_ZN9ICM_206026UpdateEv+0x12a>
		CalcGyroOffset();
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8f3 	bl	8001e34 <_ZN9ICM_2060214CalcGyroOffsetEv>
		if(IsGyroOffsetCompleted()){
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff5f 	bl	8001b12 <_ZN9ICM_2060221IsGyroOffsetCompletedEv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <_ZN9ICM_206026UpdateEv+0x110>
			bGyroOffsetCalcStart = false;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		stGyroDPSOffseted.fValueX = stGyroDPS.fValueX;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	651a      	str	r2, [r3, #80]	; 0x50
		stGyroDPSOffseted.fValueY = stGyroDPS.fValueY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
		stGyroDPSOffseted.fValueZ = stGyroDPS.fValueZ;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	659a      	str	r2, [r3, #88]	; 0x58
 8001c7a:	e023      	b.n	8001cc4 <_ZN9ICM_206026UpdateEv+0x172>
	}else{
		stGyroDPSOffseted.fValueX = stGyroDPS.fValueX - stGyroDPSOffsetValue.fValueX;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		stGyroDPSOffseted.fValueY = stGyroDPS.fValueY - stGyroDPSOffsetValue.fValueY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		stGyroDPSOffseted.fValueZ = stGyroDPS.fValueZ - stGyroDPSOffsetValue.fValueZ;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		CalcGyroDeg();
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f866 	bl	8001d90 <_ZN9ICM_2060211CalcGyroDegEv>
	}

	//Old Config Value update
	ucGyroConfigValueOld = ucGyroConfigValue;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791a      	ldrb	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld = ucAccelConfigValue;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	795a      	ldrb	r2, [r3, #5]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld = ucAccelConfig2Value;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	799a      	ldrb	r2, [r3, #6]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	725a      	strb	r2, [r3, #9]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>:
	return (const Coord_t&)stGyroDeg;
}

//
void ICM_20602::SetGyroFullScale(GyroFullScaleMode_t enScaleMode)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_GYRO_FULLSCALE_PM250DPS || enScaleMode > EN_GYRO_FULLSCALE_PM2000DPS){
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d81b      	bhi.n	8001d2e <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4a>
		return;
	}

	enGyroScaleMode = enScaleMode;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	705a      	strb	r2, [r3, #1]

	if(EN_GYRO_FULLSCALE_PM250DPS == enGyroScaleMode){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x30>
		ucGyroConfigValue = ucGyroConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	791b      	ldrb	r3, [r3, #4]
 8001d08:	f023 0318 	bic.w	r3, r3, #24
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	711a      	strb	r2, [r3, #4]
 8001d12:	e00d      	b.n	8001d30 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
	}else{
		ucGyroConfigValue = ucGyroConfigValue | ((uint8_t)enGyroScaleMode << 3);	//3bitシフトし，OR
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	b25a      	sxtb	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	711a      	strb	r2, [r3, #4]
 8001d2c:	e000      	b.n	8001d30 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
		return;
 8001d2e:	bf00      	nop
	}
}
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>:

//
void ICM_20602::SetAccelFullScale(AccelFullScaleMode_t enScaleMode)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_ACCEL_FULLSCALE_PM2G || enScaleMode > EN_ACCEL_FULLSCALE_PM16G){
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d81b      	bhi.n	8001d84 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4a>
		return;
	}

	enAccelScaleMode = enScaleMode;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	709a      	strb	r2, [r3, #2]

	if(EN_ACCEL_FULLSCALE_PM2G == enAccelScaleMode){
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	789b      	ldrb	r3, [r3, #2]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x30>
		ucAccelConfigValue = ucAccelConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	795b      	ldrb	r3, [r3, #5]
 8001d5e:	f023 0318 	bic.w	r3, r3, #24
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	715a      	strb	r2, [r3, #5]
 8001d68:	e00d      	b.n	8001d86 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
	}else{
		ucAccelConfigValue = ucAccelConfigValue | ((uint8_t)enAccelScaleMode << 3);	//3bitシフトし，OR
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	795b      	ldrb	r3, [r3, #5]
 8001d6e:	b25a      	sxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	789b      	ldrb	r3, [r3, #2]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	715a      	strb	r2, [r3, #5]
 8001d82:	e000      	b.n	8001d86 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
		return;
 8001d84:	bf00      	nop
	}
}
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_ZN9ICM_2060211CalcGyroDegEv>:

/*
 * Private member function
 */
void ICM_20602::CalcGyroDeg()
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	stGyroDeg.fValueX += (stGyroDPSOffseted.fValueX * ((float)uiSamplingTimeMs / 1000.0f));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001db0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8001e30 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 8001db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	stGyroDeg.fValueY += (stGyroDPSOffseted.fValueY * ((float)uiSamplingTimeMs / 1000.0f));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001dde:	eddf 5a14 	vldr	s11, [pc, #80]	; 8001e30 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 8001de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	stGyroDeg.fValueZ += (stGyroDPSOffseted.fValueZ * ((float)uiSamplingTimeMs / 1000.0f));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001e0c:	eddf 5a08 	vldr	s11, [pc, #32]	; 8001e30 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 8001e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	447a0000 	.word	0x447a0000

08001e34 <_ZN9ICM_2060214CalcGyroOffsetEv>:


void ICM_20602::CalcGyroOffset()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	/* 一定時間Gyro値をサンプリングし，　その後平均値を計算 */
	if(uiGyroOffsetSamplingCount <= uiGyroOffsetSamplingNum){
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d844      	bhi.n	8001ed2 <_ZN9ICM_2060214CalcGyroOffsetEv+0x9e>
		uiGyroOffsetSamplingCount ++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	649a      	str	r2, [r3, #72]	; 0x48
			
		if(true == bGyroOffsetCalcStartFlag[0]){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00f      	beq.n	8001e7c <_ZN9ICM_2060214CalcGyroOffsetEv+0x48>
			bGyroOffsetCalcCompleted[0] = false;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			stGyroDPSOffsetValue.fValueX = GetSequentialAverage(stGyroDPSOffsetValue.fValueX, stGyroDPS.fValueX, uiGyroOffsetSamplingCount);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6999      	ldr	r1, [r3, #24]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	461a      	mov	r2, r3
 8001e72:	f7ff f927 	bl	80010c4 <GetSequentialAverage>
 8001e76:	4602      	mov	r2, r0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c
		}

		if(true == bGyroOffsetCalcStartFlag[1]){
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00f      	beq.n	8001ea6 <_ZN9ICM_2060214CalcGyroOffsetEv+0x72>
			bGyroOffsetCalcCompleted[1] = false;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			stGyroDPSOffsetValue.fValueY = GetSequentialAverage(stGyroDPSOffsetValue.fValueY, stGyroDPS.fValueY, uiGyroOffsetSamplingCount);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69d9      	ldr	r1, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f7ff f912 	bl	80010c4 <GetSequentialAverage>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		if(true == bGyroOffsetCalcStartFlag[2]){
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d028      	beq.n	8001f02 <_ZN9ICM_2060214CalcGyroOffsetEv+0xce>
			bGyroOffsetCalcCompleted[2] = false;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			stGyroDPSOffsetValue.fValueZ = GetSequentialAverage(stGyroDPSOffsetValue.fValueZ, stGyroDPS.fValueZ, uiGyroOffsetSamplingCount);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f7ff f8fd 	bl	80010c4 <GetSequentialAverage>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	665a      	str	r2, [r3, #100]	; 0x64
		/* 平均値を計算したのち，，オフセット計算終了フラグを立てる */
		bGyroOffsetCalcCompleted[0] = true;
		bGyroOffsetCalcCompleted[1] = true;
		bGyroOffsetCalcCompleted[2] = true;
	}
}
 8001ed0:	e017      	b.n	8001f02 <_ZN9ICM_2060214CalcGyroOffsetEv+0xce>
		bGyroOffsetCalcStartFlag[0] = false;  /* x */
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		bGyroOffsetCalcStartFlag[1] = false;  /* y */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		bGyroOffsetCalcStartFlag[2] = false;  /* z */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		bGyroOffsetCalcCompleted[0] = true;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		bGyroOffsetCalcCompleted[1] = true;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		bGyroOffsetCalcCompleted[2] = true;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <_ZN9ICM_2060212ScaleConvertEv>:

//
void ICM_20602::ScaleConvert()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	stGyroDPS.fValueX = ConvertRawDataToFloat(stGyroRawData.sValueX, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fc18 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = ConvertRawDataToFloat(stGyroRawData.sValueY, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fc07 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = ConvertRawDataToFloat(stGyroRawData.sValueZ, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	3304      	adds	r3, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fbf6 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	621a      	str	r2, [r3, #32]

	stAccelG.fValueX = ConvertRawDataToFloat(stAccelRawData.sValueX, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fbe5 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = ConvertRawDataToFloat(stAccelRawData.sValueY, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fbd4 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = ConvertRawDataToFloat(stAccelRawData.sValueZ, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fbc3 	bl	8001760 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08008b10 	.word	0x08008b10
 8001fec:	08008b30 	.word	0x08008b30

08001ff0 <_ZN9ICM_2060213SetGyroConfigEv>:

//
void ICM_20602::SetGyroConfig()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_GYRO_CONFIG, ucGyroConfigValue);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	211b      	movs	r1, #27
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f822 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN9ICM_2060214SetAccelConfigEv>:

//
void ICM_20602::SetAccelConfig()
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG, ucAccelConfigValue);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	795b      	ldrb	r3, [r3, #5]
 800201a:	461a      	mov	r2, r3
 800201c:	211c      	movs	r1, #28
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f813 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZN9ICM_2060215SetAccelConfig2Ev>:

//
void ICM_20602::SetAccelConfig2()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG_2, ucAccelConfig2Value);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	799b      	ldrb	r3, [r3, #6]
 8002038:	461a      	mov	r2, r3
 800203a:	211d      	movs	r1, #29
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f804 	bl	800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>:

//レジスタ書き込み（1バイト）
void ICM_20602::WriteRegister(ICM_20602::RegisterAddress_t enAddr, uint8_t ucWriteData)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af02      	add	r7, sp, #8
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	4613      	mov	r3, r2
 8002058:	70bb      	strb	r3, [r7, #2]
	switch(enCommMode){
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x1e>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00c      	beq.n	8002080 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 8002066:	e00c      	b.n	8002082 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		CommunicateSPIMode(EN_RW_MODE_WRITE, enAddr, &ucWriteData, NULL, 1);
 8002068:	1cb9      	adds	r1, r7, #2
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	2301      	movs	r3, #1
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	2101      	movs	r1, #1
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f848 	bl	800210e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 800207e:	e000      	b.n	8002082 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		break;
 8002080:	bf00      	nop
	}
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>:
	}
}


uint8_t ICM_20602::ReadRegister(ICM_20602::RegisterAddress_t enAddr)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af02      	add	r7, sp, #8
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
	uint8_t ucReadData = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
	switch(enCommMode){
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x1e>
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d00c      	beq.n	80020c0 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80020a6:	e00c      	b.n	80020c2 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		CommunicateSPIMode(EN_RW_MODE_READ, enAddr, NULL, &ucReadData, 1);
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	2301      	movs	r3, #1
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	f107 030f 	add.w	r3, r7, #15
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f828 	bl	800210e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 80020be:	e000      	b.n	80020c2 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		break;
 80020c0:	bf00      	nop
	}
	return ucReadData;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>:

void ICM_20602::ReadRegister(RegisterAddress_t enStartAddr, uint8_t *pReadData, uint16_t usLength)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	72fb      	strb	r3, [r7, #11]
 80020dc:	4613      	mov	r3, r2
 80020de:	813b      	strh	r3, [r7, #8]
	switch(enCommMode){
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x22>
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d00b      	beq.n	8002104 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x38>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80020ec:	e00b      	b.n	8002106 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		CommunicateSPIMode(EN_RW_MODE_READ, enStartAddr, NULL, pReadData, usLength);
 80020ee:	7afa      	ldrb	r2, [r7, #11]
 80020f0:	893b      	ldrh	r3, [r7, #8]
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2300      	movs	r3, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f806 	bl	800210e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 8002102:	e000      	b.n	8002106 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		break;
 8002104:	bf00      	nop
	}
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>:


//
//ref : https://garberas.com/archives/1542
void ICM_20602::CommunicateSPIMode(RW_Mode_t mode, RegisterAddress_t enStartAddr, uint8_t *pTxData, uint8_t *pRxData, uint16_t usDataLength)
{
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	72fb      	strb	r3, [r7, #11]
 800211c:	4613      	mov	r3, r2
 800211e:	72bb      	strb	r3, [r7, #10]
	uint16_t usCount = usDataLength;
 8002120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002122:	82fb      	strh	r3, [r7, #22]
	uint8_t ucAddress = 0x00;
 8002124:	2300      	movs	r3, #0
 8002126:	757b      	strb	r3, [r7, #21]

	//Chip Select
	LL_GPIO_ResetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7ff fb48 	bl	80017c8 <LL_GPIO_ResetOutputPin>

	//MSB Setting
	switch(mode){
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x36>
 800213e:	2b01      	cmp	r3, #1
 8002140:	d005      	beq.n	800214e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x40>
		break;
	case EN_RW_MODE_WRITE:
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
		break;
	default:
		return;		//設定外のため，即Return
 8002142:	e082      	b.n	800224a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x13c>
		ucAddress = enStartAddr | 0x80;		//7bit目を1に設定
 8002144:	7abb      	ldrb	r3, [r7, #10]
 8002146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800214a:	757b      	strb	r3, [r7, #21]
		break;
 800214c:	e004      	b.n	8002158 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x4a>
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002154:	757b      	strb	r3, [r7, #21]
		break;
 8002156:	bf00      	nop
		break;
	}

	//Address送信
	LL_SPI_TransmitData8(pSPIx, ucAddress);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	7d7a      	ldrb	r2, [r7, #21]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fb93 	bl	800188c <LL_SPI_TransmitData8>
	while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fb6e 	bl	800184c <LL_SPI_IsActiveFlag_TXE>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d000      	beq.n	8002182 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
 8002180:	e7f1      	b.n	8002166 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x58>
	while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fb4d 	bl	8001826 <LL_SPI_IsActiveFlag_RXNE>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d000      	beq.n	800219e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x90>
 800219c:	e7f1      	b.n	8002182 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
	LL_SPI_ReceiveData8(pSPIx); //Dummy Received
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb65 	bl	8001872 <LL_SPI_ReceiveData8>

	//Data送受信
	while(0 < usCount){
 80021a8:	8afb      	ldrh	r3, [r7, #22]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d045      	beq.n	800223a <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x12c>
		//送信
		if(NULL != pTxData){
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xba>
			LL_SPI_TransmitData8(pSPIx, *pTxData++);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7ff fb63 	bl	800188c <LL_SPI_TransmitData8>
 80021c6:	e005      	b.n	80021d4 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
		}else{
			LL_SPI_TransmitData8(pSPIx, 0x00);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fb5c 	bl	800188c <LL_SPI_TransmitData8>
		}
		while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx)){
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fb37 	bl	800184c <LL_SPI_IsActiveFlag_TXE>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d000      	beq.n	80021f0 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
 80021ee:	e7f1      	b.n	80021d4 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
			//送信完了待ち（送信バッファが空でない時）
			//※必要ならTimeout処理
		}
		while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx)){
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fb16 	bl	8001826 <LL_SPI_IsActiveFlag_RXNE>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d000      	beq.n	800220c <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xfe>
 800220a:	e7f1      	b.n	80021f0 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
			//受信完了待ち（受信バッファが空の時）
			//※必要ならTimeout処理
		}
		//受信
		if(NULL != pRxData){
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x11a>
			*pRxData++ = LL_SPI_ReceiveData8(pSPIx);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002216:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002218:	1c63      	adds	r3, r4, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
 800221c:	4610      	mov	r0, r2
 800221e:	f7ff fb28 	bl	8001872 <LL_SPI_ReceiveData8>
 8002222:	4603      	mov	r3, r0
 8002224:	7023      	strb	r3, [r4, #0]
 8002226:	e004      	b.n	8002232 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x124>
		}else{
			LL_SPI_ReceiveData8(pSPIx);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fb20 	bl	8001872 <LL_SPI_ReceiveData8>
		}
		usCount --;
 8002232:	8afb      	ldrh	r3, [r7, #22]
 8002234:	3b01      	subs	r3, #1
 8002236:	82fb      	strh	r3, [r7, #22]
	while(0 < usCount){
 8002238:	e7b6      	b.n	80021a8 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x9a>
	}
	//Chip Deselect
	LL_GPIO_SetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7ff fab1 	bl	80017ac <LL_GPIO_SetOutputPin>
}
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <LL_SYSTICK_EnableIT+0x1c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <LL_SYSTICK_EnableIT+0x1c>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <SystickTimer_Interrupt>:

#define SYSTICKTIMER_MS_PER_COUNT	(1)		//1Countが何msecかを定義(1ms以上)

//割り込み関数用タイマーカウント関数
void SystickTimer_Interrupt(void)
{
 8002270:	b490      	push	{r4, r7}
 8002272:	af00      	add	r7, sp, #0
	__u64SystickTimeCount += SYSTICKTIMER_MS_PER_COUNT;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <SystickTimer_Interrupt+0x20>)
 8002276:	e9d3 1200 	ldrd	r1, r2, [r3]
 800227a:	1c4b      	adds	r3, r1, #1
 800227c:	f142 0400 	adc.w	r4, r2, #0
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <SystickTimer_Interrupt+0x20>)
 8002282:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bc90      	pop	{r4, r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200001f8 	.word	0x200001f8

08002294 <SystickTimer_EnableInterrupt>:

//割り込み有効
void SystickTimer_EnableInterrupt(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8002298:	f7ff ffda 	bl	8002250 <LL_SYSTICK_EnableIT>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SystickTimer_SetSamplingTime>:
	LL_SYSTICK_DisableIT();
}

//サンプリングタイムの設定
void SystickTimer_SetSamplingTime(uint16_t u16SamplingTimeMs)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
	if(0u == u16SamplingTimeMs){
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <SystickTimer_SetSamplingTime+0x18>
		//0指定の場合はデフォルト値を設定
		__u16SamplingTimeMs = SYSTICKTIMER_DEFAULT_SAMPLING_TIME_MS;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SystickTimer_SetSamplingTime+0x2c>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	801a      	strh	r2, [r3, #0]
	}else{
		__u16SamplingTimeMs = u16SamplingTimeMs;
	}
}
 80022b6:	e002      	b.n	80022be <SystickTimer_SetSamplingTime+0x1e>
		__u16SamplingTimeMs = u16SamplingTimeMs;
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <SystickTimer_SetSamplingTime+0x2c>)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	8013      	strh	r3, [r2, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200001f4 	.word	0x200001f4

080022d0 <SystickTimer_IsSamplingTimeElapsed>:
//サンプリングタイムの経過判定
bool SystickTimer_IsSamplingTimeElapsed(void)
{
 80022d0:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
	//常に0以下の場合はFalseを即Return
	if(__u64SystickTimeCount <= 0u){
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 80022da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022de:	4323      	orrs	r3, r4
 80022e0:	d101      	bne.n	80022e6 <SystickTimer_IsSamplingTimeElapsed+0x16>
		return false;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e020      	b.n	8002328 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	static uint64_t u64LastTimeMs = 0;
	uint64_t u64CurrentTimeMs = __u64SystickTimeCount;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 80022e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022ec:	e9c7 3400 	strd	r3, r4, [r7]

	if(__u16SamplingTimeMs <= u64CurrentTimeMs - u64LastTimeMs){
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <SystickTimer_IsSamplingTimeElapsed+0x68>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	4a10      	ldr	r2, [pc, #64]	; (800233c <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 80022fc:	e9d2 bc00 	ldrd	fp, ip, [r2]
 8002300:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002304:	4629      	mov	r1, r5
 8002306:	4632      	mov	r2, r6
 8002308:	ebb1 010b 	subs.w	r1, r1, fp
 800230c:	eb62 020c 	sbc.w	r2, r2, ip
 8002310:	42a2      	cmp	r2, r4
 8002312:	bf08      	it	eq
 8002314:	4299      	cmpeq	r1, r3
 8002316:	d306      	bcc.n	8002326 <SystickTimer_IsSamplingTimeElapsed+0x56>
		u64LastTimeMs = u64CurrentTimeMs;
 8002318:	4a08      	ldr	r2, [pc, #32]	; (800233c <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 800231a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800231e:	e9c2 3400 	strd	r3, r4, [r2]
		return true;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	return false;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8002332:	4770      	bx	lr
 8002334:	200001f8 	.word	0x200001f8
 8002338:	200001f4 	.word	0x200001f4
 800233c:	20000200 	.word	0x20000200

08002340 <SystickTimer_GetTimeMS>:

//起動時からの時間取得 [ms]
uint64_t SystickTimer_GetTimeMS(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	af00      	add	r7, sp, #0
	return __u64SystickTimeCount;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <SystickTimer_GetTimeMS+0x14>)
 8002346:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800234a:	4618      	mov	r0, r3
 800234c:	4621      	mov	r1, r4
 800234e:	46bd      	mov	sp, r7
 8002350:	bc90      	pop	{r4, r7}
 8002352:	4770      	bx	lr
 8002354:	200001f8 	.word	0x200001f8

08002358 <SystickTimer_DelayMS>:

//遅延 [ms]
void SystickTimer_DelayMS(uint32_t u32DelayMs)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	LL_mDelay(u32DelayMs);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f004 f823 	bl	80063ac <LL_mDelay>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <SystickTimer_IsTimeElapsed>:

//指定時間経過
bool SystickTimer_IsTimeElapsed(uint64_t u64StartTimeMs ,uint32_t u32IntervalMs)
{
 800236e:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	if((uint64_t)u32IntervalMs <= SystickTimer_GetTimeMS() - u64StartTimeMs){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	461c      	mov	r4, r3
 8002380:	f04f 0500 	mov.w	r5, #0
 8002384:	f7ff ffdc 	bl	8002340 <SystickTimer_GetTimeMS>
 8002388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238c:	1a80      	subs	r0, r0, r2
 800238e:	eb61 0103 	sbc.w	r1, r1, r3
 8002392:	4683      	mov	fp, r0
 8002394:	468c      	mov	ip, r1
 8002396:	45ac      	cmp	ip, r5
 8002398:	bf08      	it	eq
 800239a:	45a3      	cmpeq	fp, r4
 800239c:	d301      	bcc.n	80023a2 <SystickTimer_IsTimeElapsed+0x34>
		return true;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <SystickTimer_IsTimeElapsed+0x36>
	}
	return false;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}
	...

080023b0 <WallSensor_SetValueLedOn>:
static uint16_t g_WallSensorLedOffValue[EN_WALLSENSOR_POS_LAST] = {0};
static uint16_t g_WallSensorValue[EN_WALLSENSOR_POS_LAST] = {0};
static bool bAvailable  = false;

void WallSensor_SetValueLedOn(EN_WALLSENSOR_POS enPos, uint16_t usValue)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	80bb      	strh	r3, [r7, #4]
    if(EN_WALLSENSOR_POS_LAST <= enPos){
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d808      	bhi.n	80023d8 <WallSensor_SetValueLedOn+0x28>
        return;
    }
    g_WallSensorLedOnValue[enPos] = usValue;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4906      	ldr	r1, [pc, #24]	; (80023e4 <WallSensor_SetValueLedOn+0x34>)
 80023ca:	88ba      	ldrh	r2, [r7, #4]
 80023cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    bAvailable = true;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <WallSensor_SetValueLedOn+0x38>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e000      	b.n	80023da <WallSensor_SetValueLedOn+0x2a>
        return;
 80023d8:	bf00      	nop
    
    if(enPos == EN_WALLSENSOR_POS_RF){
        //printf("Right Front ON:%d\n",usValue);
    }
    
}
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20000208 	.word	0x20000208
 80023e8:	20000220 	.word	0x20000220

080023ec <WallSensor_SetValueLedOff>:
void WallSensor_SetValueLedOff(EN_WALLSENSOR_POS enPos, uint16_t usValue)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80bb      	strh	r3, [r7, #4]
    if(EN_WALLSENSOR_POS_LAST <= enPos){
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d808      	bhi.n	8002414 <WallSensor_SetValueLedOff+0x28>
        return;
    }
    g_WallSensorLedOffValue[enPos] = usValue;
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4906      	ldr	r1, [pc, #24]	; (8002420 <WallSensor_SetValueLedOff+0x34>)
 8002406:	88ba      	ldrh	r2, [r7, #4]
 8002408:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    bAvailable = false;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <WallSensor_SetValueLedOff+0x38>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e000      	b.n	8002416 <WallSensor_SetValueLedOff+0x2a>
        return;
 8002414:	bf00      	nop
    
    if(enPos == EN_WALLSENSOR_POS_RF){
        //printf("Right Front Off:%d\n",usValue);
    }
}
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	20000210 	.word	0x20000210
 8002424:	20000220 	.word	0x20000220

08002428 <WallSensor_Update>:
void WallSensor_Update()
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
    if(bAvailable){
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <WallSensor_Update+0x48>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <WallSensor_Update+0x3c>
        for(EN_WALLSENSOR_POS enPos = EN_WALLSENSOR_POS_FIRST; enPos < EN_WALLSENSOR_POS_LAST; enPos++){
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e010      	b.n	800245e <WallSensor_Update+0x36>
            g_WallSensorValue[enPos] = g_WallSensorLedOnValue[enPos] - g_WallSensorLedOffValue[enPos];
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <WallSensor_Update+0x4c>)
 8002440:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <WallSensor_Update+0x50>)
 8002448:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	1a8a      	subs	r2, r1, r2
 8002450:	b291      	uxth	r1, r2
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <WallSensor_Update+0x54>)
 8002454:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(EN_WALLSENSOR_POS enPos = EN_WALLSENSOR_POS_FIRST; enPos < EN_WALLSENSOR_POS_LAST; enPos++){
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	3301      	adds	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d9eb      	bls.n	800243c <WallSensor_Update+0x14>
        }
    }
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	20000220 	.word	0x20000220
 8002474:	20000208 	.word	0x20000208
 8002478:	20000210 	.word	0x20000210
 800247c:	20000218 	.word	0x20000218

08002480 <WallSensor_GetValue>:
void WallSensor_GetValue(uint16_t *pValue, uint8_t ucSize)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
    memcpy(pValue, g_WallSensorValue, ucSize * sizeof(uint16_t));
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	461a      	mov	r2, r3
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <WallSensor_GetValue+0x24>)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f003 ffe7 	bl	8006468 <memcpy>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000218 	.word	0x20000218

080024a8 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80024a8:	b490      	push	{r4, r7}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80024b2:	2400      	movs	r4, #0
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <LL_ADC_DMA_GetRegAddr+0x1a>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	334c      	adds	r3, #76	; 0x4c
 80024be:	461c      	mov	r4, r3
 80024c0:	e000      	b.n	80024c4 <LL_ADC_DMA_GetRegAddr+0x1c>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 80024c2:	4c03      	ldr	r4, [pc, #12]	; (80024d0 <LL_ADC_DMA_GetRegAddr+0x28>)
  }
  
  return data_reg_addr;
 80024c4:	4623      	mov	r3, r4
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc90      	pop	{r4, r7}
 80024ce:	4770      	bx	lr
 80024d0:	40012308 	.word	0x40012308

080024d4 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_RES));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024f0:	b490      	push	{r4, r7}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	332c      	adds	r3, #44	; 0x2c
 8002500:	4619      	mov	r1, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002508:	f44f 7240 	mov.w	r2, #768	; 0x300
 800250c:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	40d3      	lsrs	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	211f      	movs	r1, #31
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 011f 	and.w	r1, r3, #31
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bc90      	pop	{r4, r7}
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800257c:	b490      	push	{r4, r7}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	330c      	adds	r3, #12
 800258c:	4619      	mov	r1, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	fa92 f2a2 	rbit	r2, r2
 80025a0:	613a      	str	r2, [r7, #16]
  return result;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	40d3      	lsrs	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80025b2:	6822      	ldr	r2, [r4, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80025ba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80025be:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	69f9      	ldr	r1, [r7, #28]
 80025c2:	fa91 f1a1 	rbit	r1, r1
 80025c6:	61b9      	str	r1, [r7, #24]
  return result;
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	fab1 f181 	clz	r1, r1
 80025ce:	b2c9      	uxtb	r1, r1
 80025d0:	40cb      	lsrs	r3, r1
 80025d2:	2107      	movs	r1, #7
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80025e2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80025e6:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ea:	fa91 f1a1 	rbit	r1, r1
 80025ee:	6239      	str	r1, [r7, #32]
  return result;
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	fab1 f181 	clz	r1, r1
 80025f6:	b2c9      	uxtb	r1, r1
 80025f8:	40cb      	lsrs	r3, r1
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc90      	pop	{r4, r7}
 800260c:	4770      	bx	lr

0800260e <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <LL_DMA_EnableStream+0x3c>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <LL_DMA_EnableStream+0x3c>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	440a      	add	r2, r1
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	4611      	mov	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	440a      	add	r2, r1
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	08008b50 	.word	0x08008b50

080026b0 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <LL_DMA_DisableStream+0x3c>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <LL_DMA_DisableStream+0x3c>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	440a      	add	r2, r1
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	4611      	mov	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	440a      	add	r2, r1
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6013      	str	r3, [r2, #0]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	08008b50 	.word	0x08008b50

080026f0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <LL_DMA_SetDataTransferDirection+0x44>)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002710:	4908      	ldr	r1, [pc, #32]	; (8002734 <LL_DMA_SetDataTransferDirection+0x44>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	440b      	add	r3, r1
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	440b      	add	r3, r1
 800271e:	4619      	mov	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	08008b50 	.word	0x08008b50

08002738 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <LL_DMA_SetMode+0x44>)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8002758:	4908      	ldr	r1, [pc, #32]	; (800277c <LL_DMA_SetMode+0x44>)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	440b      	add	r3, r1
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	440b      	add	r3, r1
 8002766:	4619      	mov	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	08008b50 	.word	0x08008b50

08002780 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <LL_DMA_SetPeriphIncMode+0x44>)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027a0:	4908      	ldr	r1, [pc, #32]	; (80027c4 <LL_DMA_SetPeriphIncMode+0x44>)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	440b      	add	r3, r1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	440b      	add	r3, r1
 80027ae:	4619      	mov	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	08008b50 	.word	0x08008b50

080027c8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <LL_DMA_SetMemoryIncMode+0x44>)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027e8:	4908      	ldr	r1, [pc, #32]	; (800280c <LL_DMA_SetMemoryIncMode+0x44>)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	440b      	add	r3, r1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	440b      	add	r3, r1
 80027f6:	4619      	mov	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	08008b50 	.word	0x08008b50

08002810 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <LL_DMA_SetPeriphSize+0x44>)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4413      	add	r3, r2
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002830:	4908      	ldr	r1, [pc, #32]	; (8002854 <LL_DMA_SetPeriphSize+0x44>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	440b      	add	r3, r1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	440b      	add	r3, r1
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	08008b50 	.word	0x08008b50

08002858 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <LL_DMA_SetMemorySize+0x44>)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002878:	4908      	ldr	r1, [pc, #32]	; (800289c <LL_DMA_SetMemorySize+0x44>)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	440b      	add	r3, r1
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	440b      	add	r3, r1
 8002886:	4619      	mov	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	08008b50 	.word	0x08008b50

080028a0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c0:	4908      	ldr	r1, [pc, #32]	; (80028e4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	440b      	add	r3, r1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	440b      	add	r3, r1
 80028ce:	4619      	mov	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	08008b50 	.word	0x08008b50

080028e8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <LL_DMA_SetDataLength+0x44>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	4908      	ldr	r1, [pc, #32]	; (800292c <LL_DMA_SetDataLength+0x44>)
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	440a      	add	r2, r1
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	4611      	mov	r1, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	440a      	add	r2, r1
 8002916:	4611      	mov	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	08008b50 	.word	0x08008b50

08002930 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <LL_DMA_SetChannelSelection+0x44>)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002950:	4908      	ldr	r1, [pc, #32]	; (8002974 <LL_DMA_SetChannelSelection+0x44>)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	440b      	add	r3, r1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	440b      	add	r3, r1
 800295e:	4619      	mov	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	08008b50 	.word	0x08008b50

08002978 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <LL_DMA_DisableFifoMode+0x3c>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <LL_DMA_DisableFifoMode+0x3c>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	440a      	add	r2, r1
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	4611      	mov	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	440a      	add	r2, r1
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6153      	str	r3, [r2, #20]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	08008b50 	.word	0x08008b50

080029b8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d114      	bne.n	80029f6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <LL_DMA_ConfigAddresses+0x74>)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <LL_DMA_ConfigAddresses+0x74>)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	461a      	mov	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80029f4:	e013      	b.n	8002a1e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80029f6:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <LL_DMA_ConfigAddresses+0x74>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <LL_DMA_ConfigAddresses+0x74>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	60d3      	str	r3, [r2, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	08008b50 	.word	0x08008b50

08002a30 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <LL_DMA_EnableIT_TC+0x3c>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4908      	ldr	r1, [pc, #32]	; (8002a6c <LL_DMA_EnableIT_TC+0x3c>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	440a      	add	r2, r1
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	4611      	mov	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	440a      	add	r2, r1
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	08008b50 	.word	0x08008b50

08002a70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4013      	ands	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40023800 	.word	0x40023800

08002ad0 <Adc_IsValidReadChannel>:
static void Adc1_StartConvert(void);
static void Adc2_StartConvert(void);

/* 内部関数 */
static bool Adc_IsValidReadChannel(uint8_t ucRequestRank, uint8_t ucChannelSize)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	460a      	mov	r2, r1
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71bb      	strb	r3, [r7, #6]
  if(ucRequestRank <= 0 || ucRequestRank > ucChannelSize){
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <Adc_IsValidReadChannel+0x1e>
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d901      	bls.n	8002af2 <Adc_IsValidReadChannel+0x22>
    return false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <Adc_IsValidReadChannel+0x24>
  }
  return true;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <Adc1_StartConvert>:

  return true;
}

static void Adc1_StartConvert(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af02      	add	r7, sp, #8
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_0);
 8002b06:	2100      	movs	r1, #0
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <Adc1_StartConvert+0x5c>)
 8002b0a:	f7ff ff91 	bl	8002a30 <LL_DMA_EnableIT_TC>
  LL_ADC_Enable(ADC1);
 8002b0e:	4814      	ldr	r0, [pc, #80]	; (8002b60 <Adc1_StartConvert+0x60>)
 8002b10:	f7ff fd7d 	bl	800260e <LL_ADC_Enable>
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_0);
 8002b14:	2100      	movs	r1, #0
 8002b16:	4811      	ldr	r0, [pc, #68]	; (8002b5c <Adc1_StartConvert+0x5c>)
 8002b18:	f7ff fdca 	bl	80026b0 <LL_DMA_DisableStream>
  LL_DMA_ConfigAddresses( DMA2, //DMA Channel
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <Adc1_StartConvert+0x60>)
 8002b20:	f7ff fcc2 	bl	80024a8 <LL_ADC_DMA_GetRegAddr>
 8002b24:	4601      	mov	r1, r0
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <Adc1_StartConvert+0x64>)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	460a      	mov	r2, r1
 8002b30:	2100      	movs	r1, #0
 8002b32:	480a      	ldr	r0, [pc, #40]	; (8002b5c <Adc1_StartConvert+0x5c>)
 8002b34:	f7ff ff40 	bl	80029b8 <LL_DMA_ConfigAddresses>
                          LL_DMA_STREAM_0, //DMA Stream
                          LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), //ADC Register(Source) 
                          (uint32_t)&g_usAdc1Value, //Destination
                          LL_DMA_DIRECTION_PERIPH_TO_MEMORY //Direction
                          ); 
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, ADC1_CHANNEL_NUM);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4807      	ldr	r0, [pc, #28]	; (8002b5c <Adc1_StartConvert+0x5c>)
 8002b3e:	f7ff fed3 	bl	80028e8 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 8002b42:	2100      	movs	r1, #0
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <Adc1_StartConvert+0x5c>)
 8002b46:	f7ff fd93 	bl	8002670 <LL_DMA_EnableStream>
  LL_ADC_REG_StartConversionSWStart(ADC1);
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <Adc1_StartConvert+0x60>)
 8002b4c:	f7ff fd6f 	bl	800262e <LL_ADC_REG_StartConversionSWStart>
  g_bAdc1Start = true;
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <Adc1_StartConvert+0x68>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40026400 	.word	0x40026400
 8002b60:	40012000 	.word	0x40012000
 8002b64:	2000023c 	.word	0x2000023c
 8002b68:	20000221 	.word	0x20000221

08002b6c <Adc2_StartConvert>:

static void Adc2_StartConvert(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af02      	add	r7, sp, #8
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_2);
 8002b72:	2102      	movs	r1, #2
 8002b74:	4811      	ldr	r0, [pc, #68]	; (8002bbc <Adc2_StartConvert+0x50>)
 8002b76:	f7ff ff5b 	bl	8002a30 <LL_DMA_EnableIT_TC>
  //LL_ADC_Enable(ADC2);
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <Adc2_StartConvert+0x50>)
 8002b7e:	f7ff fd97 	bl	80026b0 <LL_DMA_DisableStream>
  LL_DMA_ConfigAddresses( DMA2, //DMA Channel
 8002b82:	2100      	movs	r1, #0
 8002b84:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <Adc2_StartConvert+0x54>)
 8002b86:	f7ff fc8f 	bl	80024a8 <LL_ADC_DMA_GetRegAddr>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <Adc2_StartConvert+0x58>)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	460a      	mov	r2, r1
 8002b96:	2102      	movs	r1, #2
 8002b98:	4808      	ldr	r0, [pc, #32]	; (8002bbc <Adc2_StartConvert+0x50>)
 8002b9a:	f7ff ff0d 	bl	80029b8 <LL_DMA_ConfigAddresses>
                          LL_DMA_STREAM_2, //DMA Stream
                          LL_ADC_DMA_GetRegAddr(ADC2, LL_ADC_DMA_REG_REGULAR_DATA), //ADC Register(Source) 
                          (uint32_t)&g_usAdc2Value, //Destination
                          LL_DMA_DIRECTION_PERIPH_TO_MEMORY //Direction
                          ); 
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, ADC2_CHANNEL_NUM);
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <Adc2_StartConvert+0x50>)
 8002ba4:	f7ff fea0 	bl	80028e8 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4804      	ldr	r0, [pc, #16]	; (8002bbc <Adc2_StartConvert+0x50>)
 8002bac:	f7ff fd60 	bl	8002670 <LL_DMA_EnableStream>
  //LL_ADC_REG_StartConversionSWStart(ADC2);
  g_bAdc2Start = true;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <Adc2_StartConvert+0x5c>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40026400 	.word	0x40026400
 8002bc0:	40012100 	.word	0x40012100
 8002bc4:	20000234 	.word	0x20000234
 8002bc8:	20000222 	.word	0x20000222

08002bcc <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b092      	sub	sp, #72	; 0x48
 8002bd0:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002bd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002bee:	f107 0318 	add.w	r3, r7, #24
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002c0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c10:	f7ff ff46 	bl	8002aa0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7ff ff2b 	bl	8002a70 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = BAT_MONI_Pin;
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BAT_MONI_GPIO_Port, &GPIO_InitStruct);
 8002c26:	463b      	mov	r3, r7
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4837      	ldr	r0, [pc, #220]	; (8002d08 <MX_ADC1_Init+0x13c>)
 8002c2c:	f002 fabb 	bl	80051a6 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	4835      	ldr	r0, [pc, #212]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c36:	f7ff fe7b 	bl	8002930 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4833      	ldr	r0, [pc, #204]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c40:	f7ff fd56 	bl	80026f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8002c44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4830      	ldr	r0, [pc, #192]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c4c:	f7ff fe28 	bl	80028a0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8002c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c54:	2100      	movs	r1, #0
 8002c56:	482d      	ldr	r0, [pc, #180]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c58:	f7ff fd6e 	bl	8002738 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	482a      	ldr	r0, [pc, #168]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c62:	f7ff fd8d 	bl	8002780 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8002c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4827      	ldr	r0, [pc, #156]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c6e:	f7ff fdab 	bl	80027c8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8002c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c76:	2100      	movs	r1, #0
 8002c78:	4824      	ldr	r0, [pc, #144]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c7a:	f7ff fdc9 	bl	8002810 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8002c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c82:	2100      	movs	r1, #0
 8002c84:	4821      	ldr	r0, [pc, #132]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c86:	f7ff fde7 	bl	8002858 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	481f      	ldr	r0, [pc, #124]	; (8002d0c <MX_ADC1_Init+0x140>)
 8002c8e:	f7ff fe73 	bl	8002978 <LL_DMA_DisableFifoMode>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	481a      	ldr	r0, [pc, #104]	; (8002d10 <MX_ADC1_Init+0x144>)
 8002ca6:	f002 f90b 	bl	8004ec0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <MX_ADC1_Init+0x144>)
 8002cc8:	f002 f926 	bl	8004f18 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4810      	ldr	r0, [pc, #64]	; (8002d10 <MX_ADC1_Init+0x144>)
 8002cd0:	f7ff fc41 	bl	8002556 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd8:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002cde:	f107 0318 	add.w	r3, r7, #24
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480b      	ldr	r0, [pc, #44]	; (8002d14 <MX_ADC1_Init+0x148>)
 8002ce6:	f002 f8a3 	bl	8004e30 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <MX_ADC1_Init+0x14c>)
 8002cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf0:	4807      	ldr	r0, [pc, #28]	; (8002d10 <MX_ADC1_Init+0x144>)
 8002cf2:	f7ff fbfd 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <MX_ADC1_Init+0x14c>)
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <MX_ADC1_Init+0x144>)
 8002cfc:	f7ff fc3e 	bl	800257c <LL_ADC_SetChannelSamplingTime>

}
 8002d00:	bf00      	nop
 8002d02:	3748      	adds	r7, #72	; 0x48
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40026400 	.word	0x40026400
 8002d10:	40012000 	.word	0x40012000
 8002d14:	40012300 	.word	0x40012300
 8002d18:	02c00004 	.word	0x02c00004

08002d1c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002d2e:	f107 0318 	add.w	r3, r7, #24
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3e:	463b      	mov	r3, r7
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8002d4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d52:	f7ff fea5 	bl	8002aa0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7ff fe8a 	bl	8002a70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7ff fe87 	bl	8002a70 <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC2_IN6
  PA7   ------> ADC2_IN7
  PB0   ------> ADC2_IN8
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = WALL_SEN1_Pin|WALL_SEN0_Pin;
 8002d62:	23c0      	movs	r3, #192	; 0xc0
 8002d64:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002d66:	2303      	movs	r3, #3
 8002d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	463b      	mov	r3, r7
 8002d70:	4619      	mov	r1, r3
 8002d72:	484c      	ldr	r0, [pc, #304]	; (8002ea4 <MX_ADC2_Init+0x188>)
 8002d74:	f002 fa17 	bl	80051a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = WALL_SEN2_Pin|WALL_SEN3_Pin;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	463b      	mov	r3, r7
 8002d86:	4619      	mov	r1, r3
 8002d88:	4847      	ldr	r0, [pc, #284]	; (8002ea8 <MX_ADC2_Init+0x18c>)
 8002d8a:	f002 fa0c 	bl	80051a6 <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_1);
 8002d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d92:	2102      	movs	r1, #2
 8002d94:	4845      	ldr	r0, [pc, #276]	; (8002eac <MX_ADC2_Init+0x190>)
 8002d96:	f7ff fdcb 	bl	8002930 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4843      	ldr	r0, [pc, #268]	; (8002eac <MX_ADC2_Init+0x190>)
 8002da0:	f7ff fca6 	bl	80026f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_VERYHIGH);
 8002da4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002da8:	2102      	movs	r1, #2
 8002daa:	4840      	ldr	r0, [pc, #256]	; (8002eac <MX_ADC2_Init+0x190>)
 8002dac:	f7ff fd78 	bl	80028a0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8002db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db4:	2102      	movs	r1, #2
 8002db6:	483d      	ldr	r0, [pc, #244]	; (8002eac <MX_ADC2_Init+0x190>)
 8002db8:	f7ff fcbe 	bl	8002738 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	483a      	ldr	r0, [pc, #232]	; (8002eac <MX_ADC2_Init+0x190>)
 8002dc2:	f7ff fcdd 	bl	8002780 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4837      	ldr	r0, [pc, #220]	; (8002eac <MX_ADC2_Init+0x190>)
 8002dce:	f7ff fcfb 	bl	80027c8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_HALFWORD);
 8002dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4834      	ldr	r0, [pc, #208]	; (8002eac <MX_ADC2_Init+0x190>)
 8002dda:	f7ff fd19 	bl	8002810 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_HALFWORD);
 8002dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de2:	2102      	movs	r1, #2
 8002de4:	4831      	ldr	r0, [pc, #196]	; (8002eac <MX_ADC2_Init+0x190>)
 8002de6:	f7ff fd37 	bl	8002858 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8002dea:	2102      	movs	r1, #2
 8002dec:	482f      	ldr	r0, [pc, #188]	; (8002eac <MX_ADC2_Init+0x190>)
 8002dee:	f7ff fdc3 	bl	8002978 <LL_DMA_DisableFifoMode>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002df6:	2300      	movs	r3, #0
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8002e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e04:	4619      	mov	r1, r3
 8002e06:	482a      	ldr	r0, [pc, #168]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e08:	f002 f85a 	bl	8004ec0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8002e0c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
 8002e10:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8002e12:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002e16:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8002e26:	f107 0318 	add.w	r3, r7, #24
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4820      	ldr	r0, [pc, #128]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e2e:	f002 f873 	bl	8004f18 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8002e32:	2100      	movs	r1, #0
 8002e34:	481e      	ldr	r0, [pc, #120]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e36:	f7ff fb8e 	bl	8002556 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_REG_StartConversionExtTrig(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 8002e3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8002e3e:	481c      	ldr	r0, [pc, #112]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e40:	f7ff fc05 	bl	800264e <LL_ADC_REG_StartConversionExtTrig>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <MX_ADC2_Init+0x198>)
 8002e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4a:	4819      	ldr	r0, [pc, #100]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e4c:	f7ff fb50 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_84CYCLES);
 8002e50:	2204      	movs	r2, #4
 8002e52:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <MX_ADC2_Init+0x198>)
 8002e54:	4816      	ldr	r0, [pc, #88]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e56:	f7ff fb91 	bl	800257c <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <MX_ADC2_Init+0x19c>)
 8002e5c:	f240 2105 	movw	r1, #517	; 0x205
 8002e60:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e62:	f7ff fb45 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_84CYCLES);
 8002e66:	2204      	movs	r2, #4
 8002e68:	4913      	ldr	r1, [pc, #76]	; (8002eb8 <MX_ADC2_Init+0x19c>)
 8002e6a:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e6c:	f7ff fb86 	bl	800257c <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_ADC2_Init+0x1a0>)
 8002e72:	f240 210a 	movw	r1, #522	; 0x20a
 8002e76:	480e      	ldr	r0, [pc, #56]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e78:	f7ff fb3a 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_84CYCLES);
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	490f      	ldr	r1, [pc, #60]	; (8002ebc <MX_ADC2_Init+0x1a0>)
 8002e80:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e82:	f7ff fb7b 	bl	800257c <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <MX_ADC2_Init+0x1a4>)
 8002e88:	f240 210f 	movw	r1, #527	; 0x20f
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e8e:	f7ff fb2f 	bl	80024f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_84CYCLES);
 8002e92:	2204      	movs	r2, #4
 8002e94:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <MX_ADC2_Init+0x1a4>)
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <MX_ADC2_Init+0x194>)
 8002e98:	f7ff fb70 	bl	800257c <LL_ADC_SetChannelSamplingTime>

}
 8002e9c:	bf00      	nop
 8002e9e:	3738      	adds	r7, #56	; 0x38
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40026400 	.word	0x40026400
 8002eb0:	40012100 	.word	0x40012100
 8002eb4:	03500007 	.word	0x03500007
 8002eb8:	03200006 	.word	0x03200006
 8002ebc:	03800008 	.word	0x03800008
 8002ec0:	03b00009 	.word	0x03b00009

08002ec4 <Adc_StartConvert>:

/* USER CODE BEGIN 1 */
/* 外部関数 */
void Adc_StartConvert(EN_ADC_NUM enAdcNum)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  switch(enAdcNum){
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <Adc_StartConvert+0x16>
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d003      	beq.n	8002ee0 <Adc_StartConvert+0x1c>
      break;
    case EN_ADC_NUM_2:
      Adc2_StartConvert();
      break;
    default:
      break;
 8002ed8:	e005      	b.n	8002ee6 <Adc_StartConvert+0x22>
      Adc1_StartConvert();
 8002eda:	f7ff fe11 	bl	8002b00 <Adc1_StartConvert>
      break;
 8002ede:	e002      	b.n	8002ee6 <Adc_StartConvert+0x22>
      Adc2_StartConvert();
 8002ee0:	f7ff fe44 	bl	8002b6c <Adc2_StartConvert>
      break;
 8002ee4:	bf00      	nop
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <Adc_IsStartConvert>:

bool Adc_IsStartConvert(EN_ADC_NUM enAdcNum)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  bool bResult = false;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
  switch(enAdcNum){
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <Adc_IsStartConvert+0x1a>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d004      	beq.n	8002f12 <Adc_IsStartConvert+0x22>
      break;
    case EN_ADC_NUM_2:
      bResult = g_bAdc2Start;
      break;
    default:
      break;
 8002f08:	e007      	b.n	8002f1a <Adc_IsStartConvert+0x2a>
      bResult = g_bAdc1Start;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <Adc_IsStartConvert+0x38>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e003      	b.n	8002f1a <Adc_IsStartConvert+0x2a>
      bResult = g_bAdc2Start;
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <Adc_IsStartConvert+0x3c>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	bf00      	nop
  }
  return bResult;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000221 	.word	0x20000221
 8002f2c:	20000222 	.word	0x20000222

08002f30 <Adc_GetAdcChannelValue>:

uint16_t Adc_GetAdcChannelValue(EN_ADC_NUM enAdcNum, uint8_t ucChannelRank)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	460a      	mov	r2, r1
 8002f3a:	71fb      	strb	r3, [r7, #7]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	71bb      	strb	r3, [r7, #6]
  if(enAdcNum >= EN_ADC_NUM_LAST){
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d901      	bls.n	8002f4a <Adc_GetAdcChannelValue+0x1a>
    return 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e01c      	b.n	8002f84 <Adc_GetAdcChannelValue+0x54>
  }
  const AdcConfig_t *pConfigTbl = &g_AdcConfigTable[enAdcNum];
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <Adc_GetAdcChannelValue+0x5c>)
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  if(!Adc_IsValidReadChannel(ucChannelRank, pConfigTbl->ucAdcChannelNum)){
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	7b1a      	ldrb	r2, [r3, #12]
 8002f58:	79bb      	ldrb	r3, [r7, #6]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fdb7 	bl	8002ad0 <Adc_IsValidReadChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <Adc_GetAdcChannelValue+0x42>
    return 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e008      	b.n	8002f84 <Adc_GetAdcChannelValue+0x54>
  }
  return (*(pConfigTbl->pAdcValue + ucChannelRank - 1));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	79bb      	ldrb	r3, [r7, #6]
 8002f78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	08008b58 	.word	0x08008b58

08002f90 <Adc_GetRateAdcChannelValue>:
		  , *(pConfigTbl->pAdcValue+2)
		  , *(pConfigTbl->pAdcValue+3));*/
}

float Adc_GetRateAdcChannelValue(EN_ADC_NUM enAdcNum, uint8_t ucChannelRank)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	71fb      	strb	r3, [r7, #7]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71bb      	strb	r3, [r7, #6]
  if(enAdcNum >= EN_ADC_NUM_LAST){
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d902      	bls.n	8002fac <Adc_GetRateAdcChannelValue+0x1c>
    return 0;
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e031      	b.n	8003010 <Adc_GetRateAdcChannelValue+0x80>
  }
  const AdcConfig_t *pConfigTbl = &g_AdcConfigTable[enAdcNum];
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <Adc_GetRateAdcChannelValue+0x88>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  if(!Adc_IsValidReadChannel(ucChannelRank, pConfigTbl->ucAdcChannelNum)){
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	7b1a      	ldrb	r2, [r3, #12]
 8002fba:	79bb      	ldrb	r3, [r7, #6]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fd86 	bl	8002ad0 <Adc_IsValidReadChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f083 0301 	eor.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <Adc_GetRateAdcChannelValue+0x46>
    return 0.0;
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e01c      	b.n	8003010 <Adc_GetRateAdcChannelValue+0x80>
  }
  uint16_t uiResolutionValue = Adc_GetResolutionValue(enAdcNum);
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f81f 	bl	800301c <Adc_GetResolutionValue>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	827b      	strh	r3, [r7, #18]
  float fValue = (float)(*(pConfigTbl->pAdcValue + ucChannelRank - 1)) / (float)(uiResolutionValue);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fec:	3b01      	subs	r3, #1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffc:	8a7b      	ldrh	r3, [r7, #18]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300a:	edc7 7a03 	vstr	s15, [r7, #12]
  return fValue;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08008b58 	.word	0x08008b58

0800301c <Adc_GetResolutionValue>:
    ucSize --;
  }
}

uint16_t Adc_GetResolutionValue(EN_ADC_NUM enAdcNum)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  ADC_TypeDef *pADCx;
  switch (enAdcNum)
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <Adc_GetResolutionValue+0x16>
 800302c:	2b01      	cmp	r3, #1
 800302e:	d003      	beq.n	8003038 <Adc_GetResolutionValue+0x1c>
 8003030:	e005      	b.n	800303e <Adc_GetResolutionValue+0x22>
  {
  case EN_ADC_NUM_1:
    pADCx = ADC1;
 8003032:	4b19      	ldr	r3, [pc, #100]	; (8003098 <Adc_GetResolutionValue+0x7c>)
 8003034:	617b      	str	r3, [r7, #20]
    break;
 8003036:	e004      	b.n	8003042 <Adc_GetResolutionValue+0x26>
  case EN_ADC_NUM_2:
    pADCx = ADC2;
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <Adc_GetResolutionValue+0x80>)
 800303a:	617b      	str	r3, [r7, #20]
    break;
 800303c:	e001      	b.n	8003042 <Adc_GetResolutionValue+0x26>
  default:
    return 1u;
 800303e:	2301      	movs	r3, #1
 8003040:	e026      	b.n	8003090 <Adc_GetResolutionValue+0x74>
    break;
  }
  uint32_t uiResolution = LL_ADC_GetResolution(pADCx);
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff fa46 	bl	80024d4 <LL_ADC_GetResolution>
 8003048:	60f8      	str	r0, [r7, #12]
  uint16_t uiResolutionValue = 0x0FFF;
 800304a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800304e:	827b      	strh	r3, [r7, #18]
  switch(uiResolution) {
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003056:	d010      	beq.n	800307a <Adc_GetResolutionValue+0x5e>
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800305c:	d802      	bhi.n	8003064 <Adc_GetResolutionValue+0x48>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <Adc_GetResolutionValue+0x56>
  case LL_ADC_RESOLUTION_6B:
    uiResolutionValue = 0x003F;
    break;
  default:
    /* do nothing */
    break;
 8003062:	e014      	b.n	800308e <Adc_GetResolutionValue+0x72>
  switch(uiResolution) {
 8003064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003068:	d00b      	beq.n	8003082 <Adc_GetResolutionValue+0x66>
 800306a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800306e:	d00b      	beq.n	8003088 <Adc_GetResolutionValue+0x6c>
    break;
 8003070:	e00d      	b.n	800308e <Adc_GetResolutionValue+0x72>
    uiResolutionValue = 0x0FFF;
 8003072:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003076:	827b      	strh	r3, [r7, #18]
    break;
 8003078:	e009      	b.n	800308e <Adc_GetResolutionValue+0x72>
    uiResolutionValue = 0x03FF;
 800307a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800307e:	827b      	strh	r3, [r7, #18]
    break;
 8003080:	e005      	b.n	800308e <Adc_GetResolutionValue+0x72>
    uiResolutionValue = 0x00FF;
 8003082:	23ff      	movs	r3, #255	; 0xff
 8003084:	827b      	strh	r3, [r7, #18]
    break;
 8003086:	e002      	b.n	800308e <Adc_GetResolutionValue+0x72>
    uiResolutionValue = 0x003F;
 8003088:	233f      	movs	r3, #63	; 0x3f
 800308a:	827b      	strh	r3, [r7, #18]
    break;
 800308c:	bf00      	nop
  }
  return uiResolutionValue;
 800308e:	8a7b      	ldrh	r3, [r7, #18]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40012000 	.word	0x40012000
 800309c:	40012100 	.word	0x40012100

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0b      	blt.n	80030e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <__NVIC_EnableIRQ+0x38>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	; (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <LL_AHB1_GRP1_EnableClock>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800

080031e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80031e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80031ec:	f7ff ffe2 	bl	80031b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 80031f0:	f7ff ff56 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2200      	movs	r2, #0
 80031f8:	2104      	movs	r1, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ffa6 	bl	800314c <NVIC_EncodePriority>
 8003200:	4603      	mov	r3, r0
 8003202:	4619      	mov	r1, r3
 8003204:	2038      	movs	r0, #56	; 0x38
 8003206:	f7ff ff77 	bl	80030f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800320a:	2038      	movs	r0, #56	; 0x38
 800320c:	f7ff ff56 	bl	80030bc <__NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003210:	f7ff ff46 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 8003214:	4603      	mov	r3, r0
 8003216:	2200      	movs	r2, #0
 8003218:	2103      	movs	r1, #3
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff96 	bl	800314c <NVIC_EncodePriority>
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	203a      	movs	r0, #58	; 0x3a
 8003226:	f7ff ff67 	bl	80030f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800322a:	203a      	movs	r0, #58	; 0x3a
 800322c:	f7ff ff46 	bl	80030bc <__NVIC_EnableIRQ>

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <LL_AHB1_GRP1_EnableClock>:
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800324a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4013      	ands	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40023800 	.word	0x40023800

08003264 <LL_GPIO_ResetOutputPin>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	463b      	mov	r3, r7
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
 8003298:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800329a:	2004      	movs	r0, #4
 800329c:	f7ff ffca 	bl	8003234 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7ff ffc7 	bl	8003234 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80032a6:	2002      	movs	r0, #2
 80032a8:	f7ff ffc4 	bl	8003234 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80032ac:	2008      	movs	r0, #8
 80032ae:	f7ff ffc1 	bl	8003234 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 80032b2:	f24e 311f 	movw	r1, #58143	; 0xe31f
 80032b6:	4839      	ldr	r0, [pc, #228]	; (800339c <MX_GPIO_Init+0x118>)
 80032b8:	f7ff ffd4 	bl	8003264 <LL_GPIO_ResetOutputPin>
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin);
 80032bc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80032c0:	4837      	ldr	r0, [pc, #220]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032c2:	f7ff ffcf 	bl	8003264 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BUZZER_GPIO_Port, BUZZER_Pin);
 80032c6:	2104      	movs	r1, #4
 80032c8:	4836      	ldr	r0, [pc, #216]	; (80033a4 <MX_GPIO_Init+0x120>)
 80032ca:	f7ff ffcb 	bl	8003264 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	4835      	ldr	r0, [pc, #212]	; (80033a8 <MX_GPIO_Init+0x124>)
 80032d2:	f7ff ffc7 	bl	8003264 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 80032d6:	f24e 331f 	movw	r3, #58143	; 0xe31f
 80032da:	603b      	str	r3, [r7, #0]
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032dc:	2301      	movs	r3, #1
 80032de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	482a      	ldr	r0, [pc, #168]	; (800339c <MX_GPIO_Init+0x118>)
 80032f2:	f001 ff58 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 80032f6:	2320      	movs	r3, #32
 80032f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80032fe:	2301      	movs	r3, #1
 8003300:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8003302:	463b      	mov	r3, r7
 8003304:	4619      	mov	r1, r3
 8003306:	4825      	ldr	r0, [pc, #148]	; (800339c <MX_GPIO_Init+0x118>)
 8003308:	f001 ff4d 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 800330c:	2304      	movs	r3, #4
 800330e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003314:	2301      	movs	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8003318:	463b      	mov	r3, r7
 800331a:	4619      	mov	r1, r3
 800331c:	4822      	ldr	r0, [pc, #136]	; (80033a8 <MX_GPIO_Init+0x124>)
 800331e:	f001 ff42 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin;
 8003322:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003326:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003328:	2301      	movs	r3, #1
 800332a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	463b      	mov	r3, r7
 800333a:	4619      	mov	r1, r3
 800333c:	4818      	ldr	r0, [pc, #96]	; (80033a0 <MX_GPIO_Init+0x11c>)
 800333e:	f001 ff32 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003342:	2304      	movs	r3, #4
 8003344:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003346:	2301      	movs	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003356:	463b      	mov	r3, r7
 8003358:	4619      	mov	r1, r3
 800335a:	4812      	ldr	r0, [pc, #72]	; (80033a4 <MX_GPIO_Init+0x120>)
 800335c:	f001 ff23 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003364:	2301      	movs	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8003374:	463b      	mov	r3, r7
 8003376:	4619      	mov	r1, r3
 8003378:	480b      	ldr	r0, [pc, #44]	; (80033a8 <MX_GPIO_Init+0x124>)
 800337a:	f001 ff14 	bl	80051a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800338a:	463b      	mov	r3, r7
 800338c:	4619      	mov	r1, r3
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <MX_GPIO_Init+0x124>)
 8003390:	f001 ff09 	bl	80051a6 <LL_GPIO_Init>

}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40020400 	.word	0x40020400

080033ac <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <LL_AHB1_GRP1_EnableClock>:
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800343e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800344a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40023800 	.word	0x40023800

08003464 <LL_APB1_GRP1_EnableClock>:
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <LL_APB1_GRP1_EnableClock+0x2c>)
 800346e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <LL_APB1_GRP1_EnableClock+0x2c>)
 800347a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40023800 	.word	0x40023800

08003494 <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800349a:	f107 0318 	add.w	r3, r7, #24
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	463b      	mov	r3, r7
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80034bc:	2002      	movs	r0, #2
 80034be:	f7ff ffb9 	bl	8003434 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80034c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034c8:	2302      	movs	r3, #2
 80034ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80034d8:	2304      	movs	r3, #4
 80034da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	463b      	mov	r3, r7
 80034de:	4619      	mov	r1, r3
 80034e0:	4815      	ldr	r0, [pc, #84]	; (8003538 <MX_I2C2_Init+0xa4>)
 80034e2:	f001 fe60 	bl	80051a6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80034e6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80034ea:	f7ff ffbb 	bl	8003464 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80034ee:	4813      	ldr	r0, [pc, #76]	; (800353c <MX_I2C2_Init+0xa8>)
 80034f0:	f7ff ff8f 	bl	8003412 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80034f4:	4811      	ldr	r0, [pc, #68]	; (800353c <MX_I2C2_Init+0xa8>)
 80034f6:	f7ff ff69 	bl	80033cc <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80034fa:	4810      	ldr	r0, [pc, #64]	; (800353c <MX_I2C2_Init+0xa8>)
 80034fc:	f7ff ff56 	bl	80033ac <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <MX_I2C2_Init+0xac>)
 8003506:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	4619      	mov	r1, r3
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <MX_I2C2_Init+0xa8>)
 8003524:	f001 ffa6 	bl	8005474 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8003528:	2100      	movs	r1, #0
 800352a:	4804      	ldr	r0, [pc, #16]	; (800353c <MX_I2C2_Init+0xa8>)
 800352c:	f7ff ff5e 	bl	80033ec <LL_I2C_SetOwnAddress2>

}
 8003530:	bf00      	nop
 8003532:	3730      	adds	r7, #48	; 0x30
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40020400 	.word	0x40020400
 800353c:	40005800 	.word	0x40005800
 8003540:	000186a0 	.word	0x000186a0

08003544 <__NVIC_SetPriorityGrouping>:
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800356c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	60d3      	str	r3, [r2, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <LL_ADC_Enable>:
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <LL_RCC_HSI_Enable+0x1c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <LL_RCC_HSI_Enable+0x1c>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <LL_RCC_HSI_IsReady+0x20>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40023800 	.word	0x40023800

080035f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800

0800361c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <LL_RCC_SetSysClkSource+0x24>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 0203 	bic.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <LL_RCC_SetSysClkSource+0x24>)
 8003630:	4313      	orrs	r3, r2
 8003632:	608b      	str	r3, [r1, #8]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40023800 	.word	0x40023800

08003644 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <LL_RCC_GetSysClkSource+0x18>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <LL_RCC_SetAHBPrescaler+0x24>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4904      	ldr	r1, [pc, #16]	; (8003684 <LL_RCC_SetAHBPrescaler+0x24>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40023800 	.word	0x40023800

08003688 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <LL_RCC_SetAPB1Prescaler+0x24>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4904      	ldr	r1, [pc, #16]	; (80036ac <LL_RCC_SetAPB1Prescaler+0x24>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40023800 	.word	0x40023800

080036b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40023800 	.word	0x40023800

080036d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <LL_RCC_PLL_Enable+0x1c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <LL_RCC_PLL_Enable+0x1c>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <LL_RCC_PLL_IsReady+0x24>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8003734:	4013      	ands	r3, r2
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	0192      	lsls	r2, r2, #6
 8003740:	430a      	orrs	r2, r1
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40023800 	.word	0x40023800
 8003768:	ffbf8000 	.word	0xffbf8000

0800376c <LL_APB1_GRP1_EnableClock>:
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4907      	ldr	r1, [pc, #28]	; (8003798 <LL_APB1_GRP1_EnableClock+0x2c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4013      	ands	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40023800 	.word	0x40023800

0800379c <LL_APB2_GRP1_EnableClock>:
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4907      	ldr	r1, [pc, #28]	; (80037c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4013      	ands	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40023800 	.word	0x40023800

080037cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <LL_FLASH_SetLatency+0x24>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 020f 	bic.w	r2, r3, #15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4904      	ldr	r1, [pc, #16]	; (80037f0 <LL_FLASH_SetLatency+0x24>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40023c00 	.word	0x40023c00

080037f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <LL_FLASH_GetLatency+0x18>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00

08003810 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40007000 	.word	0x40007000

08003838 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	601a      	str	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_GPIO_SetOutputPin>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_GPIO_ResetOutputPin>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <_ZN6Button14SetPushReverseEb>:
	void SetEdgeFilter(uint32_t uiPushFilterTimeMs = 10, uint32_t uiReleaseFilterTimeMs = 10){
		SetPushEdgeFilter(uiPushFilterTimeMs);
		SetReleaseEdgeFilter(uiReleaseFilterTimeMs);
	}

	void SetPushReverse(bool bReverseEnable = true){
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	70fb      	strb	r3, [r7, #3]
		this->bReverseEnable = bReverseEnable;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	77da      	strb	r2, [r3, #31]
	}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_ZN6Button11IsPushCountEv>:

	bool IsPush(){
		return bPushState;
	}

	uint32_t IsPushCount(){
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
		return uiPushCount;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
	}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <_ZN6Button13IsReleaseEdgeEv>:
		uiReleaseCount = 0;
	}
	bool IsPushEdge(){
		return bPushEdge;
	}
	bool IsReleaseEdge(){
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
		return bReleaseEdge;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7c5b      	ldrb	r3, [r3, #17]
	}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <_ZN6Button10ResetCountEv>:

	void ResetCount(){
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
		uiPushCount = 0;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
		uiReleaseCount = 0;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
	}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_ZN5Blink13SetStartStateEb>:
        this->ulOffTimeMs = ulOffTimeMs;
    }
    void SetStartDelayTime(uint32_t ulDelayTimeMs){
        this->ulDelayTimeMs = ulDelayTimeMs;
    }
    void SetStartState(bool bState){
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
        this->bStartState = bState;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	761a      	strb	r2, [r3, #24]
    }
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b0db      	sub	sp, #364	; 0x16c
 8003944:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003946:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800394a:	f7ff ff27 	bl	800379c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800394e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003952:	f7ff ff0b 	bl	800376c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003956:	2003      	movs	r0, #3
 8003958:	f7ff fdf4 	bl	8003544 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800395c:	f000 f926 	bl	8003bac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003960:	f7ff fc90 	bl	8003284 <MX_GPIO_Init>
  MX_DMA_Init();
 8003964:	f7ff fc3e 	bl	80031e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003968:	f7ff f930 	bl	8002bcc <MX_ADC1_Init>
  MX_ADC2_Init();
 800396c:	f7ff f9d6 	bl	8002d1c <MX_ADC2_Init>
  MX_I2C2_Init();
 8003970:	f7ff fd90 	bl	8003494 <MX_I2C2_Init>
  MX_SPI1_Init();
 8003974:	f000 f9ca 	bl	8003d0c <MX_SPI1_Init>
  MX_TIM1_Init();
 8003978:	f000 ff2e 	bl	80047d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800397c:	f000 ffd4 	bl	8004928 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003980:	f001 f8ae 	bl	8004ae0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8003984:	f001 f86c 	bl	8004a60 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003988:	f001 f99c 	bl	8004cc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SystickTimer_EnableInterrupt();
 800398c:	f7fe fc82 	bl	8002294 <SystickTimer_EnableInterrupt>
  SystickTimer_SetSamplingTime(1u);
 8003990:	2001      	movs	r0, #1
 8003992:	f7fe fc85 	bl	80022a0 <SystickTimer_SetSamplingTime>


  LL_GPIO_SetOutputPin(WALL_LED0_GPIO_Port, WALL_LED0_Pin);
 8003996:	2101      	movs	r1, #1
 8003998:	487c      	ldr	r0, [pc, #496]	; (8003b8c <main+0x24c>)
 800399a:	f7ff ff6d 	bl	8003878 <LL_GPIO_SetOutputPin>
  LL_GPIO_ResetOutputPin(WALL_LED1_GPIO_Port, WALL_LED1_Pin);
 800399e:	2102      	movs	r1, #2
 80039a0:	487a      	ldr	r0, [pc, #488]	; (8003b8c <main+0x24c>)
 80039a2:	f7ff ff77 	bl	8003894 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(WALL_LED2_GPIO_Port, WALL_LED2_Pin);
 80039a6:	2104      	movs	r1, #4
 80039a8:	4878      	ldr	r0, [pc, #480]	; (8003b8c <main+0x24c>)
 80039aa:	f7ff ff73 	bl	8003894 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(WALL_LED3_GPIO_Port, WALL_LED3_Pin);
 80039ae:	2108      	movs	r1, #8
 80039b0:	4876      	ldr	r0, [pc, #472]	; (8003b8c <main+0x24c>)
 80039b2:	f7ff ff6f 	bl	8003894 <LL_GPIO_ResetOutputPin>

  LL_ADC_Enable(ADC2);			//ADC2 Enabled
 80039b6:	4876      	ldr	r0, [pc, #472]	; (8003b90 <main+0x250>)
 80039b8:	f7ff fde8 	bl	800358c <LL_ADC_Enable>
  //LL_ADC_EnableIT_EOCS(ADC2);	//ADC2 Interrupt Start

  LL_TIM_EnableIT_UPDATE(TIM3);	//TIM3 Interrupt Start
 80039bc:	4875      	ldr	r0, [pc, #468]	; (8003b94 <main+0x254>)
 80039be:	f7ff ff4b 	bl	8003858 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);	//TIM3 Count Up Start
 80039c2:	4874      	ldr	r0, [pc, #464]	; (8003b94 <main+0x254>)
 80039c4:	f7ff ff38 	bl	8003838 <LL_TIM_EnableCounter>
  
  Adc_StartConvert(EN_ADC_NUM_2);
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff fa7b 	bl	8002ec4 <Adc_StartConvert>

  Button Sw[2] = {
    Button(SW0_GPIO_Port, SW0_Pin),
    Button(SW1_GPIO_Port, SW1_Pin),
  };
 80039ce:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80039d2:	2220      	movs	r2, #32
 80039d4:	496d      	ldr	r1, [pc, #436]	; (8003b8c <main+0x24c>)
 80039d6:	4620      	mov	r0, r4
 80039d8:	f7fd fd64 	bl	80014a4 <_ZN6ButtonC1EP12GPIO_TypeDefm>
 80039dc:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80039e0:	2204      	movs	r2, #4
 80039e2:	496d      	ldr	r1, [pc, #436]	; (8003b98 <main+0x258>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fd5d 	bl	80014a4 <_ZN6ButtonC1EP12GPIO_TypeDefm>
  Sw[0].SetPushReverse();
 80039ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff5e 	bl	80038b2 <_ZN6Button14SetPushReverseEb>
  Sw[1].SetPushReverse();
 80039f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039fa:	3338      	adds	r3, #56	; 0x38
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff57 	bl	80038b2 <_ZN6Button14SetPushReverseEb>
  Blink TickLed(TICK_LED_GPIO_Port, TICK_LED_Pin, 1000);
 8003a04:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	495f      	ldr	r1, [pc, #380]	; (8003b8c <main+0x24c>)
 8003a10:	f7fd fc45 	bl	800129e <_ZN5BlinkC1EP12GPIO_TypeDefmm>
  TickLed.SetStartState(false);
 8003a14:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff80 	bl	8003920 <_ZN5Blink13SetStartStateEb>
  WallLed[2].SetOffTime(2000);
  WallLed[3].SetOnTime(20);
  WallLed[3].SetOffTime(2000);
  */

  BatteryMonitor BatteryMoni;
 8003a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a24:	495d      	ldr	r1, [pc, #372]	; (8003b9c <main+0x25c>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fb72 	bl	8001110 <_ZN14BatteryMonitorC1Ef>
  ICM_20602 IMU(ICM_20602::EN_COMM_MODE_SPI);
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd ff3c 	bl	80018b0 <_ZN9ICM_20602C1ENS_10CommMode_tE>
  IMU.SetSPIPort(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin);
 8003a38:	f107 0018 	add.w	r0, r7, #24
 8003a3c:	2340      	movs	r3, #64	; 0x40
 8003a3e:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <main+0x258>)
 8003a40:	4957      	ldr	r1, [pc, #348]	; (8003ba0 <main+0x260>)
 8003a42:	f7fd ff9f 	bl	8001984 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>
  IMU.StartGyroOffestCalc(2000, true, true, true);
 8003a46:	f107 0018 	add.w	r0, r7, #24
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2201      	movs	r2, #1
 8003a52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003a56:	f7fe f813 	bl	8001a80 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb>
  IMU.Setup(2);
 8003a5a:	f107 0318 	add.w	r3, r7, #24
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd ffbf 	bl	80019e4 <_ZN9ICM_206025SetupEm>

  uint64_t ullDebugTimeMs = SystickTimer_GetTimeMS();
 8003a66:	f7fe fc6b 	bl	8002340 <SystickTimer_GetTimeMS>
 8003a6a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a6e:	e9c3 0100 	strd	r0, r1, [r3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(SystickTimer_IsSamplingTimeElapsed()){
 8003a72:	f7fe fc2d 	bl	80022d0 <SystickTimer_IsSamplingTimeElapsed>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0fa      	beq.n	8003a72 <main+0x132>
		  Sw[0].Update();
 8003a7c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fd55 	bl	8001530 <_ZN6Button6UpdateEv>
      Sw[1].Update();
 8003a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a8a:	3338      	adds	r3, #56	; 0x38
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fd4f 	bl	8001530 <_ZN6Button6UpdateEv>
      BatteryMoni.Update();
 8003a92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fb66 	bl	8001168 <_ZN14BatteryMonitor6UpdateEv>
      IMU.Update();
 8003a9c:	f107 0318 	add.w	r3, r7, #24
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe f856 	bl	8001b52 <_ZN9ICM_206026UpdateEv>
      WallSensor_Update();
 8003aa6:	f7fe fcbf 	bl	8002428 <WallSensor_Update>

      if(Sw[1].IsReleaseEdge()){
 8003aaa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aae:	3338      	adds	r3, #56	; 0x38
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff19 	bl	80038e8 <_ZN6Button13IsReleaseEdgeEv>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <main+0x186>
        Sw[0].ResetCount();
 8003abc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff1d 	bl	8003900 <_ZN6Button10ResetCountEv>
      }
      if(1 == Sw[0].IsPushCount() % 2){
 8003ac6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff00 	bl	80038d0 <_ZN6Button11IsPushCountEv>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <main+0x1b8>
        TickLed.SetPeriod(500);
 8003ae4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ae8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003aec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd fbb0 	bl	8001256 <_ZN5Blink9SetPeriodEmf>
 8003af6:	e008      	b.n	8003b0a <main+0x1ca>
      }else{
        TickLed.SetPeriod(1000);
 8003af8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003afc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fd fba6 	bl	8001256 <_ZN5Blink9SetPeriodEmf>
      }

		  if(SystickTimer_IsTimeElapsed(ullDebugTimeMs, 5)){
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b14:	f7fe fc2b 	bl	800236e <SystickTimer_IsTimeElapsed>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02f      	beq.n	8003b7e <main+0x23e>
			  ullDebugTimeMs = SystickTimer_GetTimeMS();
 8003b1e:	f7fe fc0f 	bl	8002340 <SystickTimer_GetTimeMS>
 8003b22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b26:	e9c3 0100 	strd	r0, r1, [r3]
        float fTimer = (float)SystickTimer_GetTimeMS()/1000.0f;
 8003b2a:	f7fe fc09 	bl	8002340 <SystickTimer_GetTimeMS>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	4618      	mov	r0, r3
 8003b34:	4621      	mov	r1, r4
 8003b36:	f7fd f8ff 	bl	8000d38 <__aeabi_ul2f>
 8003b3a:	ee06 0a90 	vmov	s13, r0
 8003b3e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003ba4 <main+0x264>
 8003b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b46:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
        //printf("TIM3 Counter %d\n", LL_TIM_GetCounter(TIM3));
        //Adc1_GetAdcValues(usAdcValue, 2, 4);
        //Adc1_GetRateAdcValues(fAdcRate, 2, 4);
        //fValue*3.3 = Vbat * 10k / (10k+20k)
        //Vbat = fValue*3.3*30k/10k
        WallSensor_GetValue(usAdcValue, 4);
 8003b4a:	f107 0310 	add.w	r3, r7, #16
 8003b4e:	2104      	movs	r1, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fc95 	bl	8002480 <WallSensor_GetValue>
        //printf("AD:%d\n", Adc_GetAdcChannelValue(EN_ADC_NUM_2, 1));
       printf("Wall:%d, %d, %d, %d\n", usAdcValue[0], usAdcValue[1], usAdcValue[2], usAdcValue[3]);
 8003b56:	f107 0310 	add.w	r3, r7, #16
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f107 0310 	add.w	r3, r7, #16
 8003b62:	885b      	ldrh	r3, [r3, #2]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	88db      	ldrh	r3, [r3, #6]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4603      	mov	r3, r0
 8003b78:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <main+0x268>)
 8003b7a:	f003 f8e7 	bl	8006d4c <iprintf>
          //printf("%f, %f, %f, %f\n", fAdcRate[0], fAdcRate[1], fAdcRate[2], fAdcRate[3]);
        //}

		  }

      TickLed.Update();
 8003b7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fbc8 	bl	8001318 <_ZN5Blink6UpdateEv>
	  } //SamplingTime Elapsed
  }
 8003b88:	e773      	b.n	8003a72 <main+0x132>
 8003b8a:	bf00      	nop
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40012100 	.word	0x40012100
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	41033333 	.word	0x41033333
 8003ba0:	40013000 	.word	0x40013000
 8003ba4:	447a0000 	.word	0x447a0000
 8003ba8:	08008af8 	.word	0x08008af8

08003bac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003bb0:	2005      	movs	r0, #5
 8003bb2:	f7ff fe0b 	bl	80037cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003bb6:	f7ff fe1d 	bl	80037f4 <LL_FLASH_GetLatency>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d000      	beq.n	8003bcc <_Z18SystemClock_Configv+0x20>
 8003bca:	e7f4      	b.n	8003bb6 <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003bcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bd0:	f7ff fe1e 	bl	8003810 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8003bd4:	2010      	movs	r0, #16
 8003bd6:	f7ff fd0b 	bl	80035f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8003bda:	f7ff fce7 	bl	80035ac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003bde:	f7ff fcf5 	bl	80035cc <LL_RCC_HSI_IsReady>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d000      	beq.n	8003bf4 <_Z18SystemClock_Configv+0x48>
 8003bf2:	e7f4      	b.n	8003bde <_Z18SystemClock_Configv+0x32>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	22a8      	movs	r2, #168	; 0xa8
 8003bf8:	2108      	movs	r1, #8
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7ff fd90 	bl	8003720 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003c00:	f7ff fd6a 	bl	80036d8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003c04:	f7ff fd78 	bl	80036f8 <LL_RCC_PLL_IsReady>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d000      	beq.n	8003c1a <_Z18SystemClock_Configv+0x6e>
 8003c18:	e7f4      	b.n	8003c04 <_Z18SystemClock_Configv+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7ff fd20 	bl	8003660 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003c20:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c24:	f7ff fd30 	bl	8003688 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8003c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c2c:	f7ff fd40 	bl	80036b0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003c30:	2002      	movs	r0, #2
 8003c32:	f7ff fcf3 	bl	800361c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003c36:	f7ff fd05 	bl	8003644 <LL_RCC_GetSysClkSource>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d000      	beq.n	8003c4c <_Z18SystemClock_Configv+0xa0>
 8003c4a:	e7f4      	b.n	8003c36 <_Z18SystemClock_Configv+0x8a>
  {

  }
  LL_Init1msTick(168000000);
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <_Z18SystemClock_Configv+0xb0>)
 8003c4e:	f002 fb9f 	bl	8006390 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8003c52:	4802      	ldr	r0, [pc, #8]	; (8003c5c <_Z18SystemClock_Configv+0xb0>)
 8003c54:	f002 fbce 	bl	80063f4 <LL_SetSystemCoreClock>
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	0a037a00 	.word	0x0a037a00

08003c60 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	USART_TransmitByte(DEBUG_PRINTF_USART_TYPEDEF, (uint8_t)ch);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4804      	ldr	r0, [pc, #16]	; (8003c80 <__io_putchar+0x20>)
 8003c70:	f001 f878 	bl	8004d64 <USART_TransmitByte>
	return ch;
 8003c74:	687b      	ldr	r3, [r7, #4]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40004400 	.word	0x40004400

08003c84 <LL_AHB1_GRP1_EnableClock>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c90:	4907      	ldr	r1, [pc, #28]	; (8003cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <LL_APB2_GRP1_EnableClock>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc0:	4907      	ldr	r1, [pc, #28]	; (8003ce0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <LL_SPI_SetStandard>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b090      	sub	sp, #64	; 0x40
 8003d10:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003d12:	f107 0318 	add.w	r3, r7, #24
 8003d16:	2228      	movs	r2, #40	; 0x28
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fbaf 	bl	800647e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	463b      	mov	r3, r7
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003d30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d34:	f7ff ffbe 	bl	8003cb4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7ff ffa3 	bl	8003c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f7ff ffa0 	bl	8003c84 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin;
 8003d44:	2320      	movs	r3, #32
 8003d46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003d58:	2305      	movs	r3, #5
 8003d5a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	4619      	mov	r1, r3
 8003d60:	481b      	ldr	r0, [pc, #108]	; (8003dd0 <MX_SPI1_Init+0xc4>)
 8003d62:	f001 fa20 	bl	80051a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = IMU_MISO_Pin|IMU_MOSI_Pin;
 8003d66:	2330      	movs	r3, #48	; 0x30
 8003d68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	463b      	mov	r3, r7
 8003d80:	4619      	mov	r1, r3
 8003d82:	4814      	ldr	r0, [pc, #80]	; (8003dd4 <MX_SPI1_Init+0xc8>)
 8003d84:	f001 fa0f 	bl	80051a6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003d8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003d90:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003d92:	2300      	movs	r3, #0
 8003d94:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8003da4:	2300      	movs	r3, #0
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003da8:	2300      	movs	r3, #0
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003db0:	230a      	movs	r3, #10
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003db4:	f107 0318 	add.w	r3, r7, #24
 8003db8:	4619      	mov	r1, r3
 8003dba:	4807      	ldr	r0, [pc, #28]	; (8003dd8 <MX_SPI1_Init+0xcc>)
 8003dbc:	f001 fce7 	bl	800578e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_SPI1_Init+0xcc>)
 8003dc4:	f7ff ff8e 	bl	8003ce4 <LL_SPI_SetStandard>

}
 8003dc8:	bf00      	nop
 8003dca:	3740      	adds	r7, #64	; 0x40
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	40020400 	.word	0x40020400
 8003dd8:	40013000 	.word	0x40013000

08003ddc <LL_DMA_IsActiveFlag_TC0>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_DMA_IsActiveFlag_TC2>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_DMA_ClearFlag_TC0>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_DMA_ClearFlag_TC2>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_TIM_ClearFlag_UPDATE>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f06f 0201 	mvn.w	r2, #1
 8003e6e:	611a      	str	r2, [r3, #16]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_GPIO_IsOutputPinSet>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_GPIO_SetOutputPin>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	619a      	str	r2, [r3, #24]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_GPIO_ResetOutputPin>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	405a      	eors	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	615a      	str	r2, [r3, #20]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f2c:	e7fe      	b.n	8003f2c <NMI_Handler+0x4>

08003f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <HardFault_Handler+0x4>

08003f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <MemManage_Handler+0x4>

08003f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3e:	e7fe      	b.n	8003f3e <BusFault_Handler+0x4>

08003f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <UsageFault_Handler+0x4>

08003f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickTimer_Interrupt();
 8003f74:	f7fe f97c 	bl	8002270 <SystickTimer_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(1u == LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 8003f80:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <TIM3_IRQHandler+0x24>)
 8003f82:	f7ff ff7b 	bl	8003e7c <LL_TIM_IsActiveFlag_UPDATE>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <TIM3_IRQHandler+0x20>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 8003f8c:	4804      	ldr	r0, [pc, #16]	; (8003fa0 <TIM3_IRQHandler+0x24>)
 8003f8e:	f7ff ff67 	bl	8003e60 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_TogglePin(DBG_LED0_GPIO_Port, DBG_LED0_Pin);
 8003f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f96:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <TIM3_IRQHandler+0x28>)
 8003f98:	f7ff ffb5 	bl	8003f06 <LL_GPIO_TogglePin>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40020800 	.word	0x40020800

08003fa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	if( LL_DMA_IsActiveFlag_TC0(DMA2) == 1){
 8003fac:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <DMA2_Stream0_IRQHandler+0x1c>)
 8003fae:	f7ff ff15 	bl	8003ddc <LL_DMA_IsActiveFlag_TC0>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <DMA2_Stream0_IRQHandler+0x16>
		  LL_DMA_ClearFlag_TC0(DMA2);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <DMA2_Stream0_IRQHandler+0x1c>)
 8003fba:	f7ff ff36 	bl	8003e2a <LL_DMA_ClearFlag_TC0>
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40026400 	.word	0x40026400

08003fc8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003fc8:	b598      	push	{r3, r4, r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  static uint8_t ucWallLedNum = 0u;
  static Port_t *pWallLed;
  static bool bFirst = true;
  
  //転送完了フラグON
  if( LL_DMA_IsActiveFlag_TC2(DMA2) == 1){
 8003fcc:	4836      	ldr	r0, [pc, #216]	; (80040a8 <DMA2_Stream2_IRQHandler+0xe0>)
 8003fce:	f7ff ff18 	bl	8003e02 <LL_DMA_IsActiveFlag_TC2>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d165      	bne.n	80040a4 <DMA2_Stream2_IRQHandler+0xdc>
		  LL_DMA_ClearFlag_TC2(DMA2);
 8003fd8:	4833      	ldr	r0, [pc, #204]	; (80040a8 <DMA2_Stream2_IRQHandler+0xe0>)
 8003fda:	f7ff ff33 	bl	8003e44 <LL_DMA_ClearFlag_TC2>
      LL_GPIO_TogglePin(DBG_LED1_GPIO_Port, DBG_LED1_Pin);
 8003fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fe2:	4832      	ldr	r0, [pc, #200]	; (80040ac <DMA2_Stream2_IRQHandler+0xe4>)
 8003fe4:	f7ff ff8f 	bl	8003f06 <LL_GPIO_TogglePin>
      /*
      printf("%d, %d, %d, %d\n", Adc_GetAdcChannelValue(EN_ADC_NUM_2, 1)
                              ,Adc_GetAdcChannelValue(EN_ADC_NUM_2, 2)
                              ,Adc_GetAdcChannelValue(EN_ADC_NUM_2, 3)
                              ,Adc_GetAdcChannelValue(EN_ADC_NUM_2, 4));*/
      pWallLed = &stWallLedTbl[ucWallLedNum];
 8003fe8:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4a31      	ldr	r2, [pc, #196]	; (80040b4 <DMA2_Stream2_IRQHandler+0xec>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8003ff4:	6013      	str	r3, [r2, #0]

      if(0u == LL_GPIO_IsOutputPinSet(pWallLed->pGPIOx, pWallLed->uiPinNum)){
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7ff ff4c 	bl	8003ea2 <LL_GPIO_IsOutputPinSet>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d120      	bne.n	8004052 <DMA2_Stream2_IRQHandler+0x8a>
        if(!bFirst){
 8004010:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <DMA2_Stream2_IRQHandler+0xf4>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	f083 0301 	eor.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <DMA2_Stream2_IRQHandler+0x74>
          WallSensor_SetValueLedOff((EN_WALLSENSOR_POS)ucWallLedNum, Adc_GetAdcChannelValue(EN_ADC_NUM_2, ucWallLedNum+1));
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004020:	781c      	ldrb	r4, [r3, #0]
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	2001      	movs	r0, #1
 800402e:	f7fe ff7f 	bl	8002f30 <Adc_GetAdcChannelValue>
 8004032:	4603      	mov	r3, r0
 8004034:	4619      	mov	r1, r3
 8004036:	4620      	mov	r0, r4
 8004038:	f7fe f9d8 	bl	80023ec <WallSensor_SetValueLedOff>
        }
        LL_GPIO_SetOutputPin(pWallLed->pGPIOx, pWallLed->uiPinNum);
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7ff ff3e 	bl	8003ecc <LL_GPIO_SetOutputPin>
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004050:	e028      	b.n	80040a4 <DMA2_Stream2_IRQHandler+0xdc>
        WallSensor_SetValueLedOn((EN_WALLSENSOR_POS)ucWallLedNum, Adc_GetAdcChannelValue(EN_ADC_NUM_2, ucWallLedNum+1));
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004054:	781c      	ldrb	r4, [r3, #0]
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	2001      	movs	r0, #1
 8004062:	f7fe ff65 	bl	8002f30 <Adc_GetAdcChannelValue>
 8004066:	4603      	mov	r3, r0
 8004068:	4619      	mov	r1, r3
 800406a:	4620      	mov	r0, r4
 800406c:	f7fe f9a0 	bl	80023b0 <WallSensor_SetValueLedOn>
        LL_GPIO_ResetOutputPin(pWallLed->pGPIOx, pWallLed->uiPinNum);
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <DMA2_Stream2_IRQHandler+0xf0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7ff ff32 	bl	8003ee8 <LL_GPIO_ResetOutputPin>
        ucWallLedNum ++;
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 800408e:	701a      	strb	r2, [r3, #0]
        if(sizeof(stWallLedTbl)/ sizeof(Port_t) <= ucWallLedNum){
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d905      	bls.n	80040a4 <DMA2_Stream2_IRQHandler+0xdc>
          ucWallLedNum = 0;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <DMA2_Stream2_IRQHandler+0xe8>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
          bFirst = false;
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <DMA2_Stream2_IRQHandler+0xf4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	bd98      	pop	{r3, r4, r7, pc}
 80040a8:	40026400 	.word	0x40026400
 80040ac:	40020800 	.word	0x40020800
 80040b0:	20000223 	.word	0x20000223
 80040b4:	08008b78 	.word	0x08008b78
 80040b8:	20000224 	.word	0x20000224
 80040bc:	20000000 	.word	0x20000000

080040c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00a      	b.n	80040e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040d2:	f3af 8000 	nop.w
 80040d6:	4601      	mov	r1, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	b2ca      	uxtb	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbf0      	blt.n	80040d2 <_read+0x12>
	}

return len;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e009      	b.n	8004120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60ba      	str	r2, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fda3 	bl	8003c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbf1      	blt.n	800410c <_write+0x12>
	}
	return len;
 8004128:	687b      	ldr	r3, [r7, #4]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_close>:

int _close(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	return -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800415a:	605a      	str	r2, [r3, #4]
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_isatty>:

int _isatty(int file)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	return 1;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <_sbrk+0x5c>)
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <_sbrk+0x60>)
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <_sbrk+0x64>)
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <_sbrk+0x68>)
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <_sbrk+0x64>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041cc:	f002 f922 	bl	8006414 <__errno>
 80041d0:	4602      	mov	r2, r0
 80041d2:	230c      	movs	r3, #12
 80041d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041da:	e009      	b.n	80041f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <_sbrk+0x64>)
 80041ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20020000 	.word	0x20020000
 80041fc:	00000400 	.word	0x00000400
 8004200:	20000228 	.word	0x20000228
 8004204:	20000248 	.word	0x20000248

08004208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <SystemInit+0x28>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <SystemInit+0x28>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <SystemInit+0x28>)
 800421e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004222:	609a      	str	r2, [r3, #8]
#endif
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <LL_AHB1_GRP1_EnableClock>:
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4313      	orrs	r3, r2
 800435a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4013      	ands	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40023800 	.word	0x40023800

08004378 <LL_APB1_GRP1_EnableClock>:
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	4907      	ldr	r1, [pc, #28]	; (80043a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4313      	orrs	r3, r2
 800438a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40023800 	.word	0x40023800

080043a8 <LL_APB2_GRP1_EnableClock>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80043b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4013      	ands	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40023800 	.word	0x40023800

080043d8 <LL_TIM_DisableARRPreload>:
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_TIM_OC_DisableFast>:
{
 80043f8:	b4b0      	push	{r4, r5, r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d01c      	beq.n	8004442 <LL_TIM_OC_DisableFast+0x4a>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d017      	beq.n	800443e <LL_TIM_OC_DisableFast+0x46>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b10      	cmp	r3, #16
 8004412:	d012      	beq.n	800443a <LL_TIM_OC_DisableFast+0x42>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d00d      	beq.n	8004436 <LL_TIM_OC_DisableFast+0x3e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d007      	beq.n	8004432 <LL_TIM_OC_DisableFast+0x3a>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d101      	bne.n	800442e <LL_TIM_OC_DisableFast+0x36>
 800442a:	2305      	movs	r3, #5
 800442c:	e00a      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 800442e:	2306      	movs	r3, #6
 8004430:	e008      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 8004432:	2304      	movs	r3, #4
 8004434:	e006      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 8004436:	2303      	movs	r3, #3
 8004438:	e004      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 800443a:	2302      	movs	r3, #2
 800443c:	e002      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_TIM_OC_DisableFast+0x4c>
 8004442:	2300      	movs	r3, #0
 8004444:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3318      	adds	r3, #24
 800444a:	461a      	mov	r2, r3
 800444c:	4629      	mov	r1, r5
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <LL_TIM_OC_DisableFast+0x7c>)
 8004450:	5c5b      	ldrb	r3, [r3, r1]
 8004452:	4413      	add	r3, r2
 8004454:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	4629      	mov	r1, r5
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <LL_TIM_OC_DisableFast+0x80>)
 800445c:	5c5b      	ldrb	r3, [r3, r1]
 800445e:	4619      	mov	r1, r3
 8004460:	2304      	movs	r3, #4
 8004462:	408b      	lsls	r3, r1
 8004464:	43db      	mvns	r3, r3
 8004466:	4013      	ands	r3, r2
 8004468:	6023      	str	r3, [r4, #0]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bcb0      	pop	{r4, r5, r7}
 8004472:	4770      	bx	lr
 8004474:	08008bb0 	.word	0x08008bb0
 8004478:	08008bb8 	.word	0x08008bb8

0800447c <LL_TIM_OC_EnablePreload>:
{
 800447c:	b4b0      	push	{r4, r5, r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d01c      	beq.n	80044c6 <LL_TIM_OC_EnablePreload+0x4a>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b04      	cmp	r3, #4
 8004490:	d017      	beq.n	80044c2 <LL_TIM_OC_EnablePreload+0x46>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b10      	cmp	r3, #16
 8004496:	d012      	beq.n	80044be <LL_TIM_OC_EnablePreload+0x42>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d00d      	beq.n	80044ba <LL_TIM_OC_EnablePreload+0x3e>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a4:	d007      	beq.n	80044b6 <LL_TIM_OC_EnablePreload+0x3a>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ac:	d101      	bne.n	80044b2 <LL_TIM_OC_EnablePreload+0x36>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e00a      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044b2:	2306      	movs	r3, #6
 80044b4:	e008      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e006      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e004      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044be:	2302      	movs	r3, #2
 80044c0:	e002      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <LL_TIM_OC_EnablePreload+0x4c>
 80044c6:	2300      	movs	r3, #0
 80044c8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3318      	adds	r3, #24
 80044ce:	461a      	mov	r2, r3
 80044d0:	4629      	mov	r1, r5
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <LL_TIM_OC_EnablePreload+0x7c>)
 80044d4:	5c5b      	ldrb	r3, [r3, r1]
 80044d6:	4413      	add	r3, r2
 80044d8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	4629      	mov	r1, r5
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <LL_TIM_OC_EnablePreload+0x80>)
 80044e0:	5c5b      	ldrb	r3, [r3, r1]
 80044e2:	4619      	mov	r1, r3
 80044e4:	2308      	movs	r3, #8
 80044e6:	408b      	lsls	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	6023      	str	r3, [r4, #0]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bcb0      	pop	{r4, r5, r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	08008bb0 	.word	0x08008bb0
 80044fc:	08008bb8 	.word	0x08008bb8

08004500 <LL_TIM_IC_SetActiveInput>:
{
 8004500:	b4b0      	push	{r4, r5, r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d01c      	beq.n	800454c <LL_TIM_IC_SetActiveInput+0x4c>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d017      	beq.n	8004548 <LL_TIM_IC_SetActiveInput+0x48>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b10      	cmp	r3, #16
 800451c:	d012      	beq.n	8004544 <LL_TIM_IC_SetActiveInput+0x44>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d00d      	beq.n	8004540 <LL_TIM_IC_SetActiveInput+0x40>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	d007      	beq.n	800453c <LL_TIM_IC_SetActiveInput+0x3c>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004532:	d101      	bne.n	8004538 <LL_TIM_IC_SetActiveInput+0x38>
 8004534:	2305      	movs	r3, #5
 8004536:	e00a      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 8004538:	2306      	movs	r3, #6
 800453a:	e008      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 800453c:	2304      	movs	r3, #4
 800453e:	e006      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 8004540:	2303      	movs	r3, #3
 8004542:	e004      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 8004544:	2302      	movs	r3, #2
 8004546:	e002      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <LL_TIM_IC_SetActiveInput+0x4e>
 800454c:	2300      	movs	r3, #0
 800454e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3318      	adds	r3, #24
 8004554:	461a      	mov	r2, r3
 8004556:	4629      	mov	r1, r5
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <LL_TIM_IC_SetActiveInput+0x8c>)
 800455a:	5c5b      	ldrb	r3, [r3, r1]
 800455c:	4413      	add	r3, r2
 800455e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	4629      	mov	r1, r5
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <LL_TIM_IC_SetActiveInput+0x90>)
 8004566:	5c5b      	ldrb	r3, [r3, r1]
 8004568:	4619      	mov	r1, r3
 800456a:	2303      	movs	r3, #3
 800456c:	408b      	lsls	r3, r1
 800456e:	43db      	mvns	r3, r3
 8004570:	401a      	ands	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	4628      	mov	r0, r5
 8004578:	4905      	ldr	r1, [pc, #20]	; (8004590 <LL_TIM_IC_SetActiveInput+0x90>)
 800457a:	5c09      	ldrb	r1, [r1, r0]
 800457c:	408b      	lsls	r3, r1
 800457e:	4313      	orrs	r3, r2
 8004580:	6023      	str	r3, [r4, #0]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bcb0      	pop	{r4, r5, r7}
 800458a:	4770      	bx	lr
 800458c:	08008bb0 	.word	0x08008bb0
 8004590:	08008bc0 	.word	0x08008bc0

08004594 <LL_TIM_IC_SetPrescaler>:
{
 8004594:	b4b0      	push	{r4, r5, r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d01c      	beq.n	80045e0 <LL_TIM_IC_SetPrescaler+0x4c>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d017      	beq.n	80045dc <LL_TIM_IC_SetPrescaler+0x48>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d012      	beq.n	80045d8 <LL_TIM_IC_SetPrescaler+0x44>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d00d      	beq.n	80045d4 <LL_TIM_IC_SetPrescaler+0x40>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d007      	beq.n	80045d0 <LL_TIM_IC_SetPrescaler+0x3c>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c6:	d101      	bne.n	80045cc <LL_TIM_IC_SetPrescaler+0x38>
 80045c8:	2305      	movs	r3, #5
 80045ca:	e00a      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045cc:	2306      	movs	r3, #6
 80045ce:	e008      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045d0:	2304      	movs	r3, #4
 80045d2:	e006      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045d4:	2303      	movs	r3, #3
 80045d6:	e004      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045d8:	2302      	movs	r3, #2
 80045da:	e002      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_TIM_IC_SetPrescaler+0x4e>
 80045e0:	2300      	movs	r3, #0
 80045e2:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3318      	adds	r3, #24
 80045e8:	461a      	mov	r2, r3
 80045ea:	4629      	mov	r1, r5
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <LL_TIM_IC_SetPrescaler+0x8c>)
 80045ee:	5c5b      	ldrb	r3, [r3, r1]
 80045f0:	4413      	add	r3, r2
 80045f2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	4629      	mov	r1, r5
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <LL_TIM_IC_SetPrescaler+0x90>)
 80045fa:	5c5b      	ldrb	r3, [r3, r1]
 80045fc:	4619      	mov	r1, r3
 80045fe:	230c      	movs	r3, #12
 8004600:	408b      	lsls	r3, r1
 8004602:	43db      	mvns	r3, r3
 8004604:	401a      	ands	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	4628      	mov	r0, r5
 800460c:	4905      	ldr	r1, [pc, #20]	; (8004624 <LL_TIM_IC_SetPrescaler+0x90>)
 800460e:	5c09      	ldrb	r1, [r1, r0]
 8004610:	408b      	lsls	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	6023      	str	r3, [r4, #0]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bcb0      	pop	{r4, r5, r7}
 800461e:	4770      	bx	lr
 8004620:	08008bb0 	.word	0x08008bb0
 8004624:	08008bc0 	.word	0x08008bc0

08004628 <LL_TIM_IC_SetFilter>:
{
 8004628:	b4b0      	push	{r4, r5, r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d01c      	beq.n	8004674 <LL_TIM_IC_SetFilter+0x4c>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b04      	cmp	r3, #4
 800463e:	d017      	beq.n	8004670 <LL_TIM_IC_SetFilter+0x48>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b10      	cmp	r3, #16
 8004644:	d012      	beq.n	800466c <LL_TIM_IC_SetFilter+0x44>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d00d      	beq.n	8004668 <LL_TIM_IC_SetFilter+0x40>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d007      	beq.n	8004664 <LL_TIM_IC_SetFilter+0x3c>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d101      	bne.n	8004660 <LL_TIM_IC_SetFilter+0x38>
 800465c:	2305      	movs	r3, #5
 800465e:	e00a      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 8004660:	2306      	movs	r3, #6
 8004662:	e008      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 8004664:	2304      	movs	r3, #4
 8004666:	e006      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 8004668:	2303      	movs	r3, #3
 800466a:	e004      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 800466c:	2302      	movs	r3, #2
 800466e:	e002      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <LL_TIM_IC_SetFilter+0x4e>
 8004674:	2300      	movs	r3, #0
 8004676:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3318      	adds	r3, #24
 800467c:	461a      	mov	r2, r3
 800467e:	4629      	mov	r1, r5
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <LL_TIM_IC_SetFilter+0x8c>)
 8004682:	5c5b      	ldrb	r3, [r3, r1]
 8004684:	4413      	add	r3, r2
 8004686:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	4629      	mov	r1, r5
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <LL_TIM_IC_SetFilter+0x90>)
 800468e:	5c5b      	ldrb	r3, [r3, r1]
 8004690:	4619      	mov	r1, r3
 8004692:	23f0      	movs	r3, #240	; 0xf0
 8004694:	408b      	lsls	r3, r1
 8004696:	43db      	mvns	r3, r3
 8004698:	401a      	ands	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	4628      	mov	r0, r5
 80046a0:	4905      	ldr	r1, [pc, #20]	; (80046b8 <LL_TIM_IC_SetFilter+0x90>)
 80046a2:	5c09      	ldrb	r1, [r1, r0]
 80046a4:	408b      	lsls	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	6023      	str	r3, [r4, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bcb0      	pop	{r4, r5, r7}
 80046b2:	4770      	bx	lr
 80046b4:	08008bb0 	.word	0x08008bb0
 80046b8:	08008bc0 	.word	0x08008bc0

080046bc <LL_TIM_IC_SetPolarity>:
{
 80046bc:	b490      	push	{r4, r7}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d01c      	beq.n	8004708 <LL_TIM_IC_SetPolarity+0x4c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d017      	beq.n	8004704 <LL_TIM_IC_SetPolarity+0x48>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d012      	beq.n	8004700 <LL_TIM_IC_SetPolarity+0x44>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d00d      	beq.n	80046fc <LL_TIM_IC_SetPolarity+0x40>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d007      	beq.n	80046f8 <LL_TIM_IC_SetPolarity+0x3c>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ee:	d101      	bne.n	80046f4 <LL_TIM_IC_SetPolarity+0x38>
 80046f0:	2305      	movs	r3, #5
 80046f2:	e00a      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 80046f4:	2306      	movs	r3, #6
 80046f6:	e008      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 80046f8:	2304      	movs	r3, #4
 80046fa:	e006      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 80046fc:	2303      	movs	r3, #3
 80046fe:	e004      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 8004700:	2302      	movs	r3, #2
 8004702:	e002      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <LL_TIM_IC_SetPolarity+0x4e>
 8004708:	2300      	movs	r3, #0
 800470a:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	4621      	mov	r1, r4
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <LL_TIM_IC_SetPolarity+0x80>)
 8004714:	5c5b      	ldrb	r3, [r3, r1]
 8004716:	4619      	mov	r1, r3
 8004718:	230a      	movs	r3, #10
 800471a:	408b      	lsls	r3, r1
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	4621      	mov	r1, r4
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <LL_TIM_IC_SetPolarity+0x80>)
 8004724:	5c5b      	ldrb	r3, [r3, r1]
 8004726:	4619      	mov	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	408b      	lsls	r3, r1
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bc90      	pop	{r4, r7}
 800473a:	4770      	bx	lr
 800473c:	08008bc8 	.word	0x08008bc8

08004740 <LL_TIM_SetClockSource>:
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_TIM_SetEncoderMode>:
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 0207 	bic.w	r2, r3, #7
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_TIM_SetTriggerOutput>:
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <LL_TIM_DisableMasterSlaveMode>:
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b09a      	sub	sp, #104	; 0x68
 80047dc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80047ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047f2:	2220      	movs	r2, #32
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fe41 	bl	800647e <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80047fc:	f107 031c 	add.w	r3, r7, #28
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
 800481c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800481e:	2001      	movs	r0, #1
 8004820:	f7ff fdc2 	bl	80043a8 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800482a:	2300      	movs	r3, #0
 800482c:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 800482e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004834:	2300      	movs	r3, #0
 8004836:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800483e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004842:	4619      	mov	r1, r3
 8004844:	4836      	ldr	r0, [pc, #216]	; (8004920 <MX_TIM1_Init+0x148>)
 8004846:	f001 f867 	bl	8005918 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800484a:	4835      	ldr	r0, [pc, #212]	; (8004920 <MX_TIM1_Init+0x148>)
 800484c:	f7ff fdc4 	bl	80043d8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8004850:	2101      	movs	r1, #1
 8004852:	4833      	ldr	r0, [pc, #204]	; (8004920 <MX_TIM1_Init+0x148>)
 8004854:	f7ff fe12 	bl	800447c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004858:	2360      	movs	r3, #96	; 0x60
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004860:	2300      	movs	r3, #0
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004868:	2300      	movs	r3, #0
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800486c:	2300      	movs	r3, #0
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004870:	2300      	movs	r3, #0
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004874:	2300      	movs	r3, #0
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004878:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800487c:	461a      	mov	r2, r3
 800487e:	2101      	movs	r1, #1
 8004880:	4827      	ldr	r0, [pc, #156]	; (8004920 <MX_TIM1_Init+0x148>)
 8004882:	f001 f8e3 	bl	8005a4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004886:	2101      	movs	r1, #1
 8004888:	4825      	ldr	r0, [pc, #148]	; (8004920 <MX_TIM1_Init+0x148>)
 800488a:	f7ff fdb5 	bl	80043f8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800488e:	2110      	movs	r1, #16
 8004890:	4823      	ldr	r0, [pc, #140]	; (8004920 <MX_TIM1_Init+0x148>)
 8004892:	f7ff fdf3 	bl	800447c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004896:	2300      	movs	r3, #0
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800489a:	2300      	movs	r3, #0
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800489e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048a2:	461a      	mov	r2, r3
 80048a4:	2110      	movs	r1, #16
 80048a6:	481e      	ldr	r0, [pc, #120]	; (8004920 <MX_TIM1_Init+0x148>)
 80048a8:	f001 f8d0 	bl	8005a4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80048ac:	2110      	movs	r1, #16
 80048ae:	481c      	ldr	r0, [pc, #112]	; (8004920 <MX_TIM1_Init+0x148>)
 80048b0:	f7ff fda2 	bl	80043f8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80048b4:	2100      	movs	r1, #0
 80048b6:	481a      	ldr	r0, [pc, #104]	; (8004920 <MX_TIM1_Init+0x148>)
 80048b8:	f7ff ff6a 	bl	8004790 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80048bc:	4818      	ldr	r0, [pc, #96]	; (8004920 <MX_TIM1_Init+0x148>)
 80048be:	f7ff ff7a 	bl	80047b6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80048d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80048de:	2300      	movs	r3, #0
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80048e2:	f107 031c 	add.w	r3, r7, #28
 80048e6:	4619      	mov	r1, r3
 80048e8:	480d      	ldr	r0, [pc, #52]	; (8004920 <MX_TIM1_Init+0x148>)
 80048ea:	f001 f8e7 	bl	8005abc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7ff fd2a 	bl	8004348 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
  GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 80048f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048fa:	2302      	movs	r3, #2
 80048fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4804      	ldr	r0, [pc, #16]	; (8004924 <MX_TIM1_Init+0x14c>)
 8004914:	f000 fc47 	bl	80051a6 <LL_GPIO_Init>

}
 8004918:	bf00      	nop
 800491a:	3768      	adds	r7, #104	; 0x68
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40010000 	.word	0x40010000
 8004924:	40020000 	.word	0x40020000

08004928 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	; 0x30
 800492c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800492e:	f107 031c 	add.w	r3, r7, #28
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	611a      	str	r2, [r3, #16]
 800494c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800494e:	2001      	movs	r0, #1
 8004950:	f7ff fd12 	bl	8004378 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004954:	2001      	movs	r0, #1
 8004956:	f7ff fcf7 	bl	8004348 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800495a:	2002      	movs	r0, #2
 800495c:	f7ff fcf4 	bl	8004348 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8004960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004966:	2302      	movs	r3, #2
 8004968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004976:	2301      	movs	r3, #1
 8004978:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4836      	ldr	r0, [pc, #216]	; (8004a58 <MX_TIM2_Init+0x130>)
 8004980:	f000 fc11 	bl	80051a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8004984:	2308      	movs	r3, #8
 8004986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004988:	2302      	movs	r3, #2
 800498a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004998:	2301      	movs	r3, #1
 800499a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	482e      	ldr	r0, [pc, #184]	; (8004a5c <MX_TIM2_Init+0x134>)
 80049a2:	f000 fc00 	bl	80051a6 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X2_TI1);
 80049a6:	2101      	movs	r1, #1
 80049a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ac:	f7ff fedd 	bl	800476a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80049b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049b4:	2101      	movs	r1, #1
 80049b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ba:	f7ff fda1 	bl	8004500 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80049be:	2200      	movs	r2, #0
 80049c0:	2101      	movs	r1, #1
 80049c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049c6:	f7ff fde5 	bl	8004594 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2101      	movs	r1, #1
 80049ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049d2:	f7ff fe29 	bl	8004628 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2101      	movs	r1, #1
 80049da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049de:	f7ff fe6d 	bl	80046bc <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80049e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049e6:	2110      	movs	r1, #16
 80049e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ec:	f7ff fd88 	bl	8004500 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2110      	movs	r1, #16
 80049f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049f8:	f7ff fdcc 	bl	8004594 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80049fc:	2200      	movs	r2, #0
 80049fe:	2110      	movs	r1, #16
 8004a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a04:	f7ff fe10 	bl	8004628 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2110      	movs	r1, #16
 8004a0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a10:	f7ff fe54 	bl	80046bc <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 4294967295;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004a26:	f107 031c 	add.w	r3, r7, #28
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a30:	f000 ff72 	bl	8005918 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8004a34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a38:	f7ff fcce 	bl	80043d8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a42:	f7ff fea5 	bl	8004790 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a4a:	f7ff feb4 	bl	80047b6 <LL_TIM_DisableMasterSlaveMode>

}
 8004a4e:	bf00      	nop
 8004a50:	3730      	adds	r7, #48	; 0x30
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	40020400 	.word	0x40020400

08004a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004a74:	2002      	movs	r0, #2
 8004a76:	f7ff fc7f 	bl	8004378 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8004a7a:	f7ff fbdb 	bl	8004234 <__NVIC_GetPriorityGrouping>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2200      	movs	r2, #0
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fc2b 	bl	80042e0 <NVIC_EncodePriority>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	201d      	movs	r0, #29
 8004a90:	f7ff fbfc 	bl	800428c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8004a94:	201d      	movs	r0, #29
 8004a96:	f7ff fbdb 	bl	8004250 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 100-LL_TIM_IC_FILTER_FDIV1_N2;
 8004a9a:	2364      	movs	r3, #100	; 0x64
 8004a9c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 8400-LL_TIM_IC_FILTER_FDIV1_N2;
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <MX_TIM3_Init+0x78>)
 8004aa4:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	480b      	ldr	r0, [pc, #44]	; (8004adc <MX_TIM3_Init+0x7c>)
 8004ab0:	f000 ff32 	bl	8005918 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8004ab4:	4809      	ldr	r0, [pc, #36]	; (8004adc <MX_TIM3_Init+0x7c>)
 8004ab6:	f7ff fc8f 	bl	80043d8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004aba:	2100      	movs	r1, #0
 8004abc:	4807      	ldr	r0, [pc, #28]	; (8004adc <MX_TIM3_Init+0x7c>)
 8004abe:	f7ff fe3f 	bl	8004740 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	4805      	ldr	r0, [pc, #20]	; (8004adc <MX_TIM3_Init+0x7c>)
 8004ac6:	f7ff fe63 	bl	8004790 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004aca:	4804      	ldr	r0, [pc, #16]	; (8004adc <MX_TIM3_Init+0x7c>)
 8004acc:	f7ff fe73 	bl	80047b6 <LL_TIM_DisableMasterSlaveMode>

}
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	fff020d0 	.word	0xfff020d0
 8004adc:	40000400 	.word	0x40000400

08004ae0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004ae6:	f107 031c 	add.w	r3, r7, #28
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
 8004b04:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004b06:	2008      	movs	r0, #8
 8004b08:	f7ff fc36 	bl	8004378 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f7ff fc1b 	bl	8004348 <LL_AHB1_GRP1_EnableClock>
  /**TIM5 GPIO Configuration
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  */
  GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8004b12:	2303      	movs	r3, #3
 8004b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b16:	2302      	movs	r3, #2
 8004b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004b26:	2302      	movs	r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4827      	ldr	r0, [pc, #156]	; (8004bcc <MX_TIM5_Init+0xec>)
 8004b30:	f000 fb39 	bl	80051a6 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM5, LL_TIM_ENCODERMODE_X2_TI1);
 8004b34:	2101      	movs	r1, #1
 8004b36:	4826      	ldr	r0, [pc, #152]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b38:	f7ff fe17 	bl	800476a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8004b3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b40:	2101      	movs	r1, #1
 8004b42:	4823      	ldr	r0, [pc, #140]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b44:	f7ff fcdc 	bl	8004500 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4820      	ldr	r0, [pc, #128]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b4e:	f7ff fd21 	bl	8004594 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8004b52:	2200      	movs	r2, #0
 8004b54:	2101      	movs	r1, #1
 8004b56:	481e      	ldr	r0, [pc, #120]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b58:	f7ff fd66 	bl	8004628 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2101      	movs	r1, #1
 8004b60:	481b      	ldr	r0, [pc, #108]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b62:	f7ff fdab 	bl	80046bc <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8004b66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	4818      	ldr	r0, [pc, #96]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b6e:	f7ff fcc7 	bl	8004500 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2110      	movs	r1, #16
 8004b76:	4816      	ldr	r0, [pc, #88]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b78:	f7ff fd0c 	bl	8004594 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2110      	movs	r1, #16
 8004b80:	4813      	ldr	r0, [pc, #76]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b82:	f7ff fd51 	bl	8004628 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8004b86:	2200      	movs	r2, #0
 8004b88:	2110      	movs	r1, #16
 8004b8a:	4811      	ldr	r0, [pc, #68]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004b8c:	f7ff fd96 	bl	80046bc <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b94:	2300      	movs	r3, #0
 8004b96:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 4294967295;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004ba2:	f107 031c 	add.w	r3, r7, #28
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4809      	ldr	r0, [pc, #36]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004baa:	f000 feb5 	bl	8005918 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004bae:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004bb0:	f7ff fc12 	bl	80043d8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4806      	ldr	r0, [pc, #24]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004bb8:	f7ff fdea 	bl	8004790 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004bbc:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <MX_TIM5_Init+0xf0>)
 8004bbe:	f7ff fdfa 	bl	80047b6 <LL_TIM_DisableMasterSlaveMode>

}
 8004bc2:	bf00      	nop
 8004bc4:	3730      	adds	r7, #48	; 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	40000c00 	.word	0x40000c00

08004bd4 <LL_AHB1_GRP1_EnableClock>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40023800 	.word	0x40023800

08004c04 <LL_APB1_GRP1_EnableClock>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	4907      	ldr	r1, [pc, #28]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40023800 	.word	0x40023800

08004c34 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	615a      	str	r2, [r3, #20]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004cca:	f107 031c 	add.w	r3, r7, #28
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	609a      	str	r2, [r3, #8]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	615a      	str	r2, [r3, #20]
 8004cdc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	611a      	str	r2, [r3, #16]
 8004cec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004cee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004cf2:	f7ff ff87 	bl	8004c04 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7ff ff6c 	bl	8004bd4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d00:	2302      	movs	r3, #2
 8004d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004d10:	2307      	movs	r3, #7
 8004d12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4810      	ldr	r0, [pc, #64]	; (8004d5c <MX_USART2_UART_Init+0x98>)
 8004d1a:	f000 fa44 	bl	80051a6 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8004d1e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004d22:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004d24:	2300      	movs	r3, #0
 8004d26:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004d30:	230c      	movs	r3, #12
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004d3c:	f107 031c 	add.w	r3, r7, #28
 8004d40:	4619      	mov	r1, r3
 8004d42:	4807      	ldr	r0, [pc, #28]	; (8004d60 <MX_USART2_UART_Init+0x9c>)
 8004d44:	f001 fa8a 	bl	800625c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004d48:	4805      	ldr	r0, [pc, #20]	; (8004d60 <MX_USART2_UART_Init+0x9c>)
 8004d4a:	f7ff ff83 	bl	8004c54 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004d4e:	4804      	ldr	r0, [pc, #16]	; (8004d60 <MX_USART2_UART_Init+0x9c>)
 8004d50:	f7ff ff70 	bl	8004c34 <LL_USART_Enable>

}
 8004d54:	bf00      	nop
 8004d56:	3738      	adds	r7, #56	; 0x38
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40020000 	.word	0x40020000
 8004d60:	40004400 	.word	0x40004400

08004d64 <USART_TransmitByte>:

/* USER CODE BEGIN 1 */
void USART_TransmitByte(USART_TypeDef *pUSARTx, uint8_t u8WriteData)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
	LL_USART_TransmitData8(pUSARTx, u8WriteData);
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff96 	bl	8004ca6 <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TXE(pUSARTx));
 8004d7a:	bf00      	nop
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff7f 	bl	8004c80 <LL_USART_IsActiveFlag_TXE>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f9      	beq.n	8004d7c <USART_TransmitByte+0x18>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d96:	e003      	b.n	8004da0 <LoopCopyDataInit>

08004d98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d9e:	3104      	adds	r1, #4

08004da0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004da0:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004da4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004da6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004da8:	d3f6      	bcc.n	8004d98 <CopyDataInit>
  ldr  r2, =_sbss
 8004daa:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dac:	e002      	b.n	8004db4 <LoopFillZerobss>

08004dae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004db0:	f842 3b04 	str.w	r3, [r2], #4

08004db4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004db6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004db8:	d3f9      	bcc.n	8004dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dba:	f7ff fa25 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dbe:	f001 fb2f 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dc2:	f7fe fdbd 	bl	8003940 <main>
  bx  lr    
 8004dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004dc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004dcc:	08008ea0 	.word	0x08008ea0
  ldr  r0, =_sdata
 8004dd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004dd4:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8004dd8:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8004ddc:	20000244 	.word	0x20000244

08004de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004de0:	e7fe      	b.n	8004de0 <ADC_IRQHandler>

08004de2 <LL_ADC_REG_SetSequencerLength>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_IsEnabled>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8004e3e:	481c      	ldr	r0, [pc, #112]	; (8004eb0 <LL_ADC_CommonInit+0x80>)
 8004e40:	f7ff ffe2 	bl	8004e08 <LL_ADC_IsEnabled>
 8004e44:	4604      	mov	r4, r0
 8004e46:	481b      	ldr	r0, [pc, #108]	; (8004eb4 <LL_ADC_CommonInit+0x84>)
 8004e48:	f7ff ffde 	bl	8004e08 <LL_ADC_IsEnabled>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	431c      	orrs	r4, r3
 8004e50:	4819      	ldr	r0, [pc, #100]	; (8004eb8 <LL_ADC_CommonInit+0x88>)
 8004e52:	f7ff ffd9 	bl	8004e08 <LL_ADC_IsEnabled>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4323      	orrs	r3, r4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d120      	bne.n	8004ea0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d012      	beq.n	8004e8c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <LL_ADC_CommonInit+0x8c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	4311      	orrs	r1, r2
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68d2      	ldr	r2, [r2, #12]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e00b      	b.n	8004ea4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <LL_ADC_CommonInit+0x8c>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e001      	b.n	8004ea4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40012000 	.word	0x40012000
 8004eb4:	40012100 	.word	0x40012100
 8004eb8:	40012200 	.word	0x40012200
 8004ebc:	fffc10e0 	.word	0xfffc10e0

08004ec0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ff9a 	bl	8004e08 <LL_ADC_IsEnabled>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d117      	bne.n	8004f0a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	6811      	ldr	r1, [r2, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	6892      	ldr	r2, [r2, #8]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	e001      	b.n	8004f0e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff6e 	bl	8004e08 <LL_ADC_IsEnabled>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d12b      	bne.n	8004f8a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	e005      	b.n	8004f5a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <LL_ADC_REG_Init+0x80>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	4311      	orrs	r1, r2
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	6912      	ldr	r2, [r2, #16]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff ff2d 	bl	8004de2 <LL_ADC_REG_SetSequencerLength>
 8004f88:	e001      	b.n	8004f8e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	c0fffcfd 	.word	0xc0fffcfd

08004f9c <LL_GPIO_SetPinMode>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	613b      	str	r3, [r7, #16]
  return result;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	2103      	movs	r1, #3
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	61bb      	str	r3, [r7, #24]
  return result;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	3724      	adds	r7, #36	; 0x24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <LL_GPIO_SetPinOutputType>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_GPIO_SetPinSpeed>:
{
 800502a:	b480      	push	{r7}
 800502c:	b089      	sub	sp, #36	; 0x24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	613b      	str	r3, [r7, #16]
  return result;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	2103      	movs	r1, #3
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	401a      	ands	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	61bb      	str	r3, [r7, #24]
  return result;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	431a      	orrs	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3724      	adds	r7, #36	; 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_GPIO_SetPinPull>:
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	613b      	str	r3, [r7, #16]
  return result;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	2103      	movs	r1, #3
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	401a      	ands	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	61bb      	str	r3, [r7, #24]
  return result;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	60da      	str	r2, [r3, #12]
}
 80050da:	bf00      	nop
 80050dc:	3724      	adds	r7, #36	; 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_GPIO_SetAFPin_0_7>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	b089      	sub	sp, #36	; 0x24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	613b      	str	r3, [r7, #16]
  return result;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	210f      	movs	r1, #15
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	401a      	ands	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa93 f3a3 	rbit	r3, r3
 8005120:	61bb      	str	r3, [r7, #24]
  return result;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	431a      	orrs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	3724      	adds	r7, #36	; 0x24
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_GPIO_SetAFPin_8_15>:
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fa93 f3a3 	rbit	r3, r3
 8005160:	613b      	str	r3, [r7, #16]
  return result;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	fab3 f383 	clz	r3, r3
 8005168:	b2db      	uxtb	r3, r3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	210f      	movs	r1, #15
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	401a      	ands	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	61bb      	str	r3, [r7, #24]
  return result;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
}
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	; 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b088      	sub	sp, #32
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
  return result;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80051d0:	e050      	b.n	8005274 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	2101      	movs	r1, #1
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d042      	beq.n	800526e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <LL_GPIO_Init+0x52>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d10d      	bne.n	8005214 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	461a      	mov	r2, r3
 80051fe:	69b9      	ldr	r1, [r7, #24]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ff12 	bl	800502a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fef3 	bl	8004ffa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	461a      	mov	r2, r3
 800521a:	69b9      	ldr	r1, [r7, #24]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ff33 	bl	8005088 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d11a      	bne.n	8005260 <LL_GPIO_Init+0xba>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	60bb      	str	r3, [r7, #8]
  return result;
 8005236:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b07      	cmp	r3, #7
 8005240:	d807      	bhi.n	8005252 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	461a      	mov	r2, r3
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff4b 	bl	80050e6 <LL_GPIO_SetAFPin_0_7>
 8005250:	e006      	b.n	8005260 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	461a      	mov	r2, r3
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff72 	bl	8005144 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	461a      	mov	r2, r3
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fe97 	bl	8004f9c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3301      	adds	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1a7      	bne.n	80051d2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <LL_I2C_Enable>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f043 0201 	orr.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_I2C_Disable>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f023 0201 	bic.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_I2C_SetOwnAddress1>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	431a      	orrs	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a41      	ldr	r2, [pc, #260]	; (800541c <LL_I2C_ConfigSpeed+0x120>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	431a      	orrs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4939      	ldr	r1, [pc, #228]	; (8005420 <LL_I2C_ConfigSpeed+0x124>)
 800533a:	428b      	cmp	r3, r1
 800533c:	d802      	bhi.n	8005344 <LL_I2C_ConfigSpeed+0x48>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	e009      	b.n	8005358 <LL_I2C_ConfigSpeed+0x5c>
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	4935      	ldr	r1, [pc, #212]	; (8005424 <LL_I2C_ConfigSpeed+0x128>)
 8005350:	fba1 1303 	umull	r1, r3, r1, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	3301      	adds	r3, #1
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <LL_I2C_ConfigSpeed+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d939      	bls.n	80053da <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d117      	bne.n	800539c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005394:	e01d      	b.n	80053d2 <LL_I2C_ConfigSpeed+0xd6>
 8005396:	f248 0301 	movw	r3, #32769	; 0x8001
 800539a:	e01a      	b.n	80053d2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009a      	lsls	r2, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009a      	lsls	r2, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80053c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053cc:	e001      	b.n	80053d2 <LL_I2C_ConfigSpeed+0xd6>
 80053ce:	f248 0301 	movw	r3, #32769	; 0x8001
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e010      	b.n	80053fc <LL_I2C_ConfigSpeed+0x100>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d905      	bls.n	80053f8 <LL_I2C_ConfigSpeed+0xfc>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	e000      	b.n	80053fa <LL_I2C_ConfigSpeed+0xfe>
 80053f8:	2304      	movs	r3, #4
 80053fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8005404:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	431a      	orrs	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	431bde83 	.word	0x431bde83
 8005420:	000186a0 	.word	0x000186a0
 8005424:	10624dd3 	.word	0x10624dd3

08005428 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 021a 	bic.w	r2, r3, #26
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff14 	bl	80052ac <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f000 f895 	bl	80055b8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff2f 	bl	80052fc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68d9      	ldr	r1, [r3, #12]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff0f 	bl	80052cc <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ffb7 	bl	8005428 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fee6 	bl	800528c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ffc1 	bl	800544e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <LL_RCC_GetSysClkSource>:
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <LL_RCC_GetSysClkSource+0x18>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800

080054f4 <LL_RCC_GetAHBPrescaler>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <LL_RCC_GetAHBPrescaler+0x18>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800

08005510 <LL_RCC_GetAPB1Prescaler>:
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800

0800552c <LL_RCC_GetAPB2Prescaler>:
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800

08005548 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <LL_RCC_PLL_GetMainSource+0x18>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800

08005564 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <LL_RCC_PLL_GetN+0x18>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	099b      	lsrs	r3, r3, #6
 800556e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40023800 	.word	0x40023800

08005580 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <LL_RCC_PLL_GetP+0x18>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800

0800559c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <LL_RCC_PLL_GetDivider+0x18>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800

080055b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80055c0:	f000 f820 	bl	8005604 <RCC_GetSystemClockFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f83e 	bl	8005650 <RCC_GetHCLKClockFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f84c 	bl	800567c <RCC_GetPCLK1ClockFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f858 	bl	80056a4 <RCC_GetPCLK2ClockFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800560e:	f7ff ff63 	bl	80054d8 <LL_RCC_GetSysClkSource>
 8005612:	4603      	mov	r3, r0
 8005614:	2b04      	cmp	r3, #4
 8005616:	d006      	beq.n	8005626 <RCC_GetSystemClockFreq+0x22>
 8005618:	2b08      	cmp	r3, #8
 800561a:	d007      	beq.n	800562c <RCC_GetSystemClockFreq+0x28>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <RCC_GetSystemClockFreq+0x44>)
 8005622:	607b      	str	r3, [r7, #4]
      break;
 8005624:	e00a      	b.n	800563c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <RCC_GetSystemClockFreq+0x48>)
 8005628:	607b      	str	r3, [r7, #4]
      break;
 800562a:	e007      	b.n	800563c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800562c:	2008      	movs	r0, #8
 800562e:	f000 f84d 	bl	80056cc <RCC_PLL_GetFreqDomain_SYS>
 8005632:	6078      	str	r0, [r7, #4]
      break;
 8005634:	e002      	b.n	800563c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <RCC_GetSystemClockFreq+0x44>)
 8005638:	607b      	str	r3, [r7, #4]
      break;
 800563a:	bf00      	nop
  }

  return frequency;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	00f42400 	.word	0x00f42400
 800564c:	017d7840 	.word	0x017d7840

08005650 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005658:	f7ff ff4c 	bl	80054f4 <LL_RCC_GetAHBPrescaler>
 800565c:	4603      	mov	r3, r0
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <RCC_GetHCLKClockFreq+0x28>)
 8005666:	5cd3      	ldrb	r3, [r2, r3]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	40d3      	lsrs	r3, r2
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	08008b98 	.word	0x08008b98

0800567c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005684:	f7ff ff44 	bl	8005510 <LL_RCC_GetAPB1Prescaler>
 8005688:	4603      	mov	r3, r0
 800568a:	0a9b      	lsrs	r3, r3, #10
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	40d3      	lsrs	r3, r2
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	08008ba8 	.word	0x08008ba8

080056a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80056ac:	f7ff ff3e 	bl	800552c <LL_RCC_GetAPB2Prescaler>
 80056b0:	4603      	mov	r3, r0
 80056b2:	0b5b      	lsrs	r3, r3, #13
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80056b6:	5cd3      	ldrb	r3, [r2, r3]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	40d3      	lsrs	r3, r2
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	08008ba8 	.word	0x08008ba8

080056cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80056e0:	f7ff ff32 	bl	8005548 <LL_RCC_PLL_GetMainSource>
 80056e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80056ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f0:	d003      	beq.n	80056fa <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80056f2:	e005      	b.n	8005700 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80056f6:	617b      	str	r3, [r7, #20]
      break;
 80056f8:	e005      	b.n	8005706 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80056fc:	617b      	str	r3, [r7, #20]
      break;
 80056fe:	e002      	b.n	8005706 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005702:	617b      	str	r3, [r7, #20]
      break;
 8005704:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d113      	bne.n	8005734 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800570c:	f7ff ff46 	bl	800559c <LL_RCC_PLL_GetDivider>
 8005710:	4602      	mov	r2, r0
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fbb3 f4f2 	udiv	r4, r3, r2
 8005718:	f7ff ff24 	bl	8005564 <LL_RCC_PLL_GetN>
 800571c:	4603      	mov	r3, r0
 800571e:	fb03 f404 	mul.w	r4, r3, r4
 8005722:	f7ff ff2d 	bl	8005580 <LL_RCC_PLL_GetP>
 8005726:	4603      	mov	r3, r0
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	3301      	adds	r3, #1
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005732:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005734:	693b      	ldr	r3, [r7, #16]
}
 8005736:	4618      	mov	r0, r3
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bd90      	pop	{r4, r7, pc}
 800573e:	bf00      	nop
 8005740:	00f42400 	.word	0x00f42400
 8005744:	017d7840 	.word	0x017d7840

08005748 <LL_SPI_IsEnabled>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d101      	bne.n	8005760 <LL_SPI_IsEnabled+0x18>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <LL_SPI_IsEnabled+0x1a>
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_SPI_SetCRCPolynomial>:
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ffd3 	bl	8005748 <LL_SPI_IsEnabled>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d139      	bne.n	800581c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	6811      	ldr	r1, [r2, #0]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	4311      	orrs	r1, r2
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	4311      	orrs	r1, r2
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	68d2      	ldr	r2, [r2, #12]
 80057c8:	4311      	orrs	r1, r2
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	6912      	ldr	r2, [r2, #16]
 80057ce:	4311      	orrs	r1, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	6952      	ldr	r2, [r2, #20]
 80057d4:	4311      	orrs	r1, r2
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	6992      	ldr	r2, [r2, #24]
 80057da:	4311      	orrs	r1, r2
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	69d2      	ldr	r2, [r2, #28]
 80057e0:	4311      	orrs	r1, r2
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	6a12      	ldr	r2, [r2, #32]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f023 0204 	bic.w	r2, r3, #4
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580a:	d105      	bne.n	8005818 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff ffab 	bl	800576e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005818:	2300      	movs	r3, #0
 800581a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	61da      	str	r2, [r3, #28]
  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <LL_TIM_SetPrescaler>:
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_TIM_SetAutoReload>:
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_TIM_SetRepetitionCounter>:
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <LL_TIM_OC_SetCompareCH1>:
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <LL_TIM_OC_SetCompareCH2>:
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <LL_TIM_OC_SetCompareCH3>:
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_TIM_OC_SetCompareCH4>:
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f043 0201 	orr.w	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	615a      	str	r2, [r3, #20]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <LL_TIM_Init+0x108>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <LL_TIM_Init+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d00f      	beq.n	8005958 <LL_TIM_Init+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3a      	ldr	r2, [pc, #232]	; (8005a24 <LL_TIM_Init+0x10c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <LL_TIM_Init+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a39      	ldr	r2, [pc, #228]	; (8005a28 <LL_TIM_Init+0x110>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <LL_TIM_Init+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a38      	ldr	r2, [pc, #224]	; (8005a2c <LL_TIM_Init+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <LL_TIM_Init+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a37      	ldr	r2, [pc, #220]	; (8005a30 <LL_TIM_Init+0x118>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d106      	bne.n	8005966 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2d      	ldr	r2, [pc, #180]	; (8005a20 <LL_TIM_Init+0x108>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02b      	beq.n	80059c6 <LL_TIM_Init+0xae>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d027      	beq.n	80059c6 <LL_TIM_Init+0xae>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2a      	ldr	r2, [pc, #168]	; (8005a24 <LL_TIM_Init+0x10c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d023      	beq.n	80059c6 <LL_TIM_Init+0xae>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a29      	ldr	r2, [pc, #164]	; (8005a28 <LL_TIM_Init+0x110>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <LL_TIM_Init+0xae>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a28      	ldr	r2, [pc, #160]	; (8005a2c <LL_TIM_Init+0x114>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01b      	beq.n	80059c6 <LL_TIM_Init+0xae>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <LL_TIM_Init+0x118>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d017      	beq.n	80059c6 <LL_TIM_Init+0xae>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <LL_TIM_Init+0x11c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <LL_TIM_Init+0xae>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <LL_TIM_Init+0x120>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <LL_TIM_Init+0xae>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <LL_TIM_Init+0x124>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <LL_TIM_Init+0xae>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <LL_TIM_Init+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <LL_TIM_Init+0xae>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <LL_TIM_Init+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <LL_TIM_Init+0xae>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <LL_TIM_Init+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d106      	bne.n	80059d4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff34 	bl	800584e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff20 	bl	8005832 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <LL_TIM_Init+0x108>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <LL_TIM_Init+0xea>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0c      	ldr	r2, [pc, #48]	; (8005a30 <LL_TIM_Init+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d105      	bne.n	8005a0e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	7c1b      	ldrb	r3, [r3, #16]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff2e 	bl	800586a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff71 	bl	80058f6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40010400 	.word	0x40010400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800
 8005a40:	40001800 	.word	0x40001800
 8005a44:	40001c00 	.word	0x40001c00
 8005a48:	40002000 	.word	0x40002000

08005a4c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b10      	cmp	r3, #16
 8005a60:	d012      	beq.n	8005a88 <LL_TIM_OC_Init+0x3c>
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d802      	bhi.n	8005a6c <LL_TIM_OC_Init+0x20>
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d007      	beq.n	8005a7a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005a6a:	e022      	b.n	8005ab2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8005a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a70:	d011      	beq.n	8005a96 <LL_TIM_OC_Init+0x4a>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d015      	beq.n	8005aa4 <LL_TIM_OC_Init+0x58>
      break;
 8005a78:	e01b      	b.n	8005ab2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f867 	bl	8005b50 <OC1Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]
      break;
 8005a86:	e014      	b.n	8005ab2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f8cc 	bl	8005c28 <OC2Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e00d      	b.n	8005ab2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f935 	bl	8005d08 <OC3Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa2:	e006      	b.n	8005ab2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f99e 	bl	8005de8 <OC4Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	bf00      	nop
  }

  return result;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	7b12      	ldrb	r2, [r2, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	89d2      	ldrh	r2, [r2, #14]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0202 	bic.w	r2, r3, #2
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <OC1Config+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <OC1Config+0x6a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <OC1Config+0xd4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d11e      	bne.n	8005bf8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 0208 	bic.w	r2, r3, #8
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 0204 	bic.w	r2, r3, #4
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe3b 	bl	8005886 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0210 	bic.w	r2, r3, #16
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0220 	bic.w	r2, r3, #32
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0210 	bic.w	r2, r3, #16
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <OC2Config+0xd8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <OC2Config+0x70>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <OC2Config+0xdc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d11f      	bne.n	8005cd8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	019b      	lsls	r3, r3, #6
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	019b      	lsls	r3, r3, #6
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fdd9 	bl	80058a2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <OC3Config+0xd8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <OC3Config+0x6e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <OC3Config+0xdc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d11f      	bne.n	8005db6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	015b      	lsls	r3, r3, #5
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fd78 	bl	80058be <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	031b      	lsls	r3, r3, #12
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	031b      	lsls	r3, r3, #12
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <OC4Config+0xa8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <OC4Config+0x70>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <OC4Config+0xac>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d107      	bne.n	8005e68 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	019b      	lsls	r3, r3, #6
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fd2d 	bl	80058da <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40010400 	.word	0x40010400

08005e98 <LL_USART_IsEnabled>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_USART_SetStopBitsLength>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <LL_USART_SetHWFlowCtrl>:
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	615a      	str	r2, [r3, #20]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <LL_USART_SetBaudRate>:
{
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f22:	f040 80c1 	bne.w	80060a8 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	461d      	mov	r5, r3
 8005f2a:	f04f 0600 	mov.w	r6, #0
 8005f2e:	46a8      	mov	r8, r5
 8005f30:	46b1      	mov	r9, r6
 8005f32:	eb18 0308 	adds.w	r3, r8, r8
 8005f36:	eb49 0409 	adc.w	r4, r9, r9
 8005f3a:	4698      	mov	r8, r3
 8005f3c:	46a1      	mov	r9, r4
 8005f3e:	eb18 0805 	adds.w	r8, r8, r5
 8005f42:	eb49 0906 	adc.w	r9, r9, r6
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f5a:	4688      	mov	r8, r1
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	eb18 0005 	adds.w	r0, r8, r5
 8005f62:	eb49 0106 	adc.w	r1, r9, r6
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	461d      	mov	r5, r3
 8005f6a:	f04f 0600 	mov.w	r6, #0
 8005f6e:	196b      	adds	r3, r5, r5
 8005f70:	eb46 0406 	adc.w	r4, r6, r6
 8005f74:	461a      	mov	r2, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	f7fa ff24 	bl	8000dc4 <__aeabi_uldivmod>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	461a      	mov	r2, r3
 8005f82:	4bb5      	ldr	r3, [pc, #724]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8005f84:	fba3 2302 	umull	r2, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	fa1f f883 	uxth.w	r8, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	461d      	mov	r5, r3
 8005f96:	f04f 0600 	mov.w	r6, #0
 8005f9a:	46a9      	mov	r9, r5
 8005f9c:	46b2      	mov	sl, r6
 8005f9e:	eb19 0309 	adds.w	r3, r9, r9
 8005fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	46a2      	mov	sl, r4
 8005faa:	eb19 0905 	adds.w	r9, r9, r5
 8005fae:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	4692      	mov	sl, r2
 8005fca:	eb19 0005 	adds.w	r0, r9, r5
 8005fce:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	f04f 0600 	mov.w	r6, #0
 8005fda:	196b      	adds	r3, r5, r5
 8005fdc:	eb46 0406 	adc.w	r4, r6, r6
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	f7fa feee 	bl	8000dc4 <__aeabi_uldivmod>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b9a      	ldr	r3, [pc, #616]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a95      	ldr	r2, [pc, #596]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	b29b      	uxth	r3, r3
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b29b      	uxth	r3, r3
 8006010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006014:	b29b      	uxth	r3, r3
 8006016:	4443      	add	r3, r8
 8006018:	fa1f f883 	uxth.w	r8, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	461d      	mov	r5, r3
 8006020:	f04f 0600 	mov.w	r6, #0
 8006024:	46a9      	mov	r9, r5
 8006026:	46b2      	mov	sl, r6
 8006028:	eb19 0309 	adds.w	r3, r9, r9
 800602c:	eb4a 040a 	adc.w	r4, sl, sl
 8006030:	4699      	mov	r9, r3
 8006032:	46a2      	mov	sl, r4
 8006034:	eb19 0905 	adds.w	r9, r9, r5
 8006038:	eb4a 0a06 	adc.w	sl, sl, r6
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006048:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800604c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006050:	4689      	mov	r9, r1
 8006052:	4692      	mov	sl, r2
 8006054:	eb19 0005 	adds.w	r0, r9, r5
 8006058:	eb4a 0106 	adc.w	r1, sl, r6
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	461d      	mov	r5, r3
 8006060:	f04f 0600 	mov.w	r6, #0
 8006064:	196b      	adds	r3, r5, r5
 8006066:	eb46 0406 	adc.w	r4, r6, r6
 800606a:	461a      	mov	r2, r3
 800606c:	4623      	mov	r3, r4
 800606e:	f7fa fea9 	bl	8000dc4 <__aeabi_uldivmod>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	461a      	mov	r2, r3
 8006078:	4b77      	ldr	r3, [pc, #476]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 800607a:	fba3 1302 	umull	r1, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2164      	movs	r1, #100	; 0x64
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	3332      	adds	r3, #50	; 0x32
 800608c:	4a72      	ldr	r2, [pc, #456]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	b29b      	uxth	r3, r3
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	b29b      	uxth	r3, r3
 800609c:	4443      	add	r3, r8
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	609a      	str	r2, [r3, #8]
}
 80060a6:	e0d2      	b.n	800624e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	469a      	mov	sl, r3
 80060ac:	f04f 0b00 	mov.w	fp, #0
 80060b0:	46d0      	mov	r8, sl
 80060b2:	46d9      	mov	r9, fp
 80060b4:	eb18 0308 	adds.w	r3, r8, r8
 80060b8:	eb49 0409 	adc.w	r4, r9, r9
 80060bc:	4698      	mov	r8, r3
 80060be:	46a1      	mov	r9, r4
 80060c0:	eb18 080a 	adds.w	r8, r8, sl
 80060c4:	eb49 090b 	adc.w	r9, r9, fp
 80060c8:	f04f 0100 	mov.w	r1, #0
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060dc:	4688      	mov	r8, r1
 80060de:	4691      	mov	r9, r2
 80060e0:	eb1a 0508 	adds.w	r5, sl, r8
 80060e4:	eb4b 0609 	adc.w	r6, fp, r9
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	0094      	lsls	r4, r2, #2
 80060fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fe:	008b      	lsls	r3, r1, #2
 8006100:	461a      	mov	r2, r3
 8006102:	4623      	mov	r3, r4
 8006104:	4628      	mov	r0, r5
 8006106:	4631      	mov	r1, r6
 8006108:	f7fa fe5c 	bl	8000dc4 <__aeabi_uldivmod>
 800610c:	4603      	mov	r3, r0
 800610e:	460c      	mov	r4, r1
 8006110:	461a      	mov	r2, r3
 8006112:	4b51      	ldr	r3, [pc, #324]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8006114:	fba3 2302 	umull	r2, r3, r3, r2
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	b29b      	uxth	r3, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	fa1f f883 	uxth.w	r8, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	469b      	mov	fp, r3
 8006126:	f04f 0c00 	mov.w	ip, #0
 800612a:	46d9      	mov	r9, fp
 800612c:	46e2      	mov	sl, ip
 800612e:	eb19 0309 	adds.w	r3, r9, r9
 8006132:	eb4a 040a 	adc.w	r4, sl, sl
 8006136:	4699      	mov	r9, r3
 8006138:	46a2      	mov	sl, r4
 800613a:	eb19 090b 	adds.w	r9, r9, fp
 800613e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800614e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006156:	4689      	mov	r9, r1
 8006158:	4692      	mov	sl, r2
 800615a:	eb1b 0509 	adds.w	r5, fp, r9
 800615e:	eb4c 060a 	adc.w	r6, ip, sl
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	f04f 0400 	mov.w	r4, #0
 8006172:	0094      	lsls	r4, r2, #2
 8006174:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006178:	008b      	lsls	r3, r1, #2
 800617a:	461a      	mov	r2, r3
 800617c:	4623      	mov	r3, r4
 800617e:	4628      	mov	r0, r5
 8006180:	4631      	mov	r1, r6
 8006182:	f7fa fe1f 	bl	8000dc4 <__aeabi_uldivmod>
 8006186:	4603      	mov	r3, r0
 8006188:	460c      	mov	r4, r1
 800618a:	461a      	mov	r2, r3
 800618c:	4b32      	ldr	r3, [pc, #200]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 800618e:	fba3 1302 	umull	r1, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2164      	movs	r1, #100	; 0x64
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a2d      	ldr	r2, [pc, #180]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4443      	add	r3, r8
 80061b2:	fa1f f883 	uxth.w	r8, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	469b      	mov	fp, r3
 80061ba:	f04f 0c00 	mov.w	ip, #0
 80061be:	46d9      	mov	r9, fp
 80061c0:	46e2      	mov	sl, ip
 80061c2:	eb19 0309 	adds.w	r3, r9, r9
 80061c6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ca:	4699      	mov	r9, r3
 80061cc:	46a2      	mov	sl, r4
 80061ce:	eb19 090b 	adds.w	r9, r9, fp
 80061d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ea:	4689      	mov	r9, r1
 80061ec:	4692      	mov	sl, r2
 80061ee:	eb1b 0509 	adds.w	r5, fp, r9
 80061f2:	eb4c 060a 	adc.w	r6, ip, sl
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	f04f 0400 	mov.w	r4, #0
 8006206:	0094      	lsls	r4, r2, #2
 8006208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620c:	008b      	lsls	r3, r1, #2
 800620e:	461a      	mov	r2, r3
 8006210:	4623      	mov	r3, r4
 8006212:	4628      	mov	r0, r5
 8006214:	4631      	mov	r1, r6
 8006216:	f7fa fdd5 	bl	8000dc4 <__aeabi_uldivmod>
 800621a:	4603      	mov	r3, r0
 800621c:	460c      	mov	r4, r1
 800621e:	461a      	mov	r2, r3
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8006222:	fba3 1302 	umull	r1, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2164      	movs	r1, #100	; 0x64
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	3332      	adds	r3, #50	; 0x32
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <LL_USART_SetBaudRate+0x34c>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	b29b      	uxth	r3, r3
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	b29b      	uxth	r3, r3
 8006244:	4443      	add	r3, r8
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	609a      	str	r2, [r3, #8]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	51eb851f 	.word	0x51eb851f

0800625c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fe12 	bl	8005e98 <LL_USART_IsEnabled>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d15e      	bne.n	8006338 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006282:	f023 030c 	bic.w	r3, r3, #12
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	6851      	ldr	r1, [r2, #4]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	68d2      	ldr	r2, [r2, #12]
 800628e:	4311      	orrs	r1, r2
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	6912      	ldr	r2, [r2, #16]
 8006294:	4311      	orrs	r1, r2
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	6992      	ldr	r2, [r2, #24]
 800629a:	430a      	orrs	r2, r1
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fe09 	bl	8005ec0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fe16 	bl	8005ee6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff f97a 	bl	80055b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <LL_USART_Init+0xe8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d102      	bne.n	80062d2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e021      	b.n	8006316 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <LL_USART_Init+0xec>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d102      	bne.n	80062e0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e01a      	b.n	8006316 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <LL_USART_Init+0xf0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d102      	bne.n	80062ee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e013      	b.n	8006316 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a17      	ldr	r2, [pc, #92]	; (8006350 <LL_USART_Init+0xf4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d102      	bne.n	80062fc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e00c      	b.n	8006316 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <LL_USART_Init+0xf8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d102      	bne.n	800630a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e005      	b.n	8006316 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a12      	ldr	r2, [pc, #72]	; (8006358 <LL_USART_Init+0xfc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d101      	bne.n	8006316 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d009      	beq.n	8006338 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006324:	2300      	movs	r3, #0
 8006326:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fdea 	bl	8005f0c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006338:	7ffb      	ldrb	r3, [r7, #31]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40011000 	.word	0x40011000
 8006348:	40004400 	.word	0x40004400
 800634c:	40004800 	.word	0x40004800
 8006350:	40011400 	.word	0x40011400
 8006354:	40004c00 	.word	0x40004c00
 8006358:	40005000 	.word	0x40005000

0800635c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	4a07      	ldr	r2, [pc, #28]	; (800638c <LL_InitTick+0x30>)
 8006370:	3b01      	subs	r3, #1
 8006372:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <LL_InitTick+0x30>)
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800637a:	4b04      	ldr	r3, [pc, #16]	; (800638c <LL_InitTick+0x30>)
 800637c:	2205      	movs	r2, #5
 800637e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000e010 	.word	0xe000e010

08006390 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ffdd 	bl	800635c <LL_InitTick>
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80063b4:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <LL_mDelay+0x44>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80063ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c2:	d00c      	beq.n	80063de <LL_mDelay+0x32>
  {
    Delay++;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80063ca:	e008      	b.n	80063de <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <LL_mDelay+0x44>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <LL_mDelay+0x32>
    {
      Delay--;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3b01      	subs	r3, #1
 80063dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f3      	bne.n	80063cc <LL_mDelay+0x20>
    }
  }
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	e000e010 	.word	0xe000e010

080063f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <LL_SetSystemCoreClock+0x1c>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20000004 	.word	0x20000004

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000008 	.word	0x20000008

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4e0d      	ldr	r6, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1ba4      	subs	r4, r4, r6
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2500      	movs	r5, #0
 800642c:	42a5      	cmp	r5, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4e0b      	ldr	r6, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f002 fb52 	bl	8008adc <_init>
 8006438:	1ba4      	subs	r4, r4, r6
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2500      	movs	r5, #0
 800643e:	42a5      	cmp	r5, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006448:	4798      	blx	r3
 800644a:	3501      	adds	r5, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006452:	4798      	blx	r3
 8006454:	3501      	adds	r5, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	08008e98 	.word	0x08008e98
 800645c:	08008e98 	.word	0x08008e98
 8006460:	08008e98 	.word	0x08008e98
 8006464:	08008e9c 	.word	0x08008e9c

08006468 <memcpy>:
 8006468:	b510      	push	{r4, lr}
 800646a:	1e43      	subs	r3, r0, #1
 800646c:	440a      	add	r2, r1
 800646e:	4291      	cmp	r1, r2
 8006470:	d100      	bne.n	8006474 <memcpy+0xc>
 8006472:	bd10      	pop	{r4, pc}
 8006474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647c:	e7f7      	b.n	800646e <memcpy+0x6>

0800647e <memset>:
 800647e:	4402      	add	r2, r0
 8006480:	4603      	mov	r3, r0
 8006482:	4293      	cmp	r3, r2
 8006484:	d100      	bne.n	8006488 <memset+0xa>
 8006486:	4770      	bx	lr
 8006488:	f803 1b01 	strb.w	r1, [r3], #1
 800648c:	e7f9      	b.n	8006482 <memset+0x4>

0800648e <__cvt>:
 800648e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006498:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800649a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800649e:	461d      	mov	r5, r3
 80064a0:	f027 0720 	bic.w	r7, r7, #32
 80064a4:	bfbb      	ittet	lt
 80064a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064aa:	461d      	movlt	r5, r3
 80064ac:	2300      	movge	r3, #0
 80064ae:	232d      	movlt	r3, #45	; 0x2d
 80064b0:	4614      	mov	r4, r2
 80064b2:	bfb8      	it	lt
 80064b4:	4614      	movlt	r4, r2
 80064b6:	2f46      	cmp	r7, #70	; 0x46
 80064b8:	700b      	strb	r3, [r1, #0]
 80064ba:	d004      	beq.n	80064c6 <__cvt+0x38>
 80064bc:	2f45      	cmp	r7, #69	; 0x45
 80064be:	d100      	bne.n	80064c2 <__cvt+0x34>
 80064c0:	3601      	adds	r6, #1
 80064c2:	2302      	movs	r3, #2
 80064c4:	e000      	b.n	80064c8 <__cvt+0x3a>
 80064c6:	2303      	movs	r3, #3
 80064c8:	aa07      	add	r2, sp, #28
 80064ca:	9204      	str	r2, [sp, #16]
 80064cc:	aa06      	add	r2, sp, #24
 80064ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80064d2:	e9cd 3600 	strd	r3, r6, [sp]
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	f000 fcdd 	bl	8006e98 <_dtoa_r>
 80064de:	2f47      	cmp	r7, #71	; 0x47
 80064e0:	4680      	mov	r8, r0
 80064e2:	d102      	bne.n	80064ea <__cvt+0x5c>
 80064e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	d526      	bpl.n	8006538 <__cvt+0xaa>
 80064ea:	2f46      	cmp	r7, #70	; 0x46
 80064ec:	eb08 0906 	add.w	r9, r8, r6
 80064f0:	d111      	bne.n	8006516 <__cvt+0x88>
 80064f2:	f898 3000 	ldrb.w	r3, [r8]
 80064f6:	2b30      	cmp	r3, #48	; 0x30
 80064f8:	d10a      	bne.n	8006510 <__cvt+0x82>
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006506:	b918      	cbnz	r0, 8006510 <__cvt+0x82>
 8006508:	f1c6 0601 	rsb	r6, r6, #1
 800650c:	f8ca 6000 	str.w	r6, [sl]
 8006510:	f8da 3000 	ldr.w	r3, [sl]
 8006514:	4499      	add	r9, r3
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006522:	b938      	cbnz	r0, 8006534 <__cvt+0xa6>
 8006524:	2230      	movs	r2, #48	; 0x30
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	454b      	cmp	r3, r9
 800652a:	d205      	bcs.n	8006538 <__cvt+0xaa>
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e7f8      	b.n	8006526 <__cvt+0x98>
 8006534:	f8cd 901c 	str.w	r9, [sp, #28]
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800653c:	eba3 0308 	sub.w	r3, r3, r8
 8006540:	4640      	mov	r0, r8
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	b008      	add	sp, #32
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800654a <__exponent>:
 800654a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800654c:	2900      	cmp	r1, #0
 800654e:	4604      	mov	r4, r0
 8006550:	bfba      	itte	lt
 8006552:	4249      	neglt	r1, r1
 8006554:	232d      	movlt	r3, #45	; 0x2d
 8006556:	232b      	movge	r3, #43	; 0x2b
 8006558:	2909      	cmp	r1, #9
 800655a:	f804 2b02 	strb.w	r2, [r4], #2
 800655e:	7043      	strb	r3, [r0, #1]
 8006560:	dd20      	ble.n	80065a4 <__exponent+0x5a>
 8006562:	f10d 0307 	add.w	r3, sp, #7
 8006566:	461f      	mov	r7, r3
 8006568:	260a      	movs	r6, #10
 800656a:	fb91 f5f6 	sdiv	r5, r1, r6
 800656e:	fb06 1115 	mls	r1, r6, r5, r1
 8006572:	3130      	adds	r1, #48	; 0x30
 8006574:	2d09      	cmp	r5, #9
 8006576:	f803 1c01 	strb.w	r1, [r3, #-1]
 800657a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800657e:	4629      	mov	r1, r5
 8006580:	dc09      	bgt.n	8006596 <__exponent+0x4c>
 8006582:	3130      	adds	r1, #48	; 0x30
 8006584:	3b02      	subs	r3, #2
 8006586:	f802 1c01 	strb.w	r1, [r2, #-1]
 800658a:	42bb      	cmp	r3, r7
 800658c:	4622      	mov	r2, r4
 800658e:	d304      	bcc.n	800659a <__exponent+0x50>
 8006590:	1a10      	subs	r0, r2, r0
 8006592:	b003      	add	sp, #12
 8006594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006596:	4613      	mov	r3, r2
 8006598:	e7e7      	b.n	800656a <__exponent+0x20>
 800659a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800659e:	f804 2b01 	strb.w	r2, [r4], #1
 80065a2:	e7f2      	b.n	800658a <__exponent+0x40>
 80065a4:	2330      	movs	r3, #48	; 0x30
 80065a6:	4419      	add	r1, r3
 80065a8:	7083      	strb	r3, [r0, #2]
 80065aa:	1d02      	adds	r2, r0, #4
 80065ac:	70c1      	strb	r1, [r0, #3]
 80065ae:	e7ef      	b.n	8006590 <__exponent+0x46>

080065b0 <_printf_float>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	b091      	sub	sp, #68	; 0x44
 80065b6:	460c      	mov	r4, r1
 80065b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80065bc:	4616      	mov	r6, r2
 80065be:	461f      	mov	r7, r3
 80065c0:	4605      	mov	r5, r0
 80065c2:	f001 faf1 	bl	8007ba8 <_localeconv_r>
 80065c6:	6803      	ldr	r3, [r0, #0]
 80065c8:	9308      	str	r3, [sp, #32]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7f9 fe00 	bl	80001d0 <strlen>
 80065d0:	2300      	movs	r3, #0
 80065d2:	930e      	str	r3, [sp, #56]	; 0x38
 80065d4:	f8d8 3000 	ldr.w	r3, [r8]
 80065d8:	9009      	str	r0, [sp, #36]	; 0x24
 80065da:	3307      	adds	r3, #7
 80065dc:	f023 0307 	bic.w	r3, r3, #7
 80065e0:	f103 0208 	add.w	r2, r3, #8
 80065e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065e8:	f8d4 b000 	ldr.w	fp, [r4]
 80065ec:	f8c8 2000 	str.w	r2, [r8]
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006600:	930b      	str	r3, [sp, #44]	; 0x2c
 8006602:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800660a:	4ba9      	ldr	r3, [pc, #676]	; (80068b0 <_printf_float+0x300>)
 800660c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006610:	f7fa fa8c 	bl	8000b2c <__aeabi_dcmpun>
 8006614:	bb70      	cbnz	r0, 8006674 <_printf_float+0xc4>
 8006616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800661a:	4ba5      	ldr	r3, [pc, #660]	; (80068b0 <_printf_float+0x300>)
 800661c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006620:	f7fa fa66 	bl	8000af0 <__aeabi_dcmple>
 8006624:	bb30      	cbnz	r0, 8006674 <_printf_float+0xc4>
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7fa fa55 	bl	8000adc <__aeabi_dcmplt>
 8006632:	b110      	cbz	r0, 800663a <_printf_float+0x8a>
 8006634:	232d      	movs	r3, #45	; 0x2d
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663a:	4a9e      	ldr	r2, [pc, #632]	; (80068b4 <_printf_float+0x304>)
 800663c:	4b9e      	ldr	r3, [pc, #632]	; (80068b8 <_printf_float+0x308>)
 800663e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006642:	bf8c      	ite	hi
 8006644:	4690      	movhi	r8, r2
 8006646:	4698      	movls	r8, r3
 8006648:	2303      	movs	r3, #3
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	f02b 0304 	bic.w	r3, fp, #4
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	9700      	str	r7, [sp, #0]
 8006658:	4633      	mov	r3, r6
 800665a:	aa0f      	add	r2, sp, #60	; 0x3c
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f9ec 	bl	8006a3c <_printf_common>
 8006664:	3001      	adds	r0, #1
 8006666:	f040 8090 	bne.w	800678a <_printf_float+0x1da>
 800666a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800666e:	b011      	add	sp, #68	; 0x44
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	f7fa fa56 	bl	8000b2c <__aeabi_dcmpun>
 8006680:	b110      	cbz	r0, 8006688 <_printf_float+0xd8>
 8006682:	4a8e      	ldr	r2, [pc, #568]	; (80068bc <_printf_float+0x30c>)
 8006684:	4b8e      	ldr	r3, [pc, #568]	; (80068c0 <_printf_float+0x310>)
 8006686:	e7da      	b.n	800663e <_printf_float+0x8e>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	1c59      	adds	r1, r3, #1
 800668c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006690:	a90e      	add	r1, sp, #56	; 0x38
 8006692:	a80d      	add	r0, sp, #52	; 0x34
 8006694:	d140      	bne.n	8006718 <_printf_float+0x168>
 8006696:	2306      	movs	r3, #6
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800669e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80066a2:	f04f 0c00 	mov.w	ip, #0
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80066b8:	4628      	mov	r0, r5
 80066ba:	f7ff fee8 	bl	800648e <__cvt>
 80066be:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80066c2:	2b47      	cmp	r3, #71	; 0x47
 80066c4:	4680      	mov	r8, r0
 80066c6:	d109      	bne.n	80066dc <_printf_float+0x12c>
 80066c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ca:	1cd8      	adds	r0, r3, #3
 80066cc:	db02      	blt.n	80066d4 <_printf_float+0x124>
 80066ce:	6862      	ldr	r2, [r4, #4]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	dd47      	ble.n	8006764 <_printf_float+0x1b4>
 80066d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80066d8:	fa5f fa8a 	uxtb.w	sl, sl
 80066dc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066e2:	d824      	bhi.n	800672e <_printf_float+0x17e>
 80066e4:	3901      	subs	r1, #1
 80066e6:	4652      	mov	r2, sl
 80066e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ec:	910d      	str	r1, [sp, #52]	; 0x34
 80066ee:	f7ff ff2c 	bl	800654a <__exponent>
 80066f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066f4:	1813      	adds	r3, r2, r0
 80066f6:	2a01      	cmp	r2, #1
 80066f8:	4681      	mov	r9, r0
 80066fa:	6123      	str	r3, [r4, #16]
 80066fc:	dc02      	bgt.n	8006704 <_printf_float+0x154>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d1      	lsls	r1, r2, #31
 8006702:	d501      	bpl.n	8006708 <_printf_float+0x158>
 8006704:	3301      	adds	r3, #1
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0a2      	beq.n	8006656 <_printf_float+0xa6>
 8006710:	232d      	movs	r3, #45	; 0x2d
 8006712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006716:	e79e      	b.n	8006656 <_printf_float+0xa6>
 8006718:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800671c:	f000 8178 	beq.w	8006a10 <_printf_float+0x460>
 8006720:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006724:	d1b9      	bne.n	800669a <_printf_float+0xea>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b7      	bne.n	800669a <_printf_float+0xea>
 800672a:	2301      	movs	r3, #1
 800672c:	e7b4      	b.n	8006698 <_printf_float+0xe8>
 800672e:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006732:	d119      	bne.n	8006768 <_printf_float+0x1b8>
 8006734:	2900      	cmp	r1, #0
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	dd0c      	ble.n	8006754 <_printf_float+0x1a4>
 800673a:	6121      	str	r1, [r4, #16]
 800673c:	b913      	cbnz	r3, 8006744 <_printf_float+0x194>
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	07d2      	lsls	r2, r2, #31
 8006742:	d502      	bpl.n	800674a <_printf_float+0x19a>
 8006744:	3301      	adds	r3, #1
 8006746:	440b      	add	r3, r1
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674c:	65a3      	str	r3, [r4, #88]	; 0x58
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	e7d9      	b.n	8006708 <_printf_float+0x158>
 8006754:	b913      	cbnz	r3, 800675c <_printf_float+0x1ac>
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	07d0      	lsls	r0, r2, #31
 800675a:	d501      	bpl.n	8006760 <_printf_float+0x1b0>
 800675c:	3302      	adds	r3, #2
 800675e:	e7f3      	b.n	8006748 <_printf_float+0x198>
 8006760:	2301      	movs	r3, #1
 8006762:	e7f1      	b.n	8006748 <_printf_float+0x198>
 8006764:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006768:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800676c:	4293      	cmp	r3, r2
 800676e:	db05      	blt.n	800677c <_printf_float+0x1cc>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	07d1      	lsls	r1, r2, #31
 8006776:	d5e8      	bpl.n	800674a <_printf_float+0x19a>
 8006778:	3301      	adds	r3, #1
 800677a:	e7e5      	b.n	8006748 <_printf_float+0x198>
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfd4      	ite	le
 8006780:	f1c3 0302 	rsble	r3, r3, #2
 8006784:	2301      	movgt	r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	e7de      	b.n	8006748 <_printf_float+0x198>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	055a      	lsls	r2, r3, #21
 800678e:	d407      	bmi.n	80067a0 <_printf_float+0x1f0>
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	4642      	mov	r2, r8
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d12b      	bne.n	80067f6 <_printf_float+0x246>
 800679e:	e764      	b.n	800666a <_printf_float+0xba>
 80067a0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067a4:	f240 80dd 	bls.w	8006962 <_printf_float+0x3b2>
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067b0:	f7fa f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d033      	beq.n	8006820 <_printf_float+0x270>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4a42      	ldr	r2, [pc, #264]	; (80068c4 <_printf_float+0x314>)
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af51 	beq.w	800666a <_printf_float+0xba>
 80067c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067cc:	429a      	cmp	r2, r3
 80067ce:	db02      	blt.n	80067d6 <_printf_float+0x226>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	07d8      	lsls	r0, r3, #31
 80067d4:	d50f      	bpl.n	80067f6 <_printf_float+0x246>
 80067d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f af42 	beq.w	800666a <_printf_float+0xba>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	f104 091a 	add.w	r9, r4, #26
 80067ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f0:	3b01      	subs	r3, #1
 80067f2:	4543      	cmp	r3, r8
 80067f4:	dc09      	bgt.n	800680a <_printf_float+0x25a>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	079b      	lsls	r3, r3, #30
 80067fa:	f100 8104 	bmi.w	8006a06 <_printf_float+0x456>
 80067fe:	68e0      	ldr	r0, [r4, #12]
 8006800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006802:	4298      	cmp	r0, r3
 8006804:	bfb8      	it	lt
 8006806:	4618      	movlt	r0, r3
 8006808:	e731      	b.n	800666e <_printf_float+0xbe>
 800680a:	2301      	movs	r3, #1
 800680c:	464a      	mov	r2, r9
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f af28 	beq.w	800666a <_printf_float+0xba>
 800681a:	f108 0801 	add.w	r8, r8, #1
 800681e:	e7e6      	b.n	80067ee <_printf_float+0x23e>
 8006820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006822:	2b00      	cmp	r3, #0
 8006824:	dc2b      	bgt.n	800687e <_printf_float+0x2ce>
 8006826:	2301      	movs	r3, #1
 8006828:	4a26      	ldr	r2, [pc, #152]	; (80068c4 <_printf_float+0x314>)
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f af1a 	beq.w	800666a <_printf_float+0xba>
 8006836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006838:	b923      	cbnz	r3, 8006844 <_printf_float+0x294>
 800683a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800683c:	b913      	cbnz	r3, 8006844 <_printf_float+0x294>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	07d9      	lsls	r1, r3, #31
 8006842:	d5d8      	bpl.n	80067f6 <_printf_float+0x246>
 8006844:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af0b 	beq.w	800666a <_printf_float+0xba>
 8006854:	f04f 0900 	mov.w	r9, #0
 8006858:	f104 0a1a 	add.w	sl, r4, #26
 800685c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800685e:	425b      	negs	r3, r3
 8006860:	454b      	cmp	r3, r9
 8006862:	dc01      	bgt.n	8006868 <_printf_float+0x2b8>
 8006864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006866:	e794      	b.n	8006792 <_printf_float+0x1e2>
 8006868:	2301      	movs	r3, #1
 800686a:	4652      	mov	r2, sl
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f aef9 	beq.w	800666a <_printf_float+0xba>
 8006878:	f109 0901 	add.w	r9, r9, #1
 800687c:	e7ee      	b.n	800685c <_printf_float+0x2ac>
 800687e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006882:	429a      	cmp	r2, r3
 8006884:	bfa8      	it	ge
 8006886:	461a      	movge	r2, r3
 8006888:	2a00      	cmp	r2, #0
 800688a:	4691      	mov	r9, r2
 800688c:	dd07      	ble.n	800689e <_printf_float+0x2ee>
 800688e:	4613      	mov	r3, r2
 8006890:	4631      	mov	r1, r6
 8006892:	4642      	mov	r2, r8
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f aee6 	beq.w	800666a <_printf_float+0xba>
 800689e:	f104 031a 	add.w	r3, r4, #26
 80068a2:	f04f 0b00 	mov.w	fp, #0
 80068a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068aa:	930a      	str	r3, [sp, #40]	; 0x28
 80068ac:	e016      	b.n	80068dc <_printf_float+0x32c>
 80068ae:	bf00      	nop
 80068b0:	7fefffff 	.word	0x7fefffff
 80068b4:	08008bd8 	.word	0x08008bd8
 80068b8:	08008bd4 	.word	0x08008bd4
 80068bc:	08008be0 	.word	0x08008be0
 80068c0:	08008bdc 	.word	0x08008bdc
 80068c4:	08008be4 	.word	0x08008be4
 80068c8:	2301      	movs	r3, #1
 80068ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f aec9 	beq.w	800666a <_printf_float+0xba>
 80068d8:	f10b 0b01 	add.w	fp, fp, #1
 80068dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80068e0:	ebaa 0309 	sub.w	r3, sl, r9
 80068e4:	455b      	cmp	r3, fp
 80068e6:	dcef      	bgt.n	80068c8 <_printf_float+0x318>
 80068e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068ec:	429a      	cmp	r2, r3
 80068ee:	44d0      	add	r8, sl
 80068f0:	db15      	blt.n	800691e <_printf_float+0x36e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07da      	lsls	r2, r3, #31
 80068f6:	d412      	bmi.n	800691e <_printf_float+0x36e>
 80068f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068fc:	eba3 020a 	sub.w	r2, r3, sl
 8006900:	eba3 0a01 	sub.w	sl, r3, r1
 8006904:	4592      	cmp	sl, r2
 8006906:	bfa8      	it	ge
 8006908:	4692      	movge	sl, r2
 800690a:	f1ba 0f00 	cmp.w	sl, #0
 800690e:	dc0e      	bgt.n	800692e <_printf_float+0x37e>
 8006910:	f04f 0800 	mov.w	r8, #0
 8006914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006918:	f104 091a 	add.w	r9, r4, #26
 800691c:	e019      	b.n	8006952 <_printf_float+0x3a2>
 800691e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	d1e5      	bne.n	80068f8 <_printf_float+0x348>
 800692c:	e69d      	b.n	800666a <_printf_float+0xba>
 800692e:	4653      	mov	r3, sl
 8006930:	4642      	mov	r2, r8
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	d1e9      	bne.n	8006910 <_printf_float+0x360>
 800693c:	e695      	b.n	800666a <_printf_float+0xba>
 800693e:	2301      	movs	r3, #1
 8006940:	464a      	mov	r2, r9
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae8e 	beq.w	800666a <_printf_float+0xba>
 800694e:	f108 0801 	add.w	r8, r8, #1
 8006952:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	eba3 030a 	sub.w	r3, r3, sl
 800695c:	4543      	cmp	r3, r8
 800695e:	dcee      	bgt.n	800693e <_printf_float+0x38e>
 8006960:	e749      	b.n	80067f6 <_printf_float+0x246>
 8006962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006964:	2a01      	cmp	r2, #1
 8006966:	dc01      	bgt.n	800696c <_printf_float+0x3bc>
 8006968:	07db      	lsls	r3, r3, #31
 800696a:	d53a      	bpl.n	80069e2 <_printf_float+0x432>
 800696c:	2301      	movs	r3, #1
 800696e:	4642      	mov	r2, r8
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f ae77 	beq.w	800666a <_printf_float+0xba>
 800697c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f108 0801 	add.w	r8, r8, #1
 800698c:	f43f ae6d 	beq.w	800666a <_printf_float+0xba>
 8006990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006992:	2200      	movs	r2, #0
 8006994:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800699c:	2300      	movs	r3, #0
 800699e:	f7fa f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80069a2:	b9c8      	cbnz	r0, 80069d8 <_printf_float+0x428>
 80069a4:	4653      	mov	r3, sl
 80069a6:	4642      	mov	r2, r8
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	d10e      	bne.n	80069d0 <_printf_float+0x420>
 80069b2:	e65a      	b.n	800666a <_printf_float+0xba>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4652      	mov	r2, sl
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f ae53 	beq.w	800666a <_printf_float+0xba>
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ca:	3b01      	subs	r3, #1
 80069cc:	4543      	cmp	r3, r8
 80069ce:	dcf1      	bgt.n	80069b4 <_printf_float+0x404>
 80069d0:	464b      	mov	r3, r9
 80069d2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069d6:	e6dd      	b.n	8006794 <_printf_float+0x1e4>
 80069d8:	f04f 0800 	mov.w	r8, #0
 80069dc:	f104 0a1a 	add.w	sl, r4, #26
 80069e0:	e7f2      	b.n	80069c8 <_printf_float+0x418>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7df      	b.n	80069a6 <_printf_float+0x3f6>
 80069e6:	2301      	movs	r3, #1
 80069e8:	464a      	mov	r2, r9
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae3a 	beq.w	800666a <_printf_float+0xba>
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	4543      	cmp	r3, r8
 8006a02:	dcf0      	bgt.n	80069e6 <_printf_float+0x436>
 8006a04:	e6fb      	b.n	80067fe <_printf_float+0x24e>
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	f104 0919 	add.w	r9, r4, #25
 8006a0e:	e7f4      	b.n	80069fa <_printf_float+0x44a>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f43f ae8a 	beq.w	800672a <_printf_float+0x17a>
 8006a16:	f04f 0c00 	mov.w	ip, #0
 8006a1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006a1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 8006a28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4642      	mov	r2, r8
 8006a30:	464b      	mov	r3, r9
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7ff fd2b 	bl	800648e <__cvt>
 8006a38:	4680      	mov	r8, r0
 8006a3a:	e645      	b.n	80066c8 <_printf_float+0x118>

08006a3c <_printf_common>:
 8006a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	4691      	mov	r9, r2
 8006a42:	461f      	mov	r7, r3
 8006a44:	688a      	ldr	r2, [r1, #8]
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	bfb8      	it	lt
 8006a50:	4613      	movlt	r3, r2
 8006a52:	f8c9 3000 	str.w	r3, [r9]
 8006a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	b112      	cbz	r2, 8006a66 <_printf_common+0x2a>
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c9 3000 	str.w	r3, [r9]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a70:	3302      	addmi	r3, #2
 8006a72:	f8c9 3000 	strmi.w	r3, [r9]
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	f015 0506 	ands.w	r5, r5, #6
 8006a7c:	d107      	bne.n	8006a8e <_printf_common+0x52>
 8006a7e:	f104 0a19 	add.w	sl, r4, #25
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	f8d9 2000 	ldr.w	r2, [r9]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	42ab      	cmp	r3, r5
 8006a8c:	dc28      	bgt.n	8006ae0 <_printf_common+0xa4>
 8006a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	3300      	adds	r3, #0
 8006a96:	bf18      	it	ne
 8006a98:	2301      	movne	r3, #1
 8006a9a:	0692      	lsls	r2, r2, #26
 8006a9c:	d42d      	bmi.n	8006afa <_printf_common+0xbe>
 8006a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	47c0      	blx	r8
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d020      	beq.n	8006aee <_printf_common+0xb2>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	68e5      	ldr	r5, [r4, #12]
 8006ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ab4:	f003 0306 	and.w	r3, r3, #6
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	bf08      	it	eq
 8006abc:	1aad      	subeq	r5, r5, r2
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	bf0c      	ite	eq
 8006ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac8:	2500      	movne	r5, #0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bfc4      	itt	gt
 8006ace:	1a9b      	subgt	r3, r3, r2
 8006ad0:	18ed      	addgt	r5, r5, r3
 8006ad2:	f04f 0900 	mov.w	r9, #0
 8006ad6:	341a      	adds	r4, #26
 8006ad8:	454d      	cmp	r5, r9
 8006ada:	d11a      	bne.n	8006b12 <_printf_common+0xd6>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e008      	b.n	8006af2 <_printf_common+0xb6>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	47c0      	blx	r8
 8006aea:	3001      	adds	r0, #1
 8006aec:	d103      	bne.n	8006af6 <_printf_common+0xba>
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	3501      	adds	r5, #1
 8006af8:	e7c3      	b.n	8006a82 <_printf_common+0x46>
 8006afa:	18e1      	adds	r1, r4, r3
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	2030      	movs	r0, #48	; 0x30
 8006b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b04:	4422      	add	r2, r4
 8006b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b0e:	3302      	adds	r3, #2
 8006b10:	e7c5      	b.n	8006a9e <_printf_common+0x62>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4622      	mov	r2, r4
 8006b16:	4639      	mov	r1, r7
 8006b18:	4630      	mov	r0, r6
 8006b1a:	47c0      	blx	r8
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0e6      	beq.n	8006aee <_printf_common+0xb2>
 8006b20:	f109 0901 	add.w	r9, r9, #1
 8006b24:	e7d8      	b.n	8006ad8 <_printf_common+0x9c>
	...

08006b28 <_printf_i>:
 8006b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b30:	460c      	mov	r4, r1
 8006b32:	7e09      	ldrb	r1, [r1, #24]
 8006b34:	b085      	sub	sp, #20
 8006b36:	296e      	cmp	r1, #110	; 0x6e
 8006b38:	4617      	mov	r7, r2
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	4698      	mov	r8, r3
 8006b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b40:	f000 80b3 	beq.w	8006caa <_printf_i+0x182>
 8006b44:	d822      	bhi.n	8006b8c <_printf_i+0x64>
 8006b46:	2963      	cmp	r1, #99	; 0x63
 8006b48:	d036      	beq.n	8006bb8 <_printf_i+0x90>
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x3a>
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	f000 80b9 	beq.w	8006cc4 <_printf_i+0x19c>
 8006b52:	2958      	cmp	r1, #88	; 0x58
 8006b54:	f000 8083 	beq.w	8006c5e <_printf_i+0x136>
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b60:	e032      	b.n	8006bc8 <_printf_i+0xa0>
 8006b62:	2964      	cmp	r1, #100	; 0x64
 8006b64:	d001      	beq.n	8006b6a <_printf_i+0x42>
 8006b66:	2969      	cmp	r1, #105	; 0x69
 8006b68:	d1f6      	bne.n	8006b58 <_printf_i+0x30>
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	6813      	ldr	r3, [r2, #0]
 8006b6e:	0605      	lsls	r5, r0, #24
 8006b70:	f103 0104 	add.w	r1, r3, #4
 8006b74:	d52a      	bpl.n	8006bcc <_printf_i+0xa4>
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da03      	bge.n	8006b86 <_printf_i+0x5e>
 8006b7e:	222d      	movs	r2, #45	; 0x2d
 8006b80:	425b      	negs	r3, r3
 8006b82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b86:	486f      	ldr	r0, [pc, #444]	; (8006d44 <_printf_i+0x21c>)
 8006b88:	220a      	movs	r2, #10
 8006b8a:	e039      	b.n	8006c00 <_printf_i+0xd8>
 8006b8c:	2973      	cmp	r1, #115	; 0x73
 8006b8e:	f000 809d 	beq.w	8006ccc <_printf_i+0x1a4>
 8006b92:	d808      	bhi.n	8006ba6 <_printf_i+0x7e>
 8006b94:	296f      	cmp	r1, #111	; 0x6f
 8006b96:	d020      	beq.n	8006bda <_printf_i+0xb2>
 8006b98:	2970      	cmp	r1, #112	; 0x70
 8006b9a:	d1dd      	bne.n	8006b58 <_printf_i+0x30>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	f043 0320 	orr.w	r3, r3, #32
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	e003      	b.n	8006bae <_printf_i+0x86>
 8006ba6:	2975      	cmp	r1, #117	; 0x75
 8006ba8:	d017      	beq.n	8006bda <_printf_i+0xb2>
 8006baa:	2978      	cmp	r1, #120	; 0x78
 8006bac:	d1d4      	bne.n	8006b58 <_printf_i+0x30>
 8006bae:	2378      	movs	r3, #120	; 0x78
 8006bb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bb4:	4864      	ldr	r0, [pc, #400]	; (8006d48 <_printf_i+0x220>)
 8006bb6:	e055      	b.n	8006c64 <_printf_i+0x13c>
 8006bb8:	6813      	ldr	r3, [r2, #0]
 8006bba:	1d19      	adds	r1, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6011      	str	r1, [r2, #0]
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e08c      	b.n	8006ce6 <_printf_i+0x1be>
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6011      	str	r1, [r2, #0]
 8006bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bd4:	bf18      	it	ne
 8006bd6:	b21b      	sxthne	r3, r3
 8006bd8:	e7cf      	b.n	8006b7a <_printf_i+0x52>
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	1d18      	adds	r0, r3, #4
 8006be0:	6010      	str	r0, [r2, #0]
 8006be2:	0628      	lsls	r0, r5, #24
 8006be4:	d501      	bpl.n	8006bea <_printf_i+0xc2>
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	e002      	b.n	8006bf0 <_printf_i+0xc8>
 8006bea:	0668      	lsls	r0, r5, #25
 8006bec:	d5fb      	bpl.n	8006be6 <_printf_i+0xbe>
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	4854      	ldr	r0, [pc, #336]	; (8006d44 <_printf_i+0x21c>)
 8006bf2:	296f      	cmp	r1, #111	; 0x6f
 8006bf4:	bf14      	ite	ne
 8006bf6:	220a      	movne	r2, #10
 8006bf8:	2208      	moveq	r2, #8
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c00:	6865      	ldr	r5, [r4, #4]
 8006c02:	60a5      	str	r5, [r4, #8]
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	f2c0 8095 	blt.w	8006d34 <_printf_i+0x20c>
 8006c0a:	6821      	ldr	r1, [r4, #0]
 8006c0c:	f021 0104 	bic.w	r1, r1, #4
 8006c10:	6021      	str	r1, [r4, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d13d      	bne.n	8006c92 <_printf_i+0x16a>
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	f040 808e 	bne.w	8006d38 <_printf_i+0x210>
 8006c1c:	4665      	mov	r5, ip
 8006c1e:	2a08      	cmp	r2, #8
 8006c20:	d10b      	bne.n	8006c3a <_printf_i+0x112>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	07db      	lsls	r3, r3, #31
 8006c26:	d508      	bpl.n	8006c3a <_printf_i+0x112>
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	bfde      	ittt	le
 8006c30:	2330      	movle	r3, #48	; 0x30
 8006c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c3a:	ebac 0305 	sub.w	r3, ip, r5
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	f8cd 8000 	str.w	r8, [sp]
 8006c44:	463b      	mov	r3, r7
 8006c46:	aa03      	add	r2, sp, #12
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff fef6 	bl	8006a3c <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d14d      	bne.n	8006cf0 <_printf_i+0x1c8>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c58:	b005      	add	sp, #20
 8006c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	4839      	ldr	r0, [pc, #228]	; (8006d44 <_printf_i+0x21c>)
 8006c60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	6821      	ldr	r1, [r4, #0]
 8006c68:	1d1d      	adds	r5, r3, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6015      	str	r5, [r2, #0]
 8006c6e:	060a      	lsls	r2, r1, #24
 8006c70:	d50b      	bpl.n	8006c8a <_printf_i+0x162>
 8006c72:	07ca      	lsls	r2, r1, #31
 8006c74:	bf44      	itt	mi
 8006c76:	f041 0120 	orrmi.w	r1, r1, #32
 8006c7a:	6021      	strmi	r1, [r4, #0]
 8006c7c:	b91b      	cbnz	r3, 8006c86 <_printf_i+0x15e>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	f022 0220 	bic.w	r2, r2, #32
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	e7b7      	b.n	8006bfa <_printf_i+0xd2>
 8006c8a:	064d      	lsls	r5, r1, #25
 8006c8c:	bf48      	it	mi
 8006c8e:	b29b      	uxthmi	r3, r3
 8006c90:	e7ef      	b.n	8006c72 <_printf_i+0x14a>
 8006c92:	4665      	mov	r5, ip
 8006c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c98:	fb02 3311 	mls	r3, r2, r1, r3
 8006c9c:	5cc3      	ldrb	r3, [r0, r3]
 8006c9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	d1f5      	bne.n	8006c94 <_printf_i+0x16c>
 8006ca8:	e7b9      	b.n	8006c1e <_printf_i+0xf6>
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	6961      	ldr	r1, [r4, #20]
 8006cb0:	1d18      	adds	r0, r3, #4
 8006cb2:	6010      	str	r0, [r2, #0]
 8006cb4:	0628      	lsls	r0, r5, #24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	d501      	bpl.n	8006cbe <_printf_i+0x196>
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <_printf_i+0x19c>
 8006cbe:	066a      	lsls	r2, r5, #25
 8006cc0:	d5fb      	bpl.n	8006cba <_printf_i+0x192>
 8006cc2:	8019      	strh	r1, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	4665      	mov	r5, ip
 8006cca:	e7b9      	b.n	8006c40 <_printf_i+0x118>
 8006ccc:	6813      	ldr	r3, [r2, #0]
 8006cce:	1d19      	adds	r1, r3, #4
 8006cd0:	6011      	str	r1, [r2, #0]
 8006cd2:	681d      	ldr	r5, [r3, #0]
 8006cd4:	6862      	ldr	r2, [r4, #4]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7f9 fa81 	bl	80001e0 <memchr>
 8006cde:	b108      	cbz	r0, 8006ce4 <_printf_i+0x1bc>
 8006ce0:	1b40      	subs	r0, r0, r5
 8006ce2:	6060      	str	r0, [r4, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e7a7      	b.n	8006c40 <_printf_i+0x118>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	462a      	mov	r2, r5
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	47c0      	blx	r8
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d0aa      	beq.n	8006c54 <_printf_i+0x12c>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	079b      	lsls	r3, r3, #30
 8006d02:	d413      	bmi.n	8006d2c <_printf_i+0x204>
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	4298      	cmp	r0, r3
 8006d0a:	bfb8      	it	lt
 8006d0c:	4618      	movlt	r0, r3
 8006d0e:	e7a3      	b.n	8006c58 <_printf_i+0x130>
 8006d10:	2301      	movs	r3, #1
 8006d12:	464a      	mov	r2, r9
 8006d14:	4639      	mov	r1, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	47c0      	blx	r8
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d09a      	beq.n	8006c54 <_printf_i+0x12c>
 8006d1e:	3501      	adds	r5, #1
 8006d20:	68e3      	ldr	r3, [r4, #12]
 8006d22:	9a03      	ldr	r2, [sp, #12]
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	42ab      	cmp	r3, r5
 8006d28:	dcf2      	bgt.n	8006d10 <_printf_i+0x1e8>
 8006d2a:	e7eb      	b.n	8006d04 <_printf_i+0x1dc>
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	f104 0919 	add.w	r9, r4, #25
 8006d32:	e7f5      	b.n	8006d20 <_printf_i+0x1f8>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1ac      	bne.n	8006c92 <_printf_i+0x16a>
 8006d38:	7803      	ldrb	r3, [r0, #0]
 8006d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d42:	e76c      	b.n	8006c1e <_printf_i+0xf6>
 8006d44:	08008be6 	.word	0x08008be6
 8006d48:	08008bf7 	.word	0x08008bf7

08006d4c <iprintf>:
 8006d4c:	b40f      	push	{r0, r1, r2, r3}
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <iprintf+0x2c>)
 8006d50:	b513      	push	{r0, r1, r4, lr}
 8006d52:	681c      	ldr	r4, [r3, #0]
 8006d54:	b124      	cbz	r4, 8006d60 <iprintf+0x14>
 8006d56:	69a3      	ldr	r3, [r4, #24]
 8006d58:	b913      	cbnz	r3, 8006d60 <iprintf+0x14>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fe9a 	bl	8007a94 <__sinit>
 8006d60:	ab05      	add	r3, sp, #20
 8006d62:	9a04      	ldr	r2, [sp, #16]
 8006d64:	68a1      	ldr	r1, [r4, #8]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f001 faef 	bl	800834c <_vfiprintf_r>
 8006d6e:	b002      	add	sp, #8
 8006d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d74:	b004      	add	sp, #16
 8006d76:	4770      	bx	lr
 8006d78:	20000008 	.word	0x20000008

08006d7c <quorem>:
 8006d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	6903      	ldr	r3, [r0, #16]
 8006d82:	690c      	ldr	r4, [r1, #16]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	4680      	mov	r8, r0
 8006d88:	f2c0 8082 	blt.w	8006e90 <quorem+0x114>
 8006d8c:	3c01      	subs	r4, #1
 8006d8e:	f101 0714 	add.w	r7, r1, #20
 8006d92:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006d96:	f100 0614 	add.w	r6, r0, #20
 8006d9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006d9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006da2:	eb06 030c 	add.w	r3, r6, ip
 8006da6:	3501      	adds	r5, #1
 8006da8:	eb07 090c 	add.w	r9, r7, ip
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	fbb0 f5f5 	udiv	r5, r0, r5
 8006db2:	b395      	cbz	r5, 8006e1a <quorem+0x9e>
 8006db4:	f04f 0a00 	mov.w	sl, #0
 8006db8:	4638      	mov	r0, r7
 8006dba:	46b6      	mov	lr, r6
 8006dbc:	46d3      	mov	fp, sl
 8006dbe:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dc2:	b293      	uxth	r3, r2
 8006dc4:	fb05 a303 	mla	r3, r5, r3, sl
 8006dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	ebab 0303 	sub.w	r3, fp, r3
 8006dd2:	0c12      	lsrs	r2, r2, #16
 8006dd4:	f8de b000 	ldr.w	fp, [lr]
 8006dd8:	fb05 a202 	mla	r2, r5, r2, sl
 8006ddc:	fa13 f38b 	uxtah	r3, r3, fp
 8006de0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006de4:	fa1f fb82 	uxth.w	fp, r2
 8006de8:	f8de 2000 	ldr.w	r2, [lr]
 8006dec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dfa:	4581      	cmp	r9, r0
 8006dfc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e00:	f84e 3b04 	str.w	r3, [lr], #4
 8006e04:	d2db      	bcs.n	8006dbe <quorem+0x42>
 8006e06:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e0a:	b933      	cbnz	r3, 8006e1a <quorem+0x9e>
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	429e      	cmp	r6, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	d330      	bcc.n	8006e78 <quorem+0xfc>
 8006e16:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	f001 f8f0 	bl	8008000 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	db25      	blt.n	8006e70 <quorem+0xf4>
 8006e24:	3501      	adds	r5, #1
 8006e26:	4630      	mov	r0, r6
 8006e28:	f04f 0c00 	mov.w	ip, #0
 8006e2c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006e30:	f8d0 e000 	ldr.w	lr, [r0]
 8006e34:	b293      	uxth	r3, r2
 8006e36:	ebac 0303 	sub.w	r3, ip, r3
 8006e3a:	0c12      	lsrs	r2, r2, #16
 8006e3c:	fa13 f38e 	uxtah	r3, r3, lr
 8006e40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e4e:	45b9      	cmp	r9, r7
 8006e50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e54:	f840 3b04 	str.w	r3, [r0], #4
 8006e58:	d2e8      	bcs.n	8006e2c <quorem+0xb0>
 8006e5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006e5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006e62:	b92a      	cbnz	r2, 8006e70 <quorem+0xf4>
 8006e64:	3b04      	subs	r3, #4
 8006e66:	429e      	cmp	r6, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	d30b      	bcc.n	8006e84 <quorem+0x108>
 8006e6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e70:	4628      	mov	r0, r5
 8006e72:	b003      	add	sp, #12
 8006e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	3b04      	subs	r3, #4
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d1ca      	bne.n	8006e16 <quorem+0x9a>
 8006e80:	3c01      	subs	r4, #1
 8006e82:	e7c5      	b.n	8006e10 <quorem+0x94>
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	3b04      	subs	r3, #4
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d1ef      	bne.n	8006e6c <quorem+0xf0>
 8006e8c:	3c01      	subs	r4, #1
 8006e8e:	e7ea      	b.n	8006e66 <quorem+0xea>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7ee      	b.n	8006e72 <quorem+0xf6>
 8006e94:	0000      	movs	r0, r0
	...

08006e98 <_dtoa_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e9e:	b097      	sub	sp, #92	; 0x5c
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8006eaa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006eae:	b93d      	cbnz	r5, 8006ec0 <_dtoa_r+0x28>
 8006eb0:	2010      	movs	r0, #16
 8006eb2:	f000 fe87 	bl	8007bc4 <malloc>
 8006eb6:	6260      	str	r0, [r4, #36]	; 0x24
 8006eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ebc:	6005      	str	r5, [r0, #0]
 8006ebe:	60c5      	str	r5, [r0, #12]
 8006ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	b151      	cbz	r1, 8006edc <_dtoa_r+0x44>
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	604a      	str	r2, [r1, #4]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4093      	lsls	r3, r2
 8006ece:	608b      	str	r3, [r1, #8]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 feb3 	bl	8007c3c <_Bfree>
 8006ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	1e3b      	subs	r3, r7, #0
 8006ede:	bfbb      	ittet	lt
 8006ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	9303      	strlt	r3, [sp, #12]
 8006ee6:	2300      	movge	r3, #0
 8006ee8:	2201      	movlt	r2, #1
 8006eea:	bfac      	ite	ge
 8006eec:	f8c8 3000 	strge.w	r3, [r8]
 8006ef0:	f8c8 2000 	strlt.w	r2, [r8]
 8006ef4:	4bb2      	ldr	r3, [pc, #712]	; (80071c0 <_dtoa_r+0x328>)
 8006ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006efa:	ea33 0308 	bics.w	r3, r3, r8
 8006efe:	d11b      	bne.n	8006f38 <_dtoa_r+0xa0>
 8006f00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	b923      	cbnz	r3, 8006f16 <_dtoa_r+0x7e>
 8006f0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f000 854f 	beq.w	80079b4 <_dtoa_r+0xb1c>
 8006f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f18:	b953      	cbnz	r3, 8006f30 <_dtoa_r+0x98>
 8006f1a:	4baa      	ldr	r3, [pc, #680]	; (80071c4 <_dtoa_r+0x32c>)
 8006f1c:	e021      	b.n	8006f62 <_dtoa_r+0xca>
 8006f1e:	4baa      	ldr	r3, [pc, #680]	; (80071c8 <_dtoa_r+0x330>)
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	3308      	adds	r3, #8
 8006f24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	9805      	ldr	r0, [sp, #20]
 8006f2a:	b017      	add	sp, #92	; 0x5c
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	4ba4      	ldr	r3, [pc, #656]	; (80071c4 <_dtoa_r+0x32c>)
 8006f32:	9305      	str	r3, [sp, #20]
 8006f34:	3303      	adds	r3, #3
 8006f36:	e7f5      	b.n	8006f24 <_dtoa_r+0x8c>
 8006f38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f48:	4682      	mov	sl, r0
 8006f4a:	b160      	cbz	r0, 8006f66 <_dtoa_r+0xce>
 8006f4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f4e:	2301      	movs	r3, #1
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 852a 	beq.w	80079ae <_dtoa_r+0xb16>
 8006f5a:	4b9c      	ldr	r3, [pc, #624]	; (80071cc <_dtoa_r+0x334>)
 8006f5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	e7e0      	b.n	8006f28 <_dtoa_r+0x90>
 8006f66:	ab14      	add	r3, sp, #80	; 0x50
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	ab15      	add	r3, sp, #84	; 0x54
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	4632      	mov	r2, r6
 8006f70:	463b      	mov	r3, r7
 8006f72:	4620      	mov	r0, r4
 8006f74:	f001 f8bb 	bl	80080ee <__d2b>
 8006f78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f7c:	4683      	mov	fp, r0
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	d07c      	beq.n	800707c <_dtoa_r+0x1e4>
 8006f82:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f86:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006f8a:	46b0      	mov	r8, r6
 8006f8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006f90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f94:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b8d      	ldr	r3, [pc, #564]	; (80071d0 <_dtoa_r+0x338>)
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 f972 	bl	8000288 <__aeabi_dsub>
 8006fa4:	a380      	add	r3, pc, #512	; (adr r3, 80071a8 <_dtoa_r+0x310>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	a380      	add	r3, pc, #512	; (adr r3, 80071b0 <_dtoa_r+0x318>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f96a 	bl	800028c <__adddf3>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7f9 fab1 	bl	8000524 <__aeabi_i2d>
 8006fc2:	a37d      	add	r3, pc, #500	; (adr r3, 80071b8 <_dtoa_r+0x320>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 f95a 	bl	800028c <__adddf3>
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	f7f9 fdbc 	bl	8000b58 <__aeabi_d2iz>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4682      	mov	sl, r0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	f7f9 fd77 	bl	8000adc <__aeabi_dcmplt>
 8006fee:	b148      	cbz	r0, 8007004 <_dtoa_r+0x16c>
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f7f9 fa97 	bl	8000524 <__aeabi_i2d>
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	f7f9 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ffe:	b908      	cbnz	r0, 8007004 <_dtoa_r+0x16c>
 8007000:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007004:	f1ba 0f16 	cmp.w	sl, #22
 8007008:	d859      	bhi.n	80070be <_dtoa_r+0x226>
 800700a:	4972      	ldr	r1, [pc, #456]	; (80071d4 <_dtoa_r+0x33c>)
 800700c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007018:	f7f9 fd7e 	bl	8000b18 <__aeabi_dcmpgt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d050      	beq.n	80070c2 <_dtoa_r+0x22a>
 8007020:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007024:	2300      	movs	r3, #0
 8007026:	9312      	str	r3, [sp, #72]	; 0x48
 8007028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800702a:	1b5d      	subs	r5, r3, r5
 800702c:	f1b5 0801 	subs.w	r8, r5, #1
 8007030:	bf49      	itett	mi
 8007032:	f1c5 0301 	rsbmi	r3, r5, #1
 8007036:	2300      	movpl	r3, #0
 8007038:	9308      	strmi	r3, [sp, #32]
 800703a:	f04f 0800 	movmi.w	r8, #0
 800703e:	bf58      	it	pl
 8007040:	9308      	strpl	r3, [sp, #32]
 8007042:	f1ba 0f00 	cmp.w	sl, #0
 8007046:	db3e      	blt.n	80070c6 <_dtoa_r+0x22e>
 8007048:	2300      	movs	r3, #0
 800704a:	44d0      	add	r8, sl
 800704c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007050:	9309      	str	r3, [sp, #36]	; 0x24
 8007052:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007054:	2b09      	cmp	r3, #9
 8007056:	f200 8090 	bhi.w	800717a <_dtoa_r+0x2e2>
 800705a:	2b05      	cmp	r3, #5
 800705c:	bfc4      	itt	gt
 800705e:	3b04      	subgt	r3, #4
 8007060:	9320      	strgt	r3, [sp, #128]	; 0x80
 8007062:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007064:	f1a3 0302 	sub.w	r3, r3, #2
 8007068:	bfcc      	ite	gt
 800706a:	2500      	movgt	r5, #0
 800706c:	2501      	movle	r5, #1
 800706e:	2b03      	cmp	r3, #3
 8007070:	f200 808f 	bhi.w	8007192 <_dtoa_r+0x2fa>
 8007074:	e8df f003 	tbb	[pc, r3]
 8007078:	71317f7d 	.word	0x71317f7d
 800707c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007080:	441d      	add	r5, r3
 8007082:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007086:	2820      	cmp	r0, #32
 8007088:	dd13      	ble.n	80070b2 <_dtoa_r+0x21a>
 800708a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	fa08 f800 	lsl.w	r8, r8, r0
 8007094:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007098:	fa23 f000 	lsr.w	r0, r3, r0
 800709c:	ea48 0000 	orr.w	r0, r8, r0
 80070a0:	f7f9 fa30 	bl	8000504 <__aeabi_ui2d>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4680      	mov	r8, r0
 80070a8:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80070ac:	3d01      	subs	r5, #1
 80070ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80070b0:	e772      	b.n	8006f98 <_dtoa_r+0x100>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	f1c0 0020 	rsb	r0, r0, #32
 80070b8:	fa03 f000 	lsl.w	r0, r3, r0
 80070bc:	e7f0      	b.n	80070a0 <_dtoa_r+0x208>
 80070be:	2301      	movs	r3, #1
 80070c0:	e7b1      	b.n	8007026 <_dtoa_r+0x18e>
 80070c2:	9012      	str	r0, [sp, #72]	; 0x48
 80070c4:	e7b0      	b.n	8007028 <_dtoa_r+0x190>
 80070c6:	9b08      	ldr	r3, [sp, #32]
 80070c8:	eba3 030a 	sub.w	r3, r3, sl
 80070cc:	9308      	str	r3, [sp, #32]
 80070ce:	f1ca 0300 	rsb	r3, sl, #0
 80070d2:	9309      	str	r3, [sp, #36]	; 0x24
 80070d4:	2300      	movs	r3, #0
 80070d6:	930d      	str	r3, [sp, #52]	; 0x34
 80070d8:	e7bb      	b.n	8007052 <_dtoa_r+0x1ba>
 80070da:	2301      	movs	r3, #1
 80070dc:	930c      	str	r3, [sp, #48]	; 0x30
 80070de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dd59      	ble.n	8007198 <_dtoa_r+0x300>
 80070e4:	9306      	str	r3, [sp, #24]
 80070e6:	4699      	mov	r9, r3
 80070e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070ea:	2200      	movs	r2, #0
 80070ec:	6072      	str	r2, [r6, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f102 0014 	add.w	r0, r2, #20
 80070f4:	4298      	cmp	r0, r3
 80070f6:	6871      	ldr	r1, [r6, #4]
 80070f8:	d970      	bls.n	80071dc <_dtoa_r+0x344>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fd6a 	bl	8007bd4 <_Balloc>
 8007100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007102:	6030      	str	r0, [r6, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	f1b9 0f0e 	cmp.w	r9, #14
 800710c:	f200 80eb 	bhi.w	80072e6 <_dtoa_r+0x44e>
 8007110:	2d00      	cmp	r5, #0
 8007112:	f000 80e8 	beq.w	80072e6 <_dtoa_r+0x44e>
 8007116:	ed9d 7b02 	vldr	d7, [sp, #8]
 800711a:	f1ba 0f00 	cmp.w	sl, #0
 800711e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007122:	dd79      	ble.n	8007218 <_dtoa_r+0x380>
 8007124:	4a2b      	ldr	r2, [pc, #172]	; (80071d4 <_dtoa_r+0x33c>)
 8007126:	f00a 030f 	and.w	r3, sl, #15
 800712a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800712e:	ed93 7b00 	vldr	d7, [r3]
 8007132:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007136:	06f0      	lsls	r0, r6, #27
 8007138:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800713c:	d56a      	bpl.n	8007214 <_dtoa_r+0x37c>
 800713e:	4b26      	ldr	r3, [pc, #152]	; (80071d8 <_dtoa_r+0x340>)
 8007140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007148:	f7f9 fb80 	bl	800084c <__aeabi_ddiv>
 800714c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007150:	f006 060f 	and.w	r6, r6, #15
 8007154:	2503      	movs	r5, #3
 8007156:	4f20      	ldr	r7, [pc, #128]	; (80071d8 <_dtoa_r+0x340>)
 8007158:	e051      	b.n	80071fe <_dtoa_r+0x366>
 800715a:	2301      	movs	r3, #1
 800715c:	930c      	str	r3, [sp, #48]	; 0x30
 800715e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007160:	4453      	add	r3, sl
 8007162:	f103 0901 	add.w	r9, r3, #1
 8007166:	9306      	str	r3, [sp, #24]
 8007168:	464b      	mov	r3, r9
 800716a:	2b01      	cmp	r3, #1
 800716c:	bfb8      	it	lt
 800716e:	2301      	movlt	r3, #1
 8007170:	e7ba      	b.n	80070e8 <_dtoa_r+0x250>
 8007172:	2300      	movs	r3, #0
 8007174:	e7b2      	b.n	80070dc <_dtoa_r+0x244>
 8007176:	2300      	movs	r3, #0
 8007178:	e7f0      	b.n	800715c <_dtoa_r+0x2c4>
 800717a:	2501      	movs	r5, #1
 800717c:	2300      	movs	r3, #0
 800717e:	9320      	str	r3, [sp, #128]	; 0x80
 8007180:	950c      	str	r5, [sp, #48]	; 0x30
 8007182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007186:	9306      	str	r3, [sp, #24]
 8007188:	4699      	mov	r9, r3
 800718a:	2200      	movs	r2, #0
 800718c:	2312      	movs	r3, #18
 800718e:	9221      	str	r2, [sp, #132]	; 0x84
 8007190:	e7aa      	b.n	80070e8 <_dtoa_r+0x250>
 8007192:	2301      	movs	r3, #1
 8007194:	930c      	str	r3, [sp, #48]	; 0x30
 8007196:	e7f4      	b.n	8007182 <_dtoa_r+0x2ea>
 8007198:	2301      	movs	r3, #1
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	4699      	mov	r9, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	e7f5      	b.n	800718e <_dtoa_r+0x2f6>
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	636f4361 	.word	0x636f4361
 80071ac:	3fd287a7 	.word	0x3fd287a7
 80071b0:	8b60c8b3 	.word	0x8b60c8b3
 80071b4:	3fc68a28 	.word	0x3fc68a28
 80071b8:	509f79fb 	.word	0x509f79fb
 80071bc:	3fd34413 	.word	0x3fd34413
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	08008c11 	.word	0x08008c11
 80071c8:	08008c08 	.word	0x08008c08
 80071cc:	08008be5 	.word	0x08008be5
 80071d0:	3ff80000 	.word	0x3ff80000
 80071d4:	08008ca0 	.word	0x08008ca0
 80071d8:	08008c78 	.word	0x08008c78
 80071dc:	3101      	adds	r1, #1
 80071de:	6071      	str	r1, [r6, #4]
 80071e0:	0052      	lsls	r2, r2, #1
 80071e2:	e785      	b.n	80070f0 <_dtoa_r+0x258>
 80071e4:	07f1      	lsls	r1, r6, #31
 80071e6:	d508      	bpl.n	80071fa <_dtoa_r+0x362>
 80071e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f0:	f7f9 fa02 	bl	80005f8 <__aeabi_dmul>
 80071f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071f8:	3501      	adds	r5, #1
 80071fa:	1076      	asrs	r6, r6, #1
 80071fc:	3708      	adds	r7, #8
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d1f0      	bne.n	80071e4 <_dtoa_r+0x34c>
 8007202:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720a:	f7f9 fb1f 	bl	800084c <__aeabi_ddiv>
 800720e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007212:	e01a      	b.n	800724a <_dtoa_r+0x3b2>
 8007214:	2502      	movs	r5, #2
 8007216:	e79e      	b.n	8007156 <_dtoa_r+0x2be>
 8007218:	f000 80a0 	beq.w	800735c <_dtoa_r+0x4c4>
 800721c:	f1ca 0600 	rsb	r6, sl, #0
 8007220:	4b9f      	ldr	r3, [pc, #636]	; (80074a0 <_dtoa_r+0x608>)
 8007222:	4fa0      	ldr	r7, [pc, #640]	; (80074a4 <_dtoa_r+0x60c>)
 8007224:	f006 020f 	and.w	r2, r6, #15
 8007228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007234:	f7f9 f9e0 	bl	80005f8 <__aeabi_dmul>
 8007238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800723c:	1136      	asrs	r6, r6, #4
 800723e:	2300      	movs	r3, #0
 8007240:	2502      	movs	r5, #2
 8007242:	2e00      	cmp	r6, #0
 8007244:	d17f      	bne.n	8007346 <_dtoa_r+0x4ae>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e1      	bne.n	800720e <_dtoa_r+0x376>
 800724a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8087 	beq.w	8007360 <_dtoa_r+0x4c8>
 8007252:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	4b93      	ldr	r3, [pc, #588]	; (80074a8 <_dtoa_r+0x610>)
 800725a:	4630      	mov	r0, r6
 800725c:	4639      	mov	r1, r7
 800725e:	f7f9 fc3d 	bl	8000adc <__aeabi_dcmplt>
 8007262:	2800      	cmp	r0, #0
 8007264:	d07c      	beq.n	8007360 <_dtoa_r+0x4c8>
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	d079      	beq.n	8007360 <_dtoa_r+0x4c8>
 800726c:	9b06      	ldr	r3, [sp, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	dd35      	ble.n	80072de <_dtoa_r+0x446>
 8007272:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007276:	930a      	str	r3, [sp, #40]	; 0x28
 8007278:	4639      	mov	r1, r7
 800727a:	2200      	movs	r2, #0
 800727c:	4b8b      	ldr	r3, [pc, #556]	; (80074ac <_dtoa_r+0x614>)
 800727e:	4630      	mov	r0, r6
 8007280:	f7f9 f9ba 	bl	80005f8 <__aeabi_dmul>
 8007284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007288:	9f06      	ldr	r7, [sp, #24]
 800728a:	3501      	adds	r5, #1
 800728c:	4628      	mov	r0, r5
 800728e:	f7f9 f949 	bl	8000524 <__aeabi_i2d>
 8007292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007296:	f7f9 f9af 	bl	80005f8 <__aeabi_dmul>
 800729a:	2200      	movs	r2, #0
 800729c:	4b84      	ldr	r3, [pc, #528]	; (80074b0 <_dtoa_r+0x618>)
 800729e:	f7f8 fff5 	bl	800028c <__adddf3>
 80072a2:	4605      	mov	r5, r0
 80072a4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072a8:	2f00      	cmp	r7, #0
 80072aa:	d15d      	bne.n	8007368 <_dtoa_r+0x4d0>
 80072ac:	2200      	movs	r2, #0
 80072ae:	4b81      	ldr	r3, [pc, #516]	; (80074b4 <_dtoa_r+0x61c>)
 80072b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b4:	f7f8 ffe8 	bl	8000288 <__aeabi_dsub>
 80072b8:	462a      	mov	r2, r5
 80072ba:	4633      	mov	r3, r6
 80072bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c0:	f7f9 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f040 8288 	bne.w	80077da <_dtoa_r+0x942>
 80072ca:	462a      	mov	r2, r5
 80072cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d4:	f7f9 fc02 	bl	8000adc <__aeabi_dcmplt>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f040 827c 	bne.w	80077d6 <_dtoa_r+0x93e>
 80072de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f2c0 8150 	blt.w	800758e <_dtoa_r+0x6f6>
 80072ee:	f1ba 0f0e 	cmp.w	sl, #14
 80072f2:	f300 814c 	bgt.w	800758e <_dtoa_r+0x6f6>
 80072f6:	4b6a      	ldr	r3, [pc, #424]	; (80074a0 <_dtoa_r+0x608>)
 80072f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072fc:	ed93 7b00 	vldr	d7, [r3]
 8007300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007302:	2b00      	cmp	r3, #0
 8007304:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007308:	f280 80d8 	bge.w	80074bc <_dtoa_r+0x624>
 800730c:	f1b9 0f00 	cmp.w	r9, #0
 8007310:	f300 80d4 	bgt.w	80074bc <_dtoa_r+0x624>
 8007314:	f040 825e 	bne.w	80077d4 <_dtoa_r+0x93c>
 8007318:	2200      	movs	r2, #0
 800731a:	4b66      	ldr	r3, [pc, #408]	; (80074b4 <_dtoa_r+0x61c>)
 800731c:	ec51 0b17 	vmov	r0, r1, d7
 8007320:	f7f9 f96a 	bl	80005f8 <__aeabi_dmul>
 8007324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007328:	f7f9 fbec 	bl	8000b04 <__aeabi_dcmpge>
 800732c:	464f      	mov	r7, r9
 800732e:	464e      	mov	r6, r9
 8007330:	2800      	cmp	r0, #0
 8007332:	f040 8234 	bne.w	800779e <_dtoa_r+0x906>
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	9a05      	ldr	r2, [sp, #20]
 800733a:	1c5d      	adds	r5, r3, #1
 800733c:	2331      	movs	r3, #49	; 0x31
 800733e:	7013      	strb	r3, [r2, #0]
 8007340:	f10a 0a01 	add.w	sl, sl, #1
 8007344:	e22f      	b.n	80077a6 <_dtoa_r+0x90e>
 8007346:	07f2      	lsls	r2, r6, #31
 8007348:	d505      	bpl.n	8007356 <_dtoa_r+0x4be>
 800734a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734e:	f7f9 f953 	bl	80005f8 <__aeabi_dmul>
 8007352:	3501      	adds	r5, #1
 8007354:	2301      	movs	r3, #1
 8007356:	1076      	asrs	r6, r6, #1
 8007358:	3708      	adds	r7, #8
 800735a:	e772      	b.n	8007242 <_dtoa_r+0x3aa>
 800735c:	2502      	movs	r5, #2
 800735e:	e774      	b.n	800724a <_dtoa_r+0x3b2>
 8007360:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007364:	464f      	mov	r7, r9
 8007366:	e791      	b.n	800728c <_dtoa_r+0x3f4>
 8007368:	4b4d      	ldr	r3, [pc, #308]	; (80074a0 <_dtoa_r+0x608>)
 800736a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800736e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d047      	beq.n	8007408 <_dtoa_r+0x570>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	2000      	movs	r0, #0
 800737e:	494e      	ldr	r1, [pc, #312]	; (80074b8 <_dtoa_r+0x620>)
 8007380:	f7f9 fa64 	bl	800084c <__aeabi_ddiv>
 8007384:	462a      	mov	r2, r5
 8007386:	4633      	mov	r3, r6
 8007388:	f7f8 ff7e 	bl	8000288 <__aeabi_dsub>
 800738c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007390:	9d05      	ldr	r5, [sp, #20]
 8007392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007396:	f7f9 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800739a:	4606      	mov	r6, r0
 800739c:	f7f9 f8c2 	bl	8000524 <__aeabi_i2d>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a8:	f7f8 ff6e 	bl	8000288 <__aeabi_dsub>
 80073ac:	3630      	adds	r6, #48	; 0x30
 80073ae:	f805 6b01 	strb.w	r6, [r5], #1
 80073b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ba:	f7f9 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d163      	bne.n	800748a <_dtoa_r+0x5f2>
 80073c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c6:	2000      	movs	r0, #0
 80073c8:	4937      	ldr	r1, [pc, #220]	; (80074a8 <_dtoa_r+0x610>)
 80073ca:	f7f8 ff5d 	bl	8000288 <__aeabi_dsub>
 80073ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073d2:	f7f9 fb83 	bl	8000adc <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f040 80b7 	bne.w	800754a <_dtoa_r+0x6b2>
 80073dc:	9b05      	ldr	r3, [sp, #20]
 80073de:	1aeb      	subs	r3, r5, r3
 80073e0:	429f      	cmp	r7, r3
 80073e2:	f77f af7c 	ble.w	80072de <_dtoa_r+0x446>
 80073e6:	2200      	movs	r2, #0
 80073e8:	4b30      	ldr	r3, [pc, #192]	; (80074ac <_dtoa_r+0x614>)
 80073ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073ee:	f7f9 f903 	bl	80005f8 <__aeabi_dmul>
 80073f2:	2200      	movs	r2, #0
 80073f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <_dtoa_r+0x614>)
 80073fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fe:	f7f9 f8fb 	bl	80005f8 <__aeabi_dmul>
 8007402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007406:	e7c4      	b.n	8007392 <_dtoa_r+0x4fa>
 8007408:	4633      	mov	r3, r6
 800740a:	462a      	mov	r2, r5
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007416:	19dd      	adds	r5, r3, r7
 8007418:	461e      	mov	r6, r3
 800741a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741e:	f7f9 fb9b 	bl	8000b58 <__aeabi_d2iz>
 8007422:	4607      	mov	r7, r0
 8007424:	f7f9 f87e 	bl	8000524 <__aeabi_i2d>
 8007428:	3730      	adds	r7, #48	; 0x30
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007432:	f7f8 ff29 	bl	8000288 <__aeabi_dsub>
 8007436:	f806 7b01 	strb.w	r7, [r6], #1
 800743a:	42ae      	cmp	r6, r5
 800743c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	d126      	bne.n	8007494 <_dtoa_r+0x5fc>
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <_dtoa_r+0x620>)
 8007448:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800744c:	f7f8 ff1e 	bl	800028c <__adddf3>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007458:	f7f9 fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800745c:	2800      	cmp	r0, #0
 800745e:	d174      	bne.n	800754a <_dtoa_r+0x6b2>
 8007460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007464:	2000      	movs	r0, #0
 8007466:	4914      	ldr	r1, [pc, #80]	; (80074b8 <_dtoa_r+0x620>)
 8007468:	f7f8 ff0e 	bl	8000288 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007474:	f7f9 fb32 	bl	8000adc <__aeabi_dcmplt>
 8007478:	2800      	cmp	r0, #0
 800747a:	f43f af30 	beq.w	80072de <_dtoa_r+0x446>
 800747e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007482:	2b30      	cmp	r3, #48	; 0x30
 8007484:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007488:	d002      	beq.n	8007490 <_dtoa_r+0x5f8>
 800748a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800748e:	e04a      	b.n	8007526 <_dtoa_r+0x68e>
 8007490:	4615      	mov	r5, r2
 8007492:	e7f4      	b.n	800747e <_dtoa_r+0x5e6>
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <_dtoa_r+0x614>)
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800749e:	e7bc      	b.n	800741a <_dtoa_r+0x582>
 80074a0:	08008ca0 	.word	0x08008ca0
 80074a4:	08008c78 	.word	0x08008c78
 80074a8:	3ff00000 	.word	0x3ff00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	401c0000 	.word	0x401c0000
 80074b4:	40140000 	.word	0x40140000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074c0:	9d05      	ldr	r5, [sp, #20]
 80074c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074c6:	4630      	mov	r0, r6
 80074c8:	4639      	mov	r1, r7
 80074ca:	f7f9 f9bf 	bl	800084c <__aeabi_ddiv>
 80074ce:	f7f9 fb43 	bl	8000b58 <__aeabi_d2iz>
 80074d2:	4680      	mov	r8, r0
 80074d4:	f7f9 f826 	bl	8000524 <__aeabi_i2d>
 80074d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074dc:	f7f9 f88c 	bl	80005f8 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80074ec:	f7f8 fecc 	bl	8000288 <__aeabi_dsub>
 80074f0:	f805 6b01 	strb.w	r6, [r5], #1
 80074f4:	9e05      	ldr	r6, [sp, #20]
 80074f6:	1bae      	subs	r6, r5, r6
 80074f8:	45b1      	cmp	r9, r6
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	d139      	bne.n	8007574 <_dtoa_r+0x6dc>
 8007500:	f7f8 fec4 	bl	800028c <__adddf3>
 8007504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007508:	4606      	mov	r6, r0
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8007510:	b9c8      	cbnz	r0, 8007546 <_dtoa_r+0x6ae>
 8007512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007516:	4630      	mov	r0, r6
 8007518:	4639      	mov	r1, r7
 800751a:	f7f9 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800751e:	b110      	cbz	r0, 8007526 <_dtoa_r+0x68e>
 8007520:	f018 0f01 	tst.w	r8, #1
 8007524:	d10f      	bne.n	8007546 <_dtoa_r+0x6ae>
 8007526:	4659      	mov	r1, fp
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fb87 	bl	8007c3c <_Bfree>
 800752e:	2300      	movs	r3, #0
 8007530:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007532:	702b      	strb	r3, [r5, #0]
 8007534:	f10a 0301 	add.w	r3, sl, #1
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800753c:	2b00      	cmp	r3, #0
 800753e:	f43f acf3 	beq.w	8006f28 <_dtoa_r+0x90>
 8007542:	601d      	str	r5, [r3, #0]
 8007544:	e4f0      	b.n	8006f28 <_dtoa_r+0x90>
 8007546:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800754a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800754e:	2a39      	cmp	r2, #57	; 0x39
 8007550:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007554:	d108      	bne.n	8007568 <_dtoa_r+0x6d0>
 8007556:	9a05      	ldr	r2, [sp, #20]
 8007558:	429a      	cmp	r2, r3
 800755a:	d109      	bne.n	8007570 <_dtoa_r+0x6d8>
 800755c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755e:	3301      	adds	r3, #1
 8007560:	930a      	str	r3, [sp, #40]	; 0x28
 8007562:	2330      	movs	r3, #48	; 0x30
 8007564:	7013      	strb	r3, [r2, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	3201      	adds	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e78c      	b.n	800748a <_dtoa_r+0x5f2>
 8007570:	461d      	mov	r5, r3
 8007572:	e7ea      	b.n	800754a <_dtoa_r+0x6b2>
 8007574:	2200      	movs	r2, #0
 8007576:	4b9b      	ldr	r3, [pc, #620]	; (80077e4 <_dtoa_r+0x94c>)
 8007578:	f7f9 f83e 	bl	80005f8 <__aeabi_dmul>
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	4606      	mov	r6, r0
 8007582:	460f      	mov	r7, r1
 8007584:	f7f9 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007588:	2800      	cmp	r0, #0
 800758a:	d09a      	beq.n	80074c2 <_dtoa_r+0x62a>
 800758c:	e7cb      	b.n	8007526 <_dtoa_r+0x68e>
 800758e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007590:	2a00      	cmp	r2, #0
 8007592:	f000 808b 	beq.w	80076ac <_dtoa_r+0x814>
 8007596:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007598:	2a01      	cmp	r2, #1
 800759a:	dc6e      	bgt.n	800767a <_dtoa_r+0x7e2>
 800759c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d067      	beq.n	8007672 <_dtoa_r+0x7da>
 80075a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075a6:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80075aa:	9a08      	ldr	r2, [sp, #32]
 80075ac:	2101      	movs	r1, #1
 80075ae:	441a      	add	r2, r3
 80075b0:	4620      	mov	r0, r4
 80075b2:	9208      	str	r2, [sp, #32]
 80075b4:	4498      	add	r8, r3
 80075b6:	f000 fbe1 	bl	8007d7c <__i2b>
 80075ba:	4606      	mov	r6, r0
 80075bc:	2d00      	cmp	r5, #0
 80075be:	dd0c      	ble.n	80075da <_dtoa_r+0x742>
 80075c0:	f1b8 0f00 	cmp.w	r8, #0
 80075c4:	dd09      	ble.n	80075da <_dtoa_r+0x742>
 80075c6:	4545      	cmp	r5, r8
 80075c8:	9a08      	ldr	r2, [sp, #32]
 80075ca:	462b      	mov	r3, r5
 80075cc:	bfa8      	it	ge
 80075ce:	4643      	movge	r3, r8
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	9208      	str	r2, [sp, #32]
 80075d4:	1aed      	subs	r5, r5, r3
 80075d6:	eba8 0803 	sub.w	r8, r8, r3
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	b1eb      	cbz	r3, 800761a <_dtoa_r+0x782>
 80075de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d067      	beq.n	80076b4 <_dtoa_r+0x81c>
 80075e4:	b18f      	cbz	r7, 800760a <_dtoa_r+0x772>
 80075e6:	4631      	mov	r1, r6
 80075e8:	463a      	mov	r2, r7
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fc66 	bl	8007ebc <__pow5mult>
 80075f0:	465a      	mov	r2, fp
 80075f2:	4601      	mov	r1, r0
 80075f4:	4606      	mov	r6, r0
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fbc9 	bl	8007d8e <__multiply>
 80075fc:	4659      	mov	r1, fp
 80075fe:	900a      	str	r0, [sp, #40]	; 0x28
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fb1b 	bl	8007c3c <_Bfree>
 8007606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007608:	469b      	mov	fp, r3
 800760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760c:	1bda      	subs	r2, r3, r7
 800760e:	d004      	beq.n	800761a <_dtoa_r+0x782>
 8007610:	4659      	mov	r1, fp
 8007612:	4620      	mov	r0, r4
 8007614:	f000 fc52 	bl	8007ebc <__pow5mult>
 8007618:	4683      	mov	fp, r0
 800761a:	2101      	movs	r1, #1
 800761c:	4620      	mov	r0, r4
 800761e:	f000 fbad 	bl	8007d7c <__i2b>
 8007622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007624:	4607      	mov	r7, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 81cb 	beq.w	80079c2 <_dtoa_r+0xb2a>
 800762c:	461a      	mov	r2, r3
 800762e:	4601      	mov	r1, r0
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fc43 	bl	8007ebc <__pow5mult>
 8007636:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007638:	2b01      	cmp	r3, #1
 800763a:	4607      	mov	r7, r0
 800763c:	dc40      	bgt.n	80076c0 <_dtoa_r+0x828>
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d139      	bne.n	80076b8 <_dtoa_r+0x820>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800764a:	2b00      	cmp	r3, #0
 800764c:	d136      	bne.n	80076bc <_dtoa_r+0x824>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007654:	0d1b      	lsrs	r3, r3, #20
 8007656:	051b      	lsls	r3, r3, #20
 8007658:	b12b      	cbz	r3, 8007666 <_dtoa_r+0x7ce>
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	3301      	adds	r3, #1
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	f108 0801 	add.w	r8, r8, #1
 8007664:	2301      	movs	r3, #1
 8007666:	9309      	str	r3, [sp, #36]	; 0x24
 8007668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800766a:	2b00      	cmp	r3, #0
 800766c:	d12a      	bne.n	80076c4 <_dtoa_r+0x82c>
 800766e:	2001      	movs	r0, #1
 8007670:	e030      	b.n	80076d4 <_dtoa_r+0x83c>
 8007672:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007674:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007678:	e795      	b.n	80075a6 <_dtoa_r+0x70e>
 800767a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767c:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007680:	42bb      	cmp	r3, r7
 8007682:	bfbf      	itttt	lt
 8007684:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8007686:	9709      	strlt	r7, [sp, #36]	; 0x24
 8007688:	1afa      	sublt	r2, r7, r3
 800768a:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800768c:	bfbb      	ittet	lt
 800768e:	189b      	addlt	r3, r3, r2
 8007690:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007692:	1bdf      	subge	r7, r3, r7
 8007694:	2700      	movlt	r7, #0
 8007696:	f1b9 0f00 	cmp.w	r9, #0
 800769a:	bfb5      	itete	lt
 800769c:	9b08      	ldrlt	r3, [sp, #32]
 800769e:	9d08      	ldrge	r5, [sp, #32]
 80076a0:	eba3 0509 	sublt.w	r5, r3, r9
 80076a4:	464b      	movge	r3, r9
 80076a6:	bfb8      	it	lt
 80076a8:	2300      	movlt	r3, #0
 80076aa:	e77e      	b.n	80075aa <_dtoa_r+0x712>
 80076ac:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80076b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076b2:	e783      	b.n	80075bc <_dtoa_r+0x724>
 80076b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b6:	e7ab      	b.n	8007610 <_dtoa_r+0x778>
 80076b8:	2300      	movs	r3, #0
 80076ba:	e7d4      	b.n	8007666 <_dtoa_r+0x7ce>
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	e7d2      	b.n	8007666 <_dtoa_r+0x7ce>
 80076c0:	2300      	movs	r3, #0
 80076c2:	9309      	str	r3, [sp, #36]	; 0x24
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80076ca:	6918      	ldr	r0, [r3, #16]
 80076cc:	f000 fb08 	bl	8007ce0 <__hi0bits>
 80076d0:	f1c0 0020 	rsb	r0, r0, #32
 80076d4:	4440      	add	r0, r8
 80076d6:	f010 001f 	ands.w	r0, r0, #31
 80076da:	d047      	beq.n	800776c <_dtoa_r+0x8d4>
 80076dc:	f1c0 0320 	rsb	r3, r0, #32
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	dd3b      	ble.n	800775c <_dtoa_r+0x8c4>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	f1c0 001c 	rsb	r0, r0, #28
 80076ea:	4403      	add	r3, r0
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	4405      	add	r5, r0
 80076f0:	4480      	add	r8, r0
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd05      	ble.n	8007704 <_dtoa_r+0x86c>
 80076f8:	4659      	mov	r1, fp
 80076fa:	461a      	mov	r2, r3
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fc2b 	bl	8007f58 <__lshift>
 8007702:	4683      	mov	fp, r0
 8007704:	f1b8 0f00 	cmp.w	r8, #0
 8007708:	dd05      	ble.n	8007716 <_dtoa_r+0x87e>
 800770a:	4639      	mov	r1, r7
 800770c:	4642      	mov	r2, r8
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fc22 	bl	8007f58 <__lshift>
 8007714:	4607      	mov	r7, r0
 8007716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007718:	b353      	cbz	r3, 8007770 <_dtoa_r+0x8d8>
 800771a:	4639      	mov	r1, r7
 800771c:	4658      	mov	r0, fp
 800771e:	f000 fc6f 	bl	8008000 <__mcmp>
 8007722:	2800      	cmp	r0, #0
 8007724:	da24      	bge.n	8007770 <_dtoa_r+0x8d8>
 8007726:	2300      	movs	r3, #0
 8007728:	4659      	mov	r1, fp
 800772a:	220a      	movs	r2, #10
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fa9c 	bl	8007c6a <__multadd>
 8007732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007734:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007738:	4683      	mov	fp, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8148 	beq.w	80079d0 <_dtoa_r+0xb38>
 8007740:	2300      	movs	r3, #0
 8007742:	4631      	mov	r1, r6
 8007744:	220a      	movs	r2, #10
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fa8f 	bl	8007c6a <__multadd>
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	4606      	mov	r6, r0
 8007752:	dc4f      	bgt.n	80077f4 <_dtoa_r+0x95c>
 8007754:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007756:	2b02      	cmp	r3, #2
 8007758:	dd4c      	ble.n	80077f4 <_dtoa_r+0x95c>
 800775a:	e011      	b.n	8007780 <_dtoa_r+0x8e8>
 800775c:	d0c9      	beq.n	80076f2 <_dtoa_r+0x85a>
 800775e:	9a08      	ldr	r2, [sp, #32]
 8007760:	331c      	adds	r3, #28
 8007762:	441a      	add	r2, r3
 8007764:	9208      	str	r2, [sp, #32]
 8007766:	441d      	add	r5, r3
 8007768:	4498      	add	r8, r3
 800776a:	e7c2      	b.n	80076f2 <_dtoa_r+0x85a>
 800776c:	4603      	mov	r3, r0
 800776e:	e7f6      	b.n	800775e <_dtoa_r+0x8c6>
 8007770:	f1b9 0f00 	cmp.w	r9, #0
 8007774:	dc38      	bgt.n	80077e8 <_dtoa_r+0x950>
 8007776:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007778:	2b02      	cmp	r3, #2
 800777a:	dd35      	ble.n	80077e8 <_dtoa_r+0x950>
 800777c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	b963      	cbnz	r3, 800779e <_dtoa_r+0x906>
 8007784:	4639      	mov	r1, r7
 8007786:	2205      	movs	r2, #5
 8007788:	4620      	mov	r0, r4
 800778a:	f000 fa6e 	bl	8007c6a <__multadd>
 800778e:	4601      	mov	r1, r0
 8007790:	4607      	mov	r7, r0
 8007792:	4658      	mov	r0, fp
 8007794:	f000 fc34 	bl	8008000 <__mcmp>
 8007798:	2800      	cmp	r0, #0
 800779a:	f73f adcc 	bgt.w	8007336 <_dtoa_r+0x49e>
 800779e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a0:	9d05      	ldr	r5, [sp, #20]
 80077a2:	ea6f 0a03 	mvn.w	sl, r3
 80077a6:	f04f 0900 	mov.w	r9, #0
 80077aa:	4639      	mov	r1, r7
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 fa45 	bl	8007c3c <_Bfree>
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	f43f aeb7 	beq.w	8007526 <_dtoa_r+0x68e>
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	d005      	beq.n	80077ca <_dtoa_r+0x932>
 80077be:	45b1      	cmp	r9, r6
 80077c0:	d003      	beq.n	80077ca <_dtoa_r+0x932>
 80077c2:	4649      	mov	r1, r9
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fa39 	bl	8007c3c <_Bfree>
 80077ca:	4631      	mov	r1, r6
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fa35 	bl	8007c3c <_Bfree>
 80077d2:	e6a8      	b.n	8007526 <_dtoa_r+0x68e>
 80077d4:	2700      	movs	r7, #0
 80077d6:	463e      	mov	r6, r7
 80077d8:	e7e1      	b.n	800779e <_dtoa_r+0x906>
 80077da:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077de:	463e      	mov	r6, r7
 80077e0:	e5a9      	b.n	8007336 <_dtoa_r+0x49e>
 80077e2:	bf00      	nop
 80077e4:	40240000 	.word	0x40240000
 80077e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ea:	f8cd 9018 	str.w	r9, [sp, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 80f5 	beq.w	80079de <_dtoa_r+0xb46>
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	dd05      	ble.n	8007804 <_dtoa_r+0x96c>
 80077f8:	4631      	mov	r1, r6
 80077fa:	462a      	mov	r2, r5
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fbab 	bl	8007f58 <__lshift>
 8007802:	4606      	mov	r6, r0
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d04c      	beq.n	80078a4 <_dtoa_r+0xa0c>
 800780a:	6871      	ldr	r1, [r6, #4]
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f9e1 	bl	8007bd4 <_Balloc>
 8007812:	6932      	ldr	r2, [r6, #16]
 8007814:	3202      	adds	r2, #2
 8007816:	4605      	mov	r5, r0
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	f106 010c 	add.w	r1, r6, #12
 800781e:	300c      	adds	r0, #12
 8007820:	f7fe fe22 	bl	8006468 <memcpy>
 8007824:	2201      	movs	r2, #1
 8007826:	4629      	mov	r1, r5
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fb95 	bl	8007f58 <__lshift>
 800782e:	9b05      	ldr	r3, [sp, #20]
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	46b1      	mov	r9, r6
 800783a:	9309      	str	r3, [sp, #36]	; 0x24
 800783c:	4606      	mov	r6, r0
 800783e:	4639      	mov	r1, r7
 8007840:	4658      	mov	r0, fp
 8007842:	f7ff fa9b 	bl	8006d7c <quorem>
 8007846:	4649      	mov	r1, r9
 8007848:	4605      	mov	r5, r0
 800784a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800784e:	4658      	mov	r0, fp
 8007850:	f000 fbd6 	bl	8008000 <__mcmp>
 8007854:	4632      	mov	r2, r6
 8007856:	9002      	str	r0, [sp, #8]
 8007858:	4639      	mov	r1, r7
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fbea 	bl	8008034 <__mdiff>
 8007860:	68c3      	ldr	r3, [r0, #12]
 8007862:	4602      	mov	r2, r0
 8007864:	bb03      	cbnz	r3, 80078a8 <_dtoa_r+0xa10>
 8007866:	4601      	mov	r1, r0
 8007868:	900a      	str	r0, [sp, #40]	; 0x28
 800786a:	4658      	mov	r0, fp
 800786c:	f000 fbc8 	bl	8008000 <__mcmp>
 8007870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007872:	4603      	mov	r3, r0
 8007874:	4611      	mov	r1, r2
 8007876:	4620      	mov	r0, r4
 8007878:	930a      	str	r3, [sp, #40]	; 0x28
 800787a:	f000 f9df 	bl	8007c3c <_Bfree>
 800787e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007880:	b9a3      	cbnz	r3, 80078ac <_dtoa_r+0xa14>
 8007882:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007884:	b992      	cbnz	r2, 80078ac <_dtoa_r+0xa14>
 8007886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007888:	b982      	cbnz	r2, 80078ac <_dtoa_r+0xa14>
 800788a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800788e:	d029      	beq.n	80078e4 <_dtoa_r+0xa4c>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd01      	ble.n	800789a <_dtoa_r+0xa02>
 8007896:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	1c5d      	adds	r5, r3, #1
 800789e:	f883 8000 	strb.w	r8, [r3]
 80078a2:	e782      	b.n	80077aa <_dtoa_r+0x912>
 80078a4:	4630      	mov	r0, r6
 80078a6:	e7c2      	b.n	800782e <_dtoa_r+0x996>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e7e3      	b.n	8007874 <_dtoa_r+0x9dc>
 80078ac:	9a02      	ldr	r2, [sp, #8]
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	db04      	blt.n	80078bc <_dtoa_r+0xa24>
 80078b2:	d124      	bne.n	80078fe <_dtoa_r+0xa66>
 80078b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078b6:	bb12      	cbnz	r2, 80078fe <_dtoa_r+0xa66>
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	bb02      	cbnz	r2, 80078fe <_dtoa_r+0xa66>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	ddec      	ble.n	800789a <_dtoa_r+0xa02>
 80078c0:	4659      	mov	r1, fp
 80078c2:	2201      	movs	r2, #1
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fb47 	bl	8007f58 <__lshift>
 80078ca:	4639      	mov	r1, r7
 80078cc:	4683      	mov	fp, r0
 80078ce:	f000 fb97 	bl	8008000 <__mcmp>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	dc03      	bgt.n	80078de <_dtoa_r+0xa46>
 80078d6:	d1e0      	bne.n	800789a <_dtoa_r+0xa02>
 80078d8:	f018 0f01 	tst.w	r8, #1
 80078dc:	d0dd      	beq.n	800789a <_dtoa_r+0xa02>
 80078de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078e2:	d1d8      	bne.n	8007896 <_dtoa_r+0x9fe>
 80078e4:	9b08      	ldr	r3, [sp, #32]
 80078e6:	9a08      	ldr	r2, [sp, #32]
 80078e8:	1c5d      	adds	r5, r3, #1
 80078ea:	2339      	movs	r3, #57	; 0x39
 80078ec:	7013      	strb	r3, [r2, #0]
 80078ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078f2:	2b39      	cmp	r3, #57	; 0x39
 80078f4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80078f8:	d04e      	beq.n	8007998 <_dtoa_r+0xb00>
 80078fa:	3301      	adds	r3, #1
 80078fc:	e053      	b.n	80079a6 <_dtoa_r+0xb0e>
 80078fe:	9a08      	ldr	r2, [sp, #32]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f102 0501 	add.w	r5, r2, #1
 8007906:	dd06      	ble.n	8007916 <_dtoa_r+0xa7e>
 8007908:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800790c:	d0ea      	beq.n	80078e4 <_dtoa_r+0xa4c>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	e7c3      	b.n	800789e <_dtoa_r+0xa06>
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	f805 8c01 	strb.w	r8, [r5, #-1]
 800791e:	1aeb      	subs	r3, r5, r3
 8007920:	4293      	cmp	r3, r2
 8007922:	d021      	beq.n	8007968 <_dtoa_r+0xad0>
 8007924:	4659      	mov	r1, fp
 8007926:	2300      	movs	r3, #0
 8007928:	220a      	movs	r2, #10
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f99d 	bl	8007c6a <__multadd>
 8007930:	45b1      	cmp	r9, r6
 8007932:	4683      	mov	fp, r0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	f04f 020a 	mov.w	r2, #10
 800793c:	4649      	mov	r1, r9
 800793e:	4620      	mov	r0, r4
 8007940:	d105      	bne.n	800794e <_dtoa_r+0xab6>
 8007942:	f000 f992 	bl	8007c6a <__multadd>
 8007946:	4681      	mov	r9, r0
 8007948:	4606      	mov	r6, r0
 800794a:	9508      	str	r5, [sp, #32]
 800794c:	e777      	b.n	800783e <_dtoa_r+0x9a6>
 800794e:	f000 f98c 	bl	8007c6a <__multadd>
 8007952:	4631      	mov	r1, r6
 8007954:	4681      	mov	r9, r0
 8007956:	2300      	movs	r3, #0
 8007958:	220a      	movs	r2, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f985 	bl	8007c6a <__multadd>
 8007960:	4606      	mov	r6, r0
 8007962:	e7f2      	b.n	800794a <_dtoa_r+0xab2>
 8007964:	f04f 0900 	mov.w	r9, #0
 8007968:	4659      	mov	r1, fp
 800796a:	2201      	movs	r2, #1
 800796c:	4620      	mov	r0, r4
 800796e:	f000 faf3 	bl	8007f58 <__lshift>
 8007972:	4639      	mov	r1, r7
 8007974:	4683      	mov	fp, r0
 8007976:	f000 fb43 	bl	8008000 <__mcmp>
 800797a:	2800      	cmp	r0, #0
 800797c:	dcb7      	bgt.n	80078ee <_dtoa_r+0xa56>
 800797e:	d102      	bne.n	8007986 <_dtoa_r+0xaee>
 8007980:	f018 0f01 	tst.w	r8, #1
 8007984:	d1b3      	bne.n	80078ee <_dtoa_r+0xa56>
 8007986:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800798a:	2b30      	cmp	r3, #48	; 0x30
 800798c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007990:	f47f af0b 	bne.w	80077aa <_dtoa_r+0x912>
 8007994:	4615      	mov	r5, r2
 8007996:	e7f6      	b.n	8007986 <_dtoa_r+0xaee>
 8007998:	9b05      	ldr	r3, [sp, #20]
 800799a:	4293      	cmp	r3, r2
 800799c:	d105      	bne.n	80079aa <_dtoa_r+0xb12>
 800799e:	9a05      	ldr	r2, [sp, #20]
 80079a0:	f10a 0a01 	add.w	sl, sl, #1
 80079a4:	2331      	movs	r3, #49	; 0x31
 80079a6:	7013      	strb	r3, [r2, #0]
 80079a8:	e6ff      	b.n	80077aa <_dtoa_r+0x912>
 80079aa:	4615      	mov	r5, r2
 80079ac:	e79f      	b.n	80078ee <_dtoa_r+0xa56>
 80079ae:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <_dtoa_r+0xb74>)
 80079b0:	f7ff bad7 	b.w	8006f62 <_dtoa_r+0xca>
 80079b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f aab1 	bne.w	8006f1e <_dtoa_r+0x86>
 80079bc:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <_dtoa_r+0xb78>)
 80079be:	f7ff bad0 	b.w	8006f62 <_dtoa_r+0xca>
 80079c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f77f ae3a 	ble.w	800763e <_dtoa_r+0x7a6>
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	e64e      	b.n	800766e <_dtoa_r+0x7d6>
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dc03      	bgt.n	80079de <_dtoa_r+0xb46>
 80079d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f73f aed1 	bgt.w	8007780 <_dtoa_r+0x8e8>
 80079de:	9d05      	ldr	r5, [sp, #20]
 80079e0:	4639      	mov	r1, r7
 80079e2:	4658      	mov	r0, fp
 80079e4:	f7ff f9ca 	bl	8006d7c <quorem>
 80079e8:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80079ec:	f805 8b01 	strb.w	r8, [r5], #1
 80079f0:	9b05      	ldr	r3, [sp, #20]
 80079f2:	9a06      	ldr	r2, [sp, #24]
 80079f4:	1aeb      	subs	r3, r5, r3
 80079f6:	429a      	cmp	r2, r3
 80079f8:	ddb4      	ble.n	8007964 <_dtoa_r+0xacc>
 80079fa:	4659      	mov	r1, fp
 80079fc:	2300      	movs	r3, #0
 80079fe:	220a      	movs	r2, #10
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 f932 	bl	8007c6a <__multadd>
 8007a06:	4683      	mov	fp, r0
 8007a08:	e7ea      	b.n	80079e0 <_dtoa_r+0xb48>
 8007a0a:	bf00      	nop
 8007a0c:	08008be4 	.word	0x08008be4
 8007a10:	08008c08 	.word	0x08008c08

08007a14 <std>:
 8007a14:	2300      	movs	r3, #0
 8007a16:	b510      	push	{r4, lr}
 8007a18:	4604      	mov	r4, r0
 8007a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a1e:	6083      	str	r3, [r0, #8]
 8007a20:	8181      	strh	r1, [r0, #12]
 8007a22:	6643      	str	r3, [r0, #100]	; 0x64
 8007a24:	81c2      	strh	r2, [r0, #14]
 8007a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a2a:	6183      	str	r3, [r0, #24]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	2208      	movs	r2, #8
 8007a30:	305c      	adds	r0, #92	; 0x5c
 8007a32:	f7fe fd24 	bl	800647e <memset>
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <std+0x38>)
 8007a38:	6263      	str	r3, [r4, #36]	; 0x24
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <std+0x3c>)
 8007a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <std+0x40>)
 8007a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <std+0x44>)
 8007a44:	6224      	str	r4, [r4, #32]
 8007a46:	6323      	str	r3, [r4, #48]	; 0x30
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08008599 	.word	0x08008599
 8007a50:	080085bb 	.word	0x080085bb
 8007a54:	080085f3 	.word	0x080085f3
 8007a58:	08008617 	.word	0x08008617

08007a5c <_cleanup_r>:
 8007a5c:	4901      	ldr	r1, [pc, #4]	; (8007a64 <_cleanup_r+0x8>)
 8007a5e:	f000 b885 	b.w	8007b6c <_fwalk_reent>
 8007a62:	bf00      	nop
 8007a64:	080088f1 	.word	0x080088f1

08007a68 <__sfmoreglue>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	1e4a      	subs	r2, r1, #1
 8007a6c:	2568      	movs	r5, #104	; 0x68
 8007a6e:	4355      	muls	r5, r2
 8007a70:	460e      	mov	r6, r1
 8007a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a76:	f000 fbe5 	bl	8008244 <_malloc_r>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	b140      	cbz	r0, 8007a90 <__sfmoreglue+0x28>
 8007a7e:	2100      	movs	r1, #0
 8007a80:	e9c0 1600 	strd	r1, r6, [r0]
 8007a84:	300c      	adds	r0, #12
 8007a86:	60a0      	str	r0, [r4, #8]
 8007a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a8c:	f7fe fcf7 	bl	800647e <memset>
 8007a90:	4620      	mov	r0, r4
 8007a92:	bd70      	pop	{r4, r5, r6, pc}

08007a94 <__sinit>:
 8007a94:	6983      	ldr	r3, [r0, #24]
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	bb33      	cbnz	r3, 8007aea <__sinit+0x56>
 8007a9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007aa0:	6503      	str	r3, [r0, #80]	; 0x50
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <__sinit+0x58>)
 8007aa4:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <__sinit+0x5c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6282      	str	r2, [r0, #40]	; 0x28
 8007aaa:	4298      	cmp	r0, r3
 8007aac:	bf04      	itt	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	6183      	streq	r3, [r0, #24]
 8007ab2:	f000 f81f 	bl	8007af4 <__sfp>
 8007ab6:	6060      	str	r0, [r4, #4]
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f81b 	bl	8007af4 <__sfp>
 8007abe:	60a0      	str	r0, [r4, #8]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f817 	bl	8007af4 <__sfp>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	60e0      	str	r0, [r4, #12]
 8007aca:	2104      	movs	r1, #4
 8007acc:	6860      	ldr	r0, [r4, #4]
 8007ace:	f7ff ffa1 	bl	8007a14 <std>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	2109      	movs	r1, #9
 8007ad6:	68a0      	ldr	r0, [r4, #8]
 8007ad8:	f7ff ff9c 	bl	8007a14 <std>
 8007adc:	2202      	movs	r2, #2
 8007ade:	2112      	movs	r1, #18
 8007ae0:	68e0      	ldr	r0, [r4, #12]
 8007ae2:	f7ff ff97 	bl	8007a14 <std>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61a3      	str	r3, [r4, #24]
 8007aea:	bd10      	pop	{r4, pc}
 8007aec:	08008bd0 	.word	0x08008bd0
 8007af0:	08007a5d 	.word	0x08007a5d

08007af4 <__sfp>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <__sfp+0x70>)
 8007af8:	681e      	ldr	r6, [r3, #0]
 8007afa:	69b3      	ldr	r3, [r6, #24]
 8007afc:	4607      	mov	r7, r0
 8007afe:	b913      	cbnz	r3, 8007b06 <__sfp+0x12>
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff ffc7 	bl	8007a94 <__sinit>
 8007b06:	3648      	adds	r6, #72	; 0x48
 8007b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	d503      	bpl.n	8007b18 <__sfp+0x24>
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	b133      	cbz	r3, 8007b22 <__sfp+0x2e>
 8007b14:	6836      	ldr	r6, [r6, #0]
 8007b16:	e7f7      	b.n	8007b08 <__sfp+0x14>
 8007b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b1c:	b16d      	cbz	r5, 8007b3a <__sfp+0x46>
 8007b1e:	3468      	adds	r4, #104	; 0x68
 8007b20:	e7f4      	b.n	8007b0c <__sfp+0x18>
 8007b22:	2104      	movs	r1, #4
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7ff ff9f 	bl	8007a68 <__sfmoreglue>
 8007b2a:	6030      	str	r0, [r6, #0]
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1f1      	bne.n	8007b14 <__sfp+0x20>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4604      	mov	r4, r0
 8007b36:	4620      	mov	r0, r4
 8007b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <__sfp+0x74>)
 8007b3c:	6665      	str	r5, [r4, #100]	; 0x64
 8007b3e:	e9c4 5500 	strd	r5, r5, [r4]
 8007b42:	60a5      	str	r5, [r4, #8]
 8007b44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b54:	f7fe fc93 	bl	800647e <memset>
 8007b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b60:	e7e9      	b.n	8007b36 <__sfp+0x42>
 8007b62:	bf00      	nop
 8007b64:	08008bd0 	.word	0x08008bd0
 8007b68:	ffff0001 	.word	0xffff0001

08007b6c <_fwalk_reent>:
 8007b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b70:	4680      	mov	r8, r0
 8007b72:	4689      	mov	r9, r1
 8007b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b78:	2600      	movs	r6, #0
 8007b7a:	b914      	cbnz	r4, 8007b82 <_fwalk_reent+0x16>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b86:	3f01      	subs	r7, #1
 8007b88:	d501      	bpl.n	8007b8e <_fwalk_reent+0x22>
 8007b8a:	6824      	ldr	r4, [r4, #0]
 8007b8c:	e7f5      	b.n	8007b7a <_fwalk_reent+0xe>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d907      	bls.n	8007ba4 <_fwalk_reent+0x38>
 8007b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	d003      	beq.n	8007ba4 <_fwalk_reent+0x38>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	47c8      	blx	r9
 8007ba2:	4306      	orrs	r6, r0
 8007ba4:	3568      	adds	r5, #104	; 0x68
 8007ba6:	e7ee      	b.n	8007b86 <_fwalk_reent+0x1a>

08007ba8 <_localeconv_r>:
 8007ba8:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <_localeconv_r+0x14>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a18      	ldr	r0, [r3, #32]
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <_localeconv_r+0x18>)
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	bf08      	it	eq
 8007bb4:	4618      	moveq	r0, r3
 8007bb6:	30f0      	adds	r0, #240	; 0xf0
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20000008 	.word	0x20000008
 8007bc0:	2000006c 	.word	0x2000006c

08007bc4 <malloc>:
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <malloc+0xc>)
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f000 bb3b 	b.w	8008244 <_malloc_r>
 8007bce:	bf00      	nop
 8007bd0:	20000008 	.word	0x20000008

08007bd4 <_Balloc>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460e      	mov	r6, r1
 8007bdc:	b93d      	cbnz	r5, 8007bee <_Balloc+0x1a>
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7ff fff0 	bl	8007bc4 <malloc>
 8007be4:	6260      	str	r0, [r4, #36]	; 0x24
 8007be6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bea:	6005      	str	r5, [r0, #0]
 8007bec:	60c5      	str	r5, [r0, #12]
 8007bee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007bf0:	68eb      	ldr	r3, [r5, #12]
 8007bf2:	b183      	cbz	r3, 8007c16 <_Balloc+0x42>
 8007bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007bfc:	b9b8      	cbnz	r0, 8007c2e <_Balloc+0x5a>
 8007bfe:	2101      	movs	r1, #1
 8007c00:	fa01 f506 	lsl.w	r5, r1, r6
 8007c04:	1d6a      	adds	r2, r5, #5
 8007c06:	0092      	lsls	r2, r2, #2
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fabf 	bl	800818c <_calloc_r>
 8007c0e:	b160      	cbz	r0, 8007c2a <_Balloc+0x56>
 8007c10:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007c14:	e00e      	b.n	8007c34 <_Balloc+0x60>
 8007c16:	2221      	movs	r2, #33	; 0x21
 8007c18:	2104      	movs	r1, #4
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fab6 	bl	800818c <_calloc_r>
 8007c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c22:	60e8      	str	r0, [r5, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e4      	bne.n	8007bf4 <_Balloc+0x20>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	6802      	ldr	r2, [r0, #0]
 8007c30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c34:	2300      	movs	r3, #0
 8007c36:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c3a:	e7f7      	b.n	8007c2c <_Balloc+0x58>

08007c3c <_Bfree>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c40:	4606      	mov	r6, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	b93c      	cbnz	r4, 8007c56 <_Bfree+0x1a>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7ff ffbc 	bl	8007bc4 <malloc>
 8007c4c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c52:	6004      	str	r4, [r0, #0]
 8007c54:	60c4      	str	r4, [r0, #12]
 8007c56:	b13d      	cbz	r5, 8007c68 <_Bfree+0x2c>
 8007c58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c5a:	686a      	ldr	r2, [r5, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c62:	6029      	str	r1, [r5, #0]
 8007c64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c68:	bd70      	pop	{r4, r5, r6, pc}

08007c6a <__multadd>:
 8007c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	690d      	ldr	r5, [r1, #16]
 8007c70:	461f      	mov	r7, r3
 8007c72:	4606      	mov	r6, r0
 8007c74:	460c      	mov	r4, r1
 8007c76:	f101 0c14 	add.w	ip, r1, #20
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8dc 0000 	ldr.w	r0, [ip]
 8007c80:	b281      	uxth	r1, r0
 8007c82:	fb02 7101 	mla	r1, r2, r1, r7
 8007c86:	0c0f      	lsrs	r7, r1, #16
 8007c88:	0c00      	lsrs	r0, r0, #16
 8007c8a:	fb02 7000 	mla	r0, r2, r0, r7
 8007c8e:	b289      	uxth	r1, r1
 8007c90:	3301      	adds	r3, #1
 8007c92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007c96:	429d      	cmp	r5, r3
 8007c98:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c9c:	f84c 1b04 	str.w	r1, [ip], #4
 8007ca0:	dcec      	bgt.n	8007c7c <__multadd+0x12>
 8007ca2:	b1d7      	cbz	r7, 8007cda <__multadd+0x70>
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	42ab      	cmp	r3, r5
 8007ca8:	dc12      	bgt.n	8007cd0 <__multadd+0x66>
 8007caa:	6861      	ldr	r1, [r4, #4]
 8007cac:	4630      	mov	r0, r6
 8007cae:	3101      	adds	r1, #1
 8007cb0:	f7ff ff90 	bl	8007bd4 <_Balloc>
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	3202      	adds	r2, #2
 8007cb8:	f104 010c 	add.w	r1, r4, #12
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f7fe fbd1 	bl	8006468 <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff ffb7 	bl	8007c3c <_Bfree>
 8007cce:	4644      	mov	r4, r8
 8007cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	615f      	str	r7, [r3, #20]
 8007cd8:	6125      	str	r5, [r4, #16]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ce0 <__hi0bits>:
 8007ce0:	0c02      	lsrs	r2, r0, #16
 8007ce2:	0412      	lsls	r2, r2, #16
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	b9b2      	cbnz	r2, 8007d16 <__hi0bits+0x36>
 8007ce8:	0403      	lsls	r3, r0, #16
 8007cea:	2010      	movs	r0, #16
 8007cec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007cf0:	bf04      	itt	eq
 8007cf2:	021b      	lsleq	r3, r3, #8
 8007cf4:	3008      	addeq	r0, #8
 8007cf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007cfa:	bf04      	itt	eq
 8007cfc:	011b      	lsleq	r3, r3, #4
 8007cfe:	3004      	addeq	r0, #4
 8007d00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d04:	bf04      	itt	eq
 8007d06:	009b      	lsleq	r3, r3, #2
 8007d08:	3002      	addeq	r0, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	db06      	blt.n	8007d1c <__hi0bits+0x3c>
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	d503      	bpl.n	8007d1a <__hi0bits+0x3a>
 8007d12:	3001      	adds	r0, #1
 8007d14:	4770      	bx	lr
 8007d16:	2000      	movs	r0, #0
 8007d18:	e7e8      	b.n	8007cec <__hi0bits+0xc>
 8007d1a:	2020      	movs	r0, #32
 8007d1c:	4770      	bx	lr

08007d1e <__lo0bits>:
 8007d1e:	6803      	ldr	r3, [r0, #0]
 8007d20:	f013 0207 	ands.w	r2, r3, #7
 8007d24:	4601      	mov	r1, r0
 8007d26:	d00b      	beq.n	8007d40 <__lo0bits+0x22>
 8007d28:	07da      	lsls	r2, r3, #31
 8007d2a:	d423      	bmi.n	8007d74 <__lo0bits+0x56>
 8007d2c:	0798      	lsls	r0, r3, #30
 8007d2e:	bf49      	itett	mi
 8007d30:	085b      	lsrmi	r3, r3, #1
 8007d32:	089b      	lsrpl	r3, r3, #2
 8007d34:	2001      	movmi	r0, #1
 8007d36:	600b      	strmi	r3, [r1, #0]
 8007d38:	bf5c      	itt	pl
 8007d3a:	600b      	strpl	r3, [r1, #0]
 8007d3c:	2002      	movpl	r0, #2
 8007d3e:	4770      	bx	lr
 8007d40:	b298      	uxth	r0, r3
 8007d42:	b9a8      	cbnz	r0, 8007d70 <__lo0bits+0x52>
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	2010      	movs	r0, #16
 8007d48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d4c:	bf04      	itt	eq
 8007d4e:	0a1b      	lsreq	r3, r3, #8
 8007d50:	3008      	addeq	r0, #8
 8007d52:	071a      	lsls	r2, r3, #28
 8007d54:	bf04      	itt	eq
 8007d56:	091b      	lsreq	r3, r3, #4
 8007d58:	3004      	addeq	r0, #4
 8007d5a:	079a      	lsls	r2, r3, #30
 8007d5c:	bf04      	itt	eq
 8007d5e:	089b      	lsreq	r3, r3, #2
 8007d60:	3002      	addeq	r0, #2
 8007d62:	07da      	lsls	r2, r3, #31
 8007d64:	d402      	bmi.n	8007d6c <__lo0bits+0x4e>
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	d006      	beq.n	8007d78 <__lo0bits+0x5a>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	600b      	str	r3, [r1, #0]
 8007d6e:	4770      	bx	lr
 8007d70:	4610      	mov	r0, r2
 8007d72:	e7e9      	b.n	8007d48 <__lo0bits+0x2a>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4770      	bx	lr
 8007d78:	2020      	movs	r0, #32
 8007d7a:	4770      	bx	lr

08007d7c <__i2b>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	460c      	mov	r4, r1
 8007d80:	2101      	movs	r1, #1
 8007d82:	f7ff ff27 	bl	8007bd4 <_Balloc>
 8007d86:	2201      	movs	r2, #1
 8007d88:	6144      	str	r4, [r0, #20]
 8007d8a:	6102      	str	r2, [r0, #16]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__multiply>:
 8007d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d92:	4614      	mov	r4, r2
 8007d94:	690a      	ldr	r2, [r1, #16]
 8007d96:	6923      	ldr	r3, [r4, #16]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	bfb8      	it	lt
 8007d9c:	460b      	movlt	r3, r1
 8007d9e:	4688      	mov	r8, r1
 8007da0:	bfbc      	itt	lt
 8007da2:	46a0      	movlt	r8, r4
 8007da4:	461c      	movlt	r4, r3
 8007da6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007daa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007dae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007db2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007db6:	eb07 0609 	add.w	r6, r7, r9
 8007dba:	42b3      	cmp	r3, r6
 8007dbc:	bfb8      	it	lt
 8007dbe:	3101      	addlt	r1, #1
 8007dc0:	f7ff ff08 	bl	8007bd4 <_Balloc>
 8007dc4:	f100 0514 	add.w	r5, r0, #20
 8007dc8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007dcc:	462b      	mov	r3, r5
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4573      	cmp	r3, lr
 8007dd2:	d316      	bcc.n	8007e02 <__multiply+0x74>
 8007dd4:	f104 0214 	add.w	r2, r4, #20
 8007dd8:	f108 0114 	add.w	r1, r8, #20
 8007ddc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007de0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d80c      	bhi.n	8007e08 <__multiply+0x7a>
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	dd03      	ble.n	8007dfa <__multiply+0x6c>
 8007df2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d05d      	beq.n	8007eb6 <__multiply+0x128>
 8007dfa:	6106      	str	r6, [r0, #16]
 8007dfc:	b003      	add	sp, #12
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	f843 2b04 	str.w	r2, [r3], #4
 8007e06:	e7e3      	b.n	8007dd0 <__multiply+0x42>
 8007e08:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e0c:	f1bb 0f00 	cmp.w	fp, #0
 8007e10:	d023      	beq.n	8007e5a <__multiply+0xcc>
 8007e12:	4689      	mov	r9, r1
 8007e14:	46ac      	mov	ip, r5
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e1e:	f8dc a000 	ldr.w	sl, [ip]
 8007e22:	b2a3      	uxth	r3, r4
 8007e24:	fa1f fa8a 	uxth.w	sl, sl
 8007e28:	fb0b a303 	mla	r3, fp, r3, sl
 8007e2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e30:	f8dc 4000 	ldr.w	r4, [ip]
 8007e34:	4443      	add	r3, r8
 8007e36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e3a:	fb0b 840a 	mla	r4, fp, sl, r8
 8007e3e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e42:	46e2      	mov	sl, ip
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e4a:	454f      	cmp	r7, r9
 8007e4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e50:	f84a 3b04 	str.w	r3, [sl], #4
 8007e54:	d82b      	bhi.n	8007eae <__multiply+0x120>
 8007e56:	f8cc 8004 	str.w	r8, [ip, #4]
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007e60:	3204      	adds	r2, #4
 8007e62:	f1ba 0f00 	cmp.w	sl, #0
 8007e66:	d020      	beq.n	8007eaa <__multiply+0x11c>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	46a8      	mov	r8, r5
 8007e6e:	f04f 0b00 	mov.w	fp, #0
 8007e72:	f8b9 c000 	ldrh.w	ip, [r9]
 8007e76:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007e7a:	fb0a 440c 	mla	r4, sl, ip, r4
 8007e7e:	445c      	add	r4, fp
 8007e80:	46c4      	mov	ip, r8
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e88:	f84c 3b04 	str.w	r3, [ip], #4
 8007e8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e90:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	fb0a b303 	mla	r3, sl, r3, fp
 8007e9a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e9e:	454f      	cmp	r7, r9
 8007ea0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007ea4:	d805      	bhi.n	8007eb2 <__multiply+0x124>
 8007ea6:	f8c8 3004 	str.w	r3, [r8, #4]
 8007eaa:	3504      	adds	r5, #4
 8007eac:	e79b      	b.n	8007de6 <__multiply+0x58>
 8007eae:	46d4      	mov	ip, sl
 8007eb0:	e7b3      	b.n	8007e1a <__multiply+0x8c>
 8007eb2:	46e0      	mov	r8, ip
 8007eb4:	e7dd      	b.n	8007e72 <__multiply+0xe4>
 8007eb6:	3e01      	subs	r6, #1
 8007eb8:	e799      	b.n	8007dee <__multiply+0x60>
	...

08007ebc <__pow5mult>:
 8007ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	f012 0203 	ands.w	r2, r2, #3
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	d007      	beq.n	8007edc <__pow5mult+0x20>
 8007ecc:	3a01      	subs	r2, #1
 8007ece:	4c21      	ldr	r4, [pc, #132]	; (8007f54 <__pow5mult+0x98>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ed6:	f7ff fec8 	bl	8007c6a <__multadd>
 8007eda:	4607      	mov	r7, r0
 8007edc:	10ad      	asrs	r5, r5, #2
 8007ede:	d035      	beq.n	8007f4c <__pow5mult+0x90>
 8007ee0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ee2:	b93c      	cbnz	r4, 8007ef4 <__pow5mult+0x38>
 8007ee4:	2010      	movs	r0, #16
 8007ee6:	f7ff fe6d 	bl	8007bc4 <malloc>
 8007eea:	6270      	str	r0, [r6, #36]	; 0x24
 8007eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	60c4      	str	r4, [r0, #12]
 8007ef4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007efc:	b94c      	cbnz	r4, 8007f12 <__pow5mult+0x56>
 8007efe:	f240 2171 	movw	r1, #625	; 0x271
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7ff ff3a 	bl	8007d7c <__i2b>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f0e:	4604      	mov	r4, r0
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	07eb      	lsls	r3, r5, #31
 8007f18:	d50a      	bpl.n	8007f30 <__pow5mult+0x74>
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff ff35 	bl	8007d8e <__multiply>
 8007f24:	4639      	mov	r1, r7
 8007f26:	4681      	mov	r9, r0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff fe87 	bl	8007c3c <_Bfree>
 8007f2e:	464f      	mov	r7, r9
 8007f30:	106d      	asrs	r5, r5, #1
 8007f32:	d00b      	beq.n	8007f4c <__pow5mult+0x90>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	b938      	cbnz	r0, 8007f48 <__pow5mult+0x8c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff ff26 	bl	8007d8e <__multiply>
 8007f42:	6020      	str	r0, [r4, #0]
 8007f44:	f8c0 8000 	str.w	r8, [r0]
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e7e4      	b.n	8007f16 <__pow5mult+0x5a>
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	bf00      	nop
 8007f54:	08008d68 	.word	0x08008d68

08007f58 <__lshift>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f62:	6923      	ldr	r3, [r4, #16]
 8007f64:	6849      	ldr	r1, [r1, #4]
 8007f66:	eb0a 0903 	add.w	r9, sl, r3
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	4616      	mov	r6, r2
 8007f70:	f109 0501 	add.w	r5, r9, #1
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	db32      	blt.n	8007fde <__lshift+0x86>
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff fe2b 	bl	8007bd4 <_Balloc>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4680      	mov	r8, r0
 8007f82:	f100 0114 	add.w	r1, r0, #20
 8007f86:	461a      	mov	r2, r3
 8007f88:	4553      	cmp	r3, sl
 8007f8a:	db2b      	blt.n	8007fe4 <__lshift+0x8c>
 8007f8c:	6920      	ldr	r0, [r4, #16]
 8007f8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f92:	f104 0314 	add.w	r3, r4, #20
 8007f96:	f016 021f 	ands.w	r2, r6, #31
 8007f9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fa2:	d025      	beq.n	8007ff0 <__lshift+0x98>
 8007fa4:	f1c2 0e20 	rsb	lr, r2, #32
 8007fa8:	2000      	movs	r0, #0
 8007faa:	681e      	ldr	r6, [r3, #0]
 8007fac:	468a      	mov	sl, r1
 8007fae:	4096      	lsls	r6, r2
 8007fb0:	4330      	orrs	r0, r6
 8007fb2:	f84a 0b04 	str.w	r0, [sl], #4
 8007fb6:	f853 0b04 	ldr.w	r0, [r3], #4
 8007fba:	459c      	cmp	ip, r3
 8007fbc:	fa20 f00e 	lsr.w	r0, r0, lr
 8007fc0:	d814      	bhi.n	8007fec <__lshift+0x94>
 8007fc2:	6048      	str	r0, [r1, #4]
 8007fc4:	b108      	cbz	r0, 8007fca <__lshift+0x72>
 8007fc6:	f109 0502 	add.w	r5, r9, #2
 8007fca:	3d01      	subs	r5, #1
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f8c8 5010 	str.w	r5, [r8, #16]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	f7ff fe32 	bl	8007c3c <_Bfree>
 8007fd8:	4640      	mov	r0, r8
 8007fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fde:	3101      	adds	r1, #1
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	e7c7      	b.n	8007f74 <__lshift+0x1c>
 8007fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	e7cd      	b.n	8007f88 <__lshift+0x30>
 8007fec:	4651      	mov	r1, sl
 8007fee:	e7dc      	b.n	8007faa <__lshift+0x52>
 8007ff0:	3904      	subs	r1, #4
 8007ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff6:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ffa:	459c      	cmp	ip, r3
 8007ffc:	d8f9      	bhi.n	8007ff2 <__lshift+0x9a>
 8007ffe:	e7e4      	b.n	8007fca <__lshift+0x72>

08008000 <__mcmp>:
 8008000:	6903      	ldr	r3, [r0, #16]
 8008002:	690a      	ldr	r2, [r1, #16]
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	b530      	push	{r4, r5, lr}
 8008008:	d10c      	bne.n	8008024 <__mcmp+0x24>
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	3014      	adds	r0, #20
 800800e:	3114      	adds	r1, #20
 8008010:	1884      	adds	r4, r0, r2
 8008012:	4411      	add	r1, r2
 8008014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800801c:	4295      	cmp	r5, r2
 800801e:	d003      	beq.n	8008028 <__mcmp+0x28>
 8008020:	d305      	bcc.n	800802e <__mcmp+0x2e>
 8008022:	2301      	movs	r3, #1
 8008024:	4618      	mov	r0, r3
 8008026:	bd30      	pop	{r4, r5, pc}
 8008028:	42a0      	cmp	r0, r4
 800802a:	d3f3      	bcc.n	8008014 <__mcmp+0x14>
 800802c:	e7fa      	b.n	8008024 <__mcmp+0x24>
 800802e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008032:	e7f7      	b.n	8008024 <__mcmp+0x24>

08008034 <__mdiff>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	460d      	mov	r5, r1
 800803a:	4607      	mov	r7, r0
 800803c:	4611      	mov	r1, r2
 800803e:	4628      	mov	r0, r5
 8008040:	4614      	mov	r4, r2
 8008042:	f7ff ffdd 	bl	8008000 <__mcmp>
 8008046:	1e06      	subs	r6, r0, #0
 8008048:	d108      	bne.n	800805c <__mdiff+0x28>
 800804a:	4631      	mov	r1, r6
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff fdc1 	bl	8007bd4 <_Balloc>
 8008052:	2301      	movs	r3, #1
 8008054:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805c:	bfa4      	itt	ge
 800805e:	4623      	movge	r3, r4
 8008060:	462c      	movge	r4, r5
 8008062:	4638      	mov	r0, r7
 8008064:	6861      	ldr	r1, [r4, #4]
 8008066:	bfa6      	itte	ge
 8008068:	461d      	movge	r5, r3
 800806a:	2600      	movge	r6, #0
 800806c:	2601      	movlt	r6, #1
 800806e:	f7ff fdb1 	bl	8007bd4 <_Balloc>
 8008072:	692b      	ldr	r3, [r5, #16]
 8008074:	60c6      	str	r6, [r0, #12]
 8008076:	6926      	ldr	r6, [r4, #16]
 8008078:	f105 0914 	add.w	r9, r5, #20
 800807c:	f104 0214 	add.w	r2, r4, #20
 8008080:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008084:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008088:	f100 0514 	add.w	r5, r0, #20
 800808c:	f04f 0e00 	mov.w	lr, #0
 8008090:	f852 ab04 	ldr.w	sl, [r2], #4
 8008094:	f859 4b04 	ldr.w	r4, [r9], #4
 8008098:	fa1e f18a 	uxtah	r1, lr, sl
 800809c:	b2a3      	uxth	r3, r4
 800809e:	1ac9      	subs	r1, r1, r3
 80080a0:	0c23      	lsrs	r3, r4, #16
 80080a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80080a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080aa:	b289      	uxth	r1, r1
 80080ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80080b0:	45c8      	cmp	r8, r9
 80080b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80080b6:	4694      	mov	ip, r2
 80080b8:	f845 3b04 	str.w	r3, [r5], #4
 80080bc:	d8e8      	bhi.n	8008090 <__mdiff+0x5c>
 80080be:	45bc      	cmp	ip, r7
 80080c0:	d304      	bcc.n	80080cc <__mdiff+0x98>
 80080c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80080c6:	b183      	cbz	r3, 80080ea <__mdiff+0xb6>
 80080c8:	6106      	str	r6, [r0, #16]
 80080ca:	e7c5      	b.n	8008058 <__mdiff+0x24>
 80080cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80080d0:	fa1e f381 	uxtah	r3, lr, r1
 80080d4:	141a      	asrs	r2, r3, #16
 80080d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80080e4:	f845 3b04 	str.w	r3, [r5], #4
 80080e8:	e7e9      	b.n	80080be <__mdiff+0x8a>
 80080ea:	3e01      	subs	r6, #1
 80080ec:	e7e9      	b.n	80080c2 <__mdiff+0x8e>

080080ee <__d2b>:
 80080ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080f2:	2101      	movs	r1, #1
 80080f4:	4699      	mov	r9, r3
 80080f6:	4690      	mov	r8, r2
 80080f8:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 80080fc:	f7ff fd6a 	bl	8007bd4 <_Balloc>
 8008100:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008104:	4607      	mov	r7, r0
 8008106:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800810a:	bb34      	cbnz	r4, 800815a <__d2b+0x6c>
 800810c:	f1b8 0200 	subs.w	r2, r8, #0
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	d027      	beq.n	8008164 <__d2b+0x76>
 8008114:	a802      	add	r0, sp, #8
 8008116:	f840 2d08 	str.w	r2, [r0, #-8]!
 800811a:	f7ff fe00 	bl	8007d1e <__lo0bits>
 800811e:	9900      	ldr	r1, [sp, #0]
 8008120:	b1f0      	cbz	r0, 8008160 <__d2b+0x72>
 8008122:	9a01      	ldr	r2, [sp, #4]
 8008124:	f1c0 0320 	rsb	r3, r0, #32
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	430b      	orrs	r3, r1
 800812e:	40c2      	lsrs	r2, r0
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf14      	ite	ne
 800813c:	2102      	movne	r1, #2
 800813e:	2101      	moveq	r1, #1
 8008140:	6139      	str	r1, [r7, #16]
 8008142:	b1c4      	cbz	r4, 8008176 <__d2b+0x88>
 8008144:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008148:	4404      	add	r4, r0
 800814a:	6034      	str	r4, [r6, #0]
 800814c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008150:	6028      	str	r0, [r5, #0]
 8008152:	4638      	mov	r0, r7
 8008154:	b003      	add	sp, #12
 8008156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800815a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800815e:	e7d5      	b.n	800810c <__d2b+0x1e>
 8008160:	6179      	str	r1, [r7, #20]
 8008162:	e7e7      	b.n	8008134 <__d2b+0x46>
 8008164:	a801      	add	r0, sp, #4
 8008166:	f7ff fdda 	bl	8007d1e <__lo0bits>
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	2101      	movs	r1, #1
 8008170:	6139      	str	r1, [r7, #16]
 8008172:	3020      	adds	r0, #32
 8008174:	e7e5      	b.n	8008142 <__d2b+0x54>
 8008176:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800817a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800817e:	6030      	str	r0, [r6, #0]
 8008180:	6918      	ldr	r0, [r3, #16]
 8008182:	f7ff fdad 	bl	8007ce0 <__hi0bits>
 8008186:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800818a:	e7e1      	b.n	8008150 <__d2b+0x62>

0800818c <_calloc_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	fb02 f401 	mul.w	r4, r2, r1
 8008192:	4621      	mov	r1, r4
 8008194:	f000 f856 	bl	8008244 <_malloc_r>
 8008198:	4605      	mov	r5, r0
 800819a:	b118      	cbz	r0, 80081a4 <_calloc_r+0x18>
 800819c:	4622      	mov	r2, r4
 800819e:	2100      	movs	r1, #0
 80081a0:	f7fe f96d 	bl	800647e <memset>
 80081a4:	4628      	mov	r0, r5
 80081a6:	bd38      	pop	{r3, r4, r5, pc}

080081a8 <_free_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4605      	mov	r5, r0
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d045      	beq.n	800823c <_free_r+0x94>
 80081b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b4:	1f0c      	subs	r4, r1, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfb8      	it	lt
 80081ba:	18e4      	addlt	r4, r4, r3
 80081bc:	f000 fc4a 	bl	8008a54 <__malloc_lock>
 80081c0:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <_free_r+0x98>)
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	4610      	mov	r0, r2
 80081c6:	b933      	cbnz	r3, 80081d6 <_free_r+0x2e>
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	6014      	str	r4, [r2, #0]
 80081cc:	4628      	mov	r0, r5
 80081ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d2:	f000 bc40 	b.w	8008a56 <__malloc_unlock>
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	d90c      	bls.n	80081f4 <_free_r+0x4c>
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	1862      	adds	r2, r4, r1
 80081de:	4293      	cmp	r3, r2
 80081e0:	bf04      	itt	eq
 80081e2:	681a      	ldreq	r2, [r3, #0]
 80081e4:	685b      	ldreq	r3, [r3, #4]
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	bf04      	itt	eq
 80081ea:	1852      	addeq	r2, r2, r1
 80081ec:	6022      	streq	r2, [r4, #0]
 80081ee:	6004      	str	r4, [r0, #0]
 80081f0:	e7ec      	b.n	80081cc <_free_r+0x24>
 80081f2:	4613      	mov	r3, r2
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	b10a      	cbz	r2, 80081fc <_free_r+0x54>
 80081f8:	42a2      	cmp	r2, r4
 80081fa:	d9fa      	bls.n	80081f2 <_free_r+0x4a>
 80081fc:	6819      	ldr	r1, [r3, #0]
 80081fe:	1858      	adds	r0, r3, r1
 8008200:	42a0      	cmp	r0, r4
 8008202:	d10b      	bne.n	800821c <_free_r+0x74>
 8008204:	6820      	ldr	r0, [r4, #0]
 8008206:	4401      	add	r1, r0
 8008208:	1858      	adds	r0, r3, r1
 800820a:	4282      	cmp	r2, r0
 800820c:	6019      	str	r1, [r3, #0]
 800820e:	d1dd      	bne.n	80081cc <_free_r+0x24>
 8008210:	6810      	ldr	r0, [r2, #0]
 8008212:	6852      	ldr	r2, [r2, #4]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	4401      	add	r1, r0
 8008218:	6019      	str	r1, [r3, #0]
 800821a:	e7d7      	b.n	80081cc <_free_r+0x24>
 800821c:	d902      	bls.n	8008224 <_free_r+0x7c>
 800821e:	230c      	movs	r3, #12
 8008220:	602b      	str	r3, [r5, #0]
 8008222:	e7d3      	b.n	80081cc <_free_r+0x24>
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	1821      	adds	r1, r4, r0
 8008228:	428a      	cmp	r2, r1
 800822a:	bf04      	itt	eq
 800822c:	6811      	ldreq	r1, [r2, #0]
 800822e:	6852      	ldreq	r2, [r2, #4]
 8008230:	6062      	str	r2, [r4, #4]
 8008232:	bf04      	itt	eq
 8008234:	1809      	addeq	r1, r1, r0
 8008236:	6021      	streq	r1, [r4, #0]
 8008238:	605c      	str	r4, [r3, #4]
 800823a:	e7c7      	b.n	80081cc <_free_r+0x24>
 800823c:	bd38      	pop	{r3, r4, r5, pc}
 800823e:	bf00      	nop
 8008240:	2000022c 	.word	0x2000022c

08008244 <_malloc_r>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	1ccd      	adds	r5, r1, #3
 8008248:	f025 0503 	bic.w	r5, r5, #3
 800824c:	3508      	adds	r5, #8
 800824e:	2d0c      	cmp	r5, #12
 8008250:	bf38      	it	cc
 8008252:	250c      	movcc	r5, #12
 8008254:	2d00      	cmp	r5, #0
 8008256:	4606      	mov	r6, r0
 8008258:	db01      	blt.n	800825e <_malloc_r+0x1a>
 800825a:	42a9      	cmp	r1, r5
 800825c:	d903      	bls.n	8008266 <_malloc_r+0x22>
 800825e:	230c      	movs	r3, #12
 8008260:	6033      	str	r3, [r6, #0]
 8008262:	2000      	movs	r0, #0
 8008264:	bd70      	pop	{r4, r5, r6, pc}
 8008266:	f000 fbf5 	bl	8008a54 <__malloc_lock>
 800826a:	4a21      	ldr	r2, [pc, #132]	; (80082f0 <_malloc_r+0xac>)
 800826c:	6814      	ldr	r4, [r2, #0]
 800826e:	4621      	mov	r1, r4
 8008270:	b991      	cbnz	r1, 8008298 <_malloc_r+0x54>
 8008272:	4c20      	ldr	r4, [pc, #128]	; (80082f4 <_malloc_r+0xb0>)
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	b91b      	cbnz	r3, 8008280 <_malloc_r+0x3c>
 8008278:	4630      	mov	r0, r6
 800827a:	f000 f97d 	bl	8008578 <_sbrk_r>
 800827e:	6020      	str	r0, [r4, #0]
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f978 	bl	8008578 <_sbrk_r>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d124      	bne.n	80082d6 <_malloc_r+0x92>
 800828c:	230c      	movs	r3, #12
 800828e:	6033      	str	r3, [r6, #0]
 8008290:	4630      	mov	r0, r6
 8008292:	f000 fbe0 	bl	8008a56 <__malloc_unlock>
 8008296:	e7e4      	b.n	8008262 <_malloc_r+0x1e>
 8008298:	680b      	ldr	r3, [r1, #0]
 800829a:	1b5b      	subs	r3, r3, r5
 800829c:	d418      	bmi.n	80082d0 <_malloc_r+0x8c>
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d90f      	bls.n	80082c2 <_malloc_r+0x7e>
 80082a2:	600b      	str	r3, [r1, #0]
 80082a4:	50cd      	str	r5, [r1, r3]
 80082a6:	18cc      	adds	r4, r1, r3
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 fbd4 	bl	8008a56 <__malloc_unlock>
 80082ae:	f104 000b 	add.w	r0, r4, #11
 80082b2:	1d23      	adds	r3, r4, #4
 80082b4:	f020 0007 	bic.w	r0, r0, #7
 80082b8:	1ac3      	subs	r3, r0, r3
 80082ba:	d0d3      	beq.n	8008264 <_malloc_r+0x20>
 80082bc:	425a      	negs	r2, r3
 80082be:	50e2      	str	r2, [r4, r3]
 80082c0:	e7d0      	b.n	8008264 <_malloc_r+0x20>
 80082c2:	428c      	cmp	r4, r1
 80082c4:	684b      	ldr	r3, [r1, #4]
 80082c6:	bf16      	itet	ne
 80082c8:	6063      	strne	r3, [r4, #4]
 80082ca:	6013      	streq	r3, [r2, #0]
 80082cc:	460c      	movne	r4, r1
 80082ce:	e7eb      	b.n	80082a8 <_malloc_r+0x64>
 80082d0:	460c      	mov	r4, r1
 80082d2:	6849      	ldr	r1, [r1, #4]
 80082d4:	e7cc      	b.n	8008270 <_malloc_r+0x2c>
 80082d6:	1cc4      	adds	r4, r0, #3
 80082d8:	f024 0403 	bic.w	r4, r4, #3
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d005      	beq.n	80082ec <_malloc_r+0xa8>
 80082e0:	1a21      	subs	r1, r4, r0
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 f948 	bl	8008578 <_sbrk_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d0cf      	beq.n	800828c <_malloc_r+0x48>
 80082ec:	6025      	str	r5, [r4, #0]
 80082ee:	e7db      	b.n	80082a8 <_malloc_r+0x64>
 80082f0:	2000022c 	.word	0x2000022c
 80082f4:	20000230 	.word	0x20000230

080082f8 <__sfputc_r>:
 80082f8:	6893      	ldr	r3, [r2, #8]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	b410      	push	{r4}
 8008300:	6093      	str	r3, [r2, #8]
 8008302:	da08      	bge.n	8008316 <__sfputc_r+0x1e>
 8008304:	6994      	ldr	r4, [r2, #24]
 8008306:	42a3      	cmp	r3, r4
 8008308:	db01      	blt.n	800830e <__sfputc_r+0x16>
 800830a:	290a      	cmp	r1, #10
 800830c:	d103      	bne.n	8008316 <__sfputc_r+0x1e>
 800830e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008312:	f000 b985 	b.w	8008620 <__swbuf_r>
 8008316:	6813      	ldr	r3, [r2, #0]
 8008318:	1c58      	adds	r0, r3, #1
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	7019      	strb	r1, [r3, #0]
 800831e:	4608      	mov	r0, r1
 8008320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008324:	4770      	bx	lr

08008326 <__sfputs_r>:
 8008326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	4614      	mov	r4, r2
 800832e:	18d5      	adds	r5, r2, r3
 8008330:	42ac      	cmp	r4, r5
 8008332:	d101      	bne.n	8008338 <__sfputs_r+0x12>
 8008334:	2000      	movs	r0, #0
 8008336:	e007      	b.n	8008348 <__sfputs_r+0x22>
 8008338:	463a      	mov	r2, r7
 800833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ffda 	bl	80082f8 <__sfputc_r>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d1f3      	bne.n	8008330 <__sfputs_r+0xa>
 8008348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800834c <_vfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	460c      	mov	r4, r1
 8008352:	b09d      	sub	sp, #116	; 0x74
 8008354:	4617      	mov	r7, r2
 8008356:	461d      	mov	r5, r3
 8008358:	4606      	mov	r6, r0
 800835a:	b118      	cbz	r0, 8008364 <_vfiprintf_r+0x18>
 800835c:	6983      	ldr	r3, [r0, #24]
 800835e:	b90b      	cbnz	r3, 8008364 <_vfiprintf_r+0x18>
 8008360:	f7ff fb98 	bl	8007a94 <__sinit>
 8008364:	4b7c      	ldr	r3, [pc, #496]	; (8008558 <_vfiprintf_r+0x20c>)
 8008366:	429c      	cmp	r4, r3
 8008368:	d158      	bne.n	800841c <_vfiprintf_r+0xd0>
 800836a:	6874      	ldr	r4, [r6, #4]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	0718      	lsls	r0, r3, #28
 8008370:	d55e      	bpl.n	8008430 <_vfiprintf_r+0xe4>
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05b      	beq.n	8008430 <_vfiprintf_r+0xe4>
 8008378:	2300      	movs	r3, #0
 800837a:	9309      	str	r3, [sp, #36]	; 0x24
 800837c:	2320      	movs	r3, #32
 800837e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008382:	2330      	movs	r3, #48	; 0x30
 8008384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008388:	9503      	str	r5, [sp, #12]
 800838a:	f04f 0b01 	mov.w	fp, #1
 800838e:	46b8      	mov	r8, r7
 8008390:	4645      	mov	r5, r8
 8008392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008396:	b10b      	cbz	r3, 800839c <_vfiprintf_r+0x50>
 8008398:	2b25      	cmp	r3, #37	; 0x25
 800839a:	d154      	bne.n	8008446 <_vfiprintf_r+0xfa>
 800839c:	ebb8 0a07 	subs.w	sl, r8, r7
 80083a0:	d00b      	beq.n	80083ba <_vfiprintf_r+0x6e>
 80083a2:	4653      	mov	r3, sl
 80083a4:	463a      	mov	r2, r7
 80083a6:	4621      	mov	r1, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ffbc 	bl	8008326 <__sfputs_r>
 80083ae:	3001      	adds	r0, #1
 80083b0:	f000 80c2 	beq.w	8008538 <_vfiprintf_r+0x1ec>
 80083b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b6:	4453      	add	r3, sl
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	f898 3000 	ldrb.w	r3, [r8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80ba 	beq.w	8008538 <_vfiprintf_r+0x1ec>
 80083c4:	2300      	movs	r3, #0
 80083c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d6:	931a      	str	r3, [sp, #104]	; 0x68
 80083d8:	46a8      	mov	r8, r5
 80083da:	2205      	movs	r2, #5
 80083dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80083e0:	485e      	ldr	r0, [pc, #376]	; (800855c <_vfiprintf_r+0x210>)
 80083e2:	f7f7 fefd 	bl	80001e0 <memchr>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	bb78      	cbnz	r0, 800844a <_vfiprintf_r+0xfe>
 80083ea:	06d9      	lsls	r1, r3, #27
 80083ec:	bf44      	itt	mi
 80083ee:	2220      	movmi	r2, #32
 80083f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083f4:	071a      	lsls	r2, r3, #28
 80083f6:	bf44      	itt	mi
 80083f8:	222b      	movmi	r2, #43	; 0x2b
 80083fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083fe:	782a      	ldrb	r2, [r5, #0]
 8008400:	2a2a      	cmp	r2, #42	; 0x2a
 8008402:	d02a      	beq.n	800845a <_vfiprintf_r+0x10e>
 8008404:	9a07      	ldr	r2, [sp, #28]
 8008406:	46a8      	mov	r8, r5
 8008408:	2000      	movs	r0, #0
 800840a:	250a      	movs	r5, #10
 800840c:	4641      	mov	r1, r8
 800840e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008412:	3b30      	subs	r3, #48	; 0x30
 8008414:	2b09      	cmp	r3, #9
 8008416:	d969      	bls.n	80084ec <_vfiprintf_r+0x1a0>
 8008418:	b360      	cbz	r0, 8008474 <_vfiprintf_r+0x128>
 800841a:	e024      	b.n	8008466 <_vfiprintf_r+0x11a>
 800841c:	4b50      	ldr	r3, [pc, #320]	; (8008560 <_vfiprintf_r+0x214>)
 800841e:	429c      	cmp	r4, r3
 8008420:	d101      	bne.n	8008426 <_vfiprintf_r+0xda>
 8008422:	68b4      	ldr	r4, [r6, #8]
 8008424:	e7a2      	b.n	800836c <_vfiprintf_r+0x20>
 8008426:	4b4f      	ldr	r3, [pc, #316]	; (8008564 <_vfiprintf_r+0x218>)
 8008428:	429c      	cmp	r4, r3
 800842a:	bf08      	it	eq
 800842c:	68f4      	ldreq	r4, [r6, #12]
 800842e:	e79d      	b.n	800836c <_vfiprintf_r+0x20>
 8008430:	4621      	mov	r1, r4
 8008432:	4630      	mov	r0, r6
 8008434:	f000 f958 	bl	80086e8 <__swsetup_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	d09d      	beq.n	8008378 <_vfiprintf_r+0x2c>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008440:	b01d      	add	sp, #116	; 0x74
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	46a8      	mov	r8, r5
 8008448:	e7a2      	b.n	8008390 <_vfiprintf_r+0x44>
 800844a:	4a44      	ldr	r2, [pc, #272]	; (800855c <_vfiprintf_r+0x210>)
 800844c:	1a80      	subs	r0, r0, r2
 800844e:	fa0b f000 	lsl.w	r0, fp, r0
 8008452:	4318      	orrs	r0, r3
 8008454:	9004      	str	r0, [sp, #16]
 8008456:	4645      	mov	r5, r8
 8008458:	e7be      	b.n	80083d8 <_vfiprintf_r+0x8c>
 800845a:	9a03      	ldr	r2, [sp, #12]
 800845c:	1d11      	adds	r1, r2, #4
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	9103      	str	r1, [sp, #12]
 8008462:	2a00      	cmp	r2, #0
 8008464:	db01      	blt.n	800846a <_vfiprintf_r+0x11e>
 8008466:	9207      	str	r2, [sp, #28]
 8008468:	e004      	b.n	8008474 <_vfiprintf_r+0x128>
 800846a:	4252      	negs	r2, r2
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	9207      	str	r2, [sp, #28]
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f898 3000 	ldrb.w	r3, [r8]
 8008478:	2b2e      	cmp	r3, #46	; 0x2e
 800847a:	d10e      	bne.n	800849a <_vfiprintf_r+0x14e>
 800847c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008480:	2b2a      	cmp	r3, #42	; 0x2a
 8008482:	d138      	bne.n	80084f6 <_vfiprintf_r+0x1aa>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	9203      	str	r2, [sp, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfb8      	it	lt
 8008490:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008494:	f108 0802 	add.w	r8, r8, #2
 8008498:	9305      	str	r3, [sp, #20]
 800849a:	4d33      	ldr	r5, [pc, #204]	; (8008568 <_vfiprintf_r+0x21c>)
 800849c:	f898 1000 	ldrb.w	r1, [r8]
 80084a0:	2203      	movs	r2, #3
 80084a2:	4628      	mov	r0, r5
 80084a4:	f7f7 fe9c 	bl	80001e0 <memchr>
 80084a8:	b140      	cbz	r0, 80084bc <_vfiprintf_r+0x170>
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	1b40      	subs	r0, r0, r5
 80084ae:	fa03 f000 	lsl.w	r0, r3, r0
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	4303      	orrs	r3, r0
 80084b6:	f108 0801 	add.w	r8, r8, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	f898 1000 	ldrb.w	r1, [r8]
 80084c0:	482a      	ldr	r0, [pc, #168]	; (800856c <_vfiprintf_r+0x220>)
 80084c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084c6:	2206      	movs	r2, #6
 80084c8:	f108 0701 	add.w	r7, r8, #1
 80084cc:	f7f7 fe88 	bl	80001e0 <memchr>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d037      	beq.n	8008544 <_vfiprintf_r+0x1f8>
 80084d4:	4b26      	ldr	r3, [pc, #152]	; (8008570 <_vfiprintf_r+0x224>)
 80084d6:	bb1b      	cbnz	r3, 8008520 <_vfiprintf_r+0x1d4>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	3307      	adds	r3, #7
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e6:	444b      	add	r3, r9
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	e750      	b.n	800838e <_vfiprintf_r+0x42>
 80084ec:	fb05 3202 	mla	r2, r5, r2, r3
 80084f0:	2001      	movs	r0, #1
 80084f2:	4688      	mov	r8, r1
 80084f4:	e78a      	b.n	800840c <_vfiprintf_r+0xc0>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f108 0801 	add.w	r8, r8, #1
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	4619      	mov	r1, r3
 8008500:	250a      	movs	r5, #10
 8008502:	4640      	mov	r0, r8
 8008504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008508:	3a30      	subs	r2, #48	; 0x30
 800850a:	2a09      	cmp	r2, #9
 800850c:	d903      	bls.n	8008516 <_vfiprintf_r+0x1ca>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0c3      	beq.n	800849a <_vfiprintf_r+0x14e>
 8008512:	9105      	str	r1, [sp, #20]
 8008514:	e7c1      	b.n	800849a <_vfiprintf_r+0x14e>
 8008516:	fb05 2101 	mla	r1, r5, r1, r2
 800851a:	2301      	movs	r3, #1
 800851c:	4680      	mov	r8, r0
 800851e:	e7f0      	b.n	8008502 <_vfiprintf_r+0x1b6>
 8008520:	ab03      	add	r3, sp, #12
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4622      	mov	r2, r4
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <_vfiprintf_r+0x228>)
 8008528:	a904      	add	r1, sp, #16
 800852a:	4630      	mov	r0, r6
 800852c:	f7fe f840 	bl	80065b0 <_printf_float>
 8008530:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008534:	4681      	mov	r9, r0
 8008536:	d1d5      	bne.n	80084e4 <_vfiprintf_r+0x198>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	065b      	lsls	r3, r3, #25
 800853c:	f53f af7e 	bmi.w	800843c <_vfiprintf_r+0xf0>
 8008540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008542:	e77d      	b.n	8008440 <_vfiprintf_r+0xf4>
 8008544:	ab03      	add	r3, sp, #12
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4622      	mov	r2, r4
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <_vfiprintf_r+0x228>)
 800854c:	a904      	add	r1, sp, #16
 800854e:	4630      	mov	r0, r6
 8008550:	f7fe faea 	bl	8006b28 <_printf_i>
 8008554:	e7ec      	b.n	8008530 <_vfiprintf_r+0x1e4>
 8008556:	bf00      	nop
 8008558:	08008c38 	.word	0x08008c38
 800855c:	08008d74 	.word	0x08008d74
 8008560:	08008c58 	.word	0x08008c58
 8008564:	08008c18 	.word	0x08008c18
 8008568:	08008d7a 	.word	0x08008d7a
 800856c:	08008d7e 	.word	0x08008d7e
 8008570:	080065b1 	.word	0x080065b1
 8008574:	08008327 	.word	0x08008327

08008578 <_sbrk_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4c06      	ldr	r4, [pc, #24]	; (8008594 <_sbrk_r+0x1c>)
 800857c:	2300      	movs	r3, #0
 800857e:	4605      	mov	r5, r0
 8008580:	4608      	mov	r0, r1
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	f7fb fe0a 	bl	800419c <_sbrk>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_sbrk_r+0x1a>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	b103      	cbz	r3, 8008592 <_sbrk_r+0x1a>
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20000240 	.word	0x20000240

08008598 <__sread>:
 8008598:	b510      	push	{r4, lr}
 800859a:	460c      	mov	r4, r1
 800859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a0:	f000 fa5a 	bl	8008a58 <_read_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	bfab      	itete	ge
 80085a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085aa:	89a3      	ldrhlt	r3, [r4, #12]
 80085ac:	181b      	addge	r3, r3, r0
 80085ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085b2:	bfac      	ite	ge
 80085b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085b6:	81a3      	strhlt	r3, [r4, #12]
 80085b8:	bd10      	pop	{r4, pc}

080085ba <__swrite>:
 80085ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085be:	461f      	mov	r7, r3
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	05db      	lsls	r3, r3, #23
 80085c4:	4605      	mov	r5, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4616      	mov	r6, r2
 80085ca:	d505      	bpl.n	80085d8 <__swrite+0x1e>
 80085cc:	2302      	movs	r3, #2
 80085ce:	2200      	movs	r2, #0
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	f000 f9b6 	bl	8008944 <_lseek_r>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	4632      	mov	r2, r6
 80085e6:	463b      	mov	r3, r7
 80085e8:	4628      	mov	r0, r5
 80085ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	f000 b869 	b.w	80086c4 <_write_r>

080085f2 <__sseek>:
 80085f2:	b510      	push	{r4, lr}
 80085f4:	460c      	mov	r4, r1
 80085f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fa:	f000 f9a3 	bl	8008944 <_lseek_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	bf15      	itete	ne
 8008604:	6560      	strne	r0, [r4, #84]	; 0x54
 8008606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800860a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800860e:	81a3      	strheq	r3, [r4, #12]
 8008610:	bf18      	it	ne
 8008612:	81a3      	strhne	r3, [r4, #12]
 8008614:	bd10      	pop	{r4, pc}

08008616 <__sclose>:
 8008616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861a:	f000 b8d3 	b.w	80087c4 <_close_r>
	...

08008620 <__swbuf_r>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	460e      	mov	r6, r1
 8008624:	4614      	mov	r4, r2
 8008626:	4605      	mov	r5, r0
 8008628:	b118      	cbz	r0, 8008632 <__swbuf_r+0x12>
 800862a:	6983      	ldr	r3, [r0, #24]
 800862c:	b90b      	cbnz	r3, 8008632 <__swbuf_r+0x12>
 800862e:	f7ff fa31 	bl	8007a94 <__sinit>
 8008632:	4b21      	ldr	r3, [pc, #132]	; (80086b8 <__swbuf_r+0x98>)
 8008634:	429c      	cmp	r4, r3
 8008636:	d12a      	bne.n	800868e <__swbuf_r+0x6e>
 8008638:	686c      	ldr	r4, [r5, #4]
 800863a:	69a3      	ldr	r3, [r4, #24]
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	071a      	lsls	r2, r3, #28
 8008642:	d52e      	bpl.n	80086a2 <__swbuf_r+0x82>
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	b363      	cbz	r3, 80086a2 <__swbuf_r+0x82>
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	1ac0      	subs	r0, r0, r3
 800864e:	6963      	ldr	r3, [r4, #20]
 8008650:	b2f6      	uxtb	r6, r6
 8008652:	4283      	cmp	r3, r0
 8008654:	4637      	mov	r7, r6
 8008656:	dc04      	bgt.n	8008662 <__swbuf_r+0x42>
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f948 	bl	80088f0 <_fflush_r>
 8008660:	bb28      	cbnz	r0, 80086ae <__swbuf_r+0x8e>
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	3b01      	subs	r3, #1
 8008666:	60a3      	str	r3, [r4, #8]
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	701e      	strb	r6, [r3, #0]
 8008670:	6963      	ldr	r3, [r4, #20]
 8008672:	3001      	adds	r0, #1
 8008674:	4283      	cmp	r3, r0
 8008676:	d004      	beq.n	8008682 <__swbuf_r+0x62>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	07db      	lsls	r3, r3, #31
 800867c:	d519      	bpl.n	80086b2 <__swbuf_r+0x92>
 800867e:	2e0a      	cmp	r6, #10
 8008680:	d117      	bne.n	80086b2 <__swbuf_r+0x92>
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	f000 f933 	bl	80088f0 <_fflush_r>
 800868a:	b190      	cbz	r0, 80086b2 <__swbuf_r+0x92>
 800868c:	e00f      	b.n	80086ae <__swbuf_r+0x8e>
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <__swbuf_r+0x9c>)
 8008690:	429c      	cmp	r4, r3
 8008692:	d101      	bne.n	8008698 <__swbuf_r+0x78>
 8008694:	68ac      	ldr	r4, [r5, #8]
 8008696:	e7d0      	b.n	800863a <__swbuf_r+0x1a>
 8008698:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <__swbuf_r+0xa0>)
 800869a:	429c      	cmp	r4, r3
 800869c:	bf08      	it	eq
 800869e:	68ec      	ldreq	r4, [r5, #12]
 80086a0:	e7cb      	b.n	800863a <__swbuf_r+0x1a>
 80086a2:	4621      	mov	r1, r4
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f81f 	bl	80086e8 <__swsetup_r>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d0cc      	beq.n	8008648 <__swbuf_r+0x28>
 80086ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086b2:	4638      	mov	r0, r7
 80086b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	08008c38 	.word	0x08008c38
 80086bc:	08008c58 	.word	0x08008c58
 80086c0:	08008c18 	.word	0x08008c18

080086c4 <_write_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4c07      	ldr	r4, [pc, #28]	; (80086e4 <_write_r+0x20>)
 80086c8:	4605      	mov	r5, r0
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7fb fd11 	bl	80040fa <_write>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_write_r+0x1e>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_write_r+0x1e>
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000240 	.word	0x20000240

080086e8 <__swsetup_r>:
 80086e8:	4b32      	ldr	r3, [pc, #200]	; (80087b4 <__swsetup_r+0xcc>)
 80086ea:	b570      	push	{r4, r5, r6, lr}
 80086ec:	681d      	ldr	r5, [r3, #0]
 80086ee:	4606      	mov	r6, r0
 80086f0:	460c      	mov	r4, r1
 80086f2:	b125      	cbz	r5, 80086fe <__swsetup_r+0x16>
 80086f4:	69ab      	ldr	r3, [r5, #24]
 80086f6:	b913      	cbnz	r3, 80086fe <__swsetup_r+0x16>
 80086f8:	4628      	mov	r0, r5
 80086fa:	f7ff f9cb 	bl	8007a94 <__sinit>
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <__swsetup_r+0xd0>)
 8008700:	429c      	cmp	r4, r3
 8008702:	d10f      	bne.n	8008724 <__swsetup_r+0x3c>
 8008704:	686c      	ldr	r4, [r5, #4]
 8008706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870a:	b29a      	uxth	r2, r3
 800870c:	0715      	lsls	r5, r2, #28
 800870e:	d42c      	bmi.n	800876a <__swsetup_r+0x82>
 8008710:	06d0      	lsls	r0, r2, #27
 8008712:	d411      	bmi.n	8008738 <__swsetup_r+0x50>
 8008714:	2209      	movs	r2, #9
 8008716:	6032      	str	r2, [r6, #0]
 8008718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008722:	e03e      	b.n	80087a2 <__swsetup_r+0xba>
 8008724:	4b25      	ldr	r3, [pc, #148]	; (80087bc <__swsetup_r+0xd4>)
 8008726:	429c      	cmp	r4, r3
 8008728:	d101      	bne.n	800872e <__swsetup_r+0x46>
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	e7eb      	b.n	8008706 <__swsetup_r+0x1e>
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <__swsetup_r+0xd8>)
 8008730:	429c      	cmp	r4, r3
 8008732:	bf08      	it	eq
 8008734:	68ec      	ldreq	r4, [r5, #12]
 8008736:	e7e6      	b.n	8008706 <__swsetup_r+0x1e>
 8008738:	0751      	lsls	r1, r2, #29
 800873a:	d512      	bpl.n	8008762 <__swsetup_r+0x7a>
 800873c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873e:	b141      	cbz	r1, 8008752 <__swsetup_r+0x6a>
 8008740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008744:	4299      	cmp	r1, r3
 8008746:	d002      	beq.n	800874e <__swsetup_r+0x66>
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff fd2d 	bl	80081a8 <_free_r>
 800874e:	2300      	movs	r3, #0
 8008750:	6363      	str	r3, [r4, #52]	; 0x34
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	2300      	movs	r3, #0
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f043 0308 	orr.w	r3, r3, #8
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	b94b      	cbnz	r3, 8008782 <__swsetup_r+0x9a>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008778:	d003      	beq.n	8008782 <__swsetup_r+0x9a>
 800877a:	4621      	mov	r1, r4
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f917 	bl	80089b0 <__smakebuf_r>
 8008782:	89a2      	ldrh	r2, [r4, #12]
 8008784:	f012 0301 	ands.w	r3, r2, #1
 8008788:	d00c      	beq.n	80087a4 <__swsetup_r+0xbc>
 800878a:	2300      	movs	r3, #0
 800878c:	60a3      	str	r3, [r4, #8]
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	425b      	negs	r3, r3
 8008792:	61a3      	str	r3, [r4, #24]
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	b953      	cbnz	r3, 80087ae <__swsetup_r+0xc6>
 8008798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087a0:	d1ba      	bne.n	8008718 <__swsetup_r+0x30>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	0792      	lsls	r2, r2, #30
 80087a6:	bf58      	it	pl
 80087a8:	6963      	ldrpl	r3, [r4, #20]
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	e7f2      	b.n	8008794 <__swsetup_r+0xac>
 80087ae:	2000      	movs	r0, #0
 80087b0:	e7f7      	b.n	80087a2 <__swsetup_r+0xba>
 80087b2:	bf00      	nop
 80087b4:	20000008 	.word	0x20000008
 80087b8:	08008c38 	.word	0x08008c38
 80087bc:	08008c58 	.word	0x08008c58
 80087c0:	08008c18 	.word	0x08008c18

080087c4 <_close_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4c06      	ldr	r4, [pc, #24]	; (80087e0 <_close_r+0x1c>)
 80087c8:	2300      	movs	r3, #0
 80087ca:	4605      	mov	r5, r0
 80087cc:	4608      	mov	r0, r1
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	f7fb fcaf 	bl	8004132 <_close>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_close_r+0x1a>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	b103      	cbz	r3, 80087de <_close_r+0x1a>
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	20000240 	.word	0x20000240

080087e4 <__sflush_r>:
 80087e4:	898a      	ldrh	r2, [r1, #12]
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	0710      	lsls	r0, r2, #28
 80087ee:	460c      	mov	r4, r1
 80087f0:	d458      	bmi.n	80088a4 <__sflush_r+0xc0>
 80087f2:	684b      	ldr	r3, [r1, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc05      	bgt.n	8008804 <__sflush_r+0x20>
 80087f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dc02      	bgt.n	8008804 <__sflush_r+0x20>
 80087fe:	2000      	movs	r0, #0
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008806:	2e00      	cmp	r6, #0
 8008808:	d0f9      	beq.n	80087fe <__sflush_r+0x1a>
 800880a:	2300      	movs	r3, #0
 800880c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008810:	682f      	ldr	r7, [r5, #0]
 8008812:	6a21      	ldr	r1, [r4, #32]
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	d032      	beq.n	800887e <__sflush_r+0x9a>
 8008818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	075a      	lsls	r2, r3, #29
 800881e:	d505      	bpl.n	800882c <__sflush_r+0x48>
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	1ac0      	subs	r0, r0, r3
 8008824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008826:	b10b      	cbz	r3, 800882c <__sflush_r+0x48>
 8008828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800882a:	1ac0      	subs	r0, r0, r3
 800882c:	2300      	movs	r3, #0
 800882e:	4602      	mov	r2, r0
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	d106      	bne.n	800884c <__sflush_r+0x68>
 800883e:	6829      	ldr	r1, [r5, #0]
 8008840:	291d      	cmp	r1, #29
 8008842:	d848      	bhi.n	80088d6 <__sflush_r+0xf2>
 8008844:	4a29      	ldr	r2, [pc, #164]	; (80088ec <__sflush_r+0x108>)
 8008846:	40ca      	lsrs	r2, r1
 8008848:	07d6      	lsls	r6, r2, #31
 800884a:	d544      	bpl.n	80088d6 <__sflush_r+0xf2>
 800884c:	2200      	movs	r2, #0
 800884e:	6062      	str	r2, [r4, #4]
 8008850:	04d9      	lsls	r1, r3, #19
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	d504      	bpl.n	8008862 <__sflush_r+0x7e>
 8008858:	1c42      	adds	r2, r0, #1
 800885a:	d101      	bne.n	8008860 <__sflush_r+0x7c>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b903      	cbnz	r3, 8008862 <__sflush_r+0x7e>
 8008860:	6560      	str	r0, [r4, #84]	; 0x54
 8008862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008864:	602f      	str	r7, [r5, #0]
 8008866:	2900      	cmp	r1, #0
 8008868:	d0c9      	beq.n	80087fe <__sflush_r+0x1a>
 800886a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__sflush_r+0x94>
 8008872:	4628      	mov	r0, r5
 8008874:	f7ff fc98 	bl	80081a8 <_free_r>
 8008878:	2000      	movs	r0, #0
 800887a:	6360      	str	r0, [r4, #52]	; 0x34
 800887c:	e7c0      	b.n	8008800 <__sflush_r+0x1c>
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	1c41      	adds	r1, r0, #1
 8008886:	d1c8      	bne.n	800881a <__sflush_r+0x36>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c5      	beq.n	800881a <__sflush_r+0x36>
 800888e:	2b1d      	cmp	r3, #29
 8008890:	d001      	beq.n	8008896 <__sflush_r+0xb2>
 8008892:	2b16      	cmp	r3, #22
 8008894:	d101      	bne.n	800889a <__sflush_r+0xb6>
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	e7b1      	b.n	80087fe <__sflush_r+0x1a>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	e7ad      	b.n	8008800 <__sflush_r+0x1c>
 80088a4:	690f      	ldr	r7, [r1, #16]
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	d0a9      	beq.n	80087fe <__sflush_r+0x1a>
 80088aa:	0793      	lsls	r3, r2, #30
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	600f      	str	r7, [r1, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2300      	movne	r3, #0
 80088b8:	eba6 0807 	sub.w	r8, r6, r7
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	dd9c      	ble.n	80087fe <__sflush_r+0x1a>
 80088c4:	4643      	mov	r3, r8
 80088c6:	463a      	mov	r2, r7
 80088c8:	6a21      	ldr	r1, [r4, #32]
 80088ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dc06      	bgt.n	80088e2 <__sflush_r+0xfe>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e0:	e78e      	b.n	8008800 <__sflush_r+0x1c>
 80088e2:	4407      	add	r7, r0
 80088e4:	eba8 0800 	sub.w	r8, r8, r0
 80088e8:	e7e9      	b.n	80088be <__sflush_r+0xda>
 80088ea:	bf00      	nop
 80088ec:	20400001 	.word	0x20400001

080088f0 <_fflush_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b1db      	cbz	r3, 8008932 <_fflush_r+0x42>
 80088fa:	b118      	cbz	r0, 8008904 <_fflush_r+0x14>
 80088fc:	6983      	ldr	r3, [r0, #24]
 80088fe:	b90b      	cbnz	r3, 8008904 <_fflush_r+0x14>
 8008900:	f7ff f8c8 	bl	8007a94 <__sinit>
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <_fflush_r+0x48>)
 8008906:	429c      	cmp	r4, r3
 8008908:	d109      	bne.n	800891e <_fflush_r+0x2e>
 800890a:	686c      	ldr	r4, [r5, #4]
 800890c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008910:	b17b      	cbz	r3, 8008932 <_fflush_r+0x42>
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800891a:	f7ff bf63 	b.w	80087e4 <__sflush_r>
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <_fflush_r+0x4c>)
 8008920:	429c      	cmp	r4, r3
 8008922:	d101      	bne.n	8008928 <_fflush_r+0x38>
 8008924:	68ac      	ldr	r4, [r5, #8]
 8008926:	e7f1      	b.n	800890c <_fflush_r+0x1c>
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <_fflush_r+0x50>)
 800892a:	429c      	cmp	r4, r3
 800892c:	bf08      	it	eq
 800892e:	68ec      	ldreq	r4, [r5, #12]
 8008930:	e7ec      	b.n	800890c <_fflush_r+0x1c>
 8008932:	2000      	movs	r0, #0
 8008934:	bd38      	pop	{r3, r4, r5, pc}
 8008936:	bf00      	nop
 8008938:	08008c38 	.word	0x08008c38
 800893c:	08008c58 	.word	0x08008c58
 8008940:	08008c18 	.word	0x08008c18

08008944 <_lseek_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4c07      	ldr	r4, [pc, #28]	; (8008964 <_lseek_r+0x20>)
 8008948:	4605      	mov	r5, r0
 800894a:	4608      	mov	r0, r1
 800894c:	4611      	mov	r1, r2
 800894e:	2200      	movs	r2, #0
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f7fb fc14 	bl	8004180 <_lseek>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_lseek_r+0x1e>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	b103      	cbz	r3, 8008962 <_lseek_r+0x1e>
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20000240 	.word	0x20000240

08008968 <__swhatbuf_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	460e      	mov	r6, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	2900      	cmp	r1, #0
 8008972:	b096      	sub	sp, #88	; 0x58
 8008974:	4614      	mov	r4, r2
 8008976:	461d      	mov	r5, r3
 8008978:	da07      	bge.n	800898a <__swhatbuf_r+0x22>
 800897a:	2300      	movs	r3, #0
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	89b3      	ldrh	r3, [r6, #12]
 8008980:	061a      	lsls	r2, r3, #24
 8008982:	d410      	bmi.n	80089a6 <__swhatbuf_r+0x3e>
 8008984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008988:	e00e      	b.n	80089a8 <__swhatbuf_r+0x40>
 800898a:	466a      	mov	r2, sp
 800898c:	f000 f884 	bl	8008a98 <_fstat_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	dbf2      	blt.n	800897a <__swhatbuf_r+0x12>
 8008994:	9a01      	ldr	r2, [sp, #4]
 8008996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800899a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800899e:	425a      	negs	r2, r3
 80089a0:	415a      	adcs	r2, r3
 80089a2:	602a      	str	r2, [r5, #0]
 80089a4:	e7ee      	b.n	8008984 <__swhatbuf_r+0x1c>
 80089a6:	2340      	movs	r3, #64	; 0x40
 80089a8:	2000      	movs	r0, #0
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	b016      	add	sp, #88	; 0x58
 80089ae:	bd70      	pop	{r4, r5, r6, pc}

080089b0 <__smakebuf_r>:
 80089b0:	898b      	ldrh	r3, [r1, #12]
 80089b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b4:	079d      	lsls	r5, r3, #30
 80089b6:	4606      	mov	r6, r0
 80089b8:	460c      	mov	r4, r1
 80089ba:	d507      	bpl.n	80089cc <__smakebuf_r+0x1c>
 80089bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	2301      	movs	r3, #1
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	b002      	add	sp, #8
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	ab01      	add	r3, sp, #4
 80089ce:	466a      	mov	r2, sp
 80089d0:	f7ff ffca 	bl	8008968 <__swhatbuf_r>
 80089d4:	9900      	ldr	r1, [sp, #0]
 80089d6:	4605      	mov	r5, r0
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff fc33 	bl	8008244 <_malloc_r>
 80089de:	b948      	cbnz	r0, 80089f4 <__smakebuf_r+0x44>
 80089e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e4:	059a      	lsls	r2, r3, #22
 80089e6:	d4ef      	bmi.n	80089c8 <__smakebuf_r+0x18>
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	e7e3      	b.n	80089bc <__smakebuf_r+0xc>
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <__smakebuf_r+0x7c>)
 80089f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	6163      	str	r3, [r4, #20]
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	6120      	str	r0, [r4, #16]
 8008a0a:	b15b      	cbz	r3, 8008a24 <__smakebuf_r+0x74>
 8008a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 f853 	bl	8008abc <_isatty_r>
 8008a16:	b128      	cbz	r0, 8008a24 <__smakebuf_r+0x74>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	431d      	orrs	r5, r3
 8008a28:	81a5      	strh	r5, [r4, #12]
 8008a2a:	e7cd      	b.n	80089c8 <__smakebuf_r+0x18>
 8008a2c:	08007a5d 	.word	0x08007a5d

08008a30 <__ascii_mbtowc>:
 8008a30:	b082      	sub	sp, #8
 8008a32:	b901      	cbnz	r1, 8008a36 <__ascii_mbtowc+0x6>
 8008a34:	a901      	add	r1, sp, #4
 8008a36:	b142      	cbz	r2, 8008a4a <__ascii_mbtowc+0x1a>
 8008a38:	b14b      	cbz	r3, 8008a4e <__ascii_mbtowc+0x1e>
 8008a3a:	7813      	ldrb	r3, [r2, #0]
 8008a3c:	600b      	str	r3, [r1, #0]
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	1c10      	adds	r0, r2, #0
 8008a42:	bf18      	it	ne
 8008a44:	2001      	movne	r0, #1
 8008a46:	b002      	add	sp, #8
 8008a48:	4770      	bx	lr
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	e7fb      	b.n	8008a46 <__ascii_mbtowc+0x16>
 8008a4e:	f06f 0001 	mvn.w	r0, #1
 8008a52:	e7f8      	b.n	8008a46 <__ascii_mbtowc+0x16>

08008a54 <__malloc_lock>:
 8008a54:	4770      	bx	lr

08008a56 <__malloc_unlock>:
 8008a56:	4770      	bx	lr

08008a58 <_read_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4c07      	ldr	r4, [pc, #28]	; (8008a78 <_read_r+0x20>)
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	2200      	movs	r2, #0
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f7fb fb2a 	bl	80040c0 <_read>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_read_r+0x1e>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_read_r+0x1e>
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20000240 	.word	0x20000240

08008a7c <__ascii_wctomb>:
 8008a7c:	b149      	cbz	r1, 8008a92 <__ascii_wctomb+0x16>
 8008a7e:	2aff      	cmp	r2, #255	; 0xff
 8008a80:	bf85      	ittet	hi
 8008a82:	238a      	movhi	r3, #138	; 0x8a
 8008a84:	6003      	strhi	r3, [r0, #0]
 8008a86:	700a      	strbls	r2, [r1, #0]
 8008a88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a8c:	bf98      	it	ls
 8008a8e:	2001      	movls	r0, #1
 8008a90:	4770      	bx	lr
 8008a92:	4608      	mov	r0, r1
 8008a94:	4770      	bx	lr
	...

08008a98 <_fstat_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4c07      	ldr	r4, [pc, #28]	; (8008ab8 <_fstat_r+0x20>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	f7fb fb50 	bl	800414a <_fstat>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d102      	bne.n	8008ab4 <_fstat_r+0x1c>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	b103      	cbz	r3, 8008ab4 <_fstat_r+0x1c>
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000240 	.word	0x20000240

08008abc <_isatty_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4c06      	ldr	r4, [pc, #24]	; (8008ad8 <_isatty_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	f7fb fb4f 	bl	800416a <_isatty>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_isatty_r+0x1a>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_isatty_r+0x1a>
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20000240 	.word	0x20000240

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
