
TestCircuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000896c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08008b00  08008b00  00018b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080096a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  200001d8  08009880  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08009880  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001665a  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd0  00000000  00000000  00036860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  0003a430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029695  00000000  00000000  0003c150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101cc  00000000  00000000  000657e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dae4e  00000000  00000000  000759b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001507ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf0  00000000  00000000  001508f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000010e  00000000  00000000  001555e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ae4 	.word	0x08008ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008ae4 	.word	0x08008ae4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	d1ed      	bne.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_f2uiz>:
 800119c:	0042      	lsls	r2, r0, #1
 800119e:	d20e      	bcs.n	80011be <__aeabi_f2uiz+0x22>
 80011a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a4:	d30b      	bcc.n	80011be <__aeabi_f2uiz+0x22>
 80011a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ae:	d409      	bmi.n	80011c4 <__aeabi_f2uiz+0x28>
 80011b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	4770      	bx	lr
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4770      	bx	lr
 80011c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c8:	d101      	bne.n	80011ce <__aeabi_f2uiz+0x32>
 80011ca:	0242      	lsls	r2, r0, #9
 80011cc:	d102      	bne.n	80011d4 <__aeabi_f2uiz+0x38>
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d2:	4770      	bx	lr
 80011d4:	f04f 0000 	mov.w	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <__aeabi_uldivmod>:
 80011dc:	b953      	cbnz	r3, 80011f4 <__aeabi_uldivmod+0x18>
 80011de:	b94a      	cbnz	r2, 80011f4 <__aeabi_uldivmod+0x18>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bf08      	it	eq
 80011e4:	2800      	cmpeq	r0, #0
 80011e6:	bf1c      	itt	ne
 80011e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011f0:	f000 b972 	b.w	80014d8 <__aeabi_idiv0>
 80011f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011fc:	f000 f806 	bl	800120c <__udivmoddi4>
 8001200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9e08      	ldr	r6, [sp, #32]
 8001212:	4604      	mov	r4, r0
 8001214:	4688      	mov	r8, r1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14b      	bne.n	80012b2 <__udivmoddi4+0xa6>
 800121a:	428a      	cmp	r2, r1
 800121c:	4615      	mov	r5, r2
 800121e:	d967      	bls.n	80012f0 <__udivmoddi4+0xe4>
 8001220:	fab2 f282 	clz	r2, r2
 8001224:	b14a      	cbz	r2, 800123a <__udivmoddi4+0x2e>
 8001226:	f1c2 0720 	rsb	r7, r2, #32
 800122a:	fa01 f302 	lsl.w	r3, r1, r2
 800122e:	fa20 f707 	lsr.w	r7, r0, r7
 8001232:	4095      	lsls	r5, r2
 8001234:	ea47 0803 	orr.w	r8, r7, r3
 8001238:	4094      	lsls	r4, r2
 800123a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800123e:	0c23      	lsrs	r3, r4, #16
 8001240:	fbb8 f7fe 	udiv	r7, r8, lr
 8001244:	fa1f fc85 	uxth.w	ip, r5
 8001248:	fb0e 8817 	mls	r8, lr, r7, r8
 800124c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001250:	fb07 f10c 	mul.w	r1, r7, ip
 8001254:	4299      	cmp	r1, r3
 8001256:	d909      	bls.n	800126c <__udivmoddi4+0x60>
 8001258:	18eb      	adds	r3, r5, r3
 800125a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800125e:	f080 811b 	bcs.w	8001498 <__udivmoddi4+0x28c>
 8001262:	4299      	cmp	r1, r3
 8001264:	f240 8118 	bls.w	8001498 <__udivmoddi4+0x28c>
 8001268:	3f02      	subs	r7, #2
 800126a:	442b      	add	r3, r5
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f0fe 	udiv	r0, r3, lr
 8001274:	fb0e 3310 	mls	r3, lr, r0, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001280:	45a4      	cmp	ip, r4
 8001282:	d909      	bls.n	8001298 <__udivmoddi4+0x8c>
 8001284:	192c      	adds	r4, r5, r4
 8001286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800128a:	f080 8107 	bcs.w	800149c <__udivmoddi4+0x290>
 800128e:	45a4      	cmp	ip, r4
 8001290:	f240 8104 	bls.w	800149c <__udivmoddi4+0x290>
 8001294:	3802      	subs	r0, #2
 8001296:	442c      	add	r4, r5
 8001298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800129c:	eba4 040c 	sub.w	r4, r4, ip
 80012a0:	2700      	movs	r7, #0
 80012a2:	b11e      	cbz	r6, 80012ac <__udivmoddi4+0xa0>
 80012a4:	40d4      	lsrs	r4, r2
 80012a6:	2300      	movs	r3, #0
 80012a8:	e9c6 4300 	strd	r4, r3, [r6]
 80012ac:	4639      	mov	r1, r7
 80012ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d909      	bls.n	80012ca <__udivmoddi4+0xbe>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	f000 80eb 	beq.w	8001492 <__udivmoddi4+0x286>
 80012bc:	2700      	movs	r7, #0
 80012be:	e9c6 0100 	strd	r0, r1, [r6]
 80012c2:	4638      	mov	r0, r7
 80012c4:	4639      	mov	r1, r7
 80012c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ca:	fab3 f783 	clz	r7, r3
 80012ce:	2f00      	cmp	r7, #0
 80012d0:	d147      	bne.n	8001362 <__udivmoddi4+0x156>
 80012d2:	428b      	cmp	r3, r1
 80012d4:	d302      	bcc.n	80012dc <__udivmoddi4+0xd0>
 80012d6:	4282      	cmp	r2, r0
 80012d8:	f200 80fa 	bhi.w	80014d0 <__udivmoddi4+0x2c4>
 80012dc:	1a84      	subs	r4, r0, r2
 80012de:	eb61 0303 	sbc.w	r3, r1, r3
 80012e2:	2001      	movs	r0, #1
 80012e4:	4698      	mov	r8, r3
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	d0e0      	beq.n	80012ac <__udivmoddi4+0xa0>
 80012ea:	e9c6 4800 	strd	r4, r8, [r6]
 80012ee:	e7dd      	b.n	80012ac <__udivmoddi4+0xa0>
 80012f0:	b902      	cbnz	r2, 80012f4 <__udivmoddi4+0xe8>
 80012f2:	deff      	udf	#255	; 0xff
 80012f4:	fab2 f282 	clz	r2, r2
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	f040 808f 	bne.w	800141c <__udivmoddi4+0x210>
 80012fe:	1b49      	subs	r1, r1, r5
 8001300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001304:	fa1f f885 	uxth.w	r8, r5
 8001308:	2701      	movs	r7, #1
 800130a:	fbb1 fcfe 	udiv	ip, r1, lr
 800130e:	0c23      	lsrs	r3, r4, #16
 8001310:	fb0e 111c 	mls	r1, lr, ip, r1
 8001314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001318:	fb08 f10c 	mul.w	r1, r8, ip
 800131c:	4299      	cmp	r1, r3
 800131e:	d907      	bls.n	8001330 <__udivmoddi4+0x124>
 8001320:	18eb      	adds	r3, r5, r3
 8001322:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001326:	d202      	bcs.n	800132e <__udivmoddi4+0x122>
 8001328:	4299      	cmp	r1, r3
 800132a:	f200 80cd 	bhi.w	80014c8 <__udivmoddi4+0x2bc>
 800132e:	4684      	mov	ip, r0
 8001330:	1a59      	subs	r1, r3, r1
 8001332:	b2a3      	uxth	r3, r4
 8001334:	fbb1 f0fe 	udiv	r0, r1, lr
 8001338:	fb0e 1410 	mls	r4, lr, r0, r1
 800133c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001340:	fb08 f800 	mul.w	r8, r8, r0
 8001344:	45a0      	cmp	r8, r4
 8001346:	d907      	bls.n	8001358 <__udivmoddi4+0x14c>
 8001348:	192c      	adds	r4, r5, r4
 800134a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800134e:	d202      	bcs.n	8001356 <__udivmoddi4+0x14a>
 8001350:	45a0      	cmp	r8, r4
 8001352:	f200 80b6 	bhi.w	80014c2 <__udivmoddi4+0x2b6>
 8001356:	4618      	mov	r0, r3
 8001358:	eba4 0408 	sub.w	r4, r4, r8
 800135c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001360:	e79f      	b.n	80012a2 <__udivmoddi4+0x96>
 8001362:	f1c7 0c20 	rsb	ip, r7, #32
 8001366:	40bb      	lsls	r3, r7
 8001368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800136c:	ea4e 0e03 	orr.w	lr, lr, r3
 8001370:	fa01 f407 	lsl.w	r4, r1, r7
 8001374:	fa20 f50c 	lsr.w	r5, r0, ip
 8001378:	fa21 f30c 	lsr.w	r3, r1, ip
 800137c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001380:	4325      	orrs	r5, r4
 8001382:	fbb3 f9f8 	udiv	r9, r3, r8
 8001386:	0c2c      	lsrs	r4, r5, #16
 8001388:	fb08 3319 	mls	r3, r8, r9, r3
 800138c:	fa1f fa8e 	uxth.w	sl, lr
 8001390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001394:	fb09 f40a 	mul.w	r4, r9, sl
 8001398:	429c      	cmp	r4, r3
 800139a:	fa02 f207 	lsl.w	r2, r2, r7
 800139e:	fa00 f107 	lsl.w	r1, r0, r7
 80013a2:	d90b      	bls.n	80013bc <__udivmoddi4+0x1b0>
 80013a4:	eb1e 0303 	adds.w	r3, lr, r3
 80013a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80013ac:	f080 8087 	bcs.w	80014be <__udivmoddi4+0x2b2>
 80013b0:	429c      	cmp	r4, r3
 80013b2:	f240 8084 	bls.w	80014be <__udivmoddi4+0x2b2>
 80013b6:	f1a9 0902 	sub.w	r9, r9, #2
 80013ba:	4473      	add	r3, lr
 80013bc:	1b1b      	subs	r3, r3, r4
 80013be:	b2ad      	uxth	r5, r5
 80013c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80013c4:	fb08 3310 	mls	r3, r8, r0, r3
 80013c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80013cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d908      	bls.n	80013e6 <__udivmoddi4+0x1da>
 80013d4:	eb1e 0404 	adds.w	r4, lr, r4
 80013d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80013dc:	d26b      	bcs.n	80014b6 <__udivmoddi4+0x2aa>
 80013de:	45a2      	cmp	sl, r4
 80013e0:	d969      	bls.n	80014b6 <__udivmoddi4+0x2aa>
 80013e2:	3802      	subs	r0, #2
 80013e4:	4474      	add	r4, lr
 80013e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ea:	fba0 8902 	umull	r8, r9, r0, r2
 80013ee:	eba4 040a 	sub.w	r4, r4, sl
 80013f2:	454c      	cmp	r4, r9
 80013f4:	46c2      	mov	sl, r8
 80013f6:	464b      	mov	r3, r9
 80013f8:	d354      	bcc.n	80014a4 <__udivmoddi4+0x298>
 80013fa:	d051      	beq.n	80014a0 <__udivmoddi4+0x294>
 80013fc:	2e00      	cmp	r6, #0
 80013fe:	d069      	beq.n	80014d4 <__udivmoddi4+0x2c8>
 8001400:	ebb1 050a 	subs.w	r5, r1, sl
 8001404:	eb64 0403 	sbc.w	r4, r4, r3
 8001408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800140c:	40fd      	lsrs	r5, r7
 800140e:	40fc      	lsrs	r4, r7
 8001410:	ea4c 0505 	orr.w	r5, ip, r5
 8001414:	e9c6 5400 	strd	r5, r4, [r6]
 8001418:	2700      	movs	r7, #0
 800141a:	e747      	b.n	80012ac <__udivmoddi4+0xa0>
 800141c:	f1c2 0320 	rsb	r3, r2, #32
 8001420:	fa20 f703 	lsr.w	r7, r0, r3
 8001424:	4095      	lsls	r5, r2
 8001426:	fa01 f002 	lsl.w	r0, r1, r2
 800142a:	fa21 f303 	lsr.w	r3, r1, r3
 800142e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001432:	4338      	orrs	r0, r7
 8001434:	0c01      	lsrs	r1, r0, #16
 8001436:	fbb3 f7fe 	udiv	r7, r3, lr
 800143a:	fa1f f885 	uxth.w	r8, r5
 800143e:	fb0e 3317 	mls	r3, lr, r7, r3
 8001442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001446:	fb07 f308 	mul.w	r3, r7, r8
 800144a:	428b      	cmp	r3, r1
 800144c:	fa04 f402 	lsl.w	r4, r4, r2
 8001450:	d907      	bls.n	8001462 <__udivmoddi4+0x256>
 8001452:	1869      	adds	r1, r5, r1
 8001454:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001458:	d22f      	bcs.n	80014ba <__udivmoddi4+0x2ae>
 800145a:	428b      	cmp	r3, r1
 800145c:	d92d      	bls.n	80014ba <__udivmoddi4+0x2ae>
 800145e:	3f02      	subs	r7, #2
 8001460:	4429      	add	r1, r5
 8001462:	1acb      	subs	r3, r1, r3
 8001464:	b281      	uxth	r1, r0
 8001466:	fbb3 f0fe 	udiv	r0, r3, lr
 800146a:	fb0e 3310 	mls	r3, lr, r0, r3
 800146e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001472:	fb00 f308 	mul.w	r3, r0, r8
 8001476:	428b      	cmp	r3, r1
 8001478:	d907      	bls.n	800148a <__udivmoddi4+0x27e>
 800147a:	1869      	adds	r1, r5, r1
 800147c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001480:	d217      	bcs.n	80014b2 <__udivmoddi4+0x2a6>
 8001482:	428b      	cmp	r3, r1
 8001484:	d915      	bls.n	80014b2 <__udivmoddi4+0x2a6>
 8001486:	3802      	subs	r0, #2
 8001488:	4429      	add	r1, r5
 800148a:	1ac9      	subs	r1, r1, r3
 800148c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001490:	e73b      	b.n	800130a <__udivmoddi4+0xfe>
 8001492:	4637      	mov	r7, r6
 8001494:	4630      	mov	r0, r6
 8001496:	e709      	b.n	80012ac <__udivmoddi4+0xa0>
 8001498:	4607      	mov	r7, r0
 800149a:	e6e7      	b.n	800126c <__udivmoddi4+0x60>
 800149c:	4618      	mov	r0, r3
 800149e:	e6fb      	b.n	8001298 <__udivmoddi4+0x8c>
 80014a0:	4541      	cmp	r1, r8
 80014a2:	d2ab      	bcs.n	80013fc <__udivmoddi4+0x1f0>
 80014a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80014a8:	eb69 020e 	sbc.w	r2, r9, lr
 80014ac:	3801      	subs	r0, #1
 80014ae:	4613      	mov	r3, r2
 80014b0:	e7a4      	b.n	80013fc <__udivmoddi4+0x1f0>
 80014b2:	4660      	mov	r0, ip
 80014b4:	e7e9      	b.n	800148a <__udivmoddi4+0x27e>
 80014b6:	4618      	mov	r0, r3
 80014b8:	e795      	b.n	80013e6 <__udivmoddi4+0x1da>
 80014ba:	4667      	mov	r7, ip
 80014bc:	e7d1      	b.n	8001462 <__udivmoddi4+0x256>
 80014be:	4681      	mov	r9, r0
 80014c0:	e77c      	b.n	80013bc <__udivmoddi4+0x1b0>
 80014c2:	3802      	subs	r0, #2
 80014c4:	442c      	add	r4, r5
 80014c6:	e747      	b.n	8001358 <__udivmoddi4+0x14c>
 80014c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80014cc:	442b      	add	r3, r5
 80014ce:	e72f      	b.n	8001330 <__udivmoddi4+0x124>
 80014d0:	4638      	mov	r0, r7
 80014d2:	e708      	b.n	80012e6 <__udivmoddi4+0xda>
 80014d4:	4637      	mov	r7, r6
 80014d6:	e6e9      	b.n	80012ac <__udivmoddi4+0xa0>

080014d8 <__aeabi_idiv0>:
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <GetSequentialAverage>:
float ConvertRtoD(float fRadian)
{
    return fRadian * 180.0f / M_PI;
}
float GetSequentialAverage(float fLastAverage, float fData, uint32_t uiSamplingCnt)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
    return (fLastAverage * (float)uiSamplingCnt + fData) / ((float)uiSamplingCnt + 1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80014fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001518:	ee16 3a90 	vmov	r3, s13
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_ZN14BatteryMonitorC1Ef>:
};

const float BatteryMonitor::fGain = 3.3f * 3.0f;    /* Vref * (10k+20k)/10k */


BatteryMonitor::BatteryMonitor(float fFullVoltage)
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
{
    fVoltage = 0.0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
    fOffset = 0.0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
    fPercentage = 0.0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    bIsUpperError = false;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	741a      	strb	r2, [r3, #16]
    bIsLowerError = false;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	745a      	strb	r2, [r3, #17]
    this->fFullVoltage = fFullVoltage;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	609a      	str	r2, [r3, #8]

    if(!Adc1_IsStartConvert()){
 800155c:	f001 fdba 	bl	80030d4 <Adc1_IsStartConvert>
 8001560:	4603      	mov	r3, r0
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZN14BatteryMonitorC1Ef+0x48>
        Adc1_StartConvert();
 800156c:	f001 fd7c 	bl	8003068 <Adc1_StartConvert>
    }
}
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <_ZN14BatteryMonitor6UpdateEv>:
{

}

void BatteryMonitor::Update()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    if(fFullVoltage < 0.0){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edd3 7a02 	vldr	s15, [r3, #8]
 800158a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d444      	bmi.n	800161e <_ZN14BatteryMonitor6UpdateEv+0xa2>
        return;
    }

    fVoltage = fGain * Adc1_GetRateAdcChannelValue(DEF_ADC_CHANNEL_RANK) - fOffset;
 8001594:	2001      	movs	r0, #1
 8001596:	f001 fdd1 	bl	800313c <Adc1_GetRateAdcChannelValue>
 800159a:	ee07 0a10 	vmov	s14, r0
 800159e:	eddf 7a22 	vldr	s15, [pc, #136]	; 8001628 <_ZN14BatteryMonitor6UpdateEv+0xac>
 80015a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edc3 7a01 	vstr	s15, [r3, #4]
    fPercentage = fVoltage / fFullVoltage;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a02 	vldr	s14, [r3, #8]
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a03 	vstr	s15, [r3, #12]

    if(fVoltage < stThreshold.fLower){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800162c <_ZN14BatteryMonitor6UpdateEv+0xb0>
 80015d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d506      	bpl.n	80015ee <_ZN14BatteryMonitor6UpdateEv+0x72>
        bIsUpperError = false;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	741a      	strb	r2, [r3, #16]
        bIsLowerError = true;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	745a      	strb	r2, [r3, #17]
 80015ec:	e018      	b.n	8001620 <_ZN14BatteryMonitor6UpdateEv+0xa4>
    }else if(fVoltage > stThreshold.fUpper){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f4:	eeb2 7a01 	vmov.f32	s14, #33	; 0x41080000  8.5
 80015f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	dd06      	ble.n	8001610 <_ZN14BatteryMonitor6UpdateEv+0x94>
        bIsUpperError = true;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	741a      	strb	r2, [r3, #16]
        bIsLowerError = false;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	745a      	strb	r2, [r3, #17]
 800160e:	e007      	b.n	8001620 <_ZN14BatteryMonitor6UpdateEv+0xa4>
    }else{
        bIsUpperError = false;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	741a      	strb	r2, [r3, #16]
        bIsLowerError = false;   
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	745a      	strb	r2, [r3, #17]
 800161c:	e000      	b.n	8001620 <_ZN14BatteryMonitor6UpdateEv+0xa4>
        return;
 800161e:	bf00      	nop
    }
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	411e6666 	.word	0x411e6666
 800162c:	40e66666 	.word	0x40e66666

08001630 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_ZN5Blink9SetPeriodEmf>:
public:
    Blink(GPIO_TypeDef *pGPIOx, uint32_t ulOutputPin, uint32_t ulPeriodMs=1000);
    ~Blink();
    Blink(const Blink &other);

    void SetPeriod(uint32_t ulPeriodMs, float fOnPercentage=0.5){
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
        this->ulPeriodMs = ulPeriodMs;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	609a      	str	r2, [r3, #8]
        ulOnTimeMs = (uint32_t)((float)ulPeriodMs * fOnPercentage);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 2a90 	vmov	r2, s15
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	60da      	str	r2, [r3, #12]
        ulOffTimeMs = ulPeriodMs - ulOnTimeMs;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	611a      	str	r2, [r3, #16]
    }
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>:
#include "SystickTimer.h"

/*
 * Public member functions
 */
Blink::Blink(GPIO_TypeDef *pGPIOx, uint32_t ulOutputPin, uint32_t ulPeriodMs)
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	603b      	str	r3, [r7, #0]
{
    this->pGPIOx = pGPIOx;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	601a      	str	r2, [r3, #0]
    this->ulOutputPin = ulOutputPin;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
    ulOnTimeMs = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    ulOffTimeMs = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
    ulDelayTimeMs = 0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
    bStartState = false;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	761a      	strb	r2, [r3, #24]
    bNowState = false;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	765a      	strb	r2, [r3, #25]
    bOldState = false;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	769a      	strb	r2, [r3, #26]
    bFinishDelay = false;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	76da      	strb	r2, [r3, #27]
    bFirst = true;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	771a      	strb	r2, [r3, #28]
    bChangeStateFlag = false;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	775a      	strb	r2, [r3, #29]
    ulWaitTime = 0;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
    ulStartTimeMs = 0;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
    SetPeriod(ulPeriodMs);
 800170e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff ffa8 	bl	800166a <_ZN5Blink9SetPeriodEmf>
    SetState(false);
 800171a:	2100      	movs	r1, #0
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f898 	bl	8001852 <_ZN5Blink8SetStateEb>
}
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZN5Blink6UpdateEv>:
    this->ulStartTimeMs = other.ulStartTimeMs;
    this->ulWaitTime = other.ulWaitTime;
}

void Blink::Update()
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if(bFirst){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00d      	beq.n	8001758 <_ZN5Blink6UpdateEv+0x2c>
        bFirst = false;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
        bNowState = bStartState;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e1a      	ldrb	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	765a      	strb	r2, [r3, #25]
        ulStartTimeMs = SystickTimer_GetTimeMS();
 800174a:	f001 f81b 	bl	8002784 <SystickTimer_GetTimeMS>
 800174e:	4603      	mov	r3, r0
 8001750:	460c      	mov	r4, r1
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if(ulDelayTimeMs == 0 && !bFinishDelay){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <_ZN5Blink6UpdateEv+0x5c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7edb      	ldrb	r3, [r3, #27]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <_ZN5Blink6UpdateEv+0x5c>
        bFinishDelay = true;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	76da      	strb	r2, [r3, #27]
        bChangeStateFlag = true;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	775a      	strb	r2, [r3, #29]
        bOldState = !bNowState;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	769a      	strb	r2, [r3, #26]
    }

    if(!bFinishDelay){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7edb      	ldrb	r3, [r3, #27]
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01a      	beq.n	80017cc <_ZN5Blink6UpdateEv+0xa0>
        if(SystickTimer_IsTimeElapsed(ulStartTimeMs, ulDelayTimeMs)){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f04f 0400 	mov.w	r4, #0
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6952      	ldr	r2, [r2, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	f001 f804 	bl	80027b2 <SystickTimer_IsTimeElapsed>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d042      	beq.n	8001836 <_ZN5Blink6UpdateEv+0x10a>
            bFinishDelay = true;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	76da      	strb	r2, [r3, #27]
            ulStartTimeMs = SystickTimer_GetTimeMS();
 80017b6:	f000 ffe5 	bl	8002784 <SystickTimer_GetTimeMS>
 80017ba:	4603      	mov	r3, r0
 80017bc:	460c      	mov	r4, r1
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
            bChangeStateFlag = true;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	775a      	strb	r2, [r3, #29]
 80017ca:	e034      	b.n	8001836 <_ZN5Blink6UpdateEv+0x10a>
        }
    }else{
        /* 状態の変更 */
        if(bChangeStateFlag){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7f5b      	ldrb	r3, [r3, #29]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d019      	beq.n	8001808 <_ZN5Blink6UpdateEv+0xdc>
            bChangeStateFlag = false;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	775a      	strb	r2, [r3, #29]
            if(!bOldState){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e9b      	ldrb	r3, [r3, #26]
 80017de:	f083 0301 	eor.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <_ZN5Blink6UpdateEv+0xc6>
                ulWaitTime = ulOnTimeMs; 
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e003      	b.n	80017fa <_ZN5Blink6UpdateEv+0xce>
            }else{
                ulWaitTime = ulOffTimeMs;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	621a      	str	r2, [r3, #32]
            }
            bNowState = !bOldState;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7e9b      	ldrb	r3, [r3, #26]
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	765a      	strb	r2, [r3, #25]
        }

        if(SystickTimer_IsTimeElapsed(ulStartTimeMs, ulWaitTime)){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6a12      	ldr	r2, [r2, #32]
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f000 ffcb 	bl	80027b2 <SystickTimer_IsTimeElapsed>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <_ZN5Blink6UpdateEv+0x10a>
            ulStartTimeMs = SystickTimer_GetTimeMS();
 8001822:	f000 ffaf 	bl	8002784 <SystickTimer_GetTimeMS>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
            bChangeStateFlag = true;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	775a      	strb	r2, [r3, #29]
        }
    }

    SetState(bNowState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7e5b      	ldrb	r3, [r3, #25]
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f808 	bl	8001852 <_ZN5Blink8SetStateEb>
    bOldState = bNowState;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7e5a      	ldrb	r2, [r3, #25]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	769a      	strb	r2, [r3, #26]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <_ZN5Blink8SetStateEb>:

/*
 * Private member functions
 */
void Blink::SetState(bool bState)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
    if(true == bState){
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <_ZN5Blink8SetStateEb+0x24>
        LL_GPIO_SetOutputPin(pGPIOx, ulOutputPin);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f7ff fede 	bl	8001630 <LL_GPIO_SetOutputPin>
    }else{
        LL_GPIO_ResetOutputPin(pGPIOx, ulOutputPin);
    }
 8001874:	e007      	b.n	8001886 <_ZN5Blink8SetStateEb+0x34>
        LL_GPIO_ResetOutputPin(pGPIOx, ulOutputPin);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fee3 	bl	800164c <LL_GPIO_ResetOutputPin>
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <LL_GPIO_IsInputPinSet>:
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	401a      	ands	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_ZN6ButtonC1EP12GPIO_TypeDefm>:

/*
 * Public member functions
 */

Button::Button(GPIO_TypeDef *pGPIOx, uint32_t uiInputPin) {
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	// TODO Auto-generated constructor stub
	this->pGPIOx = pGPIOx;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	601a      	str	r2, [r3, #0]
	this->uiInputPin = uiInputPin;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

	uiPushCount = 0;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
	uiReleaseCount = 0;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
	uiPushFilterTimeMs = 0;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
	uiReleaseFilterTimeMs = 0;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
	bPushEdge = false;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	741a      	strb	r2, [r3, #16]
	bReleaseEdge = false;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	745a      	strb	r2, [r3, #17]
	bRawState = false;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	771a      	strb	r2, [r3, #28]
	bRawPushState = false;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	775a      	strb	r2, [r3, #29]
	bPushState = false;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	779a      	strb	r2, [r3, #30]
	bReverseEnable = false;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	77da      	strb	r2, [r3, #31]
	bPushStateOld = false;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2020 	strb.w	r2, [r3, #32]
	bFirstFlag = false;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ullPushFilterStartTimeMs = 0;
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	ullReleaseFilterStartTimeMs = 0;
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	f04f 0400 	mov.w	r4, #0
 8001934:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bc90      	pop	{r4, r7}
 8001942:	4770      	bx	lr

08001944 <_ZN6Button6UpdateEv>:

}


void Button::Update()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	bRawState = (bool)LL_GPIO_IsInputPinSet(pGPIOx, uiInputPin);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff ff99 	bl	800188e <LL_GPIO_IsInputPinSet>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2da      	uxtb	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	771a      	strb	r2, [r3, #28]

	if(bReverseEnable){
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7fdb      	ldrb	r3, [r3, #31]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d018      	beq.n	80019a6 <_ZN6Button6UpdateEv+0x62>
		bRawPushState  = !bRawState;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7f1b      	ldrb	r3, [r3, #28]
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	775a      	strb	r2, [r3, #29]
		if(!bFirstFlag){
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <_ZN6Button6UpdateEv+0x6a>
			bFirstFlag = true;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			bPushStateOld = bRawPushState;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7f5a      	ldrb	r2, [r3, #29]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]
 80019a4:	e003      	b.n	80019ae <_ZN6Button6UpdateEv+0x6a>
		}
	}else{
		bRawPushState = bRawState;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7f1a      	ldrb	r2, [r3, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	775a      	strb	r2, [r3, #29]
	}

	if((0u < uiPushFilterTimeMs) || (0u < uiReleaseFilterTimeMs)){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <_ZN6Button6UpdateEv+0x7a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <_ZN6Button6UpdateEv+0x82>
		ExecuteEdgeFilter();
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f841 	bl	8001a46 <_ZN6Button17ExecuteEdgeFilterEv>
 80019c4:	e003      	b.n	80019ce <_ZN6Button6UpdateEv+0x8a>
	}else{
		bPushState = bRawPushState;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7f5a      	ldrb	r2, [r3, #29]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	779a      	strb	r2, [r3, #30]
	}

	if(bPushStateOld != bPushState){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f9b      	ldrb	r3, [r3, #30]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d013      	beq.n	8001a04 <_ZN6Button6UpdateEv+0xc0>
		if(		bPushStateOld		//bPushStateOld = High
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <_ZN6Button6UpdateEv+0xb8>
			&& !bPushState){		//bPushState = Low
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f9b      	ldrb	r3, [r3, #30]
 80019ea:	f083 0301 	eor.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <_ZN6Button6UpdateEv+0xb8>
			bReleaseEdge = true;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	745a      	strb	r2, [r3, #17]
 80019fa:	e009      	b.n	8001a10 <_ZN6Button6UpdateEv+0xcc>
		}else{
			bPushEdge = true;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	741a      	strb	r2, [r3, #16]
 8001a02:	e005      	b.n	8001a10 <_ZN6Button6UpdateEv+0xcc>
		}
	}else{
		bPushEdge = false;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	741a      	strb	r2, [r3, #16]
		bReleaseEdge = false;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	745a      	strb	r2, [r3, #17]
	}

	if(bPushEdge){
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7c1b      	ldrb	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <_ZN6Button6UpdateEv+0xde>
		uiPushCount ++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
	}
	if(bReleaseEdge){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7c5b      	ldrb	r3, [r3, #17]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <_ZN6Button6UpdateEv+0xf0>
		uiReleaseCount ++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
	}

	bPushStateOld = bPushState;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f9a      	ldrb	r2, [r3, #30]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZN6Button17ExecuteEdgeFilterEv>:
/*
 * Private member functions
 */

void Button::ExecuteEdgeFilter()
{
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	if(bRawPushState && !bPushStateOld && !bPushFilterStartFlag){
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7f5b      	ldrb	r3, [r3, #29]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01b      	beq.n	8001a8e <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d013      	beq.n	8001a8e <_ZN6Button17ExecuteEdgeFilterEv+0x48>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <_ZN6Button17ExecuteEdgeFilterEv+0x48>
		bPushFilterStartFlag = true;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ullPushFilterStartTimeMs = SystickTimer_GetTimeMS();
 8001a7e:	f000 fe81 	bl	8002784 <SystickTimer_GetTimeMS>
 8001a82:	4603      	mov	r3, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001a8c:	e01e      	b.n	8001acc <_ZN6Button17ExecuteEdgeFilterEv+0x86>
	}else if(!bRawPushState && bPushStateOld && !bReleaseFilterStartFlag){
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f5b      	ldrb	r3, [r3, #29]
 8001a92:	f083 0301 	eor.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d017      	beq.n	8001acc <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <_ZN6Button17ExecuteEdgeFilterEv+0x86>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001aac:	f083 0301 	eor.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <_ZN6Button17ExecuteEdgeFilterEv+0x86>
		bReleaseFilterStartFlag = true;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		ullReleaseFilterStartTimeMs = SystickTimer_GetTimeMS();
 8001abe:	f000 fe61 	bl	8002784 <SystickTimer_GetTimeMS>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460c      	mov	r4, r1
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	}else{
		//do nothing
	}

	if(bPushFilterStartFlag){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d017      	beq.n	8001b06 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		if(SystickTimer_IsTimeElapsed(ullPushFilterStartTimeMs, uiPushFilterTimeMs)){
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6952      	ldr	r2, [r2, #20]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	f000 fe65 	bl	80027b2 <SystickTimer_IsTimeElapsed>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <_ZN6Button17ExecuteEdgeFilterEv+0xba>
			bPushFilterStartFlag = false;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			bPushState = bRawPushState;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7f5a      	ldrb	r2, [r3, #29]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	779a      	strb	r2, [r3, #30]
 8001afe:	e002      	b.n	8001b06 <_ZN6Button17ExecuteEdgeFilterEv+0xc0>
		}else{
			bPushState = false;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	779a      	strb	r2, [r3, #30]
		}
	}else{
		//do nothing
	}

	if(bReleaseFilterStartFlag){
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d017      	beq.n	8001b40 <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
		if(SystickTimer_IsTimeElapsed(ullReleaseFilterStartTimeMs, uiReleaseFilterTimeMs)){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6992      	ldr	r2, [r2, #24]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f000 fe48 	bl	80027b2 <SystickTimer_IsTimeElapsed>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <_ZN6Button17ExecuteEdgeFilterEv+0xf4>
			bReleaseFilterStartFlag = false;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			bPushState = bRawPushState;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7f5a      	ldrb	r2, [r3, #29]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	779a      	strb	r2, [r3, #30]
		}

	}else{
		//do nothing
	}
}
 8001b38:	e002      	b.n	8001b40 <_ZN6Button17ExecuteEdgeFilterEv+0xfa>
			bPushState = true;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	779a      	strb	r2, [r3, #30]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>:


	void CalcGyroOffset();


	int16_t ConvertHLDataTo16Bits(uint8_t ucHighData, uint8_t ucLowData){
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	70bb      	strb	r3, [r7, #2]
		return (((int16_t)ucHighData << 8) | ((int16_t)ucLowData));
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	78bb      	ldrb	r3, [r7, #2]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
	}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>:

	float ConvertRawDataToFloat(int16_t sRawData, float fScaleFactor){
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	817b      	strh	r3, [r7, #10]
		if(fScaleFactor == 0.0){
 8001b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d102      	bne.n	8001b96 <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x22>
			return 0.0;
 8001b90:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001bbc <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x48>
 8001b94:	e009      	b.n	8001baa <_ZN9ICM_2060221ConvertRawDataToFloatEsf+0x36>
		}
		return ((float)sRawData / fScaleFactor);		//value[LSB] / (LSB/unit) = unit
 8001b96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001baa:	ee16 3a90 	vmov	r3, s13
	}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <LL_GPIO_SetOutputPin>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_GPIO_ResetOutputPin>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d101      	bne.n	8001c78 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	b2db      	uxtb	r3, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	330c      	adds	r3, #12
 8001cb0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN9ICM_20602C1ENS_10CommMode_tE>:
/*
 * Public member function
 */

//Constructor
ICM_20602::ICM_20602(ICM_20602::CommMode_t enCommMode)
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
{
	this->enCommMode = enCommMode;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	701a      	strb	r2, [r3, #0]

	enGyroScaleMode = EN_GYRO_FULLSCALE_PM250DPS;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
	enAccelScaleMode = EN_ACCEL_FULLSCALE_PM2G;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	709a      	strb	r2, [r3, #2]
	bIsConnected = false;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	70da      	strb	r2, [r3, #3]

	ucGyroConfigValue		= 0x00;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	711a      	strb	r2, [r3, #4]
	ucAccelConfigValue		= 0x00;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	715a      	strb	r2, [r3, #5]
	ucAccelConfig2Value		= 0x00;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	719a      	strb	r2, [r3, #6]
	ucGyroConfigValueOld	= 0x00;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld	= 0x00;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld	= 0x00;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	725a      	strb	r2, [r3, #9]

	stGyroRawData.sValueX = 0x0000;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY = 0x0000;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ = 0x0000;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	81da      	strh	r2, [r3, #14]
	stAccelRawData.sValueX = 0x0000;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY = 0x0000;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ = 0x0000;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	829a      	strh	r2, [r3, #20]
	stGyroDPS.fValueX = 0.0f;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = 0.0f;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = 0.0f;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
	stAccelG.fValueX = 0.0f;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = 0.0f;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = 0.0f;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
	stGyroDeg.fValueX = 0.0f;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	669a      	str	r2, [r3, #104]	; 0x68
	stGyroDeg.fValueY = 0.0f;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	66da      	str	r2, [r3, #108]	; 0x6c
	stGyroDeg.fValueZ = 0.0f;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	671a      	str	r2, [r3, #112]	; 0x70
	uiGyroOffsetSamplingNum = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
	uiGyroOffsetSamplingCount = 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	649a      	str	r2, [r3, #72]	; 0x48
	uiSamplingTimeMs = 0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>:
{
	//do nothing
}

bool ICM_20602::SetSPIPort(SPI_TypeDef *pSPIx, GPIO_TypeDef *pSPI_CS_GPIOx, uint32_t SPI_CS_PINx)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
	if(ICM_20602::EN_COMM_MODE_SPI != enCommMode){
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x1a>
		return false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e01e      	b.n	8001df0 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}

	if(NULL == pSPIx){
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x24>
		return false;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e019      	b.n	8001df0 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPIx = pSPIx;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	675a      	str	r2, [r3, #116]	; 0x74

	if(NULL == pSPI_CS_GPIOx){
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x34>
		return false;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e011      	b.n	8001df0 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm+0x58>
	}
	this->pSPI_CS_GPIOx = pSPI_CS_GPIOx;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	679a      	str	r2, [r3, #120]	; 0x78
	this->ui_SPI_CS_PINx = SPI_CS_PINx;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	67da      	str	r2, [r3, #124]	; 0x7c

	LL_GPIO_SetOutputPin(this->pSPI_CS_GPIOx, this->ui_SPI_CS_PINx);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7ff feec 	bl	8001bc0 <LL_GPIO_SetOutputPin>
	LL_SPI_Disable(pSPIx);
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	f7ff ff16 	bl	8001c1a <LL_SPI_Disable>

	return true;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN9ICM_206025SetupEm>:
{
	return true;
}

void ICM_20602::Setup(uint32_t uiSamplingTimeMs)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	this->uiSamplingTimeMs = uiSamplingTimeMs;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
	SystickTimer_DelayMS(500);
 8001e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e0c:	f000 fcc6 	bl	800279c <SystickTimer_DelayMS>
	LL_SPI_Enable(pSPIx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fef0 	bl	8001bfa <LL_SPI_Enable>

	if(WHO_AM_I_VALUE == ReadRegister(EN_REG_ADDR_WHO_AM_I)){
 8001e1a:	2175      	movs	r1, #117	; 0x75
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb56 	bl	80024ce <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <_ZN9ICM_206025SetupEm+0x42>
		bIsConnected = true;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	70da      	strb	r2, [r3, #3]
 8001e38:	e002      	b.n	8001e40 <_ZN9ICM_206025SetupEm+0x48>
	}else{
		bIsConnected = false;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));

#endif
	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x80);	//b10000000 = Device Reset
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	216b      	movs	r1, #107	; 0x6b
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb22 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001e4a:	2032      	movs	r0, #50	; 0x32
 8001e4c:	f000 fca6 	bl	800279c <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_1, 0x01);	//b00000001 = Auto Selects the best available clock source
 8001e50:	2201      	movs	r2, #1
 8001e52:	216b      	movs	r1, #107	; 0x6b
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb1a 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f000 fc9e 	bl	800279c <SystickTimer_DelayMS>

	WriteRegister(EN_REG_ADDR_PWR_MGMT_2, 0x00);	//b00000000 = Gyro and Accelerometer are all enabled
 8001e60:	2200      	movs	r2, #0
 8001e62:	216c      	movs	r1, #108	; 0x6c
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fb12 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
	SystickTimer_DelayMS(50);
 8001e6a:	2032      	movs	r0, #50	; 0x32
 8001e6c:	f000 fc96 	bl	800279c <SystickTimer_DelayMS>

	//WriteRegister(EN_REG_ADDR_I2C_IF, 0x40);		//SPI mode only
	//SystickTimer_DelayMS(50);

	SetGyroFullScale(EN_GYRO_FULLSCALE_PM2000DPS);	//Set Gyro Full Scale : ±2000 dps
 8001e70:	2103      	movs	r1, #3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f958 	bl	8002128 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>
	SetAccelFullScale(EN_ACCEL_FULLSCALE_PM16G);	//Set Accel Full Scale : ±16 G
 8001e78:	2103      	movs	r1, #3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f97f 	bl	800217e <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>
	SetGyroConfig();	//Gyro FullScale
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fad7 	bl	8002434 <_ZN9ICM_2060213SetGyroConfigEv>
	SetAccelConfig();	//Accle FullScale
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fae3 	bl	8002452 <_ZN9ICM_2060214SetAccelConfigEv>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb>:

void ICM_20602::StartGyroOffestCalc(uint32_t uiSamplingNum, bool bCalcX, bool bCalcY, bool bCalcZ)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71bb      	strb	r3, [r7, #6]
	if(bCalcX || bCalcY || bCalcZ){
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x2a>
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x2a>
 8001eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x34>
		bGyroOffsetCalcStart = true;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec6:	e003      	b.n	8001ed0 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x3c>
	}else{
		bGyroOffsetCalcStart = false;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	uiGyroOffsetSamplingNum = uiSamplingNum;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
	bGyroOffsetCalcStartFlag[0] = bCalcX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bGyroOffsetCalcStartFlag[1] = bCalcY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	79ba      	ldrb	r2, [r7, #6]
 8001ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	bGyroOffsetCalcStartFlag[2] = bCalcZ;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d811      	bhi.n	8001f1a <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x86>
		bGyroOffsetCalcCompleted[ucCount] = !bGyroOffsetCalcStartFlag[ucCount];
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	f082 0201 	eor.w	r2, r2, #1
 8001f06:	b2d1      	uxtb	r1, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	3301      	adds	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	e7ea      	b.n	8001ef0 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb+0x5c>
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_ZN9ICM_2060221IsGyroOffsetCompletedEv>:
bool ICM_20602::IsGyroOffsetCompleted()
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	bool bResult = true;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001f32:	7bbb      	ldrb	r3, [r7, #14]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d80f      	bhi.n	8001f58 <_ZN9ICM_2060221IsGyroOffsetCompletedEv+0x32>
		bResult &= bGyroOffsetCalcCompleted[ucCount];
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	7bba      	ldrb	r2, [r7, #14]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	440a      	add	r2, r1
 8001f40:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t ucCount; ucCount < 3; ucCount ++){
 8001f50:	7bbb      	ldrb	r3, [r7, #14]
 8001f52:	3301      	adds	r3, #1
 8001f54:	73bb      	strb	r3, [r7, #14]
 8001f56:	e7ec      	b.n	8001f32 <_ZN9ICM_2060221IsGyroOffsetCompletedEv+0xc>
	}
	return bResult;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN9ICM_206026UpdateEv>:
bool ICM_20602::IsConnected()
{
	return bIsConnected;
}
void ICM_20602::Update()
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	uint8_t ucGyroRawDataHL[6] = {0x00};
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	809a      	strh	r2, [r3, #4]
	uint8_t ucAccelRawDataHL[6] = {0x00};
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	809a      	strh	r2, [r3, #4]

	if(ucGyroConfigValue != ucGyroConfigValueOld){
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	791a      	ldrb	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	79db      	ldrb	r3, [r3, #7]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d002      	beq.n	8001f94 <_ZN9ICM_206026UpdateEv+0x2e>
		SetGyroConfig();
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa50 	bl	8002434 <_ZN9ICM_2060213SetGyroConfigEv>
	}
	if(ucAccelConfigValue != ucAccelConfigValueOld){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	795a      	ldrb	r2, [r3, #5]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7a1b      	ldrb	r3, [r3, #8]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d002      	beq.n	8001fa6 <_ZN9ICM_206026UpdateEv+0x40>
		SetAccelConfig();
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fa56 	bl	8002452 <_ZN9ICM_2060214SetAccelConfigEv>
	}
	if(ucAccelConfig2Value != ucAccelConfig2ValueOld){
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	799a      	ldrb	r2, [r3, #6]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7a5b      	ldrb	r3, [r3, #9]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d002      	beq.n	8001fb8 <_ZN9ICM_206026UpdateEv+0x52>
		SetAccelConfig2();
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa5c 	bl	8002470 <_ZN9ICM_2060215SetAccelConfig2Ev>
	}

	//Read Gyro Raw Data
	ReadRegister(EN_REG_ADDR_GYRO_XOUT_H, ucGyroRawDataHL, 6);
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	2306      	movs	r3, #6
 8001fbe:	2143      	movs	r1, #67	; 0x43
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 faa5 	bl	8002510 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Read Accel Raw Data
	ReadRegister(EN_REG_ADDR_ACCEL_XOUT_H, ucAccelRawDataHL, 6);
 8001fc6:	f107 0208 	add.w	r2, r7, #8
 8001fca:	2306      	movs	r3, #6
 8001fcc:	213b      	movs	r1, #59	; 0x3b
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa9e 	bl	8002510 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>

	//Convert HL data to 16bits data
	stGyroRawData.sValueX	= ConvertHLDataTo16Bits(ucGyroRawDataHL[0], ucGyroRawDataHL[1]);
 8001fd4:	7c3b      	ldrb	r3, [r7, #16]
 8001fd6:	7c7a      	ldrb	r2, [r7, #17]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fdb4 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	815a      	strh	r2, [r3, #10]
	stGyroRawData.sValueY	= ConvertHLDataTo16Bits(ucGyroRawDataHL[2], ucGyroRawDataHL[3]);
 8001fe8:	7cbb      	ldrb	r3, [r7, #18]
 8001fea:	7cfa      	ldrb	r2, [r7, #19]
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fdaa 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	819a      	strh	r2, [r3, #12]
	stGyroRawData.sValueZ	= ConvertHLDataTo16Bits(ucGyroRawDataHL[4], ucGyroRawDataHL[5]);
 8001ffc:	7d3b      	ldrb	r3, [r7, #20]
 8001ffe:	7d7a      	ldrb	r2, [r7, #21]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fda0 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	81da      	strh	r2, [r3, #14]

	stAccelRawData.sValueX	= ConvertHLDataTo16Bits(ucAccelRawDataHL[0], ucAccelRawDataHL[1]);
 8002010:	7a3b      	ldrb	r3, [r7, #8]
 8002012:	7a7a      	ldrb	r2, [r7, #9]
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fd96 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	821a      	strh	r2, [r3, #16]
	stAccelRawData.sValueY	= ConvertHLDataTo16Bits(ucAccelRawDataHL[2], ucAccelRawDataHL[3]);
 8002024:	7abb      	ldrb	r3, [r7, #10]
 8002026:	7afa      	ldrb	r2, [r7, #11]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fd8c 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	825a      	strh	r2, [r3, #18]
	stAccelRawData.sValueZ	= ConvertHLDataTo16Bits(ucAccelRawDataHL[4], ucAccelRawDataHL[5]);
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	7b7a      	ldrb	r2, [r7, #13]
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fd82 	bl	8001b48 <_ZN9ICM_2060221ConvertHLDataTo16BitsEhh>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	829a      	strh	r2, [r3, #20]

	ScaleConvert();
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f97f 	bl	8002350 <_ZN9ICM_2060212ScaleConvertEv>

	if(bGyroOffsetCalcStart){
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d019      	beq.n	8002090 <_ZN9ICM_206026UpdateEv+0x12a>
		CalcGyroOffset();
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f90b 	bl	8002278 <_ZN9ICM_2060214CalcGyroOffsetEv>
		if(IsGyroOffsetCompleted()){
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff5f 	bl	8001f26 <_ZN9ICM_2060221IsGyroOffsetCompletedEv>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <_ZN9ICM_206026UpdateEv+0x110>
			bGyroOffsetCalcStart = false;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		stGyroDPSOffseted.fValueX = stGyroDPS.fValueX;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	651a      	str	r2, [r3, #80]	; 0x50
		stGyroDPSOffseted.fValueY = stGyroDPS.fValueY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
		stGyroDPSOffseted.fValueZ = stGyroDPS.fValueZ;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
 800208e:	e023      	b.n	80020d8 <_ZN9ICM_206026UpdateEv+0x172>
	}else{
		stGyroDPSOffseted.fValueX = stGyroDPS.fValueX - stGyroDPSOffsetValue.fValueX;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	ed93 7a06 	vldr	s14, [r3, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800209c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		stGyroDPSOffseted.fValueY = stGyroDPS.fValueY - stGyroDPSOffsetValue.fValueY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80020b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		stGyroDPSOffseted.fValueZ = stGyroDPS.fValueZ - stGyroDPSOffsetValue.fValueZ;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	ed93 7a08 	vldr	s14, [r3, #32]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		CalcGyroDeg();
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f87e 	bl	80021d4 <_ZN9ICM_2060211CalcGyroDegEv>
	}

	//Old Config Value update
	ucGyroConfigValueOld = ucGyroConfigValue;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	791a      	ldrb	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	71da      	strb	r2, [r3, #7]
	ucAccelConfigValueOld = ucAccelConfigValue;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	795a      	ldrb	r2, [r3, #5]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	721a      	strb	r2, [r3, #8]
	ucAccelConfig2ValueOld = ucAccelConfig2Value;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	799a      	ldrb	r2, [r3, #6]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	725a      	strb	r2, [r3, #9]

#ifdef DEBUG
	//printf("Who am I : 0x%x\n", ReadRegister(EN_REG_ADDR_WHO_AM_I));
#endif
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN9ICM_2060210GetGyroDPSEv>:

const ICM_20602::Coord_t& ICM_20602::GetGyroDPS()
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	return (const Coord_t&)stGyroDPSOffseted;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3350      	adds	r3, #80	; 0x50
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN9ICM_2060210GetGyroDegEv>:
{
	return (const RawData_t&)stAccelRawData;
}

const ICM_20602::Coord_t& ICM_20602::GetGyroDeg()
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	return (const Coord_t&)stGyroDeg;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3368      	adds	r3, #104	; 0x68
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE>:

//
void ICM_20602::SetGyroFullScale(GyroFullScaleMode_t enScaleMode)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_GYRO_FULLSCALE_PM250DPS || enScaleMode > EN_GYRO_FULLSCALE_PM2000DPS){
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d81b      	bhi.n	8002172 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4a>
		return;
	}

	enGyroScaleMode = enScaleMode;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	705a      	strb	r2, [r3, #1]

	if(EN_GYRO_FULLSCALE_PM250DPS == enGyroScaleMode){
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x30>
		ucGyroConfigValue = ucGyroConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	f023 0318 	bic.w	r3, r3, #24
 8002150:	b2da      	uxtb	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	711a      	strb	r2, [r3, #4]
 8002156:	e00d      	b.n	8002174 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
	}else{
		ucGyroConfigValue = ucGyroConfigValue | ((uint8_t)enGyroScaleMode << 3);	//3bitシフトし，OR
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	b25a      	sxtb	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b25b      	sxtb	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	711a      	strb	r2, [r3, #4]
 8002170:	e000      	b.n	8002174 <_ZN9ICM_2060216SetGyroFullScaleENS_19GyroFullScaleMode_tE+0x4c>
		return;
 8002172:	bf00      	nop
	}
}
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE>:

//
void ICM_20602::SetAccelFullScale(AccelFullScaleMode_t enScaleMode)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
	if(enScaleMode < EN_ACCEL_FULLSCALE_PM2G || enScaleMode > EN_ACCEL_FULLSCALE_PM16G){
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d81b      	bhi.n	80021c8 <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4a>
		return;
	}

	enAccelScaleMode = enScaleMode;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	709a      	strb	r2, [r3, #2]

	if(EN_ACCEL_FULLSCALE_PM2G == enAccelScaleMode){
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	789b      	ldrb	r3, [r3, #2]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x30>
		ucAccelConfigValue = ucAccelConfigValue & 0xE7;	//b11100111 : 3,4bitのみ0をAND
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	795b      	ldrb	r3, [r3, #5]
 80021a2:	f023 0318 	bic.w	r3, r3, #24
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	715a      	strb	r2, [r3, #5]
 80021ac:	e00d      	b.n	80021ca <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
	}else{
		ucAccelConfigValue = ucAccelConfigValue | ((uint8_t)enAccelScaleMode << 3);	//3bitシフトし，OR
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	b25a      	sxtb	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	789b      	ldrb	r3, [r3, #2]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	715a      	strb	r2, [r3, #5]
 80021c6:	e000      	b.n	80021ca <_ZN9ICM_2060217SetAccelFullScaleENS_20AccelFullScaleMode_tE+0x4c>
		return;
 80021c8:	bf00      	nop
	}
}
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_ZN9ICM_2060211CalcGyroDegEv>:

/*
 * Private member function
 */
void ICM_20602::CalcGyroDeg()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	stGyroDeg.fValueX += (stGyroDPSOffseted.fValueX * ((float)uiSamplingTimeMs / 1000.0f));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80021f4:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8002274 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 80021f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	stGyroDeg.fValueY += (stGyroDPSOffseted.fValueY * ((float)uiSamplingTimeMs / 1000.0f));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002222:	eddf 5a14 	vldr	s11, [pc, #80]	; 8002274 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 8002226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	stGyroDeg.fValueZ += (stGyroDPSOffseted.fValueZ * ((float)uiSamplingTimeMs / 1000.0f));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002250:	eddf 5a08 	vldr	s11, [pc, #32]	; 8002274 <_ZN9ICM_2060211CalcGyroDegEv+0xa0>
 8002254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	447a0000 	.word	0x447a0000

08002278 <_ZN9ICM_2060214CalcGyroOffsetEv>:


void ICM_20602::CalcGyroOffset()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	/* 一定時間Gyro値をサンプリングし，　その後平均値を計算 */
	if(uiGyroOffsetSamplingCount <= uiGyroOffsetSamplingNum){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	429a      	cmp	r2, r3
 800228a:	d844      	bhi.n	8002316 <_ZN9ICM_2060214CalcGyroOffsetEv+0x9e>
		uiGyroOffsetSamplingCount ++;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	649a      	str	r2, [r3, #72]	; 0x48
			
		if(true == bGyroOffsetCalcStartFlag[0]){
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00f      	beq.n	80022c0 <_ZN9ICM_2060214CalcGyroOffsetEv+0x48>
			bGyroOffsetCalcCompleted[0] = false;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			stGyroDPSOffsetValue.fValueX = GetSequentialAverage(stGyroDPSOffsetValue.fValueX, stGyroDPS.fValueX, uiGyroOffsetSamplingCount);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6999      	ldr	r1, [r3, #24]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff f911 	bl	80014dc <GetSequentialAverage>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c
		}

		if(true == bGyroOffsetCalcStartFlag[1]){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00f      	beq.n	80022ea <_ZN9ICM_2060214CalcGyroOffsetEv+0x72>
			bGyroOffsetCalcCompleted[1] = false;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			stGyroDPSOffsetValue.fValueY = GetSequentialAverage(stGyroDPSOffsetValue.fValueY, stGyroDPS.fValueY, uiGyroOffsetSamplingCount);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69d9      	ldr	r1, [r3, #28]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	461a      	mov	r2, r3
 80022e0:	f7ff f8fc 	bl	80014dc <GetSequentialAverage>
 80022e4:	4602      	mov	r2, r0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	661a      	str	r2, [r3, #96]	; 0x60
		}

		if(true == bGyroOffsetCalcStartFlag[2]){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d028      	beq.n	8002346 <_ZN9ICM_2060214CalcGyroOffsetEv+0xce>
			bGyroOffsetCalcCompleted[2] = false;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			stGyroDPSOffsetValue.fValueZ = GetSequentialAverage(stGyroDPSOffsetValue.fValueZ, stGyroDPS.fValueZ, uiGyroOffsetSamplingCount);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a19      	ldr	r1, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff f8e7 	bl	80014dc <GetSequentialAverage>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	665a      	str	r2, [r3, #100]	; 0x64
		/* 平均値を計算したのち，，オフセット計算終了フラグを立てる */
		bGyroOffsetCalcCompleted[0] = true;
		bGyroOffsetCalcCompleted[1] = true;
		bGyroOffsetCalcCompleted[2] = true;
	}
}
 8002314:	e017      	b.n	8002346 <_ZN9ICM_2060214CalcGyroOffsetEv+0xce>
		bGyroOffsetCalcStartFlag[0] = false;  /* x */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		bGyroOffsetCalcStartFlag[1] = false;  /* y */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		bGyroOffsetCalcStartFlag[2] = false;  /* z */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		bGyroOffsetCalcCompleted[0] = true;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		bGyroOffsetCalcCompleted[1] = true;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		bGyroOffsetCalcCompleted[2] = true;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <_ZN9ICM_2060212ScaleConvertEv>:

//
void ICM_20602::ScaleConvert()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	stGyroDPS.fValueX = ConvertRawDataToFloat(stGyroRawData.sValueX, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fc00 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
	stGyroDPS.fValueY = ConvertRawDataToFloat(stGyroRawData.sValueY, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	4a29      	ldr	r2, [pc, #164]	; (800242c <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fbef 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	61da      	str	r2, [r3, #28]
	stGyroDPS.fValueZ = ConvertRawDataToFloat(stGyroRawData.sValueZ, stGyroScale[enGyroScaleMode].fLSB_per_dps);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <_ZN9ICM_2060212ScaleConvertEv+0xdc>)
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fbde 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

	stAccelG.fValueX = ConvertRawDataToFloat(stAccelRawData.sValueX, stAccelScale[enAccelScaleMode].fLSB_per_G);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	789b      	ldrb	r3, [r3, #2]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fbcd 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
	stAccelG.fValueY = ConvertRawDataToFloat(stAccelRawData.sValueY, stAccelScale[enAccelScaleMode].fLSB_per_G);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	789b      	ldrb	r3, [r3, #2]
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fbbc 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
	stAccelG.fValueZ = ConvertRawDataToFloat(stAccelRawData.sValueZ, stAccelScale[enAccelScaleMode].fLSB_per_G);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	4a08      	ldr	r2, [pc, #32]	; (8002430 <_ZN9ICM_2060212ScaleConvertEv+0xe0>)
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fbab 	bl	8001b74 <_ZN9ICM_2060221ConvertRawDataToFloatEsf>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	08008b50 	.word	0x08008b50
 8002430:	08008b70 	.word	0x08008b70

08002434 <_ZN9ICM_2060213SetGyroConfigEv>:

//
void ICM_20602::SetGyroConfig()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_GYRO_CONFIG, ucGyroConfigValue);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	461a      	mov	r2, r3
 8002442:	211b      	movs	r1, #27
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f822 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_ZN9ICM_2060214SetAccelConfigEv>:

//
void ICM_20602::SetAccelConfig()
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG, ucAccelConfigValue);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	795b      	ldrb	r3, [r3, #5]
 800245e:	461a      	mov	r2, r3
 8002460:	211c      	movs	r1, #28
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f813 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN9ICM_2060215SetAccelConfig2Ev>:

//
void ICM_20602::SetAccelConfig2()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	WriteRegister(EN_REG_ADDR_ACCEL_CONFIG_2, ucAccelConfig2Value);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	799b      	ldrb	r3, [r3, #6]
 800247c:	461a      	mov	r2, r3
 800247e:	211d      	movs	r1, #29
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f804 	bl	800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh>:

//レジスタ書き込み（1バイト）
void ICM_20602::WriteRegister(ICM_20602::RegisterAddress_t enAddr, uint8_t ucWriteData)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af02      	add	r7, sp, #8
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	4613      	mov	r3, r2
 800249c:	70bb      	strb	r3, [r7, #2]
	switch(enCommMode){
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x1e>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00c      	beq.n	80024c4 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80024aa:	e00c      	b.n	80024c6 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		CommunicateSPIMode(EN_RW_MODE_WRITE, enAddr, &ucWriteData, NULL, 1);
 80024ac:	1cb9      	adds	r1, r7, #2
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	460b      	mov	r3, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f848 	bl	8002552 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 80024c2:	e000      	b.n	80024c6 <_ZN9ICM_2060213WriteRegisterENS_17RegisterAddress_tEh+0x38>
		break;
 80024c4:	bf00      	nop
	}
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE>:
	}
}


uint8_t ICM_20602::ReadRegister(ICM_20602::RegisterAddress_t enAddr)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucReadData = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
	switch(enCommMode){
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x1e>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d00c      	beq.n	8002504 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x36>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 80024ea:	e00c      	b.n	8002506 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		CommunicateSPIMode(EN_RW_MODE_READ, enAddr, NULL, &ucReadData, 1);
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f107 030f 	add.w	r3, r7, #15
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f828 	bl	8002552 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 8002502:	e000      	b.n	8002506 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tE+0x38>
		break;
 8002504:	bf00      	nop
	}
	return ucReadData;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht>:

void ICM_20602::ReadRegister(RegisterAddress_t enStartAddr, uint8_t *pReadData, uint16_t usLength)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	72fb      	strb	r3, [r7, #11]
 8002520:	4613      	mov	r3, r2
 8002522:	813b      	strh	r3, [r7, #8]
	switch(enCommMode){
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x22>
 800252c:	2b01      	cmp	r3, #1
 800252e:	d00b      	beq.n	8002548 <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x38>
		//TODO : 追加実装
		//CommunicateI2CMode(...);
		break;
	default:
		//do nothing
		break;
 8002530:	e00b      	b.n	800254a <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		CommunicateSPIMode(EN_RW_MODE_READ, enStartAddr, NULL, pReadData, usLength);
 8002532:	7afa      	ldrb	r2, [r7, #11]
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	2100      	movs	r1, #0
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f806 	bl	8002552 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>
		break;
 8002546:	e000      	b.n	800254a <_ZN9ICM_2060212ReadRegisterENS_17RegisterAddress_tEPht+0x3a>
		break;
 8002548:	bf00      	nop
	}
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t>:


//
//ref : https://garberas.com/archives/1542
void ICM_20602::CommunicateSPIMode(RW_Mode_t mode, RegisterAddress_t enStartAddr, uint8_t *pTxData, uint8_t *pRxData, uint16_t usDataLength)
{
 8002552:	b590      	push	{r4, r7, lr}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	72fb      	strb	r3, [r7, #11]
 8002560:	4613      	mov	r3, r2
 8002562:	72bb      	strb	r3, [r7, #10]
	uint16_t usCount = usDataLength;
 8002564:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002566:	82fb      	strh	r3, [r7, #22]
	uint8_t ucAddress = 0x00;
 8002568:	2300      	movs	r3, #0
 800256a:	757b      	strb	r3, [r7, #21]

	//Chip Select
	LL_GPIO_ResetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7ff fb30 	bl	8001bdc <LL_GPIO_ResetOutputPin>

	//MSB Setting
	switch(mode){
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x36>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x40>
		break;
	case EN_RW_MODE_WRITE:
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
		break;
	default:
		return;		//設定外のため，即Return
 8002586:	e082      	b.n	800268e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x13c>
		ucAddress = enStartAddr | 0x80;		//7bit目を1に設定
 8002588:	7abb      	ldrb	r3, [r7, #10]
 800258a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800258e:	757b      	strb	r3, [r7, #21]
		break;
 8002590:	e004      	b.n	800259c <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x4a>
		ucAddress = enStartAddr & 0x7F;		//7bit目を0に設定
 8002592:	7abb      	ldrb	r3, [r7, #10]
 8002594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002598:	757b      	strb	r3, [r7, #21]
		break;
 800259a:	bf00      	nop
		break;
	}

	//Address送信
	LL_SPI_TransmitData8(pSPIx, ucAddress);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	7d7a      	ldrb	r2, [r7, #21]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fb7b 	bl	8001ca0 <LL_SPI_TransmitData8>
	while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb56 	bl	8001c60 <LL_SPI_IsActiveFlag_TXE>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d000      	beq.n	80025c6 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
 80025c4:	e7f1      	b.n	80025aa <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x58>
	while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fb35 	bl	8001c3a <LL_SPI_IsActiveFlag_RXNE>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d000      	beq.n	80025e2 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x90>
 80025e0:	e7f1      	b.n	80025c6 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x74>
	LL_SPI_ReceiveData8(pSPIx); //Dummy Received
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fb4d 	bl	8001c86 <LL_SPI_ReceiveData8>

	//Data送受信
	while(0 < usCount){
 80025ec:	8afb      	ldrh	r3, [r7, #22]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d045      	beq.n	800267e <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x12c>
		//送信
		if(NULL != pTxData){
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xba>
			LL_SPI_TransmitData8(pSPIx, *pTxData++);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f7ff fb4b 	bl	8001ca0 <LL_SPI_TransmitData8>
 800260a:	e005      	b.n	8002618 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
		}else{
			LL_SPI_TransmitData8(pSPIx, 0x00);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fb44 	bl	8001ca0 <LL_SPI_TransmitData8>
		}
		while(RESET == LL_SPI_IsActiveFlag_TXE(pSPIx)){
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb1f 	bl	8001c60 <LL_SPI_IsActiveFlag_TXE>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d000      	beq.n	8002634 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
 8002632:	e7f1      	b.n	8002618 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xc6>
			//送信完了待ち（送信バッファが空でない時）
			//※必要ならTimeout処理
		}
		while(RESET == LL_SPI_IsActiveFlag_RXNE(pSPIx)){
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fafe 	bl	8001c3a <LL_SPI_IsActiveFlag_RXNE>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d000      	beq.n	8002650 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xfe>
 800264e:	e7f1      	b.n	8002634 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0xe2>
			//受信完了待ち（受信バッファが空の時）
			//※必要ならTimeout処理
		}
		//受信
		if(NULL != pRxData){
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x11a>
			*pRxData++ = LL_SPI_ReceiveData8(pSPIx);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800265a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800265c:	1c63      	adds	r3, r4, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	4610      	mov	r0, r2
 8002662:	f7ff fb10 	bl	8001c86 <LL_SPI_ReceiveData8>
 8002666:	4603      	mov	r3, r0
 8002668:	7023      	strb	r3, [r4, #0]
 800266a:	e004      	b.n	8002676 <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x124>
		}else{
			LL_SPI_ReceiveData8(pSPIx);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb08 	bl	8001c86 <LL_SPI_ReceiveData8>
		}
		usCount --;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	3b01      	subs	r3, #1
 800267a:	82fb      	strh	r3, [r7, #22]
	while(0 < usCount){
 800267c:	e7b6      	b.n	80025ec <_ZN9ICM_2060218CommunicateSPIModeENS_9RW_Mode_tENS_17RegisterAddress_tEPhS2_t+0x9a>
	}
	//Chip Deselect
	LL_GPIO_SetOutputPin(pSPI_CS_GPIOx, ui_SPI_CS_PINx);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff fa99 	bl	8001bc0 <LL_GPIO_SetOutputPin>
}
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}

08002694 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <LL_SYSTICK_EnableIT+0x1c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <LL_SYSTICK_EnableIT+0x1c>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <SystickTimer_Interrupt>:

#define SYSTICKTIMER_MS_PER_COUNT	(1)		//1Countが何msecかを定義(1ms以上)

//割り込み関数用タイマーカウント関数
void SystickTimer_Interrupt(void)
{
 80026b4:	b490      	push	{r4, r7}
 80026b6:	af00      	add	r7, sp, #0
	__u64SystickTimeCount += SYSTICKTIMER_MS_PER_COUNT;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <SystickTimer_Interrupt+0x20>)
 80026ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 80026be:	1c4b      	adds	r3, r1, #1
 80026c0:	f142 0400 	adc.w	r4, r2, #0
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <SystickTimer_Interrupt+0x20>)
 80026c6:	e9c2 3400 	strd	r3, r4, [r2]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc90      	pop	{r4, r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	200001f8 	.word	0x200001f8

080026d8 <SystickTimer_EnableInterrupt>:

//割り込み有効
void SystickTimer_EnableInterrupt(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 80026dc:	f7ff ffda 	bl	8002694 <LL_SYSTICK_EnableIT>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <SystickTimer_SetSamplingTime>:
	LL_SYSTICK_DisableIT();
}

//サンプリングタイムの設定
void SystickTimer_SetSamplingTime(uint16_t u16SamplingTimeMs)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
	if(0u == u16SamplingTimeMs){
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <SystickTimer_SetSamplingTime+0x18>
		//0指定の場合はデフォルト値を設定
		__u16SamplingTimeMs = SYSTICKTIMER_DEFAULT_SAMPLING_TIME_MS;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <SystickTimer_SetSamplingTime+0x2c>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	801a      	strh	r2, [r3, #0]
	}else{
		__u16SamplingTimeMs = u16SamplingTimeMs;
	}
}
 80026fa:	e002      	b.n	8002702 <SystickTimer_SetSamplingTime+0x1e>
		__u16SamplingTimeMs = u16SamplingTimeMs;
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <SystickTimer_SetSamplingTime+0x2c>)
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	8013      	strh	r3, [r2, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200001f4 	.word	0x200001f4

08002714 <SystickTimer_IsSamplingTimeElapsed>:
//サンプリングタイムの経過判定
bool SystickTimer_IsSamplingTimeElapsed(void)
{
 8002714:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
	//常に0以下の場合はFalseを即Return
	if(__u64SystickTimeCount <= 0u){
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 800271e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002722:	4323      	orrs	r3, r4
 8002724:	d101      	bne.n	800272a <SystickTimer_IsSamplingTimeElapsed+0x16>
		return false;
 8002726:	2300      	movs	r3, #0
 8002728:	e020      	b.n	800276c <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	static uint64_t u64LastTimeMs = 0;
	uint64_t u64CurrentTimeMs = __u64SystickTimeCount;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <SystickTimer_IsSamplingTimeElapsed+0x64>)
 800272c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002730:	e9c7 3400 	strd	r3, r4, [r7]

	if(__u16SamplingTimeMs <= u64CurrentTimeMs - u64LastTimeMs){
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <SystickTimer_IsSamplingTimeElapsed+0x68>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 8002740:	e9d2 bc00 	ldrd	fp, ip, [r2]
 8002744:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002748:	4629      	mov	r1, r5
 800274a:	4632      	mov	r2, r6
 800274c:	ebb1 010b 	subs.w	r1, r1, fp
 8002750:	eb62 020c 	sbc.w	r2, r2, ip
 8002754:	42a2      	cmp	r2, r4
 8002756:	bf08      	it	eq
 8002758:	4299      	cmpeq	r1, r3
 800275a:	d306      	bcc.n	800276a <SystickTimer_IsSamplingTimeElapsed+0x56>
		u64LastTimeMs = u64CurrentTimeMs;
 800275c:	4a08      	ldr	r2, [pc, #32]	; (8002780 <SystickTimer_IsSamplingTimeElapsed+0x6c>)
 800275e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002762:	e9c2 3400 	strd	r3, r4, [r2]
		return true;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <SystickTimer_IsSamplingTimeElapsed+0x58>
	}
	return false;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8002776:	4770      	bx	lr
 8002778:	200001f8 	.word	0x200001f8
 800277c:	200001f4 	.word	0x200001f4
 8002780:	20000200 	.word	0x20000200

08002784 <SystickTimer_GetTimeMS>:

//起動時からの時間取得 [ms]
uint64_t SystickTimer_GetTimeMS(void)
{
 8002784:	b490      	push	{r4, r7}
 8002786:	af00      	add	r7, sp, #0
	return __u64SystickTimeCount;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <SystickTimer_GetTimeMS+0x14>)
 800278a:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800278e:	4618      	mov	r0, r3
 8002790:	4621      	mov	r1, r4
 8002792:	46bd      	mov	sp, r7
 8002794:	bc90      	pop	{r4, r7}
 8002796:	4770      	bx	lr
 8002798:	200001f8 	.word	0x200001f8

0800279c <SystickTimer_DelayMS>:

//遅延 [ms]
void SystickTimer_DelayMS(uint32_t u32DelayMs)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	LL_mDelay(u32DelayMs);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f003 fdbb 	bl	8006320 <LL_mDelay>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <SystickTimer_IsTimeElapsed>:

//指定時間経過
bool SystickTimer_IsTimeElapsed(uint64_t u64StartTimeMs ,uint32_t u32IntervalMs)
{
 80027b2:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
	if((uint64_t)u32IntervalMs <= SystickTimer_GetTimeMS() - u64StartTimeMs){
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	461c      	mov	r4, r3
 80027c4:	f04f 0500 	mov.w	r5, #0
 80027c8:	f7ff ffdc 	bl	8002784 <SystickTimer_GetTimeMS>
 80027cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d0:	1a80      	subs	r0, r0, r2
 80027d2:	eb61 0103 	sbc.w	r1, r1, r3
 80027d6:	4683      	mov	fp, r0
 80027d8:	468c      	mov	ip, r1
 80027da:	45ac      	cmp	ip, r5
 80027dc:	bf08      	it	eq
 80027de:	45a3      	cmpeq	fp, r4
 80027e0:	d301      	bcc.n	80027e6 <SystickTimer_IsTimeElapsed+0x34>
		return true;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <SystickTimer_IsTimeElapsed+0x36>
	}
	return false;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}
	...

080027f4 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80027f4:	b490      	push	{r4, r7}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80027fe:	2400      	movs	r4, #0
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <LL_ADC_DMA_GetRegAddr+0x1a>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	334c      	adds	r3, #76	; 0x4c
 800280a:	461c      	mov	r4, r3
 800280c:	e000      	b.n	8002810 <LL_ADC_DMA_GetRegAddr+0x1c>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 800280e:	4c03      	ldr	r4, [pc, #12]	; (800281c <LL_ADC_DMA_GetRegAddr+0x28>)
  }
  
  return data_reg_addr;
 8002810:	4623      	mov	r3, r4
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bc90      	pop	{r4, r7}
 800281a:	4770      	bx	lr
 800281c:	40012308 	.word	0x40012308

08002820 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_RES));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800283c:	b490      	push	{r4, r7}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	332c      	adds	r3, #44	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002858:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	fa92 f2a2 	rbit	r2, r2
 8002860:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	40d3      	lsrs	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002872:	6822      	ldr	r2, [r4, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	211f      	movs	r1, #31
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 011f 	and.w	r1, r3, #31
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bc90      	pop	{r4, r7}
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	330c      	adds	r3, #12
 80028d8:	4619      	mov	r1, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	fa92 f2a2 	rbit	r2, r2
 80028ec:	613a      	str	r2, [r7, #16]
  return result;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	40d3      	lsrs	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002906:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800290a:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	69f9      	ldr	r1, [r7, #28]
 800290e:	fa91 f1a1 	rbit	r1, r1
 8002912:	61b9      	str	r1, [r7, #24]
  return result;
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	fab1 f181 	clz	r1, r1
 800291a:	b2c9      	uxtb	r1, r1
 800291c:	40cb      	lsrs	r3, r1
 800291e:	2107      	movs	r1, #7
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800292e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002932:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002936:	fa91 f1a1 	rbit	r1, r1
 800293a:	6239      	str	r1, [r7, #32]
  return result;
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	fab1 f181 	clz	r1, r1
 8002942:	b2c9      	uxtb	r1, r1
 8002944:	40cb      	lsrs	r3, r1
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc90      	pop	{r4, r7}
 8002958:	4770      	bx	lr

0800295a <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40023800 	.word	0x40023800

080029cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80029d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4313      	orrs	r3, r2
 80029de:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80029e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40023800 	.word	0x40023800

080029fc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <LL_DMA_EnableStream+0x3c>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <LL_DMA_EnableStream+0x3c>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	440a      	add	r2, r1
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	08008b90 	.word	0x08008b90

08002a3c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <LL_DMA_DisableStream+0x3c>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <LL_DMA_DisableStream+0x3c>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	440a      	add	r2, r1
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	08008b90 	.word	0x08008b90

08002a7c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <LL_DMA_SetDataTransferDirection+0x44>)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a9c:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <LL_DMA_SetDataTransferDirection+0x44>)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	440b      	add	r3, r1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	08008b90 	.word	0x08008b90

08002ac4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <LL_DMA_SetMode+0x44>)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8002ae4:	4908      	ldr	r1, [pc, #32]	; (8002b08 <LL_DMA_SetMode+0x44>)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	440b      	add	r3, r1
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	440b      	add	r3, r1
 8002af2:	4619      	mov	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	08008b90 	.word	0x08008b90

08002b0c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <LL_DMA_SetPeriphIncMode+0x44>)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b2c:	4908      	ldr	r1, [pc, #32]	; (8002b50 <LL_DMA_SetPeriphIncMode+0x44>)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	440b      	add	r3, r1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	440b      	add	r3, r1
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	08008b90 	.word	0x08008b90

08002b54 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b74:	4908      	ldr	r1, [pc, #32]	; (8002b98 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	440b      	add	r3, r1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	440b      	add	r3, r1
 8002b82:	4619      	mov	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	08008b90 	.word	0x08008b90

08002b9c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <LL_DMA_SetPeriphSize+0x44>)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002bbc:	4908      	ldr	r1, [pc, #32]	; (8002be0 <LL_DMA_SetPeriphSize+0x44>)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	440b      	add	r3, r1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	440b      	add	r3, r1
 8002bca:	4619      	mov	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08008b90 	.word	0x08008b90

08002be4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <LL_DMA_SetMemorySize+0x44>)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002c04:	4908      	ldr	r1, [pc, #32]	; (8002c28 <LL_DMA_SetMemorySize+0x44>)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	440b      	add	r3, r1
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	440b      	add	r3, r1
 8002c12:	4619      	mov	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	08008b90 	.word	0x08008b90

08002c2c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4c:	4908      	ldr	r1, [pc, #32]	; (8002c70 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	440b      	add	r3, r1
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	440b      	add	r3, r1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08008b90 	.word	0x08008b90

08002c74 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <LL_DMA_SetDataLength+0x44>)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4413      	add	r3, r2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <LL_DMA_SetDataLength+0x44>)
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	440a      	add	r2, r1
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	08008b90 	.word	0x08008b90

08002cbc <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <LL_DMA_SetChannelSelection+0x44>)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002cdc:	4908      	ldr	r1, [pc, #32]	; (8002d00 <LL_DMA_SetChannelSelection+0x44>)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	440b      	add	r3, r1
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	440b      	add	r3, r1
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	08008b90 	.word	0x08008b90

08002d04 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <LL_DMA_DisableFifoMode+0x3c>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <LL_DMA_DisableFifoMode+0x3c>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	440a      	add	r2, r1
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	4611      	mov	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	440a      	add	r2, r1
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6153      	str	r3, [r2, #20]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	08008b90 	.word	0x08008b90

08002d44 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d114      	bne.n	8002d82 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <LL_DMA_ConfigAddresses+0x74>)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <LL_DMA_ConfigAddresses+0x74>)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8002d80:	e013      	b.n	8002daa <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <LL_DMA_ConfigAddresses+0x74>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LL_DMA_ConfigAddresses+0x74>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	60d3      	str	r3, [r2, #12]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08008b90 	.word	0x08008b90

08002dbc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <LL_DMA_EnableIT_TC+0x3c>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <LL_DMA_EnableIT_TC+0x3c>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	440a      	add	r2, r1
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	440a      	add	r2, r1
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	6013      	str	r3, [r2, #0]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	08008b90 	.word	0x08008b90

08002dfc <MX_ADC1_Init>:
static bool Adc_IsValidReadSize(uint8_t ucStartRank, uint8_t ucRequestSize, uint8_t ucChannelSize, uint8_t *pSize);
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b092      	sub	sp, #72	; 0x48
 8002e00:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002e02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e40:	f7ff fdc4 	bl	80029cc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff fda9 	bl	800299c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7ff fda6 	bl	800299c <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = BAT_MONI_Pin|WALL_SEN0_Pin|WALL_SEN1_Pin;
 8002e50:	23d0      	movs	r3, #208	; 0xd0
 8002e52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002e54:	2303      	movs	r3, #3
 8002e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4853      	ldr	r0, [pc, #332]	; (8002fb0 <MX_ADC1_Init+0x1b4>)
 8002e62:	f002 f95a 	bl	800511a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = WALL_SEN2_Pin|WALL_SEN3_Pin;
 8002e66:	2303      	movs	r3, #3
 8002e68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	463b      	mov	r3, r7
 8002e74:	4619      	mov	r1, r3
 8002e76:	484f      	ldr	r0, [pc, #316]	; (8002fb4 <MX_ADC1_Init+0x1b8>)
 8002e78:	f002 f94f 	bl	800511a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	484d      	ldr	r0, [pc, #308]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002e82:	f7ff ff1b 	bl	8002cbc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	484b      	ldr	r0, [pc, #300]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002e8c:	f7ff fdf6 	bl	8002a7c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8002e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e94:	2100      	movs	r1, #0
 8002e96:	4848      	ldr	r0, [pc, #288]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002e98:	f7ff fec8 	bl	8002c2c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8002e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4845      	ldr	r0, [pc, #276]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002ea4:	f7ff fe0e 	bl	8002ac4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4842      	ldr	r0, [pc, #264]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002eae:	f7ff fe2d 	bl	8002b0c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8002eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	483f      	ldr	r0, [pc, #252]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002eba:	f7ff fe4b 	bl	8002b54 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8002ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	483c      	ldr	r0, [pc, #240]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002ec6:	f7ff fe69 	bl	8002b9c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8002eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4839      	ldr	r0, [pc, #228]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002ed2:	f7ff fe87 	bl	8002be4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4837      	ldr	r0, [pc, #220]	; (8002fb8 <MX_ADC1_Init+0x1bc>)
 8002eda:	f7ff ff13 	bl	8002d04 <LL_DMA_DisableFifoMode>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002eec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4832      	ldr	r0, [pc, #200]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002ef4:	f001 ff9e 	bl	8004e34 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8002efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002f06:	2302      	movs	r3, #2
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f14:	4619      	mov	r1, r3
 8002f16:	4829      	ldr	r0, [pc, #164]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f18:	f001 ffb8 	bl	8004e8c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4827      	ldr	r0, [pc, #156]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f20:	f7ff fcbf 	bl	80028a2 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f28:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002f2e:	f107 0318 	add.w	r3, r7, #24
 8002f32:	4619      	mov	r1, r3
 8002f34:	4822      	ldr	r0, [pc, #136]	; (8002fc0 <MX_ADC1_Init+0x1c4>)
 8002f36:	f001 ff35 	bl	8004da4 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <MX_ADC1_Init+0x1c8>)
 8002f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f40:	481e      	ldr	r0, [pc, #120]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f42:	f7ff fc7b 	bl	800283c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002f46:	2207      	movs	r2, #7
 8002f48:	491e      	ldr	r1, [pc, #120]	; (8002fc4 <MX_ADC1_Init+0x1c8>)
 8002f4a:	481c      	ldr	r0, [pc, #112]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f4c:	f7ff fcbc 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <MX_ADC1_Init+0x1cc>)
 8002f52:	f240 2105 	movw	r1, #517	; 0x205
 8002f56:	4819      	ldr	r0, [pc, #100]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f58:	f7ff fc70 	bl	800283c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <MX_ADC1_Init+0x1cc>)
 8002f60:	4816      	ldr	r0, [pc, #88]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f62:	f7ff fcb1 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_7);
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <MX_ADC1_Init+0x1d0>)
 8002f68:	f240 210a 	movw	r1, #522	; 0x20a
 8002f6c:	4813      	ldr	r0, [pc, #76]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f6e:	f7ff fc65 	bl	800283c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002f72:	2207      	movs	r2, #7
 8002f74:	4915      	ldr	r1, [pc, #84]	; (8002fcc <MX_ADC1_Init+0x1d0>)
 8002f76:	4811      	ldr	r0, [pc, #68]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f78:	f7ff fca6 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_8);
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <MX_ADC1_Init+0x1d4>)
 8002f7e:	f240 210f 	movw	r1, #527	; 0x20f
 8002f82:	480e      	ldr	r0, [pc, #56]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f84:	f7ff fc5a 	bl	800283c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4911      	ldr	r1, [pc, #68]	; (8002fd0 <MX_ADC1_Init+0x1d4>)
 8002f8c:	480b      	ldr	r0, [pc, #44]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f8e:	f7ff fc9b 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_9);
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <MX_ADC1_Init+0x1d8>)
 8002f94:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002f98:	4808      	ldr	r0, [pc, #32]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002f9a:	f7ff fc4f 	bl	800283c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_480CYCLES);
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <MX_ADC1_Init+0x1d8>)
 8002fa2:	4806      	ldr	r0, [pc, #24]	; (8002fbc <MX_ADC1_Init+0x1c0>)
 8002fa4:	f7ff fc90 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>

}
 8002fa8:	bf00      	nop
 8002faa:	3748      	adds	r7, #72	; 0x48
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40026400 	.word	0x40026400
 8002fbc:	40012000 	.word	0x40012000
 8002fc0:	40012300 	.word	0x40012300
 8002fc4:	02c00004 	.word	0x02c00004
 8002fc8:	03200006 	.word	0x03200006
 8002fcc:	03500007 	.word	0x03500007
 8002fd0:	03800008 	.word	0x03800008
 8002fd4:	03b00009 	.word	0x03b00009

08002fd8 <Adc_IsValidReadChannel>:

/* USER CODE BEGIN 1 */
static bool Adc_IsValidReadChannel(uint8_t ucRequestRank, uint8_t ucChannelSize)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	71fb      	strb	r3, [r7, #7]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	71bb      	strb	r3, [r7, #6]
  if(ucRequestRank <= 0 || ucRequestRank > ucChannelSize){
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <Adc_IsValidReadChannel+0x1e>
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d901      	bls.n	8002ffa <Adc_IsValidReadChannel+0x22>
    return false;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <Adc_IsValidReadChannel+0x24>
  }
  return true;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <Adc_IsValidReadSize>:

static bool Adc_IsValidReadSize(uint8_t ucStartRank, uint8_t ucRequestSize, uint8_t ucChannelSize, uint8_t *pSize)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	460b      	mov	r3, r1
 8003016:	71bb      	strb	r3, [r7, #6]
 8003018:	4613      	mov	r3, r2
 800301a:	717b      	strb	r3, [r7, #5]
  if(!Adc_IsValidReadChannel(ucStartRank, ucChannelSize)){
 800301c:	797a      	ldrb	r2, [r7, #5]
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffd8 	bl	8002fd8 <Adc_IsValidReadChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <Adc_IsValidReadSize+0x30>
    return false;
 8003034:	2300      	movs	r3, #0
 8003036:	e013      	b.n	8003060 <Adc_IsValidReadSize+0x58>
  }

  if(ucRequestSize > ucChannelSize - (ucStartRank-1)){
 8003038:	79ba      	ldrb	r2, [r7, #6]
 800303a:	7979      	ldrb	r1, [r7, #5]
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	3b01      	subs	r3, #1
 8003040:	1acb      	subs	r3, r1, r3
 8003042:	429a      	cmp	r2, r3
 8003044:	dd08      	ble.n	8003058 <Adc_IsValidReadSize+0x50>
    *pSize = ucChannelSize - (ucStartRank-1);
 8003046:	797a      	ldrb	r2, [r7, #5]
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e002      	b.n	800305e <Adc_IsValidReadSize+0x56>
  }else{
    *pSize = ucRequestSize;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	79ba      	ldrb	r2, [r7, #6]
 800305c:	701a      	strb	r2, [r3, #0]
  }

  return true;
 800305e:	2301      	movs	r3, #1
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <Adc1_StartConvert>:

void Adc1_StartConvert(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af02      	add	r7, sp, #8
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_0);
 800306e:	2100      	movs	r1, #0
 8003070:	4814      	ldr	r0, [pc, #80]	; (80030c4 <Adc1_StartConvert+0x5c>)
 8003072:	f7ff fea3 	bl	8002dbc <LL_DMA_EnableIT_TC>
  LL_ADC_Enable(ADC1);
 8003076:	4814      	ldr	r0, [pc, #80]	; (80030c8 <Adc1_StartConvert+0x60>)
 8003078:	f7ff fc6f 	bl	800295a <LL_ADC_Enable>
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_0);
 800307c:	2100      	movs	r1, #0
 800307e:	4811      	ldr	r0, [pc, #68]	; (80030c4 <Adc1_StartConvert+0x5c>)
 8003080:	f7ff fcdc 	bl	8002a3c <LL_DMA_DisableStream>
  LL_DMA_ConfigAddresses( DMA2, //DMA Channel
 8003084:	2100      	movs	r1, #0
 8003086:	4810      	ldr	r0, [pc, #64]	; (80030c8 <Adc1_StartConvert+0x60>)
 8003088:	f7ff fbb4 	bl	80027f4 <LL_ADC_DMA_GetRegAddr>
 800308c:	4601      	mov	r1, r0
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <Adc1_StartConvert+0x64>)
 8003090:	2300      	movs	r3, #0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	460a      	mov	r2, r1
 8003098:	2100      	movs	r1, #0
 800309a:	480a      	ldr	r0, [pc, #40]	; (80030c4 <Adc1_StartConvert+0x5c>)
 800309c:	f7ff fe52 	bl	8002d44 <LL_DMA_ConfigAddresses>
                          LL_DMA_STREAM_0, //DMA Stream
                          LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), //ADC Register(Source) 
                          (uint32_t)&g_usAdc1Value, //Destination
                          LL_DMA_DIRECTION_PERIPH_TO_MEMORY //Direction
                          ); 
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, ADC1_CHANNEL_NUM);
 80030a0:	2205      	movs	r2, #5
 80030a2:	2100      	movs	r1, #0
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <Adc1_StartConvert+0x5c>)
 80030a6:	f7ff fde5 	bl	8002c74 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 80030aa:	2100      	movs	r1, #0
 80030ac:	4805      	ldr	r0, [pc, #20]	; (80030c4 <Adc1_StartConvert+0x5c>)
 80030ae:	f7ff fca5 	bl	80029fc <LL_DMA_EnableStream>
  LL_ADC_REG_StartConversionSWStart(ADC1);
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <Adc1_StartConvert+0x60>)
 80030b4:	f7ff fc61 	bl	800297a <LL_ADC_REG_StartConversionSWStart>
  g_bAdc1Start = true;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <Adc1_StartConvert+0x68>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40026400 	.word	0x40026400
 80030c8:	40012000 	.word	0x40012000
 80030cc:	20000218 	.word	0x20000218
 80030d0:	20000208 	.word	0x20000208

080030d4 <Adc1_IsStartConvert>:

bool Adc1_IsStartConvert(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return g_bAdc1Start;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <Adc1_IsStartConvert+0x14>)
 80030da:	781b      	ldrb	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000208 	.word	0x20000208

080030ec <Adc1_GetAdcValues>:
  }
  return g_usAdc1Value[ucChannelRank-1];
}

void Adc1_GetAdcValues(uint16_t *pValue, uint8_t ucStartChannelRank, uint8_t ucRequestSize)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	4613      	mov	r3, r2
 80030fa:	70bb      	strb	r3, [r7, #2]
  uint8_t ucSize = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
  if(!Adc_IsValidReadSize(ucStartChannelRank, ucRequestSize, ADC1_CHANNEL_NUM, &ucSize)){
 8003100:	f107 030f 	add.w	r3, r7, #15
 8003104:	78b9      	ldrb	r1, [r7, #2]
 8003106:	78f8      	ldrb	r0, [r7, #3]
 8003108:	2205      	movs	r2, #5
 800310a:	f7ff ff7d 	bl	8003008 <Adc_IsValidReadSize>
 800310e:	4603      	mov	r3, r0
 8003110:	f083 0301 	eor.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <Adc1_GetAdcValues+0x44>
    return;
  }
  memcpy(pValue, &g_usAdc1Value[ucStartChannelRank-1], ucSize);
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	3b01      	subs	r3, #1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4a05      	ldr	r2, [pc, #20]	; (8003138 <Adc1_GetAdcValues+0x4c>)
 8003122:	4413      	add	r3, r2
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f003 f9a3 	bl	8006474 <memcpy>
 800312e:	e000      	b.n	8003132 <Adc1_GetAdcValues+0x46>
    return;
 8003130:	bf00      	nop
}
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000218 	.word	0x20000218

0800313c <Adc1_GetRateAdcChannelValue>:

float Adc1_GetRateAdcChannelValue(uint8_t ucChannelRank)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if(!Adc_IsValidReadChannel(ucChannelRank, ADC1_CHANNEL_NUM)){
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2105      	movs	r1, #5
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff44 	bl	8002fd8 <Adc_IsValidReadChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	f083 0301 	eor.w	r3, r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <Adc1_GetRateAdcChannelValue+0x26>
    return 0.0;
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e017      	b.n	8003192 <Adc1_GetRateAdcChannelValue+0x56>
  }
  uint16_t uiResolutionValue = Adc_GetResolutionValue(ADC1);
 8003162:	480e      	ldr	r0, [pc, #56]	; (800319c <Adc1_GetRateAdcChannelValue+0x60>)
 8003164:	f000 f868 	bl	8003238 <Adc_GetResolutionValue>
 8003168:	4603      	mov	r3, r0
 800316a:	81fb      	strh	r3, [r7, #14]
  float fValue = (float)g_usAdc1Value[ucChannelRank-1] / (float)(uiResolutionValue);
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	3b01      	subs	r3, #1
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <Adc1_GetRateAdcChannelValue+0x64>)
 8003172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800318c:	edc7 7a02 	vstr	s15, [r7, #8]
  return fValue;
 8003190:	68bb      	ldr	r3, [r7, #8]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40012000 	.word	0x40012000
 80031a0:	20000218 	.word	0x20000218

080031a4 <Adc1_GetRateAdcValues>:

void Adc1_GetRateAdcValues(float *pValue, uint8_t ucStartChannelRank, uint8_t ucRequestSize)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
 80031b0:	4613      	mov	r3, r2
 80031b2:	70bb      	strb	r3, [r7, #2]
  uint16_t uiResolutionValue = Adc_GetResolutionValue(ADC1);
 80031b4:	481e      	ldr	r0, [pc, #120]	; (8003230 <Adc1_GetRateAdcValues+0x8c>)
 80031b6:	f000 f83f 	bl	8003238 <Adc_GetResolutionValue>
 80031ba:	4603      	mov	r3, r0
 80031bc:	817b      	strh	r3, [r7, #10]

  uint8_t ucSize = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	727b      	strb	r3, [r7, #9]
  if(!Adc_IsValidReadSize(ucStartChannelRank, ucRequestSize, ADC1_CHANNEL_NUM, &ucSize)){
 80031c2:	f107 0309 	add.w	r3, r7, #9
 80031c6:	78b9      	ldrb	r1, [r7, #2]
 80031c8:	78f8      	ldrb	r0, [r7, #3]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f7ff ff1c 	bl	8003008 <Adc_IsValidReadSize>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d124      	bne.n	8003226 <Adc1_GetRateAdcValues+0x82>
    return;
  }
  uint16_t *pAdcValue = &g_usAdc1Value[ucStartChannelRank-1];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	3b01      	subs	r3, #1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <Adc1_GetRateAdcValues+0x90>)
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  while(ucSize > 0){
 80031e8:	e019      	b.n	800321e <Adc1_GetRateAdcValues+0x7a>
    *pValue = (float)(*pAdcValue) / (float)(uiResolutionValue);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edc3 7a00 	vstr	s15, [r3]
    pValue ++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	607b      	str	r3, [r7, #4]
    pAdcValue ++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3302      	adds	r3, #2
 8003214:	60fb      	str	r3, [r7, #12]
    ucSize --;
 8003216:	7a7b      	ldrb	r3, [r7, #9]
 8003218:	3b01      	subs	r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	727b      	strb	r3, [r7, #9]
  while(ucSize > 0){
 800321e:	7a7b      	ldrb	r3, [r7, #9]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e2      	bne.n	80031ea <Adc1_GetRateAdcValues+0x46>
 8003224:	e000      	b.n	8003228 <Adc1_GetRateAdcValues+0x84>
    return;
 8003226:	bf00      	nop
  }
}
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40012000 	.word	0x40012000
 8003234:	20000218 	.word	0x20000218

08003238 <Adc_GetResolutionValue>:

uint16_t Adc_GetResolutionValue(ADC_TypeDef *ADCx)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t uiResolution = LL_ADC_GetResolution(ADCx);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff faed 	bl	8002820 <LL_ADC_GetResolution>
 8003246:	60b8      	str	r0, [r7, #8]
  uint16_t uiResolutionValue = 0x0FFF;
 8003248:	f640 73ff 	movw	r3, #4095	; 0xfff
 800324c:	81fb      	strh	r3, [r7, #14]
  switch(uiResolution) {
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003254:	d010      	beq.n	8003278 <Adc_GetResolutionValue+0x40>
 8003256:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325a:	d802      	bhi.n	8003262 <Adc_GetResolutionValue+0x2a>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <Adc_GetResolutionValue+0x38>
  case LL_ADC_RESOLUTION_6B:
    uiResolutionValue = 0x003F;
    break;
  default:
    /* do nothing */
    break;
 8003260:	e014      	b.n	800328c <Adc_GetResolutionValue+0x54>
  switch(uiResolution) {
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d00b      	beq.n	8003280 <Adc_GetResolutionValue+0x48>
 8003268:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800326c:	d00b      	beq.n	8003286 <Adc_GetResolutionValue+0x4e>
    break;
 800326e:	e00d      	b.n	800328c <Adc_GetResolutionValue+0x54>
    uiResolutionValue = 0x0FFF;
 8003270:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003274:	81fb      	strh	r3, [r7, #14]
    break;
 8003276:	e009      	b.n	800328c <Adc_GetResolutionValue+0x54>
    uiResolutionValue = 0x03FF;
 8003278:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800327c:	81fb      	strh	r3, [r7, #14]
    break;
 800327e:	e005      	b.n	800328c <Adc_GetResolutionValue+0x54>
    uiResolutionValue = 0x00FF;
 8003280:	23ff      	movs	r3, #255	; 0xff
 8003282:	81fb      	strh	r3, [r7, #14]
    break;
 8003284:	e002      	b.n	800328c <Adc_GetResolutionValue+0x54>
    uiResolutionValue = 0x003F;
 8003286:	233f      	movs	r3, #63	; 0x3f
 8003288:	81fb      	strh	r3, [r7, #14]
    break;
 800328a:	bf00      	nop
  }
  return uiResolutionValue;
 800328c:	89fb      	ldrh	r3, [r7, #14]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <MX_DMA_Init+0x4c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <MX_DMA_Init+0x4c>)
 80033bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <MX_DMA_Init+0x4c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033ce:	f7ff ff63 	bl	8003298 <__NVIC_GetPriorityGrouping>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2200      	movs	r2, #0
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ffb3 	bl	8003344 <NVIC_EncodePriority>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	2038      	movs	r0, #56	; 0x38
 80033e4:	f7ff ff84 	bl	80032f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80033e8:	2038      	movs	r0, #56	; 0x38
 80033ea:	f7ff ff63 	bl	80032b4 <__NVIC_EnableIRQ>

}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <LL_AHB1_GRP1_EnableClock>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003408:	4907      	ldr	r1, [pc, #28]	; (8003428 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800341a:	68fb      	ldr	r3, [r7, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40023800 	.word	0x40023800

0800342c <LL_GPIO_ResetOutputPin>:
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	619a      	str	r2, [r3, #24]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003452:	463b      	mov	r3, r7
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
 8003460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003462:	2004      	movs	r0, #4
 8003464:	f7ff ffca 	bl	80033fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003468:	2001      	movs	r0, #1
 800346a:	f7ff ffc7 	bl	80033fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800346e:	2002      	movs	r0, #2
 8003470:	f7ff ffc4 	bl	80033fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003474:	2008      	movs	r0, #8
 8003476:	f7ff ffc1 	bl	80033fc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 800347a:	f24e 311f 	movw	r1, #58143	; 0xe31f
 800347e:	4839      	ldr	r0, [pc, #228]	; (8003564 <MX_GPIO_Init+0x118>)
 8003480:	f7ff ffd4 	bl	800342c <LL_GPIO_ResetOutputPin>
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin);
 8003484:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003488:	4837      	ldr	r0, [pc, #220]	; (8003568 <MX_GPIO_Init+0x11c>)
 800348a:	f7ff ffcf 	bl	800342c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BUZZER_GPIO_Port, BUZZER_Pin);
 800348e:	2104      	movs	r1, #4
 8003490:	4836      	ldr	r0, [pc, #216]	; (800356c <MX_GPIO_Init+0x120>)
 8003492:	f7ff ffcb 	bl	800342c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	4835      	ldr	r0, [pc, #212]	; (8003570 <MX_GPIO_Init+0x124>)
 800349a:	f7ff ffc7 	bl	800342c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DBG_LED0_Pin|DBG_LED1_Pin|DBG_LED2_Pin|WALL_LED0_Pin
 800349e:	f24e 331f 	movw	r3, #58143	; 0xe31f
 80034a2:	603b      	str	r3, [r7, #0]
                          |WALL_LED1_Pin|WALL_LED2_Pin|WALL_LED3_Pin|TICK_LED_Pin
                          |MOTOR_R_DIR1_Pin|MOTOR_R_DIR0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80034a4:	2301      	movs	r3, #1
 80034a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b4:	463b      	mov	r3, r7
 80034b6:	4619      	mov	r1, r3
 80034b8:	482a      	ldr	r0, [pc, #168]	; (8003564 <MX_GPIO_Init+0x118>)
 80034ba:	f001 fe2e 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 80034be:	2320      	movs	r3, #32
 80034c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 80034ca:	463b      	mov	r3, r7
 80034cc:	4619      	mov	r1, r3
 80034ce:	4825      	ldr	r0, [pc, #148]	; (8003564 <MX_GPIO_Init+0x118>)
 80034d0:	f001 fe23 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 80034d4:	2304      	movs	r3, #4
 80034d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80034dc:	2301      	movs	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80034e0:	463b      	mov	r3, r7
 80034e2:	4619      	mov	r1, r3
 80034e4:	4822      	ldr	r0, [pc, #136]	; (8003570 <MX_GPIO_Init+0x124>)
 80034e6:	f001 fe18 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_L_DIR1_Pin|MOTOR_L_DIR0_Pin|MOTOR_STBY_Pin;
 80034ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80034f0:	2301      	movs	r3, #1
 80034f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	463b      	mov	r3, r7
 8003502:	4619      	mov	r1, r3
 8003504:	4818      	ldr	r0, [pc, #96]	; (8003568 <MX_GPIO_Init+0x11c>)
 8003506:	f001 fe08 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800350a:	2304      	movs	r3, #4
 800350c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800350e:	2301      	movs	r3, #1
 8003510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800351e:	463b      	mov	r3, r7
 8003520:	4619      	mov	r1, r3
 8003522:	4812      	ldr	r0, [pc, #72]	; (800356c <MX_GPIO_Init+0x120>)
 8003524:	f001 fdf9 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8003528:	2340      	movs	r3, #64	; 0x40
 800352a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800352c:	2301      	movs	r3, #1
 800352e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800353c:	463b      	mov	r3, r7
 800353e:	4619      	mov	r1, r3
 8003540:	480b      	ldr	r0, [pc, #44]	; (8003570 <MX_GPIO_Init+0x124>)
 8003542:	f001 fdea 	bl	800511a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003552:	463b      	mov	r3, r7
 8003554:	4619      	mov	r1, r3
 8003556:	4806      	ldr	r0, [pc, #24]	; (8003570 <MX_GPIO_Init+0x124>)
 8003558:	f001 fddf 	bl	800511a <LL_GPIO_Init>

}
 800355c:	bf00      	nop
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40020800 	.word	0x40020800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40020400 	.word	0x40020400

08003574 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60da      	str	r2, [r3, #12]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60da      	str	r2, [r3, #12]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <LL_AHB1_GRP1_EnableClock>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40023800 	.word	0x40023800

0800362c <LL_APB1_GRP1_EnableClock>:
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003638:	4907      	ldr	r1, [pc, #28]	; (8003658 <LL_APB1_GRP1_EnableClock+0x2c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4013      	ands	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40023800 	.word	0x40023800

0800365c <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	463b      	mov	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	611a      	str	r2, [r3, #16]
 8003682:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003684:	2002      	movs	r0, #2
 8003686:	f7ff ffb9 	bl	80035fc <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800368a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800368e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003690:	2302      	movs	r3, #2
 8003692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003698:	2301      	movs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800369c:	2301      	movs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80036a0:	2304      	movs	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	463b      	mov	r3, r7
 80036a6:	4619      	mov	r1, r3
 80036a8:	4815      	ldr	r0, [pc, #84]	; (8003700 <MX_I2C2_Init+0xa4>)
 80036aa:	f001 fd36 	bl	800511a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80036ae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80036b2:	f7ff ffbb 	bl	800362c <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80036b6:	4813      	ldr	r0, [pc, #76]	; (8003704 <MX_I2C2_Init+0xa8>)
 80036b8:	f7ff ff8f 	bl	80035da <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80036bc:	4811      	ldr	r0, [pc, #68]	; (8003704 <MX_I2C2_Init+0xa8>)
 80036be:	f7ff ff69 	bl	8003594 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80036c2:	4810      	ldr	r0, [pc, #64]	; (8003704 <MX_I2C2_Init+0xa8>)
 80036c4:	f7ff ff56 	bl	8003574 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_I2C2_Init+0xac>)
 80036ce:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80036de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80036e4:	f107 0318 	add.w	r3, r7, #24
 80036e8:	4619      	mov	r1, r3
 80036ea:	4806      	ldr	r0, [pc, #24]	; (8003704 <MX_I2C2_Init+0xa8>)
 80036ec:	f001 fe7c 	bl	80053e8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 80036f0:	2100      	movs	r1, #0
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <MX_I2C2_Init+0xa8>)
 80036f4:	f7ff ff5e 	bl	80035b4 <LL_I2C_SetOwnAddress2>

}
 80036f8:	bf00      	nop
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020400 	.word	0x40020400
 8003704:	40005800 	.word	0x40005800
 8003708:	000186a0 	.word	0x000186a0

0800370c <__NVIC_SetPriorityGrouping>:
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60d3      	str	r3, [r2, #12]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <LL_RCC_HSI_Enable+0x1c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <LL_RCC_HSI_Enable+0x1c>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <LL_RCC_HSI_IsReady+0x20>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40023800 	.word	0x40023800

08003798 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <LL_RCC_SetSysClkSource+0x24>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4904      	ldr	r1, [pc, #16]	; (80037e8 <LL_RCC_SetSysClkSource+0x24>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40023800 	.word	0x40023800

080037ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <LL_RCC_GetSysClkSource+0x18>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <LL_RCC_SetAHBPrescaler+0x24>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <LL_RCC_SetAHBPrescaler+0x24>)
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40023800 	.word	0x40023800

08003830 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <LL_RCC_SetAPB1Prescaler+0x24>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40023800 	.word	0x40023800

08003858 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <LL_RCC_SetAPB2Prescaler+0x24>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40023800 	.word	0x40023800

08003880 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <LL_RCC_PLL_Enable+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <LL_RCC_PLL_Enable+0x1c>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800

080038a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <LL_RCC_PLL_IsReady+0x24>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80038dc:	4013      	ands	r3, r2
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	0192      	lsls	r2, r2, #6
 80038e8:	430a      	orrs	r2, r1
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4904      	ldr	r1, [pc, #16]	; (800390c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40023800 	.word	0x40023800
 8003910:	ffbf8000 	.word	0xffbf8000

08003914 <LL_APB1_GRP1_EnableClock>:
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <LL_APB1_GRP1_EnableClock+0x2c>)
 800391e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4907      	ldr	r1, [pc, #28]	; (8003940 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <LL_APB1_GRP1_EnableClock+0x2c>)
 800392a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40023800 	.word	0x40023800

08003944 <LL_APB2_GRP1_EnableClock>:
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800394e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4907      	ldr	r1, [pc, #28]	; (8003970 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800395a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003962:	68fb      	ldr	r3, [r7, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40023800 	.word	0x40023800

08003974 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <LL_FLASH_SetLatency+0x24>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 020f 	bic.w	r2, r3, #15
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4904      	ldr	r1, [pc, #16]	; (8003998 <LL_FLASH_SetLatency+0x24>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40023c00 	.word	0x40023c00

0800399c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <LL_FLASH_GetLatency+0x18>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00

080039b8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40007000 	.word	0x40007000

080039e0 <_ZN6Button14SetPushReverseEb>:
	void SetEdgeFilter(uint32_t uiPushFilterTimeMs = 10, uint32_t uiReleaseFilterTimeMs = 10){
		SetPushEdgeFilter(uiPushFilterTimeMs);
		SetReleaseEdgeFilter(uiReleaseFilterTimeMs);
	}

	void SetPushReverse(bool bReverseEnable = true){
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
		this->bReverseEnable = bReverseEnable;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	77da      	strb	r2, [r3, #31]
	}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZN6Button11IsPushCountEv>:

	bool IsPush(){
		return bPushState;
	}

	uint32_t IsPushCount(){
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
		return uiPushCount;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
	}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <_ZN6Button13IsReleaseEdgeEv>:
		uiReleaseCount = 0;
	}
	bool IsPushEdge(){
		return bPushEdge;
	}
	bool IsReleaseEdge(){
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
		return bReleaseEdge;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7c5b      	ldrb	r3, [r3, #17]
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_ZN6Button10ResetCountEv>:

	void ResetCount(){
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
		uiPushCount = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
		uiReleaseCount = 0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
	}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <_ZN5Blink9SetOnTimeEm>:

    void SetOnTime(uint32_t ulOnTimeMs){
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
        this->ulOnTimeMs = ulOnTimeMs;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	60da      	str	r2, [r3, #12]
    }
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <_ZN5Blink10SetOffTimeEm>:
    void SetOffTime(uint32_t ulOffTimeMs){
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
        this->ulOffTimeMs = ulOffTimeMs;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	611a      	str	r2, [r3, #16]
    }
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZN5Blink17SetStartDelayTimeEm>:
    void SetStartDelayTime(uint32_t ulDelayTimeMs){
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
        this->ulDelayTimeMs = ulDelayTimeMs;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	615a      	str	r2, [r3, #20]
    }
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <_ZN5Blink13SetStartStateEb>:
    void SetStartState(bool bState){
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	70fb      	strb	r3, [r7, #3]
        this->bStartState = bState;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	761a      	strb	r2, [r3, #24]
    }
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZN5Blink3OffEv>:
    void On(){
        bNowState = true;
        bChangeStateFlag = false;
    }
    void Off(){
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
        bNowState = false;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	765a      	strb	r2, [r3, #25]
        bChangeStateFlag = false;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	775a      	strb	r2, [r3, #29]
    }
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_ZN14BatteryMonitor10GetVoltageEv>:
    ~BatteryMonitor();

    void SetOffset(float fOffset){
        this->fOffset = fOffset;
    }
    float GetVoltage(){
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
        return fVoltage;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
    }
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8003b00:	af0c      	add	r7, sp, #48	; 0x30

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003b02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b06:	f7ff ff1d 	bl	8003944 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003b0a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b0e:	f7ff ff01 	bl	8003914 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b12:	2003      	movs	r0, #3
 8003b14:	f7ff fdfa 	bl	800370c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b18:	f000 f9e4 	bl	8003ee4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b1c:	f7ff fc96 	bl	800344c <MX_GPIO_Init>
  MX_DMA_Init();
 8003b20:	f7ff fc44 	bl	80033ac <MX_DMA_Init>
  MX_ADC1_Init();
 8003b24:	f7ff f96a 	bl	8002dfc <MX_ADC1_Init>
  MX_I2C2_Init();
 8003b28:	f7ff fd98 	bl	800365c <MX_I2C2_Init>
  MX_SPI1_Init();
 8003b2c:	f000 fa8a 	bl	8004044 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003b30:	f000 fe38 	bl	80047a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003b34:	f000 fede 	bl	80048f4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003b38:	f000 ff78 	bl	8004a2c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8003b3c:	f001 f868 	bl	8004c10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SystickTimer_EnableInterrupt();
 8003b40:	f7fe fdca 	bl	80026d8 <SystickTimer_EnableInterrupt>
  SystickTimer_SetSamplingTime(2u);
 8003b44:	2002      	movs	r0, #2
 8003b46:	f7fe fdcd 	bl	80026e4 <SystickTimer_SetSamplingTime>

  Button Sw[2] = {
    Button(SW0_GPIO_Port, SW0_Pin),
    Button(SW1_GPIO_Port, SW1_Pin),
  };
 8003b4a:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8003b4e:	2220      	movs	r2, #32
 8003b50:	49dd      	ldr	r1, [pc, #884]	; (8003ec8 <main+0x3d0>)
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7fd feb0 	bl	80018b8 <_ZN6ButtonC1EP12GPIO_TypeDefm>
 8003b58:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	49db      	ldr	r1, [pc, #876]	; (8003ecc <main+0x3d4>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fea9 	bl	80018b8 <_ZN6ButtonC1EP12GPIO_TypeDefm>
  Sw[0].SetPushReverse();
 8003b66:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff37 	bl	80039e0 <_ZN6Button14SetPushReverseEb>
  Sw[1].SetPushReverse();
 8003b72:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003b76:	3338      	adds	r3, #56	; 0x38
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff30 	bl	80039e0 <_ZN6Button14SetPushReverseEb>
  Blink TickLed(TICK_LED_GPIO_Port, TICK_LED_Pin, 1000);
 8003b80:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8003b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b88:	2210      	movs	r2, #16
 8003b8a:	49cf      	ldr	r1, [pc, #828]	; (8003ec8 <main+0x3d0>)
 8003b8c:	f7fd fd91 	bl	80016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>
  TickLed.SetStartState(false);
 8003b90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff83 	bl	8003aa2 <_ZN5Blink13SetStartStateEb>

  Blink DbgLed[3] = {
    Blink(DBG_LED0_GPIO_Port, DBG_LED0_Pin),
    Blink(DBG_LED1_GPIO_Port, DBG_LED1_Pin),
    Blink(DBG_LED2_GPIO_Port, DBG_LED2_Pin)
  };
 8003b9c:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8003ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ba8:	49c7      	ldr	r1, [pc, #796]	; (8003ec8 <main+0x3d0>)
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fd fd81 	bl	80016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>
 8003bb0:	3428      	adds	r4, #40	; 0x28
 8003bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bba:	49c3      	ldr	r1, [pc, #780]	; (8003ec8 <main+0x3d0>)
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7fd fd78 	bl	80016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>
 8003bc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bce:	49be      	ldr	r1, [pc, #760]	; (8003ec8 <main+0x3d0>)
 8003bd0:	f7fd fd6f 	bl	80016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>
  
  Blink Buzzer(BUZZER_GPIO_Port, BUZZER_Pin, 1000);
 8003bd4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bdc:	2204      	movs	r2, #4
 8003bde:	49bc      	ldr	r1, [pc, #752]	; (8003ed0 <main+0x3d8>)
 8003be0:	f7fd fd67 	bl	80016b2 <_ZN5BlinkC1EP12GPIO_TypeDefmm>
  Buzzer.Off();
 8003be4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff69 	bl	8003ac0 <_ZN5Blink3OffEv>
  
  for(uint8_t ucCount = 0; ucCount < sizeof(DbgLed)/sizeof(Blink); ucCount++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 8003bf4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d831      	bhi.n	8003c60 <main+0x168>
    DbgLed[ucCount].SetOnTime(250);
 8003bfc:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8003c00:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	21fa      	movs	r1, #250	; 0xfa
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff1c 	bl	8003a4e <_ZN5Blink9SetOnTimeEm>
    DbgLed[ucCount].SetOffTime(500);
 8003c16:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8003c1a:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	440b      	add	r3, r1
 8003c28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff1c 	bl	8003a6a <_ZN5Blink10SetOffTimeEm>
    DbgLed[ucCount].SetStartDelayTime(250*ucCount);
 8003c32:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8003c36:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	18c8      	adds	r0, r1, r3
 8003c44:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8003c48:	22fa      	movs	r2, #250	; 0xfa
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f7ff ff19 	bl	8003a86 <_ZN5Blink17SetStartDelayTimeEm>
  for(uint8_t ucCount = 0; ucCount < sizeof(DbgLed)/sizeof(Blink); ucCount++){
 8003c54:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 8003c5e:	e7c9      	b.n	8003bf4 <main+0xfc>
  }
  DbgLed[0].SetStartState(true);
 8003c60:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff1b 	bl	8003aa2 <_ZN5Blink13SetStartStateEb>
  DbgLed[1].SetStartState(false);
 8003c6c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c70:	3328      	adds	r3, #40	; 0x28
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff14 	bl	8003aa2 <_ZN5Blink13SetStartStateEb>
  DbgLed[2].SetStartState(false);
 8003c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c7e:	3350      	adds	r3, #80	; 0x50
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff0d 	bl	8003aa2 <_ZN5Blink13SetStartStateEb>
  
  BatteryMonitor BatteryMoni;
 8003c88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c8c:	4991      	ldr	r1, [pc, #580]	; (8003ed4 <main+0x3dc>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fc4a 	bl	8001528 <_ZN14BatteryMonitorC1Ef>
  ICM_20602 IMU(ICM_20602::EN_COMM_MODE_SPI);
 8003c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f812 	bl	8001cc4 <_ZN9ICM_20602C1ENS_10CommMode_tE>
  IMU.SetSPIPort(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin);
 8003ca0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003ca4:	2340      	movs	r3, #64	; 0x40
 8003ca6:	4a89      	ldr	r2, [pc, #548]	; (8003ecc <main+0x3d4>)
 8003ca8:	498b      	ldr	r1, [pc, #556]	; (8003ed8 <main+0x3e0>)
 8003caa:	f7fe f875 	bl	8001d98 <_ZN9ICM_2060210SetSPIPortEP11SPI_TypeDefP12GPIO_TypeDefm>
  IMU.StartGyroOffestCalc(2000, true, true, true);
 8003cae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cbe:	f7fe f8e9 	bl	8001e94 <_ZN9ICM_2060219StartGyroOffestCalcEmbbb>
  IMU.Setup(2);
 8003cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe f895 	bl	8001df8 <_ZN9ICM_206025SetupEm>

  uint64_t ullDebugTimeMs = SystickTimer_GetTimeMS();
 8003cce:	f7fe fd59 	bl	8002784 <SystickTimer_GetTimeMS>
 8003cd2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003cd6:	e9c3 0100 	strd	r0, r1, [r3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(SystickTimer_IsSamplingTimeElapsed()){
 8003cda:	f7fe fd1b 	bl	8002714 <SystickTimer_IsSamplingTimeElapsed>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0fa      	beq.n	8003cda <main+0x1e2>
		  Sw[0].Update();
 8003ce4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fe2b 	bl	8001944 <_ZN6Button6UpdateEv>
      Sw[1].Update();
 8003cee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003cf2:	3338      	adds	r3, #56	; 0x38
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd fe25 	bl	8001944 <_ZN6Button6UpdateEv>
      BatteryMoni.Update();
 8003cfa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd fc3c 	bl	800157c <_ZN14BatteryMonitor6UpdateEv>
      IMU.Update();
 8003d04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe f92c 	bl	8001f66 <_ZN9ICM_206026UpdateEv>
      
      if(Sw[1].IsReleaseEdge()){
 8003d0e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003d12:	3338      	adds	r3, #56	; 0x38
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fe7e 	bl	8003a16 <_ZN6Button13IsReleaseEdgeEv>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <main+0x232>
        Sw[0].ResetCount();
 8003d20:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fe82 	bl	8003a2e <_ZN6Button10ResetCountEv>
      }
      if(1 == Sw[0].IsPushCount() % 2){
 8003d2a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fe65 	bl	80039fe <_ZN6Button11IsPushCountEv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <main+0x276>
        TickLed.SetPeriod(500);
 8003d48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d4c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003d50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fc88 	bl	800166a <_ZN5Blink9SetPeriodEmf>
        Buzzer.SetPeriod(2000);
 8003d5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d5e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003d62:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fc7f 	bl	800166a <_ZN5Blink9SetPeriodEmf>
 8003d6c:	e00d      	b.n	8003d8a <main+0x292>
      }else{
        TickLed.SetPeriod(1000);
 8003d6e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d72:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003d76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd fc75 	bl	800166a <_ZN5Blink9SetPeriodEmf>
        Buzzer.Off();
 8003d80:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fe9b 	bl	8003ac0 <_ZN5Blink3OffEv>
      }

		  if(SystickTimer_IsTimeElapsed(ullDebugTimeMs, 50)){
 8003d8a:	2232      	movs	r2, #50	; 0x32
 8003d8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d94:	f7fe fd0d 	bl	80027b2 <SystickTimer_IsTimeElapsed>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d077      	beq.n	8003e8e <main+0x396>
			  ullDebugTimeMs = SystickTimer_GetTimeMS();
 8003d9e:	f7fe fcf1 	bl	8002784 <SystickTimer_GetTimeMS>
 8003da2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003da6:	e9c3 0100 	strd	r0, r1, [r3]
        float fTimer = (float)SystickTimer_GetTimeMS()/1000.0f;
 8003daa:	f7fe fceb 	bl	8002784 <SystickTimer_GetTimeMS>
 8003dae:	4603      	mov	r3, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	4618      	mov	r0, r3
 8003db4:	4621      	mov	r1, r4
 8003db6:	f7fc ffbf 	bl	8000d38 <__aeabi_ul2f>
 8003dba:	ee06 0a90 	vmov	s13, r0
 8003dbe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003edc <main+0x3e4>
 8003dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc6:	edc7 7a83 	vstr	s15, [r7, #524]	; 0x20c
        uint16_t usAdcValue[4];
        float fAdcRate[4];

        Adc1_GetAdcValues(usAdcValue, 2, 4);
 8003dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dce:	2204      	movs	r2, #4
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f98a 	bl	80030ec <Adc1_GetAdcValues>
        Adc1_GetRateAdcValues(fAdcRate, 2, 4);
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	2204      	movs	r2, #4
 8003dde:	2102      	movs	r1, #2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f9df 	bl	80031a4 <Adc1_GetRateAdcValues>
        //fValue*3.3 = Vbat * 10k / (10k+20k)
        //Vbat = fValue*3.3*30k/10k
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003de6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003dea:	f7fc fbad 	bl	8000548 <__aeabi_f2d>
 8003dee:	e9c7 0104 	strd	r0, r1, [r7, #16]
                fTimer,
                arm_sin_f32(fTimer), 
 8003df2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003df6:	f002 fac7 	bl	8006388 <arm_sin_f32>
 8003dfa:	4603      	mov	r3, r0
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fba3 	bl	8000548 <__aeabi_f2d>
 8003e02:	4605      	mov	r5, r0
 8003e04:	460e      	mov	r6, r1
 8003e06:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fdf7 	bl	80039fe <_ZN6Button11IsPushCountEv>
 8003e10:	60f8      	str	r0, [r7, #12]
                Sw[0].IsPushCount(),
                BatteryMoni.GetVoltage(),
 8003e12:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fe62 	bl	8003ae0 <_ZN14BatteryMonitor10GetVoltageEv>
 8003e1c:	4603      	mov	r3, r0
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc fb92 	bl	8000548 <__aeabi_f2d>
 8003e24:	4680      	mov	r8, r0
 8003e26:	4689      	mov	r9, r1
                fAdcRate[0],
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	681b      	ldr	r3, [r3, #0]
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fb8a 	bl	8000548 <__aeabi_f2d>
 8003e34:	4682      	mov	sl, r0
 8003e36:	468b      	mov	fp, r1
                IMU.GetGyroDPS().fValueZ,
 8003e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe f95b 	bl	80020f8 <_ZN9ICM_2060210GetGyroDPSEv>
 8003e42:	4603      	mov	r3, r0
 8003e44:	689b      	ldr	r3, [r3, #8]
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc fb7e 	bl	8000548 <__aeabi_f2d>
 8003e4c:	e9c7 0100 	strd	r0, r1, [r7]
				//IMU.IsGyroOffsetCompleted(),
                IMU.GetGyroDeg().fValueZ);
 8003e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe f95b 	bl	8002110 <_ZN9ICM_2060210GetGyroDegEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	689b      	ldr	r3, [r3, #8]
			  printf("t,%.3f, sin,%.3f, sw0,%d, Vbat:%.3f, WallSen0:%.3f, GyroZ:%.3f, Yaw[deg],%.3f\n",
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fb72 	bl	8000548 <__aeabi_f2d>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003e6c:	ed97 7b00 	vldr	d7, [r7]
 8003e70:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e74:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003e78:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	e9cd 5600 	strd	r5, r6, [sp]
 8003e84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e88:	4815      	ldr	r0, [pc, #84]	; (8003ee0 <main+0x3e8>)
 8003e8a:	f002 ff65 	bl	8006d58 <iprintf>
					  (float)(SystickTimer_GetTimeMS() - ullTimeStampMs) / 1000.0f,
					  Sw0.IsReleaseCount());
					  */
		  }

      TickLed.Update();
 8003e8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd fc4a 	bl	800172c <_ZN5Blink6UpdateEv>
      DbgLed[0].Update();
 8003e98:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fc45 	bl	800172c <_ZN5Blink6UpdateEv>
      DbgLed[1].Update();
 8003ea2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ea6:	3328      	adds	r3, #40	; 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fc3f 	bl	800172c <_ZN5Blink6UpdateEv>
      DbgLed[2].Update();
 8003eae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003eb2:	3350      	adds	r3, #80	; 0x50
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fd fc39 	bl	800172c <_ZN5Blink6UpdateEv>
      Buzzer.Update();
 8003eba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd fc34 	bl	800172c <_ZN5Blink6UpdateEv>
	  } //SamplingTime Elapsed
  }
 8003ec4:	e709      	b.n	8003cda <main+0x1e2>
 8003ec6:	bf00      	nop
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	41033333 	.word	0x41033333
 8003ed8:	40013000 	.word	0x40013000
 8003edc:	447a0000 	.word	0x447a0000
 8003ee0:	08008b00 	.word	0x08008b00

08003ee4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003ee8:	2005      	movs	r0, #5
 8003eea:	f7ff fd43 	bl	8003974 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003eee:	f7ff fd55 	bl	800399c <LL_FLASH_GetLatency>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d000      	beq.n	8003f04 <_Z18SystemClock_Configv+0x20>
 8003f02:	e7f4      	b.n	8003eee <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003f04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f08:	f7ff fd56 	bl	80039b8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8003f0c:	2010      	movs	r0, #16
 8003f0e:	f7ff fc43 	bl	8003798 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8003f12:	f7ff fc1f 	bl	8003754 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003f16:	f7ff fc2d 	bl	8003774 <LL_RCC_HSI_IsReady>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <_Z18SystemClock_Configv+0x48>
 8003f2a:	e7f4      	b.n	8003f16 <_Z18SystemClock_Configv+0x32>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	22a8      	movs	r2, #168	; 0xa8
 8003f30:	2108      	movs	r1, #8
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7ff fcc8 	bl	80038c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003f38:	f7ff fca2 	bl	8003880 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003f3c:	f7ff fcb0 	bl	80038a0 <LL_RCC_PLL_IsReady>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d000      	beq.n	8003f52 <_Z18SystemClock_Configv+0x6e>
 8003f50:	e7f4      	b.n	8003f3c <_Z18SystemClock_Configv+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f7ff fc58 	bl	8003808 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003f58:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003f5c:	f7ff fc68 	bl	8003830 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8003f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f64:	f7ff fc78 	bl	8003858 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f7ff fc2b 	bl	80037c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f6e:	f7ff fc3d 	bl	80037ec <LL_RCC_GetSysClkSource>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d000      	beq.n	8003f84 <_Z18SystemClock_Configv+0xa0>
 8003f82:	e7f4      	b.n	8003f6e <_Z18SystemClock_Configv+0x8a>
  {

  }
  LL_Init1msTick(168000000);
 8003f84:	4803      	ldr	r0, [pc, #12]	; (8003f94 <_Z18SystemClock_Configv+0xb0>)
 8003f86:	f002 f9bd 	bl	8006304 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8003f8a:	4802      	ldr	r0, [pc, #8]	; (8003f94 <_Z18SystemClock_Configv+0xb0>)
 8003f8c:	f002 f9ec 	bl	8006368 <LL_SetSystemCoreClock>
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	0a037a00 	.word	0x0a037a00

08003f98 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	USART_TransmitByte(DEBUG_PRINTF_USART_TYPEDEF, (uint8_t)ch);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <__io_putchar+0x20>)
 8003fa8:	f000 fe82 	bl	8004cb0 <USART_TransmitByte>
	return ch;
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40004400 	.word	0x40004400

08003fbc <LL_AHB1_GRP1_EnableClock>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc8:	4907      	ldr	r1, [pc, #28]	; (8003fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40023800 	.word	0x40023800

08003fec <LL_APB2_GRP1_EnableClock>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40023800 	.word	0x40023800

0800401c <LL_SPI_SetStandard>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b090      	sub	sp, #64	; 0x40
 8004048:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800404a:	f107 0318 	add.w	r3, r7, #24
 800404e:	2228      	movs	r2, #40	; 0x28
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f002 fa19 	bl	800648a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	463b      	mov	r3, r7
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800406c:	f7ff ffbe 	bl	8003fec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004070:	2001      	movs	r0, #1
 8004072:	f7ff ffa3 	bl	8003fbc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004076:	2002      	movs	r0, #2
 8004078:	f7ff ffa0 	bl	8003fbc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin;
 800407c:	2320      	movs	r3, #32
 800407e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004080:	2302      	movs	r3, #2
 8004082:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004084:	2303      	movs	r3, #3
 8004086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004090:	2305      	movs	r3, #5
 8004092:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 8004094:	463b      	mov	r3, r7
 8004096:	4619      	mov	r1, r3
 8004098:	481b      	ldr	r0, [pc, #108]	; (8004108 <MX_SPI1_Init+0xc4>)
 800409a:	f001 f83e 	bl	800511a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = IMU_MISO_Pin|IMU_MOSI_Pin;
 800409e:	2330      	movs	r3, #48	; 0x30
 80040a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80040a2:	2302      	movs	r3, #2
 80040a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80040b2:	2305      	movs	r3, #5
 80040b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	463b      	mov	r3, r7
 80040b8:	4619      	mov	r1, r3
 80040ba:	4814      	ldr	r0, [pc, #80]	; (800410c <MX_SPI1_Init+0xc8>)
 80040bc:	f001 f82d 	bl	800511a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80040c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80040c8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80040d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80040dc:	2300      	movs	r3, #0
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80040e0:	2300      	movs	r3, #0
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80040e8:	230a      	movs	r3, #10
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80040ec:	f107 0318 	add.w	r3, r7, #24
 80040f0:	4619      	mov	r1, r3
 80040f2:	4807      	ldr	r0, [pc, #28]	; (8004110 <MX_SPI1_Init+0xcc>)
 80040f4:	f001 fb05 	bl	8005702 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80040f8:	2100      	movs	r1, #0
 80040fa:	4805      	ldr	r0, [pc, #20]	; (8004110 <MX_SPI1_Init+0xcc>)
 80040fc:	f7ff ff8e 	bl	800401c <LL_SPI_SetStandard>

}
 8004100:	bf00      	nop
 8004102:	3740      	adds	r7, #64	; 0x40
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40013000 	.word	0x40013000

08004114 <LL_DMA_IsActiveFlag_TC0>:
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_DMA_ClearFlag_TC0>:
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <NMI_Handler+0x4>

0800415a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler+0x4>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <UsageFault_Handler+0x4>

08004172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickTimer_Interrupt();
 80041a0:	f7fe fa88 	bl	80026b4 <SystickTimer_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a4:	f000 fdc4 	bl	8004d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	if( LL_DMA_IsActiveFlag_TC0(DMA2) == 1){
 80041b0:	4805      	ldr	r0, [pc, #20]	; (80041c8 <DMA2_Stream0_IRQHandler+0x1c>)
 80041b2:	f7ff ffaf 	bl	8004114 <LL_DMA_IsActiveFlag_TC0>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <DMA2_Stream0_IRQHandler+0x16>
		  LL_DMA_ClearFlag_TC0(DMA2);
 80041bc:	4802      	ldr	r0, [pc, #8]	; (80041c8 <DMA2_Stream0_IRQHandler+0x1c>)
 80041be:	f7ff ffbc 	bl	800413a <LL_DMA_ClearFlag_TC0>
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40026400 	.word	0x40026400

080041cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041de:	f3af 8000 	nop.w
 80041e2:	4601      	mov	r1, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	60ba      	str	r2, [r7, #8]
 80041ea:	b2ca      	uxtb	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	dbf0      	blt.n	80041de <_read+0x12>
	}

return len;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e009      	b.n	800422c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	60ba      	str	r2, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff feb9 	bl	8003f98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	dbf1      	blt.n	8004218 <_write+0x12>
	}
	return len;
 8004234:	687b      	ldr	r3, [r7, #4]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <_close>:

int _close(int file)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
	return -1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004266:	605a      	str	r2, [r3, #4]
	return 0;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_isatty>:

int _isatty(int file)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	return 1;
 800427e:	2301      	movs	r3, #1
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
	return 0;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <_sbrk+0x5c>)
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <_sbrk+0x60>)
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <_sbrk+0x64>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <_sbrk+0x64>)
 80042c6:	4a12      	ldr	r2, [pc, #72]	; (8004310 <_sbrk+0x68>)
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <_sbrk+0x64>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d207      	bcs.n	80042e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042d8:	f002 f8a2 	bl	8006420 <__errno>
 80042dc:	4602      	mov	r2, r0
 80042de:	230c      	movs	r3, #12
 80042e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042e6:	e009      	b.n	80042fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <_sbrk+0x64>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <_sbrk+0x64>)
 80042f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20020000 	.word	0x20020000
 8004308:	00000400 	.word	0x00000400
 800430c:	2000020c 	.word	0x2000020c
 8004310:	20000230 	.word	0x20000230

08004314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <SystemInit+0x28>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <SystemInit+0x28>)
 8004320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <SystemInit+0x28>)
 800432a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800432e:	609a      	str	r2, [r3, #8]
#endif
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <LL_AHB1_GRP1_EnableClock>:
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4313      	orrs	r3, r2
 8004352:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40023800 	.word	0x40023800

08004370 <LL_APB1_GRP1_EnableClock>:
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <LL_APB1_GRP1_EnableClock+0x2c>)
 800437a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <LL_APB1_GRP1_EnableClock+0x2c>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40023800 	.word	0x40023800

080043a0 <LL_APB2_GRP1_EnableClock>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80043aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ac:	4907      	ldr	r1, [pc, #28]	; (80043cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80043b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4013      	ands	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40023800 	.word	0x40023800

080043d0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80043f0:	b4b0      	push	{r4, r5, r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d01c      	beq.n	800443a <LL_TIM_OC_DisableFast+0x4a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d017      	beq.n	8004436 <LL_TIM_OC_DisableFast+0x46>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d012      	beq.n	8004432 <LL_TIM_OC_DisableFast+0x42>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d00d      	beq.n	800442e <LL_TIM_OC_DisableFast+0x3e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	d007      	beq.n	800442a <LL_TIM_OC_DisableFast+0x3a>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d101      	bne.n	8004426 <LL_TIM_OC_DisableFast+0x36>
 8004422:	2305      	movs	r3, #5
 8004424:	e00a      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 8004426:	2306      	movs	r3, #6
 8004428:	e008      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 800442a:	2304      	movs	r3, #4
 800442c:	e006      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_TIM_OC_DisableFast+0x4c>
 800443a:	2300      	movs	r3, #0
 800443c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3318      	adds	r3, #24
 8004442:	461a      	mov	r2, r3
 8004444:	4629      	mov	r1, r5
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <LL_TIM_OC_DisableFast+0x7c>)
 8004448:	5c5b      	ldrb	r3, [r3, r1]
 800444a:	4413      	add	r3, r2
 800444c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	4629      	mov	r1, r5
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <LL_TIM_OC_DisableFast+0x80>)
 8004454:	5c5b      	ldrb	r3, [r3, r1]
 8004456:	4619      	mov	r1, r3
 8004458:	2304      	movs	r3, #4
 800445a:	408b      	lsls	r3, r1
 800445c:	43db      	mvns	r3, r3
 800445e:	4013      	ands	r3, r2
 8004460:	6023      	str	r3, [r4, #0]

}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bcb0      	pop	{r4, r5, r7}
 800446a:	4770      	bx	lr
 800446c:	08008bb0 	.word	0x08008bb0
 8004470:	08008bb8 	.word	0x08008bb8

08004474 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004474:	b4b0      	push	{r4, r5, r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d01c      	beq.n	80044be <LL_TIM_OC_EnablePreload+0x4a>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d017      	beq.n	80044ba <LL_TIM_OC_EnablePreload+0x46>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d012      	beq.n	80044b6 <LL_TIM_OC_EnablePreload+0x42>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d00d      	beq.n	80044b2 <LL_TIM_OC_EnablePreload+0x3e>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449c:	d007      	beq.n	80044ae <LL_TIM_OC_EnablePreload+0x3a>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a4:	d101      	bne.n	80044aa <LL_TIM_OC_EnablePreload+0x36>
 80044a6:	2305      	movs	r3, #5
 80044a8:	e00a      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044aa:	2306      	movs	r3, #6
 80044ac:	e008      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044ae:	2304      	movs	r3, #4
 80044b0:	e006      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044b2:	2303      	movs	r3, #3
 80044b4:	e004      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e002      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_TIM_OC_EnablePreload+0x4c>
 80044be:	2300      	movs	r3, #0
 80044c0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3318      	adds	r3, #24
 80044c6:	461a      	mov	r2, r3
 80044c8:	4629      	mov	r1, r5
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <LL_TIM_OC_EnablePreload+0x7c>)
 80044cc:	5c5b      	ldrb	r3, [r3, r1]
 80044ce:	4413      	add	r3, r2
 80044d0:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	4629      	mov	r1, r5
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <LL_TIM_OC_EnablePreload+0x80>)
 80044d8:	5c5b      	ldrb	r3, [r3, r1]
 80044da:	4619      	mov	r1, r3
 80044dc:	2308      	movs	r3, #8
 80044de:	408b      	lsls	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	6023      	str	r3, [r4, #0]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bcb0      	pop	{r4, r5, r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	08008bb0 	.word	0x08008bb0
 80044f4:	08008bb8 	.word	0x08008bb8

080044f8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80044f8:	b4b0      	push	{r4, r5, r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d01c      	beq.n	8004544 <LL_TIM_IC_SetActiveInput+0x4c>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d017      	beq.n	8004540 <LL_TIM_IC_SetActiveInput+0x48>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d012      	beq.n	800453c <LL_TIM_IC_SetActiveInput+0x44>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d00d      	beq.n	8004538 <LL_TIM_IC_SetActiveInput+0x40>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d007      	beq.n	8004534 <LL_TIM_IC_SetActiveInput+0x3c>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	d101      	bne.n	8004530 <LL_TIM_IC_SetActiveInput+0x38>
 800452c:	2305      	movs	r3, #5
 800452e:	e00a      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 8004530:	2306      	movs	r3, #6
 8004532:	e008      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 8004534:	2304      	movs	r3, #4
 8004536:	e006      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 8004538:	2303      	movs	r3, #3
 800453a:	e004      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 800453c:	2302      	movs	r3, #2
 800453e:	e002      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <LL_TIM_IC_SetActiveInput+0x4e>
 8004544:	2300      	movs	r3, #0
 8004546:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3318      	adds	r3, #24
 800454c:	461a      	mov	r2, r3
 800454e:	4629      	mov	r1, r5
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <LL_TIM_IC_SetActiveInput+0x8c>)
 8004552:	5c5b      	ldrb	r3, [r3, r1]
 8004554:	4413      	add	r3, r2
 8004556:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004558:	6822      	ldr	r2, [r4, #0]
 800455a:	4629      	mov	r1, r5
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <LL_TIM_IC_SetActiveInput+0x90>)
 800455e:	5c5b      	ldrb	r3, [r3, r1]
 8004560:	4619      	mov	r1, r3
 8004562:	2303      	movs	r3, #3
 8004564:	408b      	lsls	r3, r1
 8004566:	43db      	mvns	r3, r3
 8004568:	401a      	ands	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	4628      	mov	r0, r5
 8004570:	4905      	ldr	r1, [pc, #20]	; (8004588 <LL_TIM_IC_SetActiveInput+0x90>)
 8004572:	5c09      	ldrb	r1, [r1, r0]
 8004574:	408b      	lsls	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	6023      	str	r3, [r4, #0]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bcb0      	pop	{r4, r5, r7}
 8004582:	4770      	bx	lr
 8004584:	08008bb0 	.word	0x08008bb0
 8004588:	08008bc0 	.word	0x08008bc0

0800458c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 800458c:	b4b0      	push	{r4, r5, r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d01c      	beq.n	80045d8 <LL_TIM_IC_SetPrescaler+0x4c>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d017      	beq.n	80045d4 <LL_TIM_IC_SetPrescaler+0x48>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d012      	beq.n	80045d0 <LL_TIM_IC_SetPrescaler+0x44>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d00d      	beq.n	80045cc <LL_TIM_IC_SetPrescaler+0x40>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d007      	beq.n	80045c8 <LL_TIM_IC_SetPrescaler+0x3c>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045be:	d101      	bne.n	80045c4 <LL_TIM_IC_SetPrescaler+0x38>
 80045c0:	2305      	movs	r3, #5
 80045c2:	e00a      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045c4:	2306      	movs	r3, #6
 80045c6:	e008      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045c8:	2304      	movs	r3, #4
 80045ca:	e006      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045cc:	2303      	movs	r3, #3
 80045ce:	e004      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e002      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <LL_TIM_IC_SetPrescaler+0x4e>
 80045d8:	2300      	movs	r3, #0
 80045da:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3318      	adds	r3, #24
 80045e0:	461a      	mov	r2, r3
 80045e2:	4629      	mov	r1, r5
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <LL_TIM_IC_SetPrescaler+0x8c>)
 80045e6:	5c5b      	ldrb	r3, [r3, r1]
 80045e8:	4413      	add	r3, r2
 80045ea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	4629      	mov	r1, r5
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <LL_TIM_IC_SetPrescaler+0x90>)
 80045f2:	5c5b      	ldrb	r3, [r3, r1]
 80045f4:	4619      	mov	r1, r3
 80045f6:	230c      	movs	r3, #12
 80045f8:	408b      	lsls	r3, r1
 80045fa:	43db      	mvns	r3, r3
 80045fc:	401a      	ands	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	4628      	mov	r0, r5
 8004604:	4905      	ldr	r1, [pc, #20]	; (800461c <LL_TIM_IC_SetPrescaler+0x90>)
 8004606:	5c09      	ldrb	r1, [r1, r0]
 8004608:	408b      	lsls	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	6023      	str	r3, [r4, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bcb0      	pop	{r4, r5, r7}
 8004616:	4770      	bx	lr
 8004618:	08008bb0 	.word	0x08008bb0
 800461c:	08008bc0 	.word	0x08008bc0

08004620 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8004620:	b4b0      	push	{r4, r5, r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d01c      	beq.n	800466c <LL_TIM_IC_SetFilter+0x4c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d017      	beq.n	8004668 <LL_TIM_IC_SetFilter+0x48>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b10      	cmp	r3, #16
 800463c:	d012      	beq.n	8004664 <LL_TIM_IC_SetFilter+0x44>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d00d      	beq.n	8004660 <LL_TIM_IC_SetFilter+0x40>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d007      	beq.n	800465c <LL_TIM_IC_SetFilter+0x3c>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d101      	bne.n	8004658 <LL_TIM_IC_SetFilter+0x38>
 8004654:	2305      	movs	r3, #5
 8004656:	e00a      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 8004658:	2306      	movs	r3, #6
 800465a:	e008      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 800465c:	2304      	movs	r3, #4
 800465e:	e006      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 8004660:	2303      	movs	r3, #3
 8004662:	e004      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 8004664:	2302      	movs	r3, #2
 8004666:	e002      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <LL_TIM_IC_SetFilter+0x4e>
 800466c:	2300      	movs	r3, #0
 800466e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3318      	adds	r3, #24
 8004674:	461a      	mov	r2, r3
 8004676:	4629      	mov	r1, r5
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <LL_TIM_IC_SetFilter+0x8c>)
 800467a:	5c5b      	ldrb	r3, [r3, r1]
 800467c:	4413      	add	r3, r2
 800467e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	4629      	mov	r1, r5
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <LL_TIM_IC_SetFilter+0x90>)
 8004686:	5c5b      	ldrb	r3, [r3, r1]
 8004688:	4619      	mov	r1, r3
 800468a:	23f0      	movs	r3, #240	; 0xf0
 800468c:	408b      	lsls	r3, r1
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	4628      	mov	r0, r5
 8004698:	4905      	ldr	r1, [pc, #20]	; (80046b0 <LL_TIM_IC_SetFilter+0x90>)
 800469a:	5c09      	ldrb	r1, [r1, r0]
 800469c:	408b      	lsls	r3, r1
 800469e:	4313      	orrs	r3, r2
 80046a0:	6023      	str	r3, [r4, #0]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bcb0      	pop	{r4, r5, r7}
 80046aa:	4770      	bx	lr
 80046ac:	08008bb0 	.word	0x08008bb0
 80046b0:	08008bc0 	.word	0x08008bc0

080046b4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 80046b4:	b490      	push	{r4, r7}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d01c      	beq.n	8004700 <LL_TIM_IC_SetPolarity+0x4c>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d017      	beq.n	80046fc <LL_TIM_IC_SetPolarity+0x48>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d012      	beq.n	80046f8 <LL_TIM_IC_SetPolarity+0x44>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d00d      	beq.n	80046f4 <LL_TIM_IC_SetPolarity+0x40>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d007      	beq.n	80046f0 <LL_TIM_IC_SetPolarity+0x3c>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d101      	bne.n	80046ec <LL_TIM_IC_SetPolarity+0x38>
 80046e8:	2305      	movs	r3, #5
 80046ea:	e00a      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 80046ec:	2306      	movs	r3, #6
 80046ee:	e008      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 80046f0:	2304      	movs	r3, #4
 80046f2:	e006      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 80046f4:	2303      	movs	r3, #3
 80046f6:	e004      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e002      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <LL_TIM_IC_SetPolarity+0x4e>
 8004700:	2300      	movs	r3, #0
 8004702:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	4621      	mov	r1, r4
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <LL_TIM_IC_SetPolarity+0x80>)
 800470c:	5c5b      	ldrb	r3, [r3, r1]
 800470e:	4619      	mov	r1, r3
 8004710:	230a      	movs	r3, #10
 8004712:	408b      	lsls	r3, r1
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	4621      	mov	r1, r4
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <LL_TIM_IC_SetPolarity+0x80>)
 800471c:	5c5b      	ldrb	r3, [r3, r1]
 800471e:	4619      	mov	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	408b      	lsls	r3, r1
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bc90      	pop	{r4, r7}
 8004732:	4770      	bx	lr
 8004734:	08008bc8 	.word	0x08008bc8

08004738 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b09a      	sub	sp, #104	; 0x68
 80047a8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80047ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047be:	2220      	movs	r2, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fe61 	bl	800648a <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80047c8:	f107 031c 	add.w	r3, r7, #28
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
 80047d8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]
 80047e8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80047ea:	2001      	movs	r0, #1
 80047ec:	f7ff fdd8 	bl	80043a0 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80047f6:	2300      	movs	r3, #0
 80047f8:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 80047fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004800:	2300      	movs	r3, #0
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800480a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800480e:	4619      	mov	r1, r3
 8004810:	4836      	ldr	r0, [pc, #216]	; (80048ec <MX_TIM1_Init+0x148>)
 8004812:	f001 f83b 	bl	800588c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004816:	4835      	ldr	r0, [pc, #212]	; (80048ec <MX_TIM1_Init+0x148>)
 8004818:	f7ff fdda 	bl	80043d0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800481c:	2101      	movs	r1, #1
 800481e:	4833      	ldr	r0, [pc, #204]	; (80048ec <MX_TIM1_Init+0x148>)
 8004820:	f7ff fe28 	bl	8004474 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004824:	2360      	movs	r3, #96	; 0x60
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004828:	2300      	movs	r3, #0
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004834:	2300      	movs	r3, #0
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004838:	2300      	movs	r3, #0
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800483c:	2300      	movs	r3, #0
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004840:	2300      	movs	r3, #0
 8004842:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004844:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004848:	461a      	mov	r2, r3
 800484a:	2101      	movs	r1, #1
 800484c:	4827      	ldr	r0, [pc, #156]	; (80048ec <MX_TIM1_Init+0x148>)
 800484e:	f001 f8b7 	bl	80059c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004852:	2101      	movs	r1, #1
 8004854:	4825      	ldr	r0, [pc, #148]	; (80048ec <MX_TIM1_Init+0x148>)
 8004856:	f7ff fdcb 	bl	80043f0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800485a:	2110      	movs	r1, #16
 800485c:	4823      	ldr	r0, [pc, #140]	; (80048ec <MX_TIM1_Init+0x148>)
 800485e:	f7ff fe09 	bl	8004474 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004866:	2300      	movs	r3, #0
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800486a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800486e:	461a      	mov	r2, r3
 8004870:	2110      	movs	r1, #16
 8004872:	481e      	ldr	r0, [pc, #120]	; (80048ec <MX_TIM1_Init+0x148>)
 8004874:	f001 f8a4 	bl	80059c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8004878:	2110      	movs	r1, #16
 800487a:	481c      	ldr	r0, [pc, #112]	; (80048ec <MX_TIM1_Init+0x148>)
 800487c:	f7ff fdb8 	bl	80043f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8004880:	2100      	movs	r1, #0
 8004882:	481a      	ldr	r0, [pc, #104]	; (80048ec <MX_TIM1_Init+0x148>)
 8004884:	f7ff ff6b 	bl	800475e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8004888:	4818      	ldr	r0, [pc, #96]	; (80048ec <MX_TIM1_Init+0x148>)
 800488a:	f7ff ff7b 	bl	8004784 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80048a0:	2300      	movs	r3, #0
 80048a2:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80048a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80048ae:	f107 031c 	add.w	r3, r7, #28
 80048b2:	4619      	mov	r1, r3
 80048b4:	480d      	ldr	r0, [pc, #52]	; (80048ec <MX_TIM1_Init+0x148>)
 80048b6:	f001 f8bb 	bl	8005a30 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80048ba:	2001      	movs	r0, #1
 80048bc:	f7ff fd40 	bl	8004340 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
  GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 80048c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048c6:	2302      	movs	r3, #2
 80048c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4804      	ldr	r0, [pc, #16]	; (80048f0 <MX_TIM1_Init+0x14c>)
 80048e0:	f000 fc1b 	bl	800511a <LL_GPIO_Init>

}
 80048e4:	bf00      	nop
 80048e6:	3768      	adds	r7, #104	; 0x68
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40020000 	.word	0x40020000

080048f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	609a      	str	r2, [r3, #8]
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
 8004918:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800491a:	2001      	movs	r0, #1
 800491c:	f7ff fd28 	bl	8004370 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff fd0d 	bl	8004340 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004926:	2002      	movs	r0, #2
 8004928:	f7ff fd0a 	bl	8004340 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = ENC_L_A_Pin;
 800492c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004932:	2302      	movs	r3, #2
 8004934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004942:	2301      	movs	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4836      	ldr	r0, [pc, #216]	; (8004a24 <MX_TIM2_Init+0x130>)
 800494c:	f000 fbe5 	bl	800511a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8004950:	2308      	movs	r3, #8
 8004952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004954:	2302      	movs	r3, #2
 8004956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004964:	2301      	movs	r3, #1
 8004966:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	4619      	mov	r1, r3
 800496c:	482e      	ldr	r0, [pc, #184]	; (8004a28 <MX_TIM2_Init+0x134>)
 800496e:	f000 fbd4 	bl	800511a <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X2_TI1);
 8004972:	2101      	movs	r1, #1
 8004974:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004978:	f7ff fede 	bl	8004738 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800497c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004980:	2101      	movs	r1, #1
 8004982:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004986:	f7ff fdb7 	bl	80044f8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800498a:	2200      	movs	r2, #0
 800498c:	2101      	movs	r1, #1
 800498e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004992:	f7ff fdfb 	bl	800458c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8004996:	2200      	movs	r2, #0
 8004998:	2101      	movs	r1, #1
 800499a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800499e:	f7ff fe3f 	bl	8004620 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2101      	movs	r1, #1
 80049a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049aa:	f7ff fe83 	bl	80046b4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80049ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049b2:	2110      	movs	r1, #16
 80049b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049b8:	f7ff fd9e 	bl	80044f8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80049bc:	2200      	movs	r2, #0
 80049be:	2110      	movs	r1, #16
 80049c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049c4:	f7ff fde2 	bl	800458c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2110      	movs	r1, #16
 80049cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049d0:	f7ff fe26 	bl	8004620 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2110      	movs	r1, #16
 80049d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049dc:	f7ff fe6a 	bl	80046b4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 4294967295;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80049f2:	f107 031c 	add.w	r3, r7, #28
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049fc:	f000 ff46 	bl	800588c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8004a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a04:	f7ff fce4 	bl	80043d0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a0e:	f7ff fea6 	bl	800475e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004a12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a16:	f7ff feb5 	bl	8004784 <LL_TIM_DisableMasterSlaveMode>

}
 8004a1a:	bf00      	nop
 8004a1c:	3730      	adds	r7, #48	; 0x30
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40020000 	.word	0x40020000
 8004a28:	40020400 	.word	0x40020400

08004a2c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a32:	f107 031c 	add.w	r3, r7, #28
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
 8004a50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004a52:	2008      	movs	r0, #8
 8004a54:	f7ff fc8c 	bl	8004370 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f7ff fc71 	bl	8004340 <LL_AHB1_GRP1_EnableClock>
  /**TIM5 GPIO Configuration
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  */
  GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a62:	2302      	movs	r3, #2
 8004a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004a72:	2302      	movs	r3, #2
 8004a74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4827      	ldr	r0, [pc, #156]	; (8004b18 <MX_TIM5_Init+0xec>)
 8004a7c:	f000 fb4d 	bl	800511a <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM5, LL_TIM_ENCODERMODE_X2_TI1);
 8004a80:	2101      	movs	r1, #1
 8004a82:	4826      	ldr	r0, [pc, #152]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004a84:	f7ff fe58 	bl	8004738 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8004a88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4823      	ldr	r0, [pc, #140]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004a90:	f7ff fd32 	bl	80044f8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2101      	movs	r1, #1
 8004a98:	4820      	ldr	r0, [pc, #128]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004a9a:	f7ff fd77 	bl	800458c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	481e      	ldr	r0, [pc, #120]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004aa4:	f7ff fdbc 	bl	8004620 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2101      	movs	r1, #1
 8004aac:	481b      	ldr	r0, [pc, #108]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004aae:	f7ff fe01 	bl	80046b4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8004ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	4818      	ldr	r0, [pc, #96]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004aba:	f7ff fd1d 	bl	80044f8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	4816      	ldr	r0, [pc, #88]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004ac4:	f7ff fd62 	bl	800458c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2110      	movs	r1, #16
 8004acc:	4813      	ldr	r0, [pc, #76]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004ace:	f7ff fda7 	bl	8004620 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	4811      	ldr	r0, [pc, #68]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004ad8:	f7ff fdec 	bl	80046b4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 4294967295;
 8004ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004aee:	f107 031c 	add.w	r3, r7, #28
 8004af2:	4619      	mov	r1, r3
 8004af4:	4809      	ldr	r0, [pc, #36]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004af6:	f000 fec9 	bl	800588c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004afa:	4808      	ldr	r0, [pc, #32]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004afc:	f7ff fc68 	bl	80043d0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004b00:	2100      	movs	r1, #0
 8004b02:	4806      	ldr	r0, [pc, #24]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004b04:	f7ff fe2b 	bl	800475e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004b08:	4804      	ldr	r0, [pc, #16]	; (8004b1c <MX_TIM5_Init+0xf0>)
 8004b0a:	f7ff fe3b 	bl	8004784 <LL_TIM_DisableMasterSlaveMode>

}
 8004b0e:	bf00      	nop
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	40000c00 	.word	0x40000c00

08004b20 <LL_AHB1_GRP1_EnableClock>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40023800 	.word	0x40023800

08004b50 <LL_APB1_GRP1_EnableClock>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5c:	4907      	ldr	r1, [pc, #28]	; (8004b7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40023800 	.word	0x40023800

08004b80 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	615a      	str	r2, [r3, #20]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004c16:	f107 031c 	add.w	r3, r7, #28
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	60da      	str	r2, [r3, #12]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	615a      	str	r2, [r3, #20]
 8004c28:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
 8004c38:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004c3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004c3e:	f7ff ff87 	bl	8004b50 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f7ff ff6c 	bl	8004b20 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8004c48:	230c      	movs	r3, #12
 8004c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c50:	2303      	movs	r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004c5c:	2307      	movs	r3, #7
 8004c5e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4810      	ldr	r0, [pc, #64]	; (8004ca8 <MX_USART2_UART_Init+0x98>)
 8004c66:	f000 fa58 	bl	800511a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8004c6a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c6e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c70:	2300      	movs	r3, #0
 8004c72:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004c74:	2300      	movs	r3, #0
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c84:	2300      	movs	r3, #0
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004c88:	f107 031c 	add.w	r3, r7, #28
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4807      	ldr	r0, [pc, #28]	; (8004cac <MX_USART2_UART_Init+0x9c>)
 8004c90:	f001 fa9e 	bl	80061d0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004c94:	4805      	ldr	r0, [pc, #20]	; (8004cac <MX_USART2_UART_Init+0x9c>)
 8004c96:	f7ff ff83 	bl	8004ba0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004c9a:	4804      	ldr	r0, [pc, #16]	; (8004cac <MX_USART2_UART_Init+0x9c>)
 8004c9c:	f7ff ff70 	bl	8004b80 <LL_USART_Enable>

}
 8004ca0:	bf00      	nop
 8004ca2:	3738      	adds	r7, #56	; 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	40004400 	.word	0x40004400

08004cb0 <USART_TransmitByte>:

/* USER CODE BEGIN 1 */
void USART_TransmitByte(USART_TypeDef *pUSARTx, uint8_t u8WriteData)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
	LL_USART_TransmitData8(pUSARTx, u8WriteData);
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff96 	bl	8004bf2 <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TXE(pUSARTx));
 8004cc6:	bf00      	nop
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff7f 	bl	8004bcc <LL_USART_IsActiveFlag_TXE>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f9      	beq.n	8004cc8 <USART_TransmitByte+0x18>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ce0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ce2:	e003      	b.n	8004cec <LoopCopyDataInit>

08004ce4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ce6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ce8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004cea:	3104      	adds	r1, #4

08004cec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004cec:	480b      	ldr	r0, [pc, #44]	; (8004d1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004cf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004cf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004cf4:	d3f6      	bcc.n	8004ce4 <CopyDataInit>
  ldr  r2, =_sbss
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004cf8:	e002      	b.n	8004d00 <LoopFillZerobss>

08004cfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004cfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004cfc:	f842 3b04 	str.w	r3, [r2], #4

08004d00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d04:	d3f9      	bcc.n	8004cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d06:	f7ff fb05 	bl	8004314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d0a:	f001 fb8f 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d0e:	f7fe fef3 	bl	8003af8 <main>
  bx  lr    
 8004d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004d18:	080096a8 	.word	0x080096a8
  ldr  r0, =_sdata
 8004d1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d20:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8004d24:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8004d28:	2000022c 	.word	0x2000022c

08004d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d2c:	e7fe      	b.n	8004d2c <ADC_IRQHandler>
	...

08004d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_IncTick+0x20>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_IncTick+0x24>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4413      	add	r3, r2
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HAL_IncTick+0x24>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000004 	.word	0x20000004
 8004d54:	20000224 	.word	0x20000224

08004d58 <LL_ADC_REG_SetSequencerLength>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_ADC_IsEnabled>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8004db2:	481c      	ldr	r0, [pc, #112]	; (8004e24 <LL_ADC_CommonInit+0x80>)
 8004db4:	f7ff ffe3 	bl	8004d7e <LL_ADC_IsEnabled>
 8004db8:	4604      	mov	r4, r0
 8004dba:	481b      	ldr	r0, [pc, #108]	; (8004e28 <LL_ADC_CommonInit+0x84>)
 8004dbc:	f7ff ffdf 	bl	8004d7e <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	431c      	orrs	r4, r3
 8004dc4:	4819      	ldr	r0, [pc, #100]	; (8004e2c <LL_ADC_CommonInit+0x88>)
 8004dc6:	f7ff ffda 	bl	8004d7e <LL_ADC_IsEnabled>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4323      	orrs	r3, r4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d120      	bne.n	8004e14 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <LL_ADC_CommonInit+0x8c>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6811      	ldr	r1, [r2, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	6852      	ldr	r2, [r2, #4]
 8004dea:	4311      	orrs	r1, r2
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	6892      	ldr	r2, [r2, #8]
 8004df0:	4311      	orrs	r1, r2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e00b      	b.n	8004e18 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <LL_ADC_CommonInit+0x8c>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	e001      	b.n	8004e18 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40012000 	.word	0x40012000
 8004e28:	40012100 	.word	0x40012100
 8004e2c:	40012200 	.word	0x40012200
 8004e30:	fffc10e0 	.word	0xfffc10e0

08004e34 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ff9b 	bl	8004d7e <LL_ADC_IsEnabled>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d117      	bne.n	8004e7e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	6811      	ldr	r1, [r2, #0]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	e001      	b.n	8004e82 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ff6f 	bl	8004d7e <LL_ADC_IsEnabled>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d12b      	bne.n	8004efe <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	e005      	b.n	8004ece <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <LL_ADC_REG_Init+0x80>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	4311      	orrs	r1, r2
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	6912      	ldr	r2, [r2, #16]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff2e 	bl	8004d58 <LL_ADC_REG_SetSequencerLength>
 8004efc:	e001      	b.n	8004f02 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	c0fffcfd 	.word	0xc0fffcfd

08004f10 <LL_GPIO_SetPinMode>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	613b      	str	r3, [r7, #16]
  return result;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2103      	movs	r1, #3
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	61bb      	str	r3, [r7, #24]
  return result;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3724      	adds	r7, #36	; 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_GPIO_SetPinOutputType>:
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_GPIO_SetPinSpeed>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b089      	sub	sp, #36	; 0x24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	fa93 f3a3 	rbit	r3, r3
 8004fb8:	613b      	str	r3, [r7, #16]
  return result;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2103      	movs	r1, #3
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	401a      	ands	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	61bb      	str	r3, [r7, #24]
  return result;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	3724      	adds	r7, #36	; 0x24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_GPIO_SetPinPull>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	613b      	str	r3, [r7, #16]
  return result;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2103      	movs	r1, #3
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	401a      	ands	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	61bb      	str	r3, [r7, #24]
  return result;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	60da      	str	r2, [r3, #12]
}
 800504e:	bf00      	nop
 8005050:	3724      	adds	r7, #36	; 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_GPIO_SetAFPin_0_7>:
{
 800505a:	b480      	push	{r7}
 800505c:	b089      	sub	sp, #36	; 0x24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	613b      	str	r3, [r7, #16]
  return result;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	fab3 f383 	clz	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	210f      	movs	r1, #15
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	401a      	ands	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	61bb      	str	r3, [r7, #24]
  return result;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	621a      	str	r2, [r3, #32]
}
 80050ac:	bf00      	nop
 80050ae:	3724      	adds	r7, #36	; 0x24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_GPIO_SetAFPin_8_15>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	613b      	str	r3, [r7, #16]
  return result;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	fab3 f383 	clz	r3, r3
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	210f      	movs	r1, #15
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	401a      	ands	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	61bb      	str	r3, [r7, #24]
  return result;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800510e:	bf00      	nop
 8005110:	3724      	adds	r7, #36	; 0x24
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	613b      	str	r3, [r7, #16]
  return result;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005144:	e050      	b.n	80051e8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	2101      	movs	r1, #1
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d042      	beq.n	80051e2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d003      	beq.n	800516c <LL_GPIO_Init+0x52>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d10d      	bne.n	8005188 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	461a      	mov	r2, r3
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff12 	bl	8004f9e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	69b9      	ldr	r1, [r7, #24]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fef3 	bl	8004f6e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	461a      	mov	r2, r3
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff33 	bl	8004ffc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d11a      	bne.n	80051d4 <LL_GPIO_Init+0xba>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	60bb      	str	r3, [r7, #8]
  return result;
 80051aa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	d807      	bhi.n	80051c6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	461a      	mov	r2, r3
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff4b 	bl	800505a <LL_GPIO_SetAFPin_0_7>
 80051c4:	e006      	b.n	80051d4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	461a      	mov	r2, r3
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff72 	bl	80050b8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	461a      	mov	r2, r3
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fe97 	bl	8004f10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1a7      	bne.n	8005146 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <LL_I2C_Enable>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_I2C_Disable>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 0201 	bic.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_I2C_SetOwnAddress1>:
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005254:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	430a      	orrs	r2, r1
 800525e:	431a      	orrs	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a41      	ldr	r2, [pc, #260]	; (8005390 <LL_I2C_ConfigSpeed+0x120>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0c9b      	lsrs	r3, r3, #18
 8005290:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4939      	ldr	r1, [pc, #228]	; (8005394 <LL_I2C_ConfigSpeed+0x124>)
 80052ae:	428b      	cmp	r3, r1
 80052b0:	d802      	bhi.n	80052b8 <LL_I2C_ConfigSpeed+0x48>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3301      	adds	r3, #1
 80052b6:	e009      	b.n	80052cc <LL_I2C_ConfigSpeed+0x5c>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4935      	ldr	r1, [pc, #212]	; (8005398 <LL_I2C_ConfigSpeed+0x128>)
 80052c4:	fba1 1303 	umull	r1, r3, r1, r3
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	3301      	adds	r3, #1
 80052cc:	431a      	orrs	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <LL_I2C_ConfigSpeed+0x124>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d939      	bls.n	800534e <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d117      	bne.n	8005310 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	e01d      	b.n	8005346 <LL_I2C_ConfigSpeed+0xd6>
 800530a:	f248 0301 	movw	r3, #32769	; 0x8001
 800530e:	e01a      	b.n	8005346 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009a      	lsls	r2, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009a      	lsls	r2, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800533c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005340:	e001      	b.n	8005346 <LL_I2C_ConfigSpeed+0xd6>
 8005342:	f248 0301 	movw	r3, #32769	; 0x8001
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e010      	b.n	8005370 <LL_I2C_ConfigSpeed+0x100>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800535c:	2b03      	cmp	r3, #3
 800535e:	d905      	bls.n	800536c <LL_I2C_ConfigSpeed+0xfc>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	e000      	b.n	800536e <LL_I2C_ConfigSpeed+0xfe>
 800536c:	2304      	movs	r3, #4
 800536e:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8005378:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	61da      	str	r2, [r3, #28]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	431bde83 	.word	0x431bde83
 8005394:	000186a0 	.word	0x000186a0
 8005398:	10624dd3 	.word	0x10624dd3

0800539c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 021a 	bic.w	r2, r3, #26
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff14 	bl	8005220 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f895 	bl	800552c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8005402:	6939      	ldr	r1, [r7, #16]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ff2f 	bl	8005270 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68d9      	ldr	r1, [r3, #12]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	461a      	mov	r2, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff0f 	bl	8005240 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ffb7 	bl	800539c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fee6 	bl	8005200 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffc1 	bl	80053c2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <LL_RCC_GetSysClkSource>:
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <LL_RCC_GetSysClkSource+0x18>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 030c 	and.w	r3, r3, #12
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <LL_RCC_GetAHBPrescaler>:
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <LL_RCC_GetAHBPrescaler+0x18>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800

08005484 <LL_RCC_GetAPB1Prescaler>:
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <LL_RCC_GetAPB1Prescaler+0x18>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800

080054a0 <LL_RCC_GetAPB2Prescaler>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800

080054bc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <LL_RCC_PLL_GetMainSource+0x18>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800

080054d8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <LL_RCC_PLL_GetN+0x18>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40023800 	.word	0x40023800

080054f4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <LL_RCC_PLL_GetP+0x18>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800

08005510 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <LL_RCC_PLL_GetDivider+0x18>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800

0800552c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005534:	f000 f820 	bl	8005578 <RCC_GetSystemClockFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f83e 	bl	80055c4 <RCC_GetHCLKClockFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f84c 	bl	80055f0 <RCC_GetPCLK1ClockFreq>
 8005558:	4602      	mov	r2, r0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f858 	bl	8005618 <RCC_GetPCLK2ClockFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60da      	str	r2, [r3, #12]
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005582:	f7ff ff63 	bl	800544c <LL_RCC_GetSysClkSource>
 8005586:	4603      	mov	r3, r0
 8005588:	2b04      	cmp	r3, #4
 800558a:	d006      	beq.n	800559a <RCC_GetSystemClockFreq+0x22>
 800558c:	2b08      	cmp	r3, #8
 800558e:	d007      	beq.n	80055a0 <RCC_GetSystemClockFreq+0x28>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <RCC_GetSystemClockFreq+0x44>)
 8005596:	607b      	str	r3, [r7, #4]
      break;
 8005598:	e00a      	b.n	80055b0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <RCC_GetSystemClockFreq+0x48>)
 800559c:	607b      	str	r3, [r7, #4]
      break;
 800559e:	e007      	b.n	80055b0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80055a0:	2008      	movs	r0, #8
 80055a2:	f000 f84d 	bl	8005640 <RCC_PLL_GetFreqDomain_SYS>
 80055a6:	6078      	str	r0, [r7, #4]
      break;
 80055a8:	e002      	b.n	80055b0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <RCC_GetSystemClockFreq+0x44>)
 80055ac:	607b      	str	r3, [r7, #4]
      break;
 80055ae:	bf00      	nop
  }

  return frequency;
 80055b0:	687b      	ldr	r3, [r7, #4]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	00f42400 	.word	0x00f42400
 80055c0:	017d7840 	.word	0x017d7840

080055c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80055cc:	f7ff ff4c 	bl	8005468 <LL_RCC_GetAHBPrescaler>
 80055d0:	4603      	mov	r3, r0
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	4a04      	ldr	r2, [pc, #16]	; (80055ec <RCC_GetHCLKClockFreq+0x28>)
 80055da:	5cd3      	ldrb	r3, [r2, r3]
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	40d3      	lsrs	r3, r2
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	08008b98 	.word	0x08008b98

080055f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80055f8:	f7ff ff44 	bl	8005484 <LL_RCC_GetAPB1Prescaler>
 80055fc:	4603      	mov	r3, r0
 80055fe:	0a9b      	lsrs	r3, r3, #10
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <RCC_GetPCLK1ClockFreq+0x24>)
 8005602:	5cd3      	ldrb	r3, [r2, r3]
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	40d3      	lsrs	r3, r2
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	08008ba8 	.word	0x08008ba8

08005618 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005620:	f7ff ff3e 	bl	80054a0 <LL_RCC_GetAPB2Prescaler>
 8005624:	4603      	mov	r3, r0
 8005626:	0b5b      	lsrs	r3, r3, #13
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <RCC_GetPCLK2ClockFreq+0x24>)
 800562a:	5cd3      	ldrb	r3, [r2, r3]
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	40d3      	lsrs	r3, r2
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	08008ba8 	.word	0x08008ba8

08005640 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005654:	f7ff ff32 	bl	80054bc <LL_RCC_PLL_GetMainSource>
 8005658:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8005660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005664:	d003      	beq.n	800566e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8005666:	e005      	b.n	8005674 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005668:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800566a:	617b      	str	r3, [r7, #20]
      break;
 800566c:	e005      	b.n	800567a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005670:	617b      	str	r3, [r7, #20]
      break;
 8005672:	e002      	b.n	800567a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005676:	617b      	str	r3, [r7, #20]
      break;
 8005678:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d113      	bne.n	80056a8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005680:	f7ff ff46 	bl	8005510 <LL_RCC_PLL_GetDivider>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fbb3 f4f2 	udiv	r4, r3, r2
 800568c:	f7ff ff24 	bl	80054d8 <LL_RCC_PLL_GetN>
 8005690:	4603      	mov	r3, r0
 8005692:	fb03 f404 	mul.w	r4, r3, r4
 8005696:	f7ff ff2d 	bl	80054f4 <LL_RCC_PLL_GetP>
 800569a:	4603      	mov	r3, r0
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80056a6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80056a8:	693b      	ldr	r3, [r7, #16]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	017d7840 	.word	0x017d7840

080056bc <LL_SPI_IsEnabled>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d101      	bne.n	80056d4 <LL_SPI_IsEnabled+0x18>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <LL_SPI_IsEnabled+0x1a>
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <LL_SPI_SetCRCPolynomial>:
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ffd3 	bl	80056bc <LL_SPI_IsEnabled>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d139      	bne.n	8005790 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005724:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	6811      	ldr	r1, [r2, #0]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	4311      	orrs	r1, r2
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	6892      	ldr	r2, [r2, #8]
 8005736:	4311      	orrs	r1, r2
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	68d2      	ldr	r2, [r2, #12]
 800573c:	4311      	orrs	r1, r2
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	6912      	ldr	r2, [r2, #16]
 8005742:	4311      	orrs	r1, r2
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	6952      	ldr	r2, [r2, #20]
 8005748:	4311      	orrs	r1, r2
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	6992      	ldr	r2, [r2, #24]
 800574e:	4311      	orrs	r1, r2
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	69d2      	ldr	r2, [r2, #28]
 8005754:	4311      	orrs	r1, r2
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	6a12      	ldr	r2, [r2, #32]
 800575a:	430a      	orrs	r2, r1
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f023 0204 	bic.w	r2, r3, #4
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	d105      	bne.n	800578c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff ffab 	bl	80056e2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800578c:	2300      	movs	r3, #0
 800578e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	61da      	str	r2, [r3, #28]
  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <LL_TIM_SetPrescaler>:
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_TIM_SetAutoReload>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_TIM_SetRepetitionCounter>:
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_TIM_OC_SetCompareCH1>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	635a      	str	r2, [r3, #52]	; 0x34
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_TIM_OC_SetCompareCH2>:
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <LL_TIM_OC_SetCompareCH3>:
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_TIM_OC_SetCompareCH4>:
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	615a      	str	r2, [r3, #20]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3d      	ldr	r2, [pc, #244]	; (8005994 <LL_TIM_Init+0x108>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <LL_TIM_Init+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d00f      	beq.n	80058cc <LL_TIM_Init+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3a      	ldr	r2, [pc, #232]	; (8005998 <LL_TIM_Init+0x10c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <LL_TIM_Init+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a39      	ldr	r2, [pc, #228]	; (800599c <LL_TIM_Init+0x110>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <LL_TIM_Init+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a38      	ldr	r2, [pc, #224]	; (80059a0 <LL_TIM_Init+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <LL_TIM_Init+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a37      	ldr	r2, [pc, #220]	; (80059a4 <LL_TIM_Init+0x118>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d106      	bne.n	80058da <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2d      	ldr	r2, [pc, #180]	; (8005994 <LL_TIM_Init+0x108>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02b      	beq.n	800593a <LL_TIM_Init+0xae>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d027      	beq.n	800593a <LL_TIM_Init+0xae>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <LL_TIM_Init+0x10c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d023      	beq.n	800593a <LL_TIM_Init+0xae>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a29      	ldr	r2, [pc, #164]	; (800599c <LL_TIM_Init+0x110>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01f      	beq.n	800593a <LL_TIM_Init+0xae>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <LL_TIM_Init+0x114>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <LL_TIM_Init+0xae>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <LL_TIM_Init+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d017      	beq.n	800593a <LL_TIM_Init+0xae>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <LL_TIM_Init+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <LL_TIM_Init+0xae>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a25      	ldr	r2, [pc, #148]	; (80059ac <LL_TIM_Init+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <LL_TIM_Init+0xae>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <LL_TIM_Init+0x124>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <LL_TIM_Init+0xae>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a23      	ldr	r2, [pc, #140]	; (80059b4 <LL_TIM_Init+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <LL_TIM_Init+0xae>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <LL_TIM_Init+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <LL_TIM_Init+0xae>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a21      	ldr	r2, [pc, #132]	; (80059bc <LL_TIM_Init+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d106      	bne.n	8005948 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ff34 	bl	80057c2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff ff20 	bl	80057a6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <LL_TIM_Init+0x108>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <LL_TIM_Init+0xea>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <LL_TIM_Init+0x118>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d105      	bne.n	8005982 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	7c1b      	ldrb	r3, [r3, #16]
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ff2e 	bl	80057de <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff71 	bl	800586a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40010400 	.word	0x40010400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	40001800 	.word	0x40001800
 80059b8:	40001c00 	.word	0x40001c00
 80059bc:	40002000 	.word	0x40002000

080059c0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d012      	beq.n	80059fc <LL_TIM_OC_Init+0x3c>
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d802      	bhi.n	80059e0 <LL_TIM_OC_Init+0x20>
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d007      	beq.n	80059ee <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80059de:	e022      	b.n	8005a26 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e4:	d011      	beq.n	8005a0a <LL_TIM_OC_Init+0x4a>
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ea:	d015      	beq.n	8005a18 <LL_TIM_OC_Init+0x58>
      break;
 80059ec:	e01b      	b.n	8005a26 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f867 	bl	8005ac4 <OC1Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]
      break;
 80059fa:	e014      	b.n	8005a26 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f8cc 	bl	8005b9c <OC2Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e00d      	b.n	8005a26 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f935 	bl	8005c7c <OC3Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e006      	b.n	8005a26 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f99e 	bl	8005d5c <OC4Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	bf00      	nop
  }

  return result;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	7b12      	ldrb	r2, [r2, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	89d2      	ldrh	r2, [r2, #14]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 0202 	bic.w	r2, r3, #2
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <OC1Config+0xd0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <OC1Config+0x6a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <OC1Config+0xd4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d11e      	bne.n	8005b6c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0208 	bic.w	r2, r3, #8
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 0204 	bic.w	r2, r3, #4
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fe3b 	bl	80057fa <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40010400 	.word	0x40010400

08005b9c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f023 0210 	bic.w	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0220 	bic.w	r2, r3, #32
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <OC2Config+0xd8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <OC2Config+0x70>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <OC2Config+0xdc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d11f      	bne.n	8005c4c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	019b      	lsls	r3, r3, #6
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	019b      	lsls	r3, r3, #6
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fdd9 	bl	8005816 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <OC3Config+0xd8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <OC3Config+0x6e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <OC3Config+0xdc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d11f      	bne.n	8005d2a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	015b      	lsls	r3, r3, #5
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fd78 	bl	8005832 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400

08005d5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	031b      	lsls	r3, r3, #12
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	031b      	lsls	r3, r3, #12
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <OC4Config+0xa8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <OC4Config+0x70>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <OC4Config+0xac>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d107      	bne.n	8005ddc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	019b      	lsls	r3, r3, #6
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fd2d 	bl	800584e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40010400 	.word	0x40010400

08005e0c <LL_USART_IsEnabled>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_USART_SetStopBitsLength>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_USART_SetHWFlowCtrl>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	615a      	str	r2, [r3, #20]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_USART_SetBaudRate>:
{
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e96:	f040 80c1 	bne.w	800601c <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	461d      	mov	r5, r3
 8005e9e:	f04f 0600 	mov.w	r6, #0
 8005ea2:	46a8      	mov	r8, r5
 8005ea4:	46b1      	mov	r9, r6
 8005ea6:	eb18 0308 	adds.w	r3, r8, r8
 8005eaa:	eb49 0409 	adc.w	r4, r9, r9
 8005eae:	4698      	mov	r8, r3
 8005eb0:	46a1      	mov	r9, r4
 8005eb2:	eb18 0805 	adds.w	r8, r8, r5
 8005eb6:	eb49 0906 	adc.w	r9, r9, r6
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ece:	4688      	mov	r8, r1
 8005ed0:	4691      	mov	r9, r2
 8005ed2:	eb18 0005 	adds.w	r0, r8, r5
 8005ed6:	eb49 0106 	adc.w	r1, r9, r6
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	461d      	mov	r5, r3
 8005ede:	f04f 0600 	mov.w	r6, #0
 8005ee2:	196b      	adds	r3, r5, r5
 8005ee4:	eb46 0406 	adc.w	r4, r6, r6
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	f7fb f976 	bl	80011dc <__aeabi_uldivmod>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4bb5      	ldr	r3, [pc, #724]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8005ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	fa1f f883 	uxth.w	r8, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	46a9      	mov	r9, r5
 8005f10:	46b2      	mov	sl, r6
 8005f12:	eb19 0309 	adds.w	r3, r9, r9
 8005f16:	eb4a 040a 	adc.w	r4, sl, sl
 8005f1a:	4699      	mov	r9, r3
 8005f1c:	46a2      	mov	sl, r4
 8005f1e:	eb19 0905 	adds.w	r9, r9, r5
 8005f22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f3a:	4689      	mov	r9, r1
 8005f3c:	4692      	mov	sl, r2
 8005f3e:	eb19 0005 	adds.w	r0, r9, r5
 8005f42:	eb4a 0106 	adc.w	r1, sl, r6
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	461d      	mov	r5, r3
 8005f4a:	f04f 0600 	mov.w	r6, #0
 8005f4e:	196b      	adds	r3, r5, r5
 8005f50:	eb46 0406 	adc.w	r4, r6, r6
 8005f54:	461a      	mov	r2, r3
 8005f56:	4623      	mov	r3, r4
 8005f58:	f7fb f940 	bl	80011dc <__aeabi_uldivmod>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	461a      	mov	r2, r3
 8005f62:	4b9a      	ldr	r3, [pc, #616]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8005f64:	fba3 1302 	umull	r1, r3, r3, r2
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	2164      	movs	r1, #100	; 0x64
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	3332      	adds	r3, #50	; 0x32
 8005f76:	4a95      	ldr	r2, [pc, #596]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	4443      	add	r3, r8
 8005f8c:	fa1f f883 	uxth.w	r8, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	461d      	mov	r5, r3
 8005f94:	f04f 0600 	mov.w	r6, #0
 8005f98:	46a9      	mov	r9, r5
 8005f9a:	46b2      	mov	sl, r6
 8005f9c:	eb19 0309 	adds.w	r3, r9, r9
 8005fa0:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa4:	4699      	mov	r9, r3
 8005fa6:	46a2      	mov	sl, r4
 8005fa8:	eb19 0905 	adds.w	r9, r9, r5
 8005fac:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	4692      	mov	sl, r2
 8005fc8:	eb19 0005 	adds.w	r0, r9, r5
 8005fcc:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	f04f 0600 	mov.w	r6, #0
 8005fd8:	196b      	adds	r3, r5, r5
 8005fda:	eb46 0406 	adc.w	r4, r6, r6
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	f7fb f8fb 	bl	80011dc <__aeabi_uldivmod>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	460c      	mov	r4, r1
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b77      	ldr	r3, [pc, #476]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8005fee:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2164      	movs	r1, #100	; 0x64
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	3332      	adds	r3, #50	; 0x32
 8006000:	4a72      	ldr	r2, [pc, #456]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	b29b      	uxth	r3, r3
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	b29b      	uxth	r3, r3
 8006010:	4443      	add	r3, r8
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	609a      	str	r2, [r3, #8]
}
 800601a:	e0d2      	b.n	80061c2 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	469a      	mov	sl, r3
 8006020:	f04f 0b00 	mov.w	fp, #0
 8006024:	46d0      	mov	r8, sl
 8006026:	46d9      	mov	r9, fp
 8006028:	eb18 0308 	adds.w	r3, r8, r8
 800602c:	eb49 0409 	adc.w	r4, r9, r9
 8006030:	4698      	mov	r8, r3
 8006032:	46a1      	mov	r9, r4
 8006034:	eb18 080a 	adds.w	r8, r8, sl
 8006038:	eb49 090b 	adc.w	r9, r9, fp
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006048:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800604c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006050:	4688      	mov	r8, r1
 8006052:	4691      	mov	r9, r2
 8006054:	eb1a 0508 	adds.w	r5, sl, r8
 8006058:	eb4b 0609 	adc.w	r6, fp, r9
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	f04f 0400 	mov.w	r4, #0
 800606c:	0094      	lsls	r4, r2, #2
 800606e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006072:	008b      	lsls	r3, r1, #2
 8006074:	461a      	mov	r2, r3
 8006076:	4623      	mov	r3, r4
 8006078:	4628      	mov	r0, r5
 800607a:	4631      	mov	r1, r6
 800607c:	f7fb f8ae 	bl	80011dc <__aeabi_uldivmod>
 8006080:	4603      	mov	r3, r0
 8006082:	460c      	mov	r4, r1
 8006084:	461a      	mov	r2, r3
 8006086:	4b51      	ldr	r3, [pc, #324]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8006088:	fba3 2302 	umull	r2, r3, r3, r2
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	b29b      	uxth	r3, r3
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	fa1f f883 	uxth.w	r8, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	469b      	mov	fp, r3
 800609a:	f04f 0c00 	mov.w	ip, #0
 800609e:	46d9      	mov	r9, fp
 80060a0:	46e2      	mov	sl, ip
 80060a2:	eb19 0309 	adds.w	r3, r9, r9
 80060a6:	eb4a 040a 	adc.w	r4, sl, sl
 80060aa:	4699      	mov	r9, r3
 80060ac:	46a2      	mov	sl, r4
 80060ae:	eb19 090b 	adds.w	r9, r9, fp
 80060b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060b6:	f04f 0100 	mov.w	r1, #0
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060ca:	4689      	mov	r9, r1
 80060cc:	4692      	mov	sl, r2
 80060ce:	eb1b 0509 	adds.w	r5, fp, r9
 80060d2:	eb4c 060a 	adc.w	r6, ip, sl
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	4619      	mov	r1, r3
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	f04f 0400 	mov.w	r4, #0
 80060e6:	0094      	lsls	r4, r2, #2
 80060e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ec:	008b      	lsls	r3, r1, #2
 80060ee:	461a      	mov	r2, r3
 80060f0:	4623      	mov	r3, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	4631      	mov	r1, r6
 80060f6:	f7fb f871 	bl	80011dc <__aeabi_uldivmod>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	461a      	mov	r2, r3
 8006100:	4b32      	ldr	r3, [pc, #200]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8006102:	fba3 1302 	umull	r1, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2164      	movs	r1, #100	; 0x64
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	3332      	adds	r3, #50	; 0x32
 8006114:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	b29b      	uxth	r3, r3
 800611e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006122:	b29b      	uxth	r3, r3
 8006124:	4443      	add	r3, r8
 8006126:	fa1f f883 	uxth.w	r8, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	469b      	mov	fp, r3
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	46d9      	mov	r9, fp
 8006134:	46e2      	mov	sl, ip
 8006136:	eb19 0309 	adds.w	r3, r9, r9
 800613a:	eb4a 040a 	adc.w	r4, sl, sl
 800613e:	4699      	mov	r9, r3
 8006140:	46a2      	mov	sl, r4
 8006142:	eb19 090b 	adds.w	r9, r9, fp
 8006146:	eb4a 0a0c 	adc.w	sl, sl, ip
 800614a:	f04f 0100 	mov.w	r1, #0
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800615e:	4689      	mov	r9, r1
 8006160:	4692      	mov	sl, r2
 8006162:	eb1b 0509 	adds.w	r5, fp, r9
 8006166:	eb4c 060a 	adc.w	r6, ip, sl
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	f04f 0400 	mov.w	r4, #0
 800617a:	0094      	lsls	r4, r2, #2
 800617c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006180:	008b      	lsls	r3, r1, #2
 8006182:	461a      	mov	r2, r3
 8006184:	4623      	mov	r3, r4
 8006186:	4628      	mov	r0, r5
 8006188:	4631      	mov	r1, r6
 800618a:	f7fb f827 	bl	80011dc <__aeabi_uldivmod>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	461a      	mov	r2, r3
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 8006196:	fba3 1302 	umull	r1, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2164      	movs	r1, #100	; 0x64
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	3332      	adds	r3, #50	; 0x32
 80061a8:	4a08      	ldr	r2, [pc, #32]	; (80061cc <LL_USART_SetBaudRate+0x34c>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4443      	add	r3, r8
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	609a      	str	r2, [r3, #8]
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	51eb851f 	.word	0x51eb851f

080061d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe12 	bl	8005e0c <LL_USART_IsEnabled>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d15e      	bne.n	80062ac <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80061f6:	f023 030c 	bic.w	r3, r3, #12
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6851      	ldr	r1, [r2, #4]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	4311      	orrs	r1, r2
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	6912      	ldr	r2, [r2, #16]
 8006208:	4311      	orrs	r1, r2
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	6992      	ldr	r2, [r2, #24]
 800620e:	430a      	orrs	r2, r1
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe09 	bl	8005e34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fe16 	bl	8005e5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff f97a 	bl	800552c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1f      	ldr	r2, [pc, #124]	; (80062b8 <LL_USART_Init+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d102      	bne.n	8006246 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e021      	b.n	800628a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <LL_USART_Init+0xec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d102      	bne.n	8006254 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e01a      	b.n	800628a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <LL_USART_Init+0xf0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d102      	bne.n	8006262 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e013      	b.n	800628a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <LL_USART_Init+0xf4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d102      	bne.n	8006270 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	e00c      	b.n	800628a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <LL_USART_Init+0xf8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d102      	bne.n	800627e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e005      	b.n	800628a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a12      	ldr	r2, [pc, #72]	; (80062cc <LL_USART_Init+0xfc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006298:	2300      	movs	r3, #0
 800629a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fdea 	bl	8005e80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80062ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40011000 	.word	0x40011000
 80062bc:	40004400 	.word	0x40004400
 80062c0:	40004800 	.word	0x40004800
 80062c4:	40011400 	.word	0x40011400
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	40005000 	.word	0x40005000

080062d0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	4a07      	ldr	r2, [pc, #28]	; (8006300 <LL_InitTick+0x30>)
 80062e4:	3b01      	subs	r3, #1
 80062e6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <LL_InitTick+0x30>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ee:	4b04      	ldr	r3, [pc, #16]	; (8006300 <LL_InitTick+0x30>)
 80062f0:	2205      	movs	r2, #5
 80062f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	e000e010 	.word	0xe000e010

08006304 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800630c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffdd 	bl	80062d0 <LL_InitTick>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <LL_mDelay+0x44>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800632e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006336:	d00c      	beq.n	8006352 <LL_mDelay+0x32>
  {
    Delay++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3301      	adds	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800633e:	e008      	b.n	8006352 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <LL_mDelay+0x44>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <LL_mDelay+0x32>
    {
      Delay--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3b01      	subs	r3, #1
 8006350:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f3      	bne.n	8006340 <LL_mDelay+0x20>
    }
  }
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	e000e010 	.word	0xe000e010

08006368 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <LL_SetSystemCoreClock+0x1c>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6013      	str	r3, [r2, #0]
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000000 	.word	0x20000000

08006388 <arm_sin_f32>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	4923      	ldr	r1, [pc, #140]	; (8006418 <arm_sin_f32+0x90>)
 800638c:	f7fa fd1a 	bl	8000dc4 <__aeabi_fmul>
 8006390:	4604      	mov	r4, r0
 8006392:	f7fa fedd 	bl	8001150 <__aeabi_f2iz>
 8006396:	2100      	movs	r1, #0
 8006398:	4605      	mov	r5, r0
 800639a:	4620      	mov	r0, r4
 800639c:	f7fa feb0 	bl	8001100 <__aeabi_fcmplt>
 80063a0:	b100      	cbz	r0, 80063a4 <arm_sin_f32+0x1c>
 80063a2:	3d01      	subs	r5, #1
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7fa fcb9 	bl	8000d1c <__aeabi_i2f>
 80063aa:	4601      	mov	r1, r0
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7fa fbff 	bl	8000bb0 <__aeabi_fsub>
 80063b2:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 80063b6:	f7fa fd05 	bl	8000dc4 <__aeabi_fmul>
 80063ba:	4605      	mov	r5, r0
 80063bc:	f7fa feee 	bl	800119c <__aeabi_f2uiz>
 80063c0:	b284      	uxth	r4, r0
 80063c2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80063c6:	d21d      	bcs.n	8006404 <arm_sin_f32+0x7c>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7fa fca3 	bl	8000d14 <__aeabi_ui2f>
 80063ce:	4601      	mov	r1, r0
 80063d0:	4628      	mov	r0, r5
 80063d2:	f7fa fbed 	bl	8000bb0 <__aeabi_fsub>
 80063d6:	1c67      	adds	r7, r4, #1
 80063d8:	4605      	mov	r5, r0
 80063da:	4e10      	ldr	r6, [pc, #64]	; (800641c <arm_sin_f32+0x94>)
 80063dc:	4629      	mov	r1, r5
 80063de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80063e2:	f7fa fbe5 	bl	8000bb0 <__aeabi_fsub>
 80063e6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80063ea:	f7fa fceb 	bl	8000dc4 <__aeabi_fmul>
 80063ee:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 80063f2:	4604      	mov	r4, r0
 80063f4:	4628      	mov	r0, r5
 80063f6:	f7fa fce5 	bl	8000dc4 <__aeabi_fmul>
 80063fa:	4601      	mov	r1, r0
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7fa fbd9 	bl	8000bb4 <__addsf3>
 8006402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006404:	4628      	mov	r0, r5
 8006406:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 800640a:	f7fa fbd1 	bl	8000bb0 <__aeabi_fsub>
 800640e:	2701      	movs	r7, #1
 8006410:	4605      	mov	r5, r0
 8006412:	2400      	movs	r4, #0
 8006414:	e7e1      	b.n	80063da <arm_sin_f32+0x52>
 8006416:	bf00      	nop
 8006418:	3e22f983 	.word	0x3e22f983
 800641c:	08008bd0 	.word	0x08008bd0

08006420 <__errno>:
 8006420:	4b01      	ldr	r3, [pc, #4]	; (8006428 <__errno+0x8>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000008 	.word	0x20000008

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4e0d      	ldr	r6, [pc, #52]	; (8006464 <__libc_init_array+0x38>)
 8006430:	4c0d      	ldr	r4, [pc, #52]	; (8006468 <__libc_init_array+0x3c>)
 8006432:	1ba4      	subs	r4, r4, r6
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	2500      	movs	r5, #0
 8006438:	42a5      	cmp	r5, r4
 800643a:	d109      	bne.n	8006450 <__libc_init_array+0x24>
 800643c:	4e0b      	ldr	r6, [pc, #44]	; (800646c <__libc_init_array+0x40>)
 800643e:	4c0c      	ldr	r4, [pc, #48]	; (8006470 <__libc_init_array+0x44>)
 8006440:	f002 fb50 	bl	8008ae4 <_init>
 8006444:	1ba4      	subs	r4, r4, r6
 8006446:	10a4      	asrs	r4, r4, #2
 8006448:	2500      	movs	r5, #0
 800644a:	42a5      	cmp	r5, r4
 800644c:	d105      	bne.n	800645a <__libc_init_array+0x2e>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006454:	4798      	blx	r3
 8006456:	3501      	adds	r5, #1
 8006458:	e7ee      	b.n	8006438 <__libc_init_array+0xc>
 800645a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800645e:	4798      	blx	r3
 8006460:	3501      	adds	r5, #1
 8006462:	e7f2      	b.n	800644a <__libc_init_array+0x1e>
 8006464:	080096a0 	.word	0x080096a0
 8006468:	080096a0 	.word	0x080096a0
 800646c:	080096a0 	.word	0x080096a0
 8006470:	080096a4 	.word	0x080096a4

08006474 <memcpy>:
 8006474:	b510      	push	{r4, lr}
 8006476:	1e43      	subs	r3, r0, #1
 8006478:	440a      	add	r2, r1
 800647a:	4291      	cmp	r1, r2
 800647c:	d100      	bne.n	8006480 <memcpy+0xc>
 800647e:	bd10      	pop	{r4, pc}
 8006480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006488:	e7f7      	b.n	800647a <memcpy+0x6>

0800648a <memset>:
 800648a:	4402      	add	r2, r0
 800648c:	4603      	mov	r3, r0
 800648e:	4293      	cmp	r3, r2
 8006490:	d100      	bne.n	8006494 <memset+0xa>
 8006492:	4770      	bx	lr
 8006494:	f803 1b01 	strb.w	r1, [r3], #1
 8006498:	e7f9      	b.n	800648e <memset+0x4>

0800649a <__cvt>:
 800649a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80064a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80064a6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80064aa:	461d      	mov	r5, r3
 80064ac:	f027 0720 	bic.w	r7, r7, #32
 80064b0:	bfbb      	ittet	lt
 80064b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064b6:	461d      	movlt	r5, r3
 80064b8:	2300      	movge	r3, #0
 80064ba:	232d      	movlt	r3, #45	; 0x2d
 80064bc:	4614      	mov	r4, r2
 80064be:	bfb8      	it	lt
 80064c0:	4614      	movlt	r4, r2
 80064c2:	2f46      	cmp	r7, #70	; 0x46
 80064c4:	700b      	strb	r3, [r1, #0]
 80064c6:	d004      	beq.n	80064d2 <__cvt+0x38>
 80064c8:	2f45      	cmp	r7, #69	; 0x45
 80064ca:	d100      	bne.n	80064ce <__cvt+0x34>
 80064cc:	3601      	adds	r6, #1
 80064ce:	2302      	movs	r3, #2
 80064d0:	e000      	b.n	80064d4 <__cvt+0x3a>
 80064d2:	2303      	movs	r3, #3
 80064d4:	aa07      	add	r2, sp, #28
 80064d6:	9204      	str	r2, [sp, #16]
 80064d8:	aa06      	add	r2, sp, #24
 80064da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80064de:	e9cd 3600 	strd	r3, r6, [sp]
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	f000 fcdb 	bl	8006ea0 <_dtoa_r>
 80064ea:	2f47      	cmp	r7, #71	; 0x47
 80064ec:	4680      	mov	r8, r0
 80064ee:	d102      	bne.n	80064f6 <__cvt+0x5c>
 80064f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d526      	bpl.n	8006544 <__cvt+0xaa>
 80064f6:	2f46      	cmp	r7, #70	; 0x46
 80064f8:	eb08 0906 	add.w	r9, r8, r6
 80064fc:	d111      	bne.n	8006522 <__cvt+0x88>
 80064fe:	f898 3000 	ldrb.w	r3, [r8]
 8006502:	2b30      	cmp	r3, #48	; 0x30
 8006504:	d10a      	bne.n	800651c <__cvt+0x82>
 8006506:	2200      	movs	r2, #0
 8006508:	2300      	movs	r3, #0
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7fa fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006512:	b918      	cbnz	r0, 800651c <__cvt+0x82>
 8006514:	f1c6 0601 	rsb	r6, r6, #1
 8006518:	f8ca 6000 	str.w	r6, [sl]
 800651c:	f8da 3000 	ldr.w	r3, [sl]
 8006520:	4499      	add	r9, r3
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7fa facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800652e:	b938      	cbnz	r0, 8006540 <__cvt+0xa6>
 8006530:	2230      	movs	r2, #48	; 0x30
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	454b      	cmp	r3, r9
 8006536:	d205      	bcs.n	8006544 <__cvt+0xaa>
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	9107      	str	r1, [sp, #28]
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e7f8      	b.n	8006532 <__cvt+0x98>
 8006540:	f8cd 901c 	str.w	r9, [sp, #28]
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006548:	eba3 0308 	sub.w	r3, r3, r8
 800654c:	4640      	mov	r0, r8
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	b008      	add	sp, #32
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006556 <__exponent>:
 8006556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006558:	2900      	cmp	r1, #0
 800655a:	4604      	mov	r4, r0
 800655c:	bfba      	itte	lt
 800655e:	4249      	neglt	r1, r1
 8006560:	232d      	movlt	r3, #45	; 0x2d
 8006562:	232b      	movge	r3, #43	; 0x2b
 8006564:	2909      	cmp	r1, #9
 8006566:	f804 2b02 	strb.w	r2, [r4], #2
 800656a:	7043      	strb	r3, [r0, #1]
 800656c:	dd20      	ble.n	80065b0 <__exponent+0x5a>
 800656e:	f10d 0307 	add.w	r3, sp, #7
 8006572:	461f      	mov	r7, r3
 8006574:	260a      	movs	r6, #10
 8006576:	fb91 f5f6 	sdiv	r5, r1, r6
 800657a:	fb06 1115 	mls	r1, r6, r5, r1
 800657e:	3130      	adds	r1, #48	; 0x30
 8006580:	2d09      	cmp	r5, #9
 8006582:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006586:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800658a:	4629      	mov	r1, r5
 800658c:	dc09      	bgt.n	80065a2 <__exponent+0x4c>
 800658e:	3130      	adds	r1, #48	; 0x30
 8006590:	3b02      	subs	r3, #2
 8006592:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006596:	42bb      	cmp	r3, r7
 8006598:	4622      	mov	r2, r4
 800659a:	d304      	bcc.n	80065a6 <__exponent+0x50>
 800659c:	1a10      	subs	r0, r2, r0
 800659e:	b003      	add	sp, #12
 80065a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a2:	4613      	mov	r3, r2
 80065a4:	e7e7      	b.n	8006576 <__exponent+0x20>
 80065a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065aa:	f804 2b01 	strb.w	r2, [r4], #1
 80065ae:	e7f2      	b.n	8006596 <__exponent+0x40>
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	4419      	add	r1, r3
 80065b4:	7083      	strb	r3, [r0, #2]
 80065b6:	1d02      	adds	r2, r0, #4
 80065b8:	70c1      	strb	r1, [r0, #3]
 80065ba:	e7ef      	b.n	800659c <__exponent+0x46>

080065bc <_printf_float>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	b091      	sub	sp, #68	; 0x44
 80065c2:	460c      	mov	r4, r1
 80065c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80065c8:	4616      	mov	r6, r2
 80065ca:	461f      	mov	r7, r3
 80065cc:	4605      	mov	r5, r0
 80065ce:	f001 faef 	bl	8007bb0 <_localeconv_r>
 80065d2:	6803      	ldr	r3, [r0, #0]
 80065d4:	9308      	str	r3, [sp, #32]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7f9 fdfa 	bl	80001d0 <strlen>
 80065dc:	2300      	movs	r3, #0
 80065de:	930e      	str	r3, [sp, #56]	; 0x38
 80065e0:	f8d8 3000 	ldr.w	r3, [r8]
 80065e4:	9009      	str	r0, [sp, #36]	; 0x24
 80065e6:	3307      	adds	r3, #7
 80065e8:	f023 0307 	bic.w	r3, r3, #7
 80065ec:	f103 0208 	add.w	r2, r3, #8
 80065f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065f4:	f8d4 b000 	ldr.w	fp, [r4]
 80065f8:	f8c8 2000 	str.w	r2, [r8]
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006604:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006608:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800660c:	930b      	str	r3, [sp, #44]	; 0x2c
 800660e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006616:	4ba9      	ldr	r3, [pc, #676]	; (80068bc <_printf_float+0x300>)
 8006618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800661c:	f7fa fa86 	bl	8000b2c <__aeabi_dcmpun>
 8006620:	bb70      	cbnz	r0, 8006680 <_printf_float+0xc4>
 8006622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006626:	4ba5      	ldr	r3, [pc, #660]	; (80068bc <_printf_float+0x300>)
 8006628:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800662c:	f7fa fa60 	bl	8000af0 <__aeabi_dcmple>
 8006630:	bb30      	cbnz	r0, 8006680 <_printf_float+0xc4>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4640      	mov	r0, r8
 8006638:	4649      	mov	r1, r9
 800663a:	f7fa fa4f 	bl	8000adc <__aeabi_dcmplt>
 800663e:	b110      	cbz	r0, 8006646 <_printf_float+0x8a>
 8006640:	232d      	movs	r3, #45	; 0x2d
 8006642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006646:	4a9e      	ldr	r2, [pc, #632]	; (80068c0 <_printf_float+0x304>)
 8006648:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <_printf_float+0x308>)
 800664a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800664e:	bf8c      	ite	hi
 8006650:	4690      	movhi	r8, r2
 8006652:	4698      	movls	r8, r3
 8006654:	2303      	movs	r3, #3
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	f02b 0304 	bic.w	r3, fp, #4
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	f04f 0900 	mov.w	r9, #0
 8006662:	9700      	str	r7, [sp, #0]
 8006664:	4633      	mov	r3, r6
 8006666:	aa0f      	add	r2, sp, #60	; 0x3c
 8006668:	4621      	mov	r1, r4
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f9ec 	bl	8006a48 <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	f040 8090 	bne.w	8006796 <_printf_float+0x1da>
 8006676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800667a:	b011      	add	sp, #68	; 0x44
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7fa fa50 	bl	8000b2c <__aeabi_dcmpun>
 800668c:	b110      	cbz	r0, 8006694 <_printf_float+0xd8>
 800668e:	4a8e      	ldr	r2, [pc, #568]	; (80068c8 <_printf_float+0x30c>)
 8006690:	4b8e      	ldr	r3, [pc, #568]	; (80068cc <_printf_float+0x310>)
 8006692:	e7da      	b.n	800664a <_printf_float+0x8e>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800669c:	a90e      	add	r1, sp, #56	; 0x38
 800669e:	a80d      	add	r0, sp, #52	; 0x34
 80066a0:	d140      	bne.n	8006724 <_printf_float+0x168>
 80066a2:	2306      	movs	r3, #6
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80066aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80066ae:	f04f 0c00 	mov.w	ip, #0
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7ff fee8 	bl	800649a <__cvt>
 80066ca:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80066ce:	2b47      	cmp	r3, #71	; 0x47
 80066d0:	4680      	mov	r8, r0
 80066d2:	d109      	bne.n	80066e8 <_printf_float+0x12c>
 80066d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d6:	1cd8      	adds	r0, r3, #3
 80066d8:	db02      	blt.n	80066e0 <_printf_float+0x124>
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	4293      	cmp	r3, r2
 80066de:	dd47      	ble.n	8006770 <_printf_float+0x1b4>
 80066e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80066e4:	fa5f fa8a 	uxtb.w	sl, sl
 80066e8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066ee:	d824      	bhi.n	800673a <_printf_float+0x17e>
 80066f0:	3901      	subs	r1, #1
 80066f2:	4652      	mov	r2, sl
 80066f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066f8:	910d      	str	r1, [sp, #52]	; 0x34
 80066fa:	f7ff ff2c 	bl	8006556 <__exponent>
 80066fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006700:	1813      	adds	r3, r2, r0
 8006702:	2a01      	cmp	r2, #1
 8006704:	4681      	mov	r9, r0
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	dc02      	bgt.n	8006710 <_printf_float+0x154>
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	07d1      	lsls	r1, r2, #31
 800670e:	d501      	bpl.n	8006714 <_printf_float+0x158>
 8006710:	3301      	adds	r3, #1
 8006712:	6123      	str	r3, [r4, #16]
 8006714:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0a2      	beq.n	8006662 <_printf_float+0xa6>
 800671c:	232d      	movs	r3, #45	; 0x2d
 800671e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006722:	e79e      	b.n	8006662 <_printf_float+0xa6>
 8006724:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006728:	f000 8178 	beq.w	8006a1c <_printf_float+0x460>
 800672c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006730:	d1b9      	bne.n	80066a6 <_printf_float+0xea>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1b7      	bne.n	80066a6 <_printf_float+0xea>
 8006736:	2301      	movs	r3, #1
 8006738:	e7b4      	b.n	80066a4 <_printf_float+0xe8>
 800673a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800673e:	d119      	bne.n	8006774 <_printf_float+0x1b8>
 8006740:	2900      	cmp	r1, #0
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	dd0c      	ble.n	8006760 <_printf_float+0x1a4>
 8006746:	6121      	str	r1, [r4, #16]
 8006748:	b913      	cbnz	r3, 8006750 <_printf_float+0x194>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	07d2      	lsls	r2, r2, #31
 800674e:	d502      	bpl.n	8006756 <_printf_float+0x19a>
 8006750:	3301      	adds	r3, #1
 8006752:	440b      	add	r3, r1
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006758:	65a3      	str	r3, [r4, #88]	; 0x58
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	e7d9      	b.n	8006714 <_printf_float+0x158>
 8006760:	b913      	cbnz	r3, 8006768 <_printf_float+0x1ac>
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	07d0      	lsls	r0, r2, #31
 8006766:	d501      	bpl.n	800676c <_printf_float+0x1b0>
 8006768:	3302      	adds	r3, #2
 800676a:	e7f3      	b.n	8006754 <_printf_float+0x198>
 800676c:	2301      	movs	r3, #1
 800676e:	e7f1      	b.n	8006754 <_printf_float+0x198>
 8006770:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006774:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006778:	4293      	cmp	r3, r2
 800677a:	db05      	blt.n	8006788 <_printf_float+0x1cc>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	07d1      	lsls	r1, r2, #31
 8006782:	d5e8      	bpl.n	8006756 <_printf_float+0x19a>
 8006784:	3301      	adds	r3, #1
 8006786:	e7e5      	b.n	8006754 <_printf_float+0x198>
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfd4      	ite	le
 800678c:	f1c3 0302 	rsble	r3, r3, #2
 8006790:	2301      	movgt	r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	e7de      	b.n	8006754 <_printf_float+0x198>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	055a      	lsls	r2, r3, #21
 800679a:	d407      	bmi.n	80067ac <_printf_float+0x1f0>
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	4642      	mov	r2, r8
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	d12b      	bne.n	8006802 <_printf_float+0x246>
 80067aa:	e764      	b.n	8006676 <_printf_float+0xba>
 80067ac:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067b0:	f240 80dd 	bls.w	800696e <_printf_float+0x3b2>
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067bc:	f7fa f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d033      	beq.n	800682c <_printf_float+0x270>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4a42      	ldr	r2, [pc, #264]	; (80068d0 <_printf_float+0x314>)
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af51 	beq.w	8006676 <_printf_float+0xba>
 80067d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067d8:	429a      	cmp	r2, r3
 80067da:	db02      	blt.n	80067e2 <_printf_float+0x226>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07d8      	lsls	r0, r3, #31
 80067e0:	d50f      	bpl.n	8006802 <_printf_float+0x246>
 80067e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067e6:	4631      	mov	r1, r6
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b8      	blx	r7
 80067ec:	3001      	adds	r0, #1
 80067ee:	f43f af42 	beq.w	8006676 <_printf_float+0xba>
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	f104 091a 	add.w	r9, r4, #26
 80067fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067fc:	3b01      	subs	r3, #1
 80067fe:	4543      	cmp	r3, r8
 8006800:	dc09      	bgt.n	8006816 <_printf_float+0x25a>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	079b      	lsls	r3, r3, #30
 8006806:	f100 8104 	bmi.w	8006a12 <_printf_float+0x456>
 800680a:	68e0      	ldr	r0, [r4, #12]
 800680c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800680e:	4298      	cmp	r0, r3
 8006810:	bfb8      	it	lt
 8006812:	4618      	movlt	r0, r3
 8006814:	e731      	b.n	800667a <_printf_float+0xbe>
 8006816:	2301      	movs	r3, #1
 8006818:	464a      	mov	r2, r9
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	f43f af28 	beq.w	8006676 <_printf_float+0xba>
 8006826:	f108 0801 	add.w	r8, r8, #1
 800682a:	e7e6      	b.n	80067fa <_printf_float+0x23e>
 800682c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	dc2b      	bgt.n	800688a <_printf_float+0x2ce>
 8006832:	2301      	movs	r3, #1
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <_printf_float+0x314>)
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f af1a 	beq.w	8006676 <_printf_float+0xba>
 8006842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006844:	b923      	cbnz	r3, 8006850 <_printf_float+0x294>
 8006846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006848:	b913      	cbnz	r3, 8006850 <_printf_float+0x294>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	d5d8      	bpl.n	8006802 <_printf_float+0x246>
 8006850:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f af0b 	beq.w	8006676 <_printf_float+0xba>
 8006860:	f04f 0900 	mov.w	r9, #0
 8006864:	f104 0a1a 	add.w	sl, r4, #26
 8006868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800686a:	425b      	negs	r3, r3
 800686c:	454b      	cmp	r3, r9
 800686e:	dc01      	bgt.n	8006874 <_printf_float+0x2b8>
 8006870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006872:	e794      	b.n	800679e <_printf_float+0x1e2>
 8006874:	2301      	movs	r3, #1
 8006876:	4652      	mov	r2, sl
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f aef9 	beq.w	8006676 <_printf_float+0xba>
 8006884:	f109 0901 	add.w	r9, r9, #1
 8006888:	e7ee      	b.n	8006868 <_printf_float+0x2ac>
 800688a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800688c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800688e:	429a      	cmp	r2, r3
 8006890:	bfa8      	it	ge
 8006892:	461a      	movge	r2, r3
 8006894:	2a00      	cmp	r2, #0
 8006896:	4691      	mov	r9, r2
 8006898:	dd07      	ble.n	80068aa <_printf_float+0x2ee>
 800689a:	4613      	mov	r3, r2
 800689c:	4631      	mov	r1, r6
 800689e:	4642      	mov	r2, r8
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	f43f aee6 	beq.w	8006676 <_printf_float+0xba>
 80068aa:	f104 031a 	add.w	r3, r4, #26
 80068ae:	f04f 0b00 	mov.w	fp, #0
 80068b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068b6:	930a      	str	r3, [sp, #40]	; 0x28
 80068b8:	e016      	b.n	80068e8 <_printf_float+0x32c>
 80068ba:	bf00      	nop
 80068bc:	7fefffff 	.word	0x7fefffff
 80068c0:	080093dc 	.word	0x080093dc
 80068c4:	080093d8 	.word	0x080093d8
 80068c8:	080093e4 	.word	0x080093e4
 80068cc:	080093e0 	.word	0x080093e0
 80068d0:	080093e8 	.word	0x080093e8
 80068d4:	2301      	movs	r3, #1
 80068d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f aec9 	beq.w	8006676 <_printf_float+0xba>
 80068e4:	f10b 0b01 	add.w	fp, fp, #1
 80068e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80068ec:	ebaa 0309 	sub.w	r3, sl, r9
 80068f0:	455b      	cmp	r3, fp
 80068f2:	dcef      	bgt.n	80068d4 <_printf_float+0x318>
 80068f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068f8:	429a      	cmp	r2, r3
 80068fa:	44d0      	add	r8, sl
 80068fc:	db15      	blt.n	800692a <_printf_float+0x36e>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	07da      	lsls	r2, r3, #31
 8006902:	d412      	bmi.n	800692a <_printf_float+0x36e>
 8006904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006906:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006908:	eba3 020a 	sub.w	r2, r3, sl
 800690c:	eba3 0a01 	sub.w	sl, r3, r1
 8006910:	4592      	cmp	sl, r2
 8006912:	bfa8      	it	ge
 8006914:	4692      	movge	sl, r2
 8006916:	f1ba 0f00 	cmp.w	sl, #0
 800691a:	dc0e      	bgt.n	800693a <_printf_float+0x37e>
 800691c:	f04f 0800 	mov.w	r8, #0
 8006920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006924:	f104 091a 	add.w	r9, r4, #26
 8006928:	e019      	b.n	800695e <_printf_float+0x3a2>
 800692a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d1e5      	bne.n	8006904 <_printf_float+0x348>
 8006938:	e69d      	b.n	8006676 <_printf_float+0xba>
 800693a:	4653      	mov	r3, sl
 800693c:	4642      	mov	r2, r8
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d1e9      	bne.n	800691c <_printf_float+0x360>
 8006948:	e695      	b.n	8006676 <_printf_float+0xba>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae8e 	beq.w	8006676 <_printf_float+0xba>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	eba3 030a 	sub.w	r3, r3, sl
 8006968:	4543      	cmp	r3, r8
 800696a:	dcee      	bgt.n	800694a <_printf_float+0x38e>
 800696c:	e749      	b.n	8006802 <_printf_float+0x246>
 800696e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006970:	2a01      	cmp	r2, #1
 8006972:	dc01      	bgt.n	8006978 <_printf_float+0x3bc>
 8006974:	07db      	lsls	r3, r3, #31
 8006976:	d53a      	bpl.n	80069ee <_printf_float+0x432>
 8006978:	2301      	movs	r3, #1
 800697a:	4642      	mov	r2, r8
 800697c:	4631      	mov	r1, r6
 800697e:	4628      	mov	r0, r5
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f ae77 	beq.w	8006676 <_printf_float+0xba>
 8006988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f108 0801 	add.w	r8, r8, #1
 8006998:	f43f ae6d 	beq.w	8006676 <_printf_float+0xba>
 800699c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699e:	2200      	movs	r2, #0
 80069a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80069a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a8:	2300      	movs	r3, #0
 80069aa:	f7fa f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ae:	b9c8      	cbnz	r0, 80069e4 <_printf_float+0x428>
 80069b0:	4653      	mov	r3, sl
 80069b2:	4642      	mov	r2, r8
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	d10e      	bne.n	80069dc <_printf_float+0x420>
 80069be:	e65a      	b.n	8006676 <_printf_float+0xba>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4652      	mov	r2, sl
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f ae53 	beq.w	8006676 <_printf_float+0xba>
 80069d0:	f108 0801 	add.w	r8, r8, #1
 80069d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d6:	3b01      	subs	r3, #1
 80069d8:	4543      	cmp	r3, r8
 80069da:	dcf1      	bgt.n	80069c0 <_printf_float+0x404>
 80069dc:	464b      	mov	r3, r9
 80069de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069e2:	e6dd      	b.n	80067a0 <_printf_float+0x1e4>
 80069e4:	f04f 0800 	mov.w	r8, #0
 80069e8:	f104 0a1a 	add.w	sl, r4, #26
 80069ec:	e7f2      	b.n	80069d4 <_printf_float+0x418>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7df      	b.n	80069b2 <_printf_float+0x3f6>
 80069f2:	2301      	movs	r3, #1
 80069f4:	464a      	mov	r2, r9
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae3a 	beq.w	8006676 <_printf_float+0xba>
 8006a02:	f108 0801 	add.w	r8, r8, #1
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	4543      	cmp	r3, r8
 8006a0e:	dcf0      	bgt.n	80069f2 <_printf_float+0x436>
 8006a10:	e6fb      	b.n	800680a <_printf_float+0x24e>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	f104 0919 	add.w	r9, r4, #25
 8006a1a:	e7f4      	b.n	8006a06 <_printf_float+0x44a>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f43f ae8a 	beq.w	8006736 <_printf_float+0x17a>
 8006a22:	f04f 0c00 	mov.w	ip, #0
 8006a26:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006a2a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 8006a34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	464b      	mov	r3, r9
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7ff fd2b 	bl	800649a <__cvt>
 8006a44:	4680      	mov	r8, r0
 8006a46:	e645      	b.n	80066d4 <_printf_float+0x118>

08006a48 <_printf_common>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	4691      	mov	r9, r2
 8006a4e:	461f      	mov	r7, r3
 8006a50:	688a      	ldr	r2, [r1, #8]
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bfb8      	it	lt
 8006a5c:	4613      	movlt	r3, r2
 8006a5e:	f8c9 3000 	str.w	r3, [r9]
 8006a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a66:	4606      	mov	r6, r0
 8006a68:	460c      	mov	r4, r1
 8006a6a:	b112      	cbz	r2, 8006a72 <_printf_common+0x2a>
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8c9 3000 	str.w	r3, [r9]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	0699      	lsls	r1, r3, #26
 8006a76:	bf42      	ittt	mi
 8006a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a7c:	3302      	addmi	r3, #2
 8006a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d107      	bne.n	8006a9a <_printf_common+0x52>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	f8d9 2000 	ldr.w	r2, [r9]
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	42ab      	cmp	r3, r5
 8006a98:	dc28      	bgt.n	8006aec <_printf_common+0xa4>
 8006a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	3300      	adds	r3, #0
 8006aa2:	bf18      	it	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	0692      	lsls	r2, r2, #26
 8006aa8:	d42d      	bmi.n	8006b06 <_printf_common+0xbe>
 8006aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	47c0      	blx	r8
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d020      	beq.n	8006afa <_printf_common+0xb2>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	68e5      	ldr	r5, [r4, #12]
 8006abc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ac0:	f003 0306 	and.w	r3, r3, #6
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	bf08      	it	eq
 8006ac8:	1aad      	subeq	r5, r5, r2
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	f04f 0900 	mov.w	r9, #0
 8006ae2:	341a      	adds	r4, #26
 8006ae4:	454d      	cmp	r5, r9
 8006ae6:	d11a      	bne.n	8006b1e <_printf_common+0xd6>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e008      	b.n	8006afe <_printf_common+0xb6>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4652      	mov	r2, sl
 8006af0:	4639      	mov	r1, r7
 8006af2:	4630      	mov	r0, r6
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d103      	bne.n	8006b02 <_printf_common+0xba>
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	3501      	adds	r5, #1
 8006b04:	e7c3      	b.n	8006a8e <_printf_common+0x46>
 8006b06:	18e1      	adds	r1, r4, r3
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	2030      	movs	r0, #48	; 0x30
 8006b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b10:	4422      	add	r2, r4
 8006b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	e7c5      	b.n	8006aaa <_printf_common+0x62>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4622      	mov	r2, r4
 8006b22:	4639      	mov	r1, r7
 8006b24:	4630      	mov	r0, r6
 8006b26:	47c0      	blx	r8
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0e6      	beq.n	8006afa <_printf_common+0xb2>
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	e7d8      	b.n	8006ae4 <_printf_common+0x9c>
	...

08006b34 <_printf_i>:
 8006b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	7e09      	ldrb	r1, [r1, #24]
 8006b40:	b085      	sub	sp, #20
 8006b42:	296e      	cmp	r1, #110	; 0x6e
 8006b44:	4617      	mov	r7, r2
 8006b46:	4606      	mov	r6, r0
 8006b48:	4698      	mov	r8, r3
 8006b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b4c:	f000 80b3 	beq.w	8006cb6 <_printf_i+0x182>
 8006b50:	d822      	bhi.n	8006b98 <_printf_i+0x64>
 8006b52:	2963      	cmp	r1, #99	; 0x63
 8006b54:	d036      	beq.n	8006bc4 <_printf_i+0x90>
 8006b56:	d80a      	bhi.n	8006b6e <_printf_i+0x3a>
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	f000 80b9 	beq.w	8006cd0 <_printf_i+0x19c>
 8006b5e:	2958      	cmp	r1, #88	; 0x58
 8006b60:	f000 8083 	beq.w	8006c6a <_printf_i+0x136>
 8006b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b6c:	e032      	b.n	8006bd4 <_printf_i+0xa0>
 8006b6e:	2964      	cmp	r1, #100	; 0x64
 8006b70:	d001      	beq.n	8006b76 <_printf_i+0x42>
 8006b72:	2969      	cmp	r1, #105	; 0x69
 8006b74:	d1f6      	bne.n	8006b64 <_printf_i+0x30>
 8006b76:	6820      	ldr	r0, [r4, #0]
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	0605      	lsls	r5, r0, #24
 8006b7c:	f103 0104 	add.w	r1, r3, #4
 8006b80:	d52a      	bpl.n	8006bd8 <_printf_i+0xa4>
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da03      	bge.n	8006b92 <_printf_i+0x5e>
 8006b8a:	222d      	movs	r2, #45	; 0x2d
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b92:	486f      	ldr	r0, [pc, #444]	; (8006d50 <_printf_i+0x21c>)
 8006b94:	220a      	movs	r2, #10
 8006b96:	e039      	b.n	8006c0c <_printf_i+0xd8>
 8006b98:	2973      	cmp	r1, #115	; 0x73
 8006b9a:	f000 809d 	beq.w	8006cd8 <_printf_i+0x1a4>
 8006b9e:	d808      	bhi.n	8006bb2 <_printf_i+0x7e>
 8006ba0:	296f      	cmp	r1, #111	; 0x6f
 8006ba2:	d020      	beq.n	8006be6 <_printf_i+0xb2>
 8006ba4:	2970      	cmp	r1, #112	; 0x70
 8006ba6:	d1dd      	bne.n	8006b64 <_printf_i+0x30>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	f043 0320 	orr.w	r3, r3, #32
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	e003      	b.n	8006bba <_printf_i+0x86>
 8006bb2:	2975      	cmp	r1, #117	; 0x75
 8006bb4:	d017      	beq.n	8006be6 <_printf_i+0xb2>
 8006bb6:	2978      	cmp	r1, #120	; 0x78
 8006bb8:	d1d4      	bne.n	8006b64 <_printf_i+0x30>
 8006bba:	2378      	movs	r3, #120	; 0x78
 8006bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc0:	4864      	ldr	r0, [pc, #400]	; (8006d54 <_printf_i+0x220>)
 8006bc2:	e055      	b.n	8006c70 <_printf_i+0x13c>
 8006bc4:	6813      	ldr	r3, [r2, #0]
 8006bc6:	1d19      	adds	r1, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6011      	str	r1, [r2, #0]
 8006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e08c      	b.n	8006cf2 <_printf_i+0x1be>
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6011      	str	r1, [r2, #0]
 8006bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006be0:	bf18      	it	ne
 8006be2:	b21b      	sxthne	r3, r3
 8006be4:	e7cf      	b.n	8006b86 <_printf_i+0x52>
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	6825      	ldr	r5, [r4, #0]
 8006bea:	1d18      	adds	r0, r3, #4
 8006bec:	6010      	str	r0, [r2, #0]
 8006bee:	0628      	lsls	r0, r5, #24
 8006bf0:	d501      	bpl.n	8006bf6 <_printf_i+0xc2>
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	e002      	b.n	8006bfc <_printf_i+0xc8>
 8006bf6:	0668      	lsls	r0, r5, #25
 8006bf8:	d5fb      	bpl.n	8006bf2 <_printf_i+0xbe>
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	4854      	ldr	r0, [pc, #336]	; (8006d50 <_printf_i+0x21c>)
 8006bfe:	296f      	cmp	r1, #111	; 0x6f
 8006c00:	bf14      	ite	ne
 8006c02:	220a      	movne	r2, #10
 8006c04:	2208      	moveq	r2, #8
 8006c06:	2100      	movs	r1, #0
 8006c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c0c:	6865      	ldr	r5, [r4, #4]
 8006c0e:	60a5      	str	r5, [r4, #8]
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	f2c0 8095 	blt.w	8006d40 <_printf_i+0x20c>
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	f021 0104 	bic.w	r1, r1, #4
 8006c1c:	6021      	str	r1, [r4, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13d      	bne.n	8006c9e <_printf_i+0x16a>
 8006c22:	2d00      	cmp	r5, #0
 8006c24:	f040 808e 	bne.w	8006d44 <_printf_i+0x210>
 8006c28:	4665      	mov	r5, ip
 8006c2a:	2a08      	cmp	r2, #8
 8006c2c:	d10b      	bne.n	8006c46 <_printf_i+0x112>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	07db      	lsls	r3, r3, #31
 8006c32:	d508      	bpl.n	8006c46 <_printf_i+0x112>
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bfde      	ittt	le
 8006c3c:	2330      	movle	r3, #48	; 0x30
 8006c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c46:	ebac 0305 	sub.w	r3, ip, r5
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	f8cd 8000 	str.w	r8, [sp]
 8006c50:	463b      	mov	r3, r7
 8006c52:	aa03      	add	r2, sp, #12
 8006c54:	4621      	mov	r1, r4
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff fef6 	bl	8006a48 <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d14d      	bne.n	8006cfc <_printf_i+0x1c8>
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c64:	b005      	add	sp, #20
 8006c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	4839      	ldr	r0, [pc, #228]	; (8006d50 <_printf_i+0x21c>)
 8006c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c70:	6813      	ldr	r3, [r2, #0]
 8006c72:	6821      	ldr	r1, [r4, #0]
 8006c74:	1d1d      	adds	r5, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6015      	str	r5, [r2, #0]
 8006c7a:	060a      	lsls	r2, r1, #24
 8006c7c:	d50b      	bpl.n	8006c96 <_printf_i+0x162>
 8006c7e:	07ca      	lsls	r2, r1, #31
 8006c80:	bf44      	itt	mi
 8006c82:	f041 0120 	orrmi.w	r1, r1, #32
 8006c86:	6021      	strmi	r1, [r4, #0]
 8006c88:	b91b      	cbnz	r3, 8006c92 <_printf_i+0x15e>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	f022 0220 	bic.w	r2, r2, #32
 8006c90:	6022      	str	r2, [r4, #0]
 8006c92:	2210      	movs	r2, #16
 8006c94:	e7b7      	b.n	8006c06 <_printf_i+0xd2>
 8006c96:	064d      	lsls	r5, r1, #25
 8006c98:	bf48      	it	mi
 8006c9a:	b29b      	uxthmi	r3, r3
 8006c9c:	e7ef      	b.n	8006c7e <_printf_i+0x14a>
 8006c9e:	4665      	mov	r5, ip
 8006ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ca8:	5cc3      	ldrb	r3, [r0, r3]
 8006caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cae:	460b      	mov	r3, r1
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d1f5      	bne.n	8006ca0 <_printf_i+0x16c>
 8006cb4:	e7b9      	b.n	8006c2a <_printf_i+0xf6>
 8006cb6:	6813      	ldr	r3, [r2, #0]
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	6961      	ldr	r1, [r4, #20]
 8006cbc:	1d18      	adds	r0, r3, #4
 8006cbe:	6010      	str	r0, [r2, #0]
 8006cc0:	0628      	lsls	r0, r5, #24
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	d501      	bpl.n	8006cca <_printf_i+0x196>
 8006cc6:	6019      	str	r1, [r3, #0]
 8006cc8:	e002      	b.n	8006cd0 <_printf_i+0x19c>
 8006cca:	066a      	lsls	r2, r5, #25
 8006ccc:	d5fb      	bpl.n	8006cc6 <_printf_i+0x192>
 8006cce:	8019      	strh	r1, [r3, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	4665      	mov	r5, ip
 8006cd6:	e7b9      	b.n	8006c4c <_printf_i+0x118>
 8006cd8:	6813      	ldr	r3, [r2, #0]
 8006cda:	1d19      	adds	r1, r3, #4
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	681d      	ldr	r5, [r3, #0]
 8006ce0:	6862      	ldr	r2, [r4, #4]
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7f9 fa7b 	bl	80001e0 <memchr>
 8006cea:	b108      	cbz	r0, 8006cf0 <_printf_i+0x1bc>
 8006cec:	1b40      	subs	r0, r0, r5
 8006cee:	6060      	str	r0, [r4, #4]
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cfa:	e7a7      	b.n	8006c4c <_printf_i+0x118>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4639      	mov	r1, r7
 8006d02:	4630      	mov	r0, r6
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0aa      	beq.n	8006c60 <_printf_i+0x12c>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	079b      	lsls	r3, r3, #30
 8006d0e:	d413      	bmi.n	8006d38 <_printf_i+0x204>
 8006d10:	68e0      	ldr	r0, [r4, #12]
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	4298      	cmp	r0, r3
 8006d16:	bfb8      	it	lt
 8006d18:	4618      	movlt	r0, r3
 8006d1a:	e7a3      	b.n	8006c64 <_printf_i+0x130>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	464a      	mov	r2, r9
 8006d20:	4639      	mov	r1, r7
 8006d22:	4630      	mov	r0, r6
 8006d24:	47c0      	blx	r8
 8006d26:	3001      	adds	r0, #1
 8006d28:	d09a      	beq.n	8006c60 <_printf_i+0x12c>
 8006d2a:	3501      	adds	r5, #1
 8006d2c:	68e3      	ldr	r3, [r4, #12]
 8006d2e:	9a03      	ldr	r2, [sp, #12]
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	dcf2      	bgt.n	8006d1c <_printf_i+0x1e8>
 8006d36:	e7eb      	b.n	8006d10 <_printf_i+0x1dc>
 8006d38:	2500      	movs	r5, #0
 8006d3a:	f104 0919 	add.w	r9, r4, #25
 8006d3e:	e7f5      	b.n	8006d2c <_printf_i+0x1f8>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ac      	bne.n	8006c9e <_printf_i+0x16a>
 8006d44:	7803      	ldrb	r3, [r0, #0]
 8006d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d4e:	e76c      	b.n	8006c2a <_printf_i+0xf6>
 8006d50:	080093ea 	.word	0x080093ea
 8006d54:	080093fb 	.word	0x080093fb

08006d58 <iprintf>:
 8006d58:	b40f      	push	{r0, r1, r2, r3}
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <iprintf+0x2c>)
 8006d5c:	b513      	push	{r0, r1, r4, lr}
 8006d5e:	681c      	ldr	r4, [r3, #0]
 8006d60:	b124      	cbz	r4, 8006d6c <iprintf+0x14>
 8006d62:	69a3      	ldr	r3, [r4, #24]
 8006d64:	b913      	cbnz	r3, 8006d6c <iprintf+0x14>
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 fe98 	bl	8007a9c <__sinit>
 8006d6c:	ab05      	add	r3, sp, #20
 8006d6e:	9a04      	ldr	r2, [sp, #16]
 8006d70:	68a1      	ldr	r1, [r4, #8]
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	4620      	mov	r0, r4
 8006d76:	f001 faed 	bl	8008354 <_vfiprintf_r>
 8006d7a:	b002      	add	sp, #8
 8006d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	20000008 	.word	0x20000008

08006d88 <quorem>:
 8006d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	6903      	ldr	r3, [r0, #16]
 8006d8e:	690c      	ldr	r4, [r1, #16]
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	4680      	mov	r8, r0
 8006d94:	f2c0 8082 	blt.w	8006e9c <quorem+0x114>
 8006d98:	3c01      	subs	r4, #1
 8006d9a:	f101 0714 	add.w	r7, r1, #20
 8006d9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006da2:	f100 0614 	add.w	r6, r0, #20
 8006da6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006daa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006dae:	eb06 030c 	add.w	r3, r6, ip
 8006db2:	3501      	adds	r5, #1
 8006db4:	eb07 090c 	add.w	r9, r7, ip
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	fbb0 f5f5 	udiv	r5, r0, r5
 8006dbe:	b395      	cbz	r5, 8006e26 <quorem+0x9e>
 8006dc0:	f04f 0a00 	mov.w	sl, #0
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	46b6      	mov	lr, r6
 8006dc8:	46d3      	mov	fp, sl
 8006dca:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dce:	b293      	uxth	r3, r2
 8006dd0:	fb05 a303 	mla	r3, r5, r3, sl
 8006dd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	ebab 0303 	sub.w	r3, fp, r3
 8006dde:	0c12      	lsrs	r2, r2, #16
 8006de0:	f8de b000 	ldr.w	fp, [lr]
 8006de4:	fb05 a202 	mla	r2, r5, r2, sl
 8006de8:	fa13 f38b 	uxtah	r3, r3, fp
 8006dec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006df0:	fa1f fb82 	uxth.w	fp, r2
 8006df4:	f8de 2000 	ldr.w	r2, [lr]
 8006df8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e06:	4581      	cmp	r9, r0
 8006e08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e0c:	f84e 3b04 	str.w	r3, [lr], #4
 8006e10:	d2db      	bcs.n	8006dca <quorem+0x42>
 8006e12:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e16:	b933      	cbnz	r3, 8006e26 <quorem+0x9e>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	3b04      	subs	r3, #4
 8006e1c:	429e      	cmp	r6, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	d330      	bcc.n	8006e84 <quorem+0xfc>
 8006e22:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e26:	4640      	mov	r0, r8
 8006e28:	f001 f8ee 	bl	8008008 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	db25      	blt.n	8006e7c <quorem+0xf4>
 8006e30:	3501      	adds	r5, #1
 8006e32:	4630      	mov	r0, r6
 8006e34:	f04f 0c00 	mov.w	ip, #0
 8006e38:	f857 2b04 	ldr.w	r2, [r7], #4
 8006e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8006e40:	b293      	uxth	r3, r2
 8006e42:	ebac 0303 	sub.w	r3, ip, r3
 8006e46:	0c12      	lsrs	r2, r2, #16
 8006e48:	fa13 f38e 	uxtah	r3, r3, lr
 8006e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e5a:	45b9      	cmp	r9, r7
 8006e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e60:	f840 3b04 	str.w	r3, [r0], #4
 8006e64:	d2e8      	bcs.n	8006e38 <quorem+0xb0>
 8006e66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006e6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006e6e:	b92a      	cbnz	r2, 8006e7c <quorem+0xf4>
 8006e70:	3b04      	subs	r3, #4
 8006e72:	429e      	cmp	r6, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	d30b      	bcc.n	8006e90 <quorem+0x108>
 8006e78:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	b003      	add	sp, #12
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	3b04      	subs	r3, #4
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d1ca      	bne.n	8006e22 <quorem+0x9a>
 8006e8c:	3c01      	subs	r4, #1
 8006e8e:	e7c5      	b.n	8006e1c <quorem+0x94>
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	3b04      	subs	r3, #4
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	d1ef      	bne.n	8006e78 <quorem+0xf0>
 8006e98:	3c01      	subs	r4, #1
 8006e9a:	e7ea      	b.n	8006e72 <quorem+0xea>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	e7ee      	b.n	8006e7e <quorem+0xf6>

08006ea0 <_dtoa_r>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ea6:	b097      	sub	sp, #92	; 0x5c
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	461f      	mov	r7, r3
 8006eac:	4604      	mov	r4, r0
 8006eae:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8006eb2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006eb6:	b93d      	cbnz	r5, 8006ec8 <_dtoa_r+0x28>
 8006eb8:	2010      	movs	r0, #16
 8006eba:	f000 fe87 	bl	8007bcc <malloc>
 8006ebe:	6260      	str	r0, [r4, #36]	; 0x24
 8006ec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ec4:	6005      	str	r5, [r0, #0]
 8006ec6:	60c5      	str	r5, [r0, #12]
 8006ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	b151      	cbz	r1, 8006ee4 <_dtoa_r+0x44>
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	604a      	str	r2, [r1, #4]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4093      	lsls	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 feb3 	bl	8007c44 <_Bfree>
 8006ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	1e3b      	subs	r3, r7, #0
 8006ee6:	bfbb      	ittet	lt
 8006ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	9303      	strlt	r3, [sp, #12]
 8006eee:	2300      	movge	r3, #0
 8006ef0:	2201      	movlt	r2, #1
 8006ef2:	bfac      	ite	ge
 8006ef4:	f8c8 3000 	strge.w	r3, [r8]
 8006ef8:	f8c8 2000 	strlt.w	r2, [r8]
 8006efc:	4bb2      	ldr	r3, [pc, #712]	; (80071c8 <_dtoa_r+0x328>)
 8006efe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006f02:	ea33 0308 	bics.w	r3, r3, r8
 8006f06:	d11b      	bne.n	8006f40 <_dtoa_r+0xa0>
 8006f08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	b923      	cbnz	r3, 8006f1e <_dtoa_r+0x7e>
 8006f14:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f000 854f 	beq.w	80079bc <_dtoa_r+0xb1c>
 8006f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f20:	b953      	cbnz	r3, 8006f38 <_dtoa_r+0x98>
 8006f22:	4baa      	ldr	r3, [pc, #680]	; (80071cc <_dtoa_r+0x32c>)
 8006f24:	e021      	b.n	8006f6a <_dtoa_r+0xca>
 8006f26:	4baa      	ldr	r3, [pc, #680]	; (80071d0 <_dtoa_r+0x330>)
 8006f28:	9305      	str	r3, [sp, #20]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	9805      	ldr	r0, [sp, #20]
 8006f32:	b017      	add	sp, #92	; 0x5c
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	4ba4      	ldr	r3, [pc, #656]	; (80071cc <_dtoa_r+0x32c>)
 8006f3a:	9305      	str	r3, [sp, #20]
 8006f3c:	3303      	adds	r3, #3
 8006f3e:	e7f5      	b.n	8006f2c <_dtoa_r+0x8c>
 8006f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2300      	movs	r3, #0
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	f7f9 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f50:	4682      	mov	sl, r0
 8006f52:	b160      	cbz	r0, 8006f6e <_dtoa_r+0xce>
 8006f54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f56:	2301      	movs	r3, #1
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 852a 	beq.w	80079b6 <_dtoa_r+0xb16>
 8006f62:	4b9c      	ldr	r3, [pc, #624]	; (80071d4 <_dtoa_r+0x334>)
 8006f64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	9305      	str	r3, [sp, #20]
 8006f6c:	e7e0      	b.n	8006f30 <_dtoa_r+0x90>
 8006f6e:	ab14      	add	r3, sp, #80	; 0x50
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	ab15      	add	r3, sp, #84	; 0x54
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4632      	mov	r2, r6
 8006f78:	463b      	mov	r3, r7
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f001 f8bb 	bl	80080f6 <__d2b>
 8006f80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f84:	4683      	mov	fp, r0
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	d07c      	beq.n	8007084 <_dtoa_r+0x1e4>
 8006f8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f8e:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006f92:	46b0      	mov	r8, r6
 8006f94:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006f98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f9c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b8d      	ldr	r3, [pc, #564]	; (80071d8 <_dtoa_r+0x338>)
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 f96e 	bl	8000288 <__aeabi_dsub>
 8006fac:	a380      	add	r3, pc, #512	; (adr r3, 80071b0 <_dtoa_r+0x310>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	a380      	add	r3, pc, #512	; (adr r3, 80071b8 <_dtoa_r+0x318>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 f966 	bl	800028c <__adddf3>
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	f7f9 faad 	bl	8000524 <__aeabi_i2d>
 8006fca:	a37d      	add	r3, pc, #500	; (adr r3, 80071c0 <_dtoa_r+0x320>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f7f9 fb12 	bl	80005f8 <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 f956 	bl	800028c <__adddf3>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	f7f9 fdb8 	bl	8000b58 <__aeabi_d2iz>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4682      	mov	sl, r0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4630      	mov	r0, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd73 	bl	8000adc <__aeabi_dcmplt>
 8006ff6:	b148      	cbz	r0, 800700c <_dtoa_r+0x16c>
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	f7f9 fa93 	bl	8000524 <__aeabi_i2d>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	f7f9 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007006:	b908      	cbnz	r0, 800700c <_dtoa_r+0x16c>
 8007008:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800700c:	f1ba 0f16 	cmp.w	sl, #22
 8007010:	d859      	bhi.n	80070c6 <_dtoa_r+0x226>
 8007012:	4972      	ldr	r1, [pc, #456]	; (80071dc <_dtoa_r+0x33c>)
 8007014:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800701c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007020:	f7f9 fd7a 	bl	8000b18 <__aeabi_dcmpgt>
 8007024:	2800      	cmp	r0, #0
 8007026:	d050      	beq.n	80070ca <_dtoa_r+0x22a>
 8007028:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800702c:	2300      	movs	r3, #0
 800702e:	9312      	str	r3, [sp, #72]	; 0x48
 8007030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007032:	1b5d      	subs	r5, r3, r5
 8007034:	f1b5 0801 	subs.w	r8, r5, #1
 8007038:	bf49      	itett	mi
 800703a:	f1c5 0301 	rsbmi	r3, r5, #1
 800703e:	2300      	movpl	r3, #0
 8007040:	9308      	strmi	r3, [sp, #32]
 8007042:	f04f 0800 	movmi.w	r8, #0
 8007046:	bf58      	it	pl
 8007048:	9308      	strpl	r3, [sp, #32]
 800704a:	f1ba 0f00 	cmp.w	sl, #0
 800704e:	db3e      	blt.n	80070ce <_dtoa_r+0x22e>
 8007050:	2300      	movs	r3, #0
 8007052:	44d0      	add	r8, sl
 8007054:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007058:	9309      	str	r3, [sp, #36]	; 0x24
 800705a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800705c:	2b09      	cmp	r3, #9
 800705e:	f200 8090 	bhi.w	8007182 <_dtoa_r+0x2e2>
 8007062:	2b05      	cmp	r3, #5
 8007064:	bfc4      	itt	gt
 8007066:	3b04      	subgt	r3, #4
 8007068:	9320      	strgt	r3, [sp, #128]	; 0x80
 800706a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800706c:	f1a3 0302 	sub.w	r3, r3, #2
 8007070:	bfcc      	ite	gt
 8007072:	2500      	movgt	r5, #0
 8007074:	2501      	movle	r5, #1
 8007076:	2b03      	cmp	r3, #3
 8007078:	f200 808f 	bhi.w	800719a <_dtoa_r+0x2fa>
 800707c:	e8df f003 	tbb	[pc, r3]
 8007080:	71317f7d 	.word	0x71317f7d
 8007084:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007088:	441d      	add	r5, r3
 800708a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800708e:	2820      	cmp	r0, #32
 8007090:	dd13      	ble.n	80070ba <_dtoa_r+0x21a>
 8007092:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	fa08 f800 	lsl.w	r8, r8, r0
 800709c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80070a0:	fa23 f000 	lsr.w	r0, r3, r0
 80070a4:	ea48 0000 	orr.w	r0, r8, r0
 80070a8:	f7f9 fa2c 	bl	8000504 <__aeabi_ui2d>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4680      	mov	r8, r0
 80070b0:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80070b4:	3d01      	subs	r5, #1
 80070b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80070b8:	e772      	b.n	8006fa0 <_dtoa_r+0x100>
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	f1c0 0020 	rsb	r0, r0, #32
 80070c0:	fa03 f000 	lsl.w	r0, r3, r0
 80070c4:	e7f0      	b.n	80070a8 <_dtoa_r+0x208>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7b1      	b.n	800702e <_dtoa_r+0x18e>
 80070ca:	9012      	str	r0, [sp, #72]	; 0x48
 80070cc:	e7b0      	b.n	8007030 <_dtoa_r+0x190>
 80070ce:	9b08      	ldr	r3, [sp, #32]
 80070d0:	eba3 030a 	sub.w	r3, r3, sl
 80070d4:	9308      	str	r3, [sp, #32]
 80070d6:	f1ca 0300 	rsb	r3, sl, #0
 80070da:	9309      	str	r3, [sp, #36]	; 0x24
 80070dc:	2300      	movs	r3, #0
 80070de:	930d      	str	r3, [sp, #52]	; 0x34
 80070e0:	e7bb      	b.n	800705a <_dtoa_r+0x1ba>
 80070e2:	2301      	movs	r3, #1
 80070e4:	930c      	str	r3, [sp, #48]	; 0x30
 80070e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dd59      	ble.n	80071a0 <_dtoa_r+0x300>
 80070ec:	9306      	str	r3, [sp, #24]
 80070ee:	4699      	mov	r9, r3
 80070f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070f2:	2200      	movs	r2, #0
 80070f4:	6072      	str	r2, [r6, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f102 0014 	add.w	r0, r2, #20
 80070fc:	4298      	cmp	r0, r3
 80070fe:	6871      	ldr	r1, [r6, #4]
 8007100:	d970      	bls.n	80071e4 <_dtoa_r+0x344>
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fd6a 	bl	8007bdc <_Balloc>
 8007108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800710a:	6030      	str	r0, [r6, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	f1b9 0f0e 	cmp.w	r9, #14
 8007114:	f200 80eb 	bhi.w	80072ee <_dtoa_r+0x44e>
 8007118:	2d00      	cmp	r5, #0
 800711a:	f000 80e8 	beq.w	80072ee <_dtoa_r+0x44e>
 800711e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007122:	f1ba 0f00 	cmp.w	sl, #0
 8007126:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800712a:	dd79      	ble.n	8007220 <_dtoa_r+0x380>
 800712c:	4a2b      	ldr	r2, [pc, #172]	; (80071dc <_dtoa_r+0x33c>)
 800712e:	f00a 030f 	and.w	r3, sl, #15
 8007132:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007136:	ed93 7b00 	vldr	d7, [r3]
 800713a:	ea4f 162a 	mov.w	r6, sl, asr #4
 800713e:	06f0      	lsls	r0, r6, #27
 8007140:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007144:	d56a      	bpl.n	800721c <_dtoa_r+0x37c>
 8007146:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <_dtoa_r+0x340>)
 8007148:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800714c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007150:	f7f9 fb7c 	bl	800084c <__aeabi_ddiv>
 8007154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007158:	f006 060f 	and.w	r6, r6, #15
 800715c:	2503      	movs	r5, #3
 800715e:	4f20      	ldr	r7, [pc, #128]	; (80071e0 <_dtoa_r+0x340>)
 8007160:	e051      	b.n	8007206 <_dtoa_r+0x366>
 8007162:	2301      	movs	r3, #1
 8007164:	930c      	str	r3, [sp, #48]	; 0x30
 8007166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007168:	4453      	add	r3, sl
 800716a:	f103 0901 	add.w	r9, r3, #1
 800716e:	9306      	str	r3, [sp, #24]
 8007170:	464b      	mov	r3, r9
 8007172:	2b01      	cmp	r3, #1
 8007174:	bfb8      	it	lt
 8007176:	2301      	movlt	r3, #1
 8007178:	e7ba      	b.n	80070f0 <_dtoa_r+0x250>
 800717a:	2300      	movs	r3, #0
 800717c:	e7b2      	b.n	80070e4 <_dtoa_r+0x244>
 800717e:	2300      	movs	r3, #0
 8007180:	e7f0      	b.n	8007164 <_dtoa_r+0x2c4>
 8007182:	2501      	movs	r5, #1
 8007184:	2300      	movs	r3, #0
 8007186:	9320      	str	r3, [sp, #128]	; 0x80
 8007188:	950c      	str	r5, [sp, #48]	; 0x30
 800718a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800718e:	9306      	str	r3, [sp, #24]
 8007190:	4699      	mov	r9, r3
 8007192:	2200      	movs	r2, #0
 8007194:	2312      	movs	r3, #18
 8007196:	9221      	str	r2, [sp, #132]	; 0x84
 8007198:	e7aa      	b.n	80070f0 <_dtoa_r+0x250>
 800719a:	2301      	movs	r3, #1
 800719c:	930c      	str	r3, [sp, #48]	; 0x30
 800719e:	e7f4      	b.n	800718a <_dtoa_r+0x2ea>
 80071a0:	2301      	movs	r3, #1
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	4699      	mov	r9, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	e7f5      	b.n	8007196 <_dtoa_r+0x2f6>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	636f4361 	.word	0x636f4361
 80071b4:	3fd287a7 	.word	0x3fd287a7
 80071b8:	8b60c8b3 	.word	0x8b60c8b3
 80071bc:	3fc68a28 	.word	0x3fc68a28
 80071c0:	509f79fb 	.word	0x509f79fb
 80071c4:	3fd34413 	.word	0x3fd34413
 80071c8:	7ff00000 	.word	0x7ff00000
 80071cc:	08009415 	.word	0x08009415
 80071d0:	0800940c 	.word	0x0800940c
 80071d4:	080093e9 	.word	0x080093e9
 80071d8:	3ff80000 	.word	0x3ff80000
 80071dc:	080094a8 	.word	0x080094a8
 80071e0:	08009480 	.word	0x08009480
 80071e4:	3101      	adds	r1, #1
 80071e6:	6071      	str	r1, [r6, #4]
 80071e8:	0052      	lsls	r2, r2, #1
 80071ea:	e785      	b.n	80070f8 <_dtoa_r+0x258>
 80071ec:	07f1      	lsls	r1, r6, #31
 80071ee:	d508      	bpl.n	8007202 <_dtoa_r+0x362>
 80071f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f7f9 f9fe 	bl	80005f8 <__aeabi_dmul>
 80071fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007200:	3501      	adds	r5, #1
 8007202:	1076      	asrs	r6, r6, #1
 8007204:	3708      	adds	r7, #8
 8007206:	2e00      	cmp	r6, #0
 8007208:	d1f0      	bne.n	80071ec <_dtoa_r+0x34c>
 800720a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800720e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007212:	f7f9 fb1b 	bl	800084c <__aeabi_ddiv>
 8007216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721a:	e01a      	b.n	8007252 <_dtoa_r+0x3b2>
 800721c:	2502      	movs	r5, #2
 800721e:	e79e      	b.n	800715e <_dtoa_r+0x2be>
 8007220:	f000 80a0 	beq.w	8007364 <_dtoa_r+0x4c4>
 8007224:	f1ca 0600 	rsb	r6, sl, #0
 8007228:	4b9f      	ldr	r3, [pc, #636]	; (80074a8 <_dtoa_r+0x608>)
 800722a:	4fa0      	ldr	r7, [pc, #640]	; (80074ac <_dtoa_r+0x60c>)
 800722c:	f006 020f 	and.w	r2, r6, #15
 8007230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007244:	1136      	asrs	r6, r6, #4
 8007246:	2300      	movs	r3, #0
 8007248:	2502      	movs	r5, #2
 800724a:	2e00      	cmp	r6, #0
 800724c:	d17f      	bne.n	800734e <_dtoa_r+0x4ae>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e1      	bne.n	8007216 <_dtoa_r+0x376>
 8007252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8087 	beq.w	8007368 <_dtoa_r+0x4c8>
 800725a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	4b93      	ldr	r3, [pc, #588]	; (80074b0 <_dtoa_r+0x610>)
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f9 fc39 	bl	8000adc <__aeabi_dcmplt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d07c      	beq.n	8007368 <_dtoa_r+0x4c8>
 800726e:	f1b9 0f00 	cmp.w	r9, #0
 8007272:	d079      	beq.n	8007368 <_dtoa_r+0x4c8>
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	dd35      	ble.n	80072e6 <_dtoa_r+0x446>
 800727a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800727e:	930a      	str	r3, [sp, #40]	; 0x28
 8007280:	4639      	mov	r1, r7
 8007282:	2200      	movs	r2, #0
 8007284:	4b8b      	ldr	r3, [pc, #556]	; (80074b4 <_dtoa_r+0x614>)
 8007286:	4630      	mov	r0, r6
 8007288:	f7f9 f9b6 	bl	80005f8 <__aeabi_dmul>
 800728c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007290:	9f06      	ldr	r7, [sp, #24]
 8007292:	3501      	adds	r5, #1
 8007294:	4628      	mov	r0, r5
 8007296:	f7f9 f945 	bl	8000524 <__aeabi_i2d>
 800729a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800729e:	f7f9 f9ab 	bl	80005f8 <__aeabi_dmul>
 80072a2:	2200      	movs	r2, #0
 80072a4:	4b84      	ldr	r3, [pc, #528]	; (80074b8 <_dtoa_r+0x618>)
 80072a6:	f7f8 fff1 	bl	800028c <__adddf3>
 80072aa:	4605      	mov	r5, r0
 80072ac:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072b0:	2f00      	cmp	r7, #0
 80072b2:	d15d      	bne.n	8007370 <_dtoa_r+0x4d0>
 80072b4:	2200      	movs	r2, #0
 80072b6:	4b81      	ldr	r3, [pc, #516]	; (80074bc <_dtoa_r+0x61c>)
 80072b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072bc:	f7f8 ffe4 	bl	8000288 <__aeabi_dsub>
 80072c0:	462a      	mov	r2, r5
 80072c2:	4633      	mov	r3, r6
 80072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c8:	f7f9 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f040 8288 	bne.w	80077e2 <_dtoa_r+0x942>
 80072d2:	462a      	mov	r2, r5
 80072d4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072dc:	f7f9 fbfe 	bl	8000adc <__aeabi_dcmplt>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f040 827c 	bne.w	80077de <_dtoa_r+0x93e>
 80072e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f2c0 8150 	blt.w	8007596 <_dtoa_r+0x6f6>
 80072f6:	f1ba 0f0e 	cmp.w	sl, #14
 80072fa:	f300 814c 	bgt.w	8007596 <_dtoa_r+0x6f6>
 80072fe:	4b6a      	ldr	r3, [pc, #424]	; (80074a8 <_dtoa_r+0x608>)
 8007300:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007304:	ed93 7b00 	vldr	d7, [r3]
 8007308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730a:	2b00      	cmp	r3, #0
 800730c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007310:	f280 80d8 	bge.w	80074c4 <_dtoa_r+0x624>
 8007314:	f1b9 0f00 	cmp.w	r9, #0
 8007318:	f300 80d4 	bgt.w	80074c4 <_dtoa_r+0x624>
 800731c:	f040 825e 	bne.w	80077dc <_dtoa_r+0x93c>
 8007320:	2200      	movs	r2, #0
 8007322:	4b66      	ldr	r3, [pc, #408]	; (80074bc <_dtoa_r+0x61c>)
 8007324:	ec51 0b17 	vmov	r0, r1, d7
 8007328:	f7f9 f966 	bl	80005f8 <__aeabi_dmul>
 800732c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007330:	f7f9 fbe8 	bl	8000b04 <__aeabi_dcmpge>
 8007334:	464f      	mov	r7, r9
 8007336:	464e      	mov	r6, r9
 8007338:	2800      	cmp	r0, #0
 800733a:	f040 8234 	bne.w	80077a6 <_dtoa_r+0x906>
 800733e:	9b05      	ldr	r3, [sp, #20]
 8007340:	9a05      	ldr	r2, [sp, #20]
 8007342:	1c5d      	adds	r5, r3, #1
 8007344:	2331      	movs	r3, #49	; 0x31
 8007346:	7013      	strb	r3, [r2, #0]
 8007348:	f10a 0a01 	add.w	sl, sl, #1
 800734c:	e22f      	b.n	80077ae <_dtoa_r+0x90e>
 800734e:	07f2      	lsls	r2, r6, #31
 8007350:	d505      	bpl.n	800735e <_dtoa_r+0x4be>
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f7f9 f94f 	bl	80005f8 <__aeabi_dmul>
 800735a:	3501      	adds	r5, #1
 800735c:	2301      	movs	r3, #1
 800735e:	1076      	asrs	r6, r6, #1
 8007360:	3708      	adds	r7, #8
 8007362:	e772      	b.n	800724a <_dtoa_r+0x3aa>
 8007364:	2502      	movs	r5, #2
 8007366:	e774      	b.n	8007252 <_dtoa_r+0x3b2>
 8007368:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800736c:	464f      	mov	r7, r9
 800736e:	e791      	b.n	8007294 <_dtoa_r+0x3f4>
 8007370:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <_dtoa_r+0x608>)
 8007372:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007376:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800737a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	d047      	beq.n	8007410 <_dtoa_r+0x570>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	2000      	movs	r0, #0
 8007386:	494e      	ldr	r1, [pc, #312]	; (80074c0 <_dtoa_r+0x620>)
 8007388:	f7f9 fa60 	bl	800084c <__aeabi_ddiv>
 800738c:	462a      	mov	r2, r5
 800738e:	4633      	mov	r3, r6
 8007390:	f7f8 ff7a 	bl	8000288 <__aeabi_dsub>
 8007394:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007398:	9d05      	ldr	r5, [sp, #20]
 800739a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800739e:	f7f9 fbdb 	bl	8000b58 <__aeabi_d2iz>
 80073a2:	4606      	mov	r6, r0
 80073a4:	f7f9 f8be 	bl	8000524 <__aeabi_i2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073b0:	f7f8 ff6a 	bl	8000288 <__aeabi_dsub>
 80073b4:	3630      	adds	r6, #48	; 0x30
 80073b6:	f805 6b01 	strb.w	r6, [r5], #1
 80073ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c2:	f7f9 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d163      	bne.n	8007492 <_dtoa_r+0x5f2>
 80073ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ce:	2000      	movs	r0, #0
 80073d0:	4937      	ldr	r1, [pc, #220]	; (80074b0 <_dtoa_r+0x610>)
 80073d2:	f7f8 ff59 	bl	8000288 <__aeabi_dsub>
 80073d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073da:	f7f9 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f040 80b7 	bne.w	8007552 <_dtoa_r+0x6b2>
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	1aeb      	subs	r3, r5, r3
 80073e8:	429f      	cmp	r7, r3
 80073ea:	f77f af7c 	ble.w	80072e6 <_dtoa_r+0x446>
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <_dtoa_r+0x614>)
 80073f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073f6:	f7f9 f8ff 	bl	80005f8 <__aeabi_dmul>
 80073fa:	2200      	movs	r2, #0
 80073fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007400:	4b2c      	ldr	r3, [pc, #176]	; (80074b4 <_dtoa_r+0x614>)
 8007402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	e7c4      	b.n	800739a <_dtoa_r+0x4fa>
 8007410:	4633      	mov	r3, r6
 8007412:	462a      	mov	r2, r5
 8007414:	f7f9 f8f0 	bl	80005f8 <__aeabi_dmul>
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800741e:	19dd      	adds	r5, r3, r7
 8007420:	461e      	mov	r6, r3
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	f7f9 fb97 	bl	8000b58 <__aeabi_d2iz>
 800742a:	4607      	mov	r7, r0
 800742c:	f7f9 f87a 	bl	8000524 <__aeabi_i2d>
 8007430:	3730      	adds	r7, #48	; 0x30
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	f7f8 ff25 	bl	8000288 <__aeabi_dsub>
 800743e:	f806 7b01 	strb.w	r7, [r6], #1
 8007442:	42ae      	cmp	r6, r5
 8007444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	d126      	bne.n	800749c <_dtoa_r+0x5fc>
 800744e:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <_dtoa_r+0x620>)
 8007450:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007454:	f7f8 ff1a 	bl	800028c <__adddf3>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007460:	f7f9 fb5a 	bl	8000b18 <__aeabi_dcmpgt>
 8007464:	2800      	cmp	r0, #0
 8007466:	d174      	bne.n	8007552 <_dtoa_r+0x6b2>
 8007468:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800746c:	2000      	movs	r0, #0
 800746e:	4914      	ldr	r1, [pc, #80]	; (80074c0 <_dtoa_r+0x620>)
 8007470:	f7f8 ff0a 	bl	8000288 <__aeabi_dsub>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747c:	f7f9 fb2e 	bl	8000adc <__aeabi_dcmplt>
 8007480:	2800      	cmp	r0, #0
 8007482:	f43f af30 	beq.w	80072e6 <_dtoa_r+0x446>
 8007486:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800748a:	2b30      	cmp	r3, #48	; 0x30
 800748c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007490:	d002      	beq.n	8007498 <_dtoa_r+0x5f8>
 8007492:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007496:	e04a      	b.n	800752e <_dtoa_r+0x68e>
 8007498:	4615      	mov	r5, r2
 800749a:	e7f4      	b.n	8007486 <_dtoa_r+0x5e6>
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <_dtoa_r+0x614>)
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a6:	e7bc      	b.n	8007422 <_dtoa_r+0x582>
 80074a8:	080094a8 	.word	0x080094a8
 80074ac:	08009480 	.word	0x08009480
 80074b0:	3ff00000 	.word	0x3ff00000
 80074b4:	40240000 	.word	0x40240000
 80074b8:	401c0000 	.word	0x401c0000
 80074bc:	40140000 	.word	0x40140000
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074c8:	9d05      	ldr	r5, [sp, #20]
 80074ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f9 f9bb 	bl	800084c <__aeabi_ddiv>
 80074d6:	f7f9 fb3f 	bl	8000b58 <__aeabi_d2iz>
 80074da:	4680      	mov	r8, r0
 80074dc:	f7f9 f822 	bl	8000524 <__aeabi_i2d>
 80074e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074e4:	f7f9 f888 	bl	80005f8 <__aeabi_dmul>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80074f4:	f7f8 fec8 	bl	8000288 <__aeabi_dsub>
 80074f8:	f805 6b01 	strb.w	r6, [r5], #1
 80074fc:	9e05      	ldr	r6, [sp, #20]
 80074fe:	1bae      	subs	r6, r5, r6
 8007500:	45b1      	cmp	r9, r6
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	d139      	bne.n	800757c <_dtoa_r+0x6dc>
 8007508:	f7f8 fec0 	bl	800028c <__adddf3>
 800750c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007510:	4606      	mov	r6, r0
 8007512:	460f      	mov	r7, r1
 8007514:	f7f9 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 8007518:	b9c8      	cbnz	r0, 800754e <_dtoa_r+0x6ae>
 800751a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f9 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007526:	b110      	cbz	r0, 800752e <_dtoa_r+0x68e>
 8007528:	f018 0f01 	tst.w	r8, #1
 800752c:	d10f      	bne.n	800754e <_dtoa_r+0x6ae>
 800752e:	4659      	mov	r1, fp
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fb87 	bl	8007c44 <_Bfree>
 8007536:	2300      	movs	r3, #0
 8007538:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800753a:	702b      	strb	r3, [r5, #0]
 800753c:	f10a 0301 	add.w	r3, sl, #1
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007544:	2b00      	cmp	r3, #0
 8007546:	f43f acf3 	beq.w	8006f30 <_dtoa_r+0x90>
 800754a:	601d      	str	r5, [r3, #0]
 800754c:	e4f0      	b.n	8006f30 <_dtoa_r+0x90>
 800754e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007552:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007556:	2a39      	cmp	r2, #57	; 0x39
 8007558:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800755c:	d108      	bne.n	8007570 <_dtoa_r+0x6d0>
 800755e:	9a05      	ldr	r2, [sp, #20]
 8007560:	429a      	cmp	r2, r3
 8007562:	d109      	bne.n	8007578 <_dtoa_r+0x6d8>
 8007564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007566:	3301      	adds	r3, #1
 8007568:	930a      	str	r3, [sp, #40]	; 0x28
 800756a:	2330      	movs	r3, #48	; 0x30
 800756c:	7013      	strb	r3, [r2, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	3201      	adds	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e78c      	b.n	8007492 <_dtoa_r+0x5f2>
 8007578:	461d      	mov	r5, r3
 800757a:	e7ea      	b.n	8007552 <_dtoa_r+0x6b2>
 800757c:	2200      	movs	r2, #0
 800757e:	4b9b      	ldr	r3, [pc, #620]	; (80077ec <_dtoa_r+0x94c>)
 8007580:	f7f9 f83a 	bl	80005f8 <__aeabi_dmul>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	f7f9 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007590:	2800      	cmp	r0, #0
 8007592:	d09a      	beq.n	80074ca <_dtoa_r+0x62a>
 8007594:	e7cb      	b.n	800752e <_dtoa_r+0x68e>
 8007596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007598:	2a00      	cmp	r2, #0
 800759a:	f000 808b 	beq.w	80076b4 <_dtoa_r+0x814>
 800759e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075a0:	2a01      	cmp	r2, #1
 80075a2:	dc6e      	bgt.n	8007682 <_dtoa_r+0x7e2>
 80075a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	d067      	beq.n	800767a <_dtoa_r+0x7da>
 80075aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ae:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80075b2:	9a08      	ldr	r2, [sp, #32]
 80075b4:	2101      	movs	r1, #1
 80075b6:	441a      	add	r2, r3
 80075b8:	4620      	mov	r0, r4
 80075ba:	9208      	str	r2, [sp, #32]
 80075bc:	4498      	add	r8, r3
 80075be:	f000 fbe1 	bl	8007d84 <__i2b>
 80075c2:	4606      	mov	r6, r0
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	dd0c      	ble.n	80075e2 <_dtoa_r+0x742>
 80075c8:	f1b8 0f00 	cmp.w	r8, #0
 80075cc:	dd09      	ble.n	80075e2 <_dtoa_r+0x742>
 80075ce:	4545      	cmp	r5, r8
 80075d0:	9a08      	ldr	r2, [sp, #32]
 80075d2:	462b      	mov	r3, r5
 80075d4:	bfa8      	it	ge
 80075d6:	4643      	movge	r3, r8
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	9208      	str	r2, [sp, #32]
 80075dc:	1aed      	subs	r5, r5, r3
 80075de:	eba8 0803 	sub.w	r8, r8, r3
 80075e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e4:	b1eb      	cbz	r3, 8007622 <_dtoa_r+0x782>
 80075e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d067      	beq.n	80076bc <_dtoa_r+0x81c>
 80075ec:	b18f      	cbz	r7, 8007612 <_dtoa_r+0x772>
 80075ee:	4631      	mov	r1, r6
 80075f0:	463a      	mov	r2, r7
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fc66 	bl	8007ec4 <__pow5mult>
 80075f8:	465a      	mov	r2, fp
 80075fa:	4601      	mov	r1, r0
 80075fc:	4606      	mov	r6, r0
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fbc9 	bl	8007d96 <__multiply>
 8007604:	4659      	mov	r1, fp
 8007606:	900a      	str	r0, [sp, #40]	; 0x28
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fb1b 	bl	8007c44 <_Bfree>
 800760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007610:	469b      	mov	fp, r3
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	1bda      	subs	r2, r3, r7
 8007616:	d004      	beq.n	8007622 <_dtoa_r+0x782>
 8007618:	4659      	mov	r1, fp
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fc52 	bl	8007ec4 <__pow5mult>
 8007620:	4683      	mov	fp, r0
 8007622:	2101      	movs	r1, #1
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fbad 	bl	8007d84 <__i2b>
 800762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762c:	4607      	mov	r7, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 81cb 	beq.w	80079ca <_dtoa_r+0xb2a>
 8007634:	461a      	mov	r2, r3
 8007636:	4601      	mov	r1, r0
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fc43 	bl	8007ec4 <__pow5mult>
 800763e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007640:	2b01      	cmp	r3, #1
 8007642:	4607      	mov	r7, r0
 8007644:	dc40      	bgt.n	80076c8 <_dtoa_r+0x828>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d139      	bne.n	80076c0 <_dtoa_r+0x820>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007652:	2b00      	cmp	r3, #0
 8007654:	d136      	bne.n	80076c4 <_dtoa_r+0x824>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800765c:	0d1b      	lsrs	r3, r3, #20
 800765e:	051b      	lsls	r3, r3, #20
 8007660:	b12b      	cbz	r3, 800766e <_dtoa_r+0x7ce>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	3301      	adds	r3, #1
 8007666:	9308      	str	r3, [sp, #32]
 8007668:	f108 0801 	add.w	r8, r8, #1
 800766c:	2301      	movs	r3, #1
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007672:	2b00      	cmp	r3, #0
 8007674:	d12a      	bne.n	80076cc <_dtoa_r+0x82c>
 8007676:	2001      	movs	r0, #1
 8007678:	e030      	b.n	80076dc <_dtoa_r+0x83c>
 800767a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800767c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007680:	e795      	b.n	80075ae <_dtoa_r+0x70e>
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007688:	42bb      	cmp	r3, r7
 800768a:	bfbf      	itttt	lt
 800768c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800768e:	9709      	strlt	r7, [sp, #36]	; 0x24
 8007690:	1afa      	sublt	r2, r7, r3
 8007692:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007694:	bfbb      	ittet	lt
 8007696:	189b      	addlt	r3, r3, r2
 8007698:	930d      	strlt	r3, [sp, #52]	; 0x34
 800769a:	1bdf      	subge	r7, r3, r7
 800769c:	2700      	movlt	r7, #0
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	bfb5      	itete	lt
 80076a4:	9b08      	ldrlt	r3, [sp, #32]
 80076a6:	9d08      	ldrge	r5, [sp, #32]
 80076a8:	eba3 0509 	sublt.w	r5, r3, r9
 80076ac:	464b      	movge	r3, r9
 80076ae:	bfb8      	it	lt
 80076b0:	2300      	movlt	r3, #0
 80076b2:	e77e      	b.n	80075b2 <_dtoa_r+0x712>
 80076b4:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 80076b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076ba:	e783      	b.n	80075c4 <_dtoa_r+0x724>
 80076bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076be:	e7ab      	b.n	8007618 <_dtoa_r+0x778>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7d4      	b.n	800766e <_dtoa_r+0x7ce>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	e7d2      	b.n	800766e <_dtoa_r+0x7ce>
 80076c8:	2300      	movs	r3, #0
 80076ca:	9309      	str	r3, [sp, #36]	; 0x24
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80076d2:	6918      	ldr	r0, [r3, #16]
 80076d4:	f000 fb08 	bl	8007ce8 <__hi0bits>
 80076d8:	f1c0 0020 	rsb	r0, r0, #32
 80076dc:	4440      	add	r0, r8
 80076de:	f010 001f 	ands.w	r0, r0, #31
 80076e2:	d047      	beq.n	8007774 <_dtoa_r+0x8d4>
 80076e4:	f1c0 0320 	rsb	r3, r0, #32
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	dd3b      	ble.n	8007764 <_dtoa_r+0x8c4>
 80076ec:	9b08      	ldr	r3, [sp, #32]
 80076ee:	f1c0 001c 	rsb	r0, r0, #28
 80076f2:	4403      	add	r3, r0
 80076f4:	9308      	str	r3, [sp, #32]
 80076f6:	4405      	add	r5, r0
 80076f8:	4480      	add	r8, r0
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd05      	ble.n	800770c <_dtoa_r+0x86c>
 8007700:	4659      	mov	r1, fp
 8007702:	461a      	mov	r2, r3
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fc2b 	bl	8007f60 <__lshift>
 800770a:	4683      	mov	fp, r0
 800770c:	f1b8 0f00 	cmp.w	r8, #0
 8007710:	dd05      	ble.n	800771e <_dtoa_r+0x87e>
 8007712:	4639      	mov	r1, r7
 8007714:	4642      	mov	r2, r8
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fc22 	bl	8007f60 <__lshift>
 800771c:	4607      	mov	r7, r0
 800771e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007720:	b353      	cbz	r3, 8007778 <_dtoa_r+0x8d8>
 8007722:	4639      	mov	r1, r7
 8007724:	4658      	mov	r0, fp
 8007726:	f000 fc6f 	bl	8008008 <__mcmp>
 800772a:	2800      	cmp	r0, #0
 800772c:	da24      	bge.n	8007778 <_dtoa_r+0x8d8>
 800772e:	2300      	movs	r3, #0
 8007730:	4659      	mov	r1, fp
 8007732:	220a      	movs	r2, #10
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fa9c 	bl	8007c72 <__multadd>
 800773a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800773c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007740:	4683      	mov	fp, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8148 	beq.w	80079d8 <_dtoa_r+0xb38>
 8007748:	2300      	movs	r3, #0
 800774a:	4631      	mov	r1, r6
 800774c:	220a      	movs	r2, #10
 800774e:	4620      	mov	r0, r4
 8007750:	f000 fa8f 	bl	8007c72 <__multadd>
 8007754:	9b06      	ldr	r3, [sp, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	4606      	mov	r6, r0
 800775a:	dc4f      	bgt.n	80077fc <_dtoa_r+0x95c>
 800775c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800775e:	2b02      	cmp	r3, #2
 8007760:	dd4c      	ble.n	80077fc <_dtoa_r+0x95c>
 8007762:	e011      	b.n	8007788 <_dtoa_r+0x8e8>
 8007764:	d0c9      	beq.n	80076fa <_dtoa_r+0x85a>
 8007766:	9a08      	ldr	r2, [sp, #32]
 8007768:	331c      	adds	r3, #28
 800776a:	441a      	add	r2, r3
 800776c:	9208      	str	r2, [sp, #32]
 800776e:	441d      	add	r5, r3
 8007770:	4498      	add	r8, r3
 8007772:	e7c2      	b.n	80076fa <_dtoa_r+0x85a>
 8007774:	4603      	mov	r3, r0
 8007776:	e7f6      	b.n	8007766 <_dtoa_r+0x8c6>
 8007778:	f1b9 0f00 	cmp.w	r9, #0
 800777c:	dc38      	bgt.n	80077f0 <_dtoa_r+0x950>
 800777e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007780:	2b02      	cmp	r3, #2
 8007782:	dd35      	ble.n	80077f0 <_dtoa_r+0x950>
 8007784:	f8cd 9018 	str.w	r9, [sp, #24]
 8007788:	9b06      	ldr	r3, [sp, #24]
 800778a:	b963      	cbnz	r3, 80077a6 <_dtoa_r+0x906>
 800778c:	4639      	mov	r1, r7
 800778e:	2205      	movs	r2, #5
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fa6e 	bl	8007c72 <__multadd>
 8007796:	4601      	mov	r1, r0
 8007798:	4607      	mov	r7, r0
 800779a:	4658      	mov	r0, fp
 800779c:	f000 fc34 	bl	8008008 <__mcmp>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f73f adcc 	bgt.w	800733e <_dtoa_r+0x49e>
 80077a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a8:	9d05      	ldr	r5, [sp, #20]
 80077aa:	ea6f 0a03 	mvn.w	sl, r3
 80077ae:	f04f 0900 	mov.w	r9, #0
 80077b2:	4639      	mov	r1, r7
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fa45 	bl	8007c44 <_Bfree>
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	f43f aeb7 	beq.w	800752e <_dtoa_r+0x68e>
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	d005      	beq.n	80077d2 <_dtoa_r+0x932>
 80077c6:	45b1      	cmp	r9, r6
 80077c8:	d003      	beq.n	80077d2 <_dtoa_r+0x932>
 80077ca:	4649      	mov	r1, r9
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fa39 	bl	8007c44 <_Bfree>
 80077d2:	4631      	mov	r1, r6
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fa35 	bl	8007c44 <_Bfree>
 80077da:	e6a8      	b.n	800752e <_dtoa_r+0x68e>
 80077dc:	2700      	movs	r7, #0
 80077de:	463e      	mov	r6, r7
 80077e0:	e7e1      	b.n	80077a6 <_dtoa_r+0x906>
 80077e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077e6:	463e      	mov	r6, r7
 80077e8:	e5a9      	b.n	800733e <_dtoa_r+0x49e>
 80077ea:	bf00      	nop
 80077ec:	40240000 	.word	0x40240000
 80077f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f2:	f8cd 9018 	str.w	r9, [sp, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 80f5 	beq.w	80079e6 <_dtoa_r+0xb46>
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	dd05      	ble.n	800780c <_dtoa_r+0x96c>
 8007800:	4631      	mov	r1, r6
 8007802:	462a      	mov	r2, r5
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fbab 	bl	8007f60 <__lshift>
 800780a:	4606      	mov	r6, r0
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04c      	beq.n	80078ac <_dtoa_r+0xa0c>
 8007812:	6871      	ldr	r1, [r6, #4]
 8007814:	4620      	mov	r0, r4
 8007816:	f000 f9e1 	bl	8007bdc <_Balloc>
 800781a:	6932      	ldr	r2, [r6, #16]
 800781c:	3202      	adds	r2, #2
 800781e:	4605      	mov	r5, r0
 8007820:	0092      	lsls	r2, r2, #2
 8007822:	f106 010c 	add.w	r1, r6, #12
 8007826:	300c      	adds	r0, #12
 8007828:	f7fe fe24 	bl	8006474 <memcpy>
 800782c:	2201      	movs	r2, #1
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fb95 	bl	8007f60 <__lshift>
 8007836:	9b05      	ldr	r3, [sp, #20]
 8007838:	9308      	str	r3, [sp, #32]
 800783a:	9b02      	ldr	r3, [sp, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	46b1      	mov	r9, r6
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	4606      	mov	r6, r0
 8007846:	4639      	mov	r1, r7
 8007848:	4658      	mov	r0, fp
 800784a:	f7ff fa9d 	bl	8006d88 <quorem>
 800784e:	4649      	mov	r1, r9
 8007850:	4605      	mov	r5, r0
 8007852:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007856:	4658      	mov	r0, fp
 8007858:	f000 fbd6 	bl	8008008 <__mcmp>
 800785c:	4632      	mov	r2, r6
 800785e:	9002      	str	r0, [sp, #8]
 8007860:	4639      	mov	r1, r7
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fbea 	bl	800803c <__mdiff>
 8007868:	68c3      	ldr	r3, [r0, #12]
 800786a:	4602      	mov	r2, r0
 800786c:	bb03      	cbnz	r3, 80078b0 <_dtoa_r+0xa10>
 800786e:	4601      	mov	r1, r0
 8007870:	900a      	str	r0, [sp, #40]	; 0x28
 8007872:	4658      	mov	r0, fp
 8007874:	f000 fbc8 	bl	8008008 <__mcmp>
 8007878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800787a:	4603      	mov	r3, r0
 800787c:	4611      	mov	r1, r2
 800787e:	4620      	mov	r0, r4
 8007880:	930a      	str	r3, [sp, #40]	; 0x28
 8007882:	f000 f9df 	bl	8007c44 <_Bfree>
 8007886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007888:	b9a3      	cbnz	r3, 80078b4 <_dtoa_r+0xa14>
 800788a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800788c:	b992      	cbnz	r2, 80078b4 <_dtoa_r+0xa14>
 800788e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007890:	b982      	cbnz	r2, 80078b4 <_dtoa_r+0xa14>
 8007892:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007896:	d029      	beq.n	80078ec <_dtoa_r+0xa4c>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd01      	ble.n	80078a2 <_dtoa_r+0xa02>
 800789e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	1c5d      	adds	r5, r3, #1
 80078a6:	f883 8000 	strb.w	r8, [r3]
 80078aa:	e782      	b.n	80077b2 <_dtoa_r+0x912>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e7c2      	b.n	8007836 <_dtoa_r+0x996>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7e3      	b.n	800787c <_dtoa_r+0x9dc>
 80078b4:	9a02      	ldr	r2, [sp, #8]
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	db04      	blt.n	80078c4 <_dtoa_r+0xa24>
 80078ba:	d124      	bne.n	8007906 <_dtoa_r+0xa66>
 80078bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078be:	bb12      	cbnz	r2, 8007906 <_dtoa_r+0xa66>
 80078c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c2:	bb02      	cbnz	r2, 8007906 <_dtoa_r+0xa66>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	ddec      	ble.n	80078a2 <_dtoa_r+0xa02>
 80078c8:	4659      	mov	r1, fp
 80078ca:	2201      	movs	r2, #1
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fb47 	bl	8007f60 <__lshift>
 80078d2:	4639      	mov	r1, r7
 80078d4:	4683      	mov	fp, r0
 80078d6:	f000 fb97 	bl	8008008 <__mcmp>
 80078da:	2800      	cmp	r0, #0
 80078dc:	dc03      	bgt.n	80078e6 <_dtoa_r+0xa46>
 80078de:	d1e0      	bne.n	80078a2 <_dtoa_r+0xa02>
 80078e0:	f018 0f01 	tst.w	r8, #1
 80078e4:	d0dd      	beq.n	80078a2 <_dtoa_r+0xa02>
 80078e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078ea:	d1d8      	bne.n	800789e <_dtoa_r+0x9fe>
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	9a08      	ldr	r2, [sp, #32]
 80078f0:	1c5d      	adds	r5, r3, #1
 80078f2:	2339      	movs	r3, #57	; 0x39
 80078f4:	7013      	strb	r3, [r2, #0]
 80078f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078fa:	2b39      	cmp	r3, #57	; 0x39
 80078fc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007900:	d04e      	beq.n	80079a0 <_dtoa_r+0xb00>
 8007902:	3301      	adds	r3, #1
 8007904:	e053      	b.n	80079ae <_dtoa_r+0xb0e>
 8007906:	9a08      	ldr	r2, [sp, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f102 0501 	add.w	r5, r2, #1
 800790e:	dd06      	ble.n	800791e <_dtoa_r+0xa7e>
 8007910:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007914:	d0ea      	beq.n	80078ec <_dtoa_r+0xa4c>
 8007916:	f108 0801 	add.w	r8, r8, #1
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	e7c3      	b.n	80078a6 <_dtoa_r+0xa06>
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	9a06      	ldr	r2, [sp, #24]
 8007922:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007926:	1aeb      	subs	r3, r5, r3
 8007928:	4293      	cmp	r3, r2
 800792a:	d021      	beq.n	8007970 <_dtoa_r+0xad0>
 800792c:	4659      	mov	r1, fp
 800792e:	2300      	movs	r3, #0
 8007930:	220a      	movs	r2, #10
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f99d 	bl	8007c72 <__multadd>
 8007938:	45b1      	cmp	r9, r6
 800793a:	4683      	mov	fp, r0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	f04f 020a 	mov.w	r2, #10
 8007944:	4649      	mov	r1, r9
 8007946:	4620      	mov	r0, r4
 8007948:	d105      	bne.n	8007956 <_dtoa_r+0xab6>
 800794a:	f000 f992 	bl	8007c72 <__multadd>
 800794e:	4681      	mov	r9, r0
 8007950:	4606      	mov	r6, r0
 8007952:	9508      	str	r5, [sp, #32]
 8007954:	e777      	b.n	8007846 <_dtoa_r+0x9a6>
 8007956:	f000 f98c 	bl	8007c72 <__multadd>
 800795a:	4631      	mov	r1, r6
 800795c:	4681      	mov	r9, r0
 800795e:	2300      	movs	r3, #0
 8007960:	220a      	movs	r2, #10
 8007962:	4620      	mov	r0, r4
 8007964:	f000 f985 	bl	8007c72 <__multadd>
 8007968:	4606      	mov	r6, r0
 800796a:	e7f2      	b.n	8007952 <_dtoa_r+0xab2>
 800796c:	f04f 0900 	mov.w	r9, #0
 8007970:	4659      	mov	r1, fp
 8007972:	2201      	movs	r2, #1
 8007974:	4620      	mov	r0, r4
 8007976:	f000 faf3 	bl	8007f60 <__lshift>
 800797a:	4639      	mov	r1, r7
 800797c:	4683      	mov	fp, r0
 800797e:	f000 fb43 	bl	8008008 <__mcmp>
 8007982:	2800      	cmp	r0, #0
 8007984:	dcb7      	bgt.n	80078f6 <_dtoa_r+0xa56>
 8007986:	d102      	bne.n	800798e <_dtoa_r+0xaee>
 8007988:	f018 0f01 	tst.w	r8, #1
 800798c:	d1b3      	bne.n	80078f6 <_dtoa_r+0xa56>
 800798e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007992:	2b30      	cmp	r3, #48	; 0x30
 8007994:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007998:	f47f af0b 	bne.w	80077b2 <_dtoa_r+0x912>
 800799c:	4615      	mov	r5, r2
 800799e:	e7f6      	b.n	800798e <_dtoa_r+0xaee>
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d105      	bne.n	80079b2 <_dtoa_r+0xb12>
 80079a6:	9a05      	ldr	r2, [sp, #20]
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	2331      	movs	r3, #49	; 0x31
 80079ae:	7013      	strb	r3, [r2, #0]
 80079b0:	e6ff      	b.n	80077b2 <_dtoa_r+0x912>
 80079b2:	4615      	mov	r5, r2
 80079b4:	e79f      	b.n	80078f6 <_dtoa_r+0xa56>
 80079b6:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <_dtoa_r+0xb74>)
 80079b8:	f7ff bad7 	b.w	8006f6a <_dtoa_r+0xca>
 80079bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f47f aab1 	bne.w	8006f26 <_dtoa_r+0x86>
 80079c4:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <_dtoa_r+0xb78>)
 80079c6:	f7ff bad0 	b.w	8006f6a <_dtoa_r+0xca>
 80079ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	f77f ae3a 	ble.w	8007646 <_dtoa_r+0x7a6>
 80079d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d4:	9309      	str	r3, [sp, #36]	; 0x24
 80079d6:	e64e      	b.n	8007676 <_dtoa_r+0x7d6>
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dc03      	bgt.n	80079e6 <_dtoa_r+0xb46>
 80079de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	f73f aed1 	bgt.w	8007788 <_dtoa_r+0x8e8>
 80079e6:	9d05      	ldr	r5, [sp, #20]
 80079e8:	4639      	mov	r1, r7
 80079ea:	4658      	mov	r0, fp
 80079ec:	f7ff f9cc 	bl	8006d88 <quorem>
 80079f0:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80079f4:	f805 8b01 	strb.w	r8, [r5], #1
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	9a06      	ldr	r2, [sp, #24]
 80079fc:	1aeb      	subs	r3, r5, r3
 80079fe:	429a      	cmp	r2, r3
 8007a00:	ddb4      	ble.n	800796c <_dtoa_r+0xacc>
 8007a02:	4659      	mov	r1, fp
 8007a04:	2300      	movs	r3, #0
 8007a06:	220a      	movs	r2, #10
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f932 	bl	8007c72 <__multadd>
 8007a0e:	4683      	mov	fp, r0
 8007a10:	e7ea      	b.n	80079e8 <_dtoa_r+0xb48>
 8007a12:	bf00      	nop
 8007a14:	080093e8 	.word	0x080093e8
 8007a18:	0800940c 	.word	0x0800940c

08007a1c <std>:
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	e9c0 3300 	strd	r3, r3, [r0]
 8007a26:	6083      	str	r3, [r0, #8]
 8007a28:	8181      	strh	r1, [r0, #12]
 8007a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a2c:	81c2      	strh	r2, [r0, #14]
 8007a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a32:	6183      	str	r3, [r0, #24]
 8007a34:	4619      	mov	r1, r3
 8007a36:	2208      	movs	r2, #8
 8007a38:	305c      	adds	r0, #92	; 0x5c
 8007a3a:	f7fe fd26 	bl	800648a <memset>
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <std+0x38>)
 8007a40:	6263      	str	r3, [r4, #36]	; 0x24
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <std+0x3c>)
 8007a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <std+0x40>)
 8007a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <std+0x44>)
 8007a4c:	6224      	str	r4, [r4, #32]
 8007a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	bf00      	nop
 8007a54:	080085a1 	.word	0x080085a1
 8007a58:	080085c3 	.word	0x080085c3
 8007a5c:	080085fb 	.word	0x080085fb
 8007a60:	0800861f 	.word	0x0800861f

08007a64 <_cleanup_r>:
 8007a64:	4901      	ldr	r1, [pc, #4]	; (8007a6c <_cleanup_r+0x8>)
 8007a66:	f000 b885 	b.w	8007b74 <_fwalk_reent>
 8007a6a:	bf00      	nop
 8007a6c:	080088f9 	.word	0x080088f9

08007a70 <__sfmoreglue>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	1e4a      	subs	r2, r1, #1
 8007a74:	2568      	movs	r5, #104	; 0x68
 8007a76:	4355      	muls	r5, r2
 8007a78:	460e      	mov	r6, r1
 8007a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a7e:	f000 fbe5 	bl	800824c <_malloc_r>
 8007a82:	4604      	mov	r4, r0
 8007a84:	b140      	cbz	r0, 8007a98 <__sfmoreglue+0x28>
 8007a86:	2100      	movs	r1, #0
 8007a88:	e9c0 1600 	strd	r1, r6, [r0]
 8007a8c:	300c      	adds	r0, #12
 8007a8e:	60a0      	str	r0, [r4, #8]
 8007a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a94:	f7fe fcf9 	bl	800648a <memset>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}

08007a9c <__sinit>:
 8007a9c:	6983      	ldr	r3, [r0, #24]
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	bb33      	cbnz	r3, 8007af2 <__sinit+0x56>
 8007aa4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007aa8:	6503      	str	r3, [r0, #80]	; 0x50
 8007aaa:	4b12      	ldr	r3, [pc, #72]	; (8007af4 <__sinit+0x58>)
 8007aac:	4a12      	ldr	r2, [pc, #72]	; (8007af8 <__sinit+0x5c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6282      	str	r2, [r0, #40]	; 0x28
 8007ab2:	4298      	cmp	r0, r3
 8007ab4:	bf04      	itt	eq
 8007ab6:	2301      	moveq	r3, #1
 8007ab8:	6183      	streq	r3, [r0, #24]
 8007aba:	f000 f81f 	bl	8007afc <__sfp>
 8007abe:	6060      	str	r0, [r4, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f81b 	bl	8007afc <__sfp>
 8007ac6:	60a0      	str	r0, [r4, #8]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f817 	bl	8007afc <__sfp>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	60e0      	str	r0, [r4, #12]
 8007ad2:	2104      	movs	r1, #4
 8007ad4:	6860      	ldr	r0, [r4, #4]
 8007ad6:	f7ff ffa1 	bl	8007a1c <std>
 8007ada:	2201      	movs	r2, #1
 8007adc:	2109      	movs	r1, #9
 8007ade:	68a0      	ldr	r0, [r4, #8]
 8007ae0:	f7ff ff9c 	bl	8007a1c <std>
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	2112      	movs	r1, #18
 8007ae8:	68e0      	ldr	r0, [r4, #12]
 8007aea:	f7ff ff97 	bl	8007a1c <std>
 8007aee:	2301      	movs	r3, #1
 8007af0:	61a3      	str	r3, [r4, #24]
 8007af2:	bd10      	pop	{r4, pc}
 8007af4:	080093d4 	.word	0x080093d4
 8007af8:	08007a65 	.word	0x08007a65

08007afc <__sfp>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <__sfp+0x70>)
 8007b00:	681e      	ldr	r6, [r3, #0]
 8007b02:	69b3      	ldr	r3, [r6, #24]
 8007b04:	4607      	mov	r7, r0
 8007b06:	b913      	cbnz	r3, 8007b0e <__sfp+0x12>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ffc7 	bl	8007a9c <__sinit>
 8007b0e:	3648      	adds	r6, #72	; 0x48
 8007b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	d503      	bpl.n	8007b20 <__sfp+0x24>
 8007b18:	6833      	ldr	r3, [r6, #0]
 8007b1a:	b133      	cbz	r3, 8007b2a <__sfp+0x2e>
 8007b1c:	6836      	ldr	r6, [r6, #0]
 8007b1e:	e7f7      	b.n	8007b10 <__sfp+0x14>
 8007b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b24:	b16d      	cbz	r5, 8007b42 <__sfp+0x46>
 8007b26:	3468      	adds	r4, #104	; 0x68
 8007b28:	e7f4      	b.n	8007b14 <__sfp+0x18>
 8007b2a:	2104      	movs	r1, #4
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f7ff ff9f 	bl	8007a70 <__sfmoreglue>
 8007b32:	6030      	str	r0, [r6, #0]
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d1f1      	bne.n	8007b1c <__sfp+0x20>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	4620      	mov	r0, r4
 8007b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <__sfp+0x74>)
 8007b44:	6665      	str	r5, [r4, #100]	; 0x64
 8007b46:	e9c4 5500 	strd	r5, r5, [r4]
 8007b4a:	60a5      	str	r5, [r4, #8]
 8007b4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b54:	2208      	movs	r2, #8
 8007b56:	4629      	mov	r1, r5
 8007b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b5c:	f7fe fc95 	bl	800648a <memset>
 8007b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b68:	e7e9      	b.n	8007b3e <__sfp+0x42>
 8007b6a:	bf00      	nop
 8007b6c:	080093d4 	.word	0x080093d4
 8007b70:	ffff0001 	.word	0xffff0001

08007b74 <_fwalk_reent>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b80:	2600      	movs	r6, #0
 8007b82:	b914      	cbnz	r4, 8007b8a <_fwalk_reent+0x16>
 8007b84:	4630      	mov	r0, r6
 8007b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b8e:	3f01      	subs	r7, #1
 8007b90:	d501      	bpl.n	8007b96 <_fwalk_reent+0x22>
 8007b92:	6824      	ldr	r4, [r4, #0]
 8007b94:	e7f5      	b.n	8007b82 <_fwalk_reent+0xe>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d907      	bls.n	8007bac <_fwalk_reent+0x38>
 8007b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	d003      	beq.n	8007bac <_fwalk_reent+0x38>
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	47c8      	blx	r9
 8007baa:	4306      	orrs	r6, r0
 8007bac:	3568      	adds	r5, #104	; 0x68
 8007bae:	e7ee      	b.n	8007b8e <_fwalk_reent+0x1a>

08007bb0 <_localeconv_r>:
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <_localeconv_r+0x14>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6a18      	ldr	r0, [r3, #32]
 8007bb6:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <_localeconv_r+0x18>)
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	bf08      	it	eq
 8007bbc:	4618      	moveq	r0, r3
 8007bbe:	30f0      	adds	r0, #240	; 0xf0
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000008 	.word	0x20000008
 8007bc8:	2000006c 	.word	0x2000006c

08007bcc <malloc>:
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <malloc+0xc>)
 8007bce:	4601      	mov	r1, r0
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f000 bb3b 	b.w	800824c <_malloc_r>
 8007bd6:	bf00      	nop
 8007bd8:	20000008 	.word	0x20000008

08007bdc <_Balloc>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007be0:	4604      	mov	r4, r0
 8007be2:	460e      	mov	r6, r1
 8007be4:	b93d      	cbnz	r5, 8007bf6 <_Balloc+0x1a>
 8007be6:	2010      	movs	r0, #16
 8007be8:	f7ff fff0 	bl	8007bcc <malloc>
 8007bec:	6260      	str	r0, [r4, #36]	; 0x24
 8007bee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bf2:	6005      	str	r5, [r0, #0]
 8007bf4:	60c5      	str	r5, [r0, #12]
 8007bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007bf8:	68eb      	ldr	r3, [r5, #12]
 8007bfa:	b183      	cbz	r3, 8007c1e <_Balloc+0x42>
 8007bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007c04:	b9b8      	cbnz	r0, 8007c36 <_Balloc+0x5a>
 8007c06:	2101      	movs	r1, #1
 8007c08:	fa01 f506 	lsl.w	r5, r1, r6
 8007c0c:	1d6a      	adds	r2, r5, #5
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fabf 	bl	8008194 <_calloc_r>
 8007c16:	b160      	cbz	r0, 8007c32 <_Balloc+0x56>
 8007c18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007c1c:	e00e      	b.n	8007c3c <_Balloc+0x60>
 8007c1e:	2221      	movs	r2, #33	; 0x21
 8007c20:	2104      	movs	r1, #4
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fab6 	bl	8008194 <_calloc_r>
 8007c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c2a:	60e8      	str	r0, [r5, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e4      	bne.n	8007bfc <_Balloc+0x20>
 8007c32:	2000      	movs	r0, #0
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	6802      	ldr	r2, [r0, #0]
 8007c38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c42:	e7f7      	b.n	8007c34 <_Balloc+0x58>

08007c44 <_Bfree>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c48:	4606      	mov	r6, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	b93c      	cbnz	r4, 8007c5e <_Bfree+0x1a>
 8007c4e:	2010      	movs	r0, #16
 8007c50:	f7ff ffbc 	bl	8007bcc <malloc>
 8007c54:	6270      	str	r0, [r6, #36]	; 0x24
 8007c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c5a:	6004      	str	r4, [r0, #0]
 8007c5c:	60c4      	str	r4, [r0, #12]
 8007c5e:	b13d      	cbz	r5, 8007c70 <_Bfree+0x2c>
 8007c60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c62:	686a      	ldr	r2, [r5, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c6a:	6029      	str	r1, [r5, #0]
 8007c6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c70:	bd70      	pop	{r4, r5, r6, pc}

08007c72 <__multadd>:
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	690d      	ldr	r5, [r1, #16]
 8007c78:	461f      	mov	r7, r3
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	f101 0c14 	add.w	ip, r1, #20
 8007c82:	2300      	movs	r3, #0
 8007c84:	f8dc 0000 	ldr.w	r0, [ip]
 8007c88:	b281      	uxth	r1, r0
 8007c8a:	fb02 7101 	mla	r1, r2, r1, r7
 8007c8e:	0c0f      	lsrs	r7, r1, #16
 8007c90:	0c00      	lsrs	r0, r0, #16
 8007c92:	fb02 7000 	mla	r0, r2, r0, r7
 8007c96:	b289      	uxth	r1, r1
 8007c98:	3301      	adds	r3, #1
 8007c9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007ca4:	f84c 1b04 	str.w	r1, [ip], #4
 8007ca8:	dcec      	bgt.n	8007c84 <__multadd+0x12>
 8007caa:	b1d7      	cbz	r7, 8007ce2 <__multadd+0x70>
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	dc12      	bgt.n	8007cd8 <__multadd+0x66>
 8007cb2:	6861      	ldr	r1, [r4, #4]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	3101      	adds	r1, #1
 8007cb8:	f7ff ff90 	bl	8007bdc <_Balloc>
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	3202      	adds	r2, #2
 8007cc0:	f104 010c 	add.w	r1, r4, #12
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	0092      	lsls	r2, r2, #2
 8007cc8:	300c      	adds	r0, #12
 8007cca:	f7fe fbd3 	bl	8006474 <memcpy>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ffb7 	bl	8007c44 <_Bfree>
 8007cd6:	4644      	mov	r4, r8
 8007cd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cdc:	3501      	adds	r5, #1
 8007cde:	615f      	str	r7, [r3, #20]
 8007ce0:	6125      	str	r5, [r4, #16]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ce8 <__hi0bits>:
 8007ce8:	0c02      	lsrs	r2, r0, #16
 8007cea:	0412      	lsls	r2, r2, #16
 8007cec:	4603      	mov	r3, r0
 8007cee:	b9b2      	cbnz	r2, 8007d1e <__hi0bits+0x36>
 8007cf0:	0403      	lsls	r3, r0, #16
 8007cf2:	2010      	movs	r0, #16
 8007cf4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007cf8:	bf04      	itt	eq
 8007cfa:	021b      	lsleq	r3, r3, #8
 8007cfc:	3008      	addeq	r0, #8
 8007cfe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d02:	bf04      	itt	eq
 8007d04:	011b      	lsleq	r3, r3, #4
 8007d06:	3004      	addeq	r0, #4
 8007d08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d0c:	bf04      	itt	eq
 8007d0e:	009b      	lsleq	r3, r3, #2
 8007d10:	3002      	addeq	r0, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db06      	blt.n	8007d24 <__hi0bits+0x3c>
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	d503      	bpl.n	8007d22 <__hi0bits+0x3a>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	4770      	bx	lr
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e7e8      	b.n	8007cf4 <__hi0bits+0xc>
 8007d22:	2020      	movs	r0, #32
 8007d24:	4770      	bx	lr

08007d26 <__lo0bits>:
 8007d26:	6803      	ldr	r3, [r0, #0]
 8007d28:	f013 0207 	ands.w	r2, r3, #7
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	d00b      	beq.n	8007d48 <__lo0bits+0x22>
 8007d30:	07da      	lsls	r2, r3, #31
 8007d32:	d423      	bmi.n	8007d7c <__lo0bits+0x56>
 8007d34:	0798      	lsls	r0, r3, #30
 8007d36:	bf49      	itett	mi
 8007d38:	085b      	lsrmi	r3, r3, #1
 8007d3a:	089b      	lsrpl	r3, r3, #2
 8007d3c:	2001      	movmi	r0, #1
 8007d3e:	600b      	strmi	r3, [r1, #0]
 8007d40:	bf5c      	itt	pl
 8007d42:	600b      	strpl	r3, [r1, #0]
 8007d44:	2002      	movpl	r0, #2
 8007d46:	4770      	bx	lr
 8007d48:	b298      	uxth	r0, r3
 8007d4a:	b9a8      	cbnz	r0, 8007d78 <__lo0bits+0x52>
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	2010      	movs	r0, #16
 8007d50:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d54:	bf04      	itt	eq
 8007d56:	0a1b      	lsreq	r3, r3, #8
 8007d58:	3008      	addeq	r0, #8
 8007d5a:	071a      	lsls	r2, r3, #28
 8007d5c:	bf04      	itt	eq
 8007d5e:	091b      	lsreq	r3, r3, #4
 8007d60:	3004      	addeq	r0, #4
 8007d62:	079a      	lsls	r2, r3, #30
 8007d64:	bf04      	itt	eq
 8007d66:	089b      	lsreq	r3, r3, #2
 8007d68:	3002      	addeq	r0, #2
 8007d6a:	07da      	lsls	r2, r3, #31
 8007d6c:	d402      	bmi.n	8007d74 <__lo0bits+0x4e>
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	d006      	beq.n	8007d80 <__lo0bits+0x5a>
 8007d72:	3001      	adds	r0, #1
 8007d74:	600b      	str	r3, [r1, #0]
 8007d76:	4770      	bx	lr
 8007d78:	4610      	mov	r0, r2
 8007d7a:	e7e9      	b.n	8007d50 <__lo0bits+0x2a>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4770      	bx	lr
 8007d80:	2020      	movs	r0, #32
 8007d82:	4770      	bx	lr

08007d84 <__i2b>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	2101      	movs	r1, #1
 8007d8a:	f7ff ff27 	bl	8007bdc <_Balloc>
 8007d8e:	2201      	movs	r2, #1
 8007d90:	6144      	str	r4, [r0, #20]
 8007d92:	6102      	str	r2, [r0, #16]
 8007d94:	bd10      	pop	{r4, pc}

08007d96 <__multiply>:
 8007d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	690a      	ldr	r2, [r1, #16]
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	bfb8      	it	lt
 8007da4:	460b      	movlt	r3, r1
 8007da6:	4688      	mov	r8, r1
 8007da8:	bfbc      	itt	lt
 8007daa:	46a0      	movlt	r8, r4
 8007dac:	461c      	movlt	r4, r3
 8007dae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007db2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007db6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dbe:	eb07 0609 	add.w	r6, r7, r9
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	bfb8      	it	lt
 8007dc6:	3101      	addlt	r1, #1
 8007dc8:	f7ff ff08 	bl	8007bdc <_Balloc>
 8007dcc:	f100 0514 	add.w	r5, r0, #20
 8007dd0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4573      	cmp	r3, lr
 8007dda:	d316      	bcc.n	8007e0a <__multiply+0x74>
 8007ddc:	f104 0214 	add.w	r2, r4, #20
 8007de0:	f108 0114 	add.w	r1, r8, #20
 8007de4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007de8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	9201      	str	r2, [sp, #4]
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d80c      	bhi.n	8007e10 <__multiply+0x7a>
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	dd03      	ble.n	8007e02 <__multiply+0x6c>
 8007dfa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d05d      	beq.n	8007ebe <__multiply+0x128>
 8007e02:	6106      	str	r6, [r0, #16]
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0a:	f843 2b04 	str.w	r2, [r3], #4
 8007e0e:	e7e3      	b.n	8007dd8 <__multiply+0x42>
 8007e10:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e14:	f1bb 0f00 	cmp.w	fp, #0
 8007e18:	d023      	beq.n	8007e62 <__multiply+0xcc>
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	46ac      	mov	ip, r5
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e26:	f8dc a000 	ldr.w	sl, [ip]
 8007e2a:	b2a3      	uxth	r3, r4
 8007e2c:	fa1f fa8a 	uxth.w	sl, sl
 8007e30:	fb0b a303 	mla	r3, fp, r3, sl
 8007e34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e38:	f8dc 4000 	ldr.w	r4, [ip]
 8007e3c:	4443      	add	r3, r8
 8007e3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e42:	fb0b 840a 	mla	r4, fp, sl, r8
 8007e46:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e4a:	46e2      	mov	sl, ip
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e52:	454f      	cmp	r7, r9
 8007e54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e58:	f84a 3b04 	str.w	r3, [sl], #4
 8007e5c:	d82b      	bhi.n	8007eb6 <__multiply+0x120>
 8007e5e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007e68:	3204      	adds	r2, #4
 8007e6a:	f1ba 0f00 	cmp.w	sl, #0
 8007e6e:	d020      	beq.n	8007eb2 <__multiply+0x11c>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	4689      	mov	r9, r1
 8007e74:	46a8      	mov	r8, r5
 8007e76:	f04f 0b00 	mov.w	fp, #0
 8007e7a:	f8b9 c000 	ldrh.w	ip, [r9]
 8007e7e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007e82:	fb0a 440c 	mla	r4, sl, ip, r4
 8007e86:	445c      	add	r4, fp
 8007e88:	46c4      	mov	ip, r8
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e90:	f84c 3b04 	str.w	r3, [ip], #4
 8007e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e98:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	fb0a b303 	mla	r3, sl, r3, fp
 8007ea2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ea6:	454f      	cmp	r7, r9
 8007ea8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007eac:	d805      	bhi.n	8007eba <__multiply+0x124>
 8007eae:	f8c8 3004 	str.w	r3, [r8, #4]
 8007eb2:	3504      	adds	r5, #4
 8007eb4:	e79b      	b.n	8007dee <__multiply+0x58>
 8007eb6:	46d4      	mov	ip, sl
 8007eb8:	e7b3      	b.n	8007e22 <__multiply+0x8c>
 8007eba:	46e0      	mov	r8, ip
 8007ebc:	e7dd      	b.n	8007e7a <__multiply+0xe4>
 8007ebe:	3e01      	subs	r6, #1
 8007ec0:	e799      	b.n	8007df6 <__multiply+0x60>
	...

08007ec4 <__pow5mult>:
 8007ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	4615      	mov	r5, r2
 8007eca:	f012 0203 	ands.w	r2, r2, #3
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	d007      	beq.n	8007ee4 <__pow5mult+0x20>
 8007ed4:	3a01      	subs	r2, #1
 8007ed6:	4c21      	ldr	r4, [pc, #132]	; (8007f5c <__pow5mult+0x98>)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ede:	f7ff fec8 	bl	8007c72 <__multadd>
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	10ad      	asrs	r5, r5, #2
 8007ee6:	d035      	beq.n	8007f54 <__pow5mult+0x90>
 8007ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007eea:	b93c      	cbnz	r4, 8007efc <__pow5mult+0x38>
 8007eec:	2010      	movs	r0, #16
 8007eee:	f7ff fe6d 	bl	8007bcc <malloc>
 8007ef2:	6270      	str	r0, [r6, #36]	; 0x24
 8007ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef8:	6004      	str	r4, [r0, #0]
 8007efa:	60c4      	str	r4, [r0, #12]
 8007efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f04:	b94c      	cbnz	r4, 8007f1a <__pow5mult+0x56>
 8007f06:	f240 2171 	movw	r1, #625	; 0x271
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ff3a 	bl	8007d84 <__i2b>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f16:	4604      	mov	r4, r0
 8007f18:	6003      	str	r3, [r0, #0]
 8007f1a:	f04f 0800 	mov.w	r8, #0
 8007f1e:	07eb      	lsls	r3, r5, #31
 8007f20:	d50a      	bpl.n	8007f38 <__pow5mult+0x74>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4622      	mov	r2, r4
 8007f26:	4630      	mov	r0, r6
 8007f28:	f7ff ff35 	bl	8007d96 <__multiply>
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4681      	mov	r9, r0
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff fe87 	bl	8007c44 <_Bfree>
 8007f36:	464f      	mov	r7, r9
 8007f38:	106d      	asrs	r5, r5, #1
 8007f3a:	d00b      	beq.n	8007f54 <__pow5mult+0x90>
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	b938      	cbnz	r0, 8007f50 <__pow5mult+0x8c>
 8007f40:	4622      	mov	r2, r4
 8007f42:	4621      	mov	r1, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	f7ff ff26 	bl	8007d96 <__multiply>
 8007f4a:	6020      	str	r0, [r4, #0]
 8007f4c:	f8c0 8000 	str.w	r8, [r0]
 8007f50:	4604      	mov	r4, r0
 8007f52:	e7e4      	b.n	8007f1e <__pow5mult+0x5a>
 8007f54:	4638      	mov	r0, r7
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08009570 	.word	0x08009570

08007f60 <__lshift>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	460c      	mov	r4, r1
 8007f66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	6849      	ldr	r1, [r1, #4]
 8007f6e:	eb0a 0903 	add.w	r9, sl, r3
 8007f72:	68a3      	ldr	r3, [r4, #8]
 8007f74:	4607      	mov	r7, r0
 8007f76:	4616      	mov	r6, r2
 8007f78:	f109 0501 	add.w	r5, r9, #1
 8007f7c:	42ab      	cmp	r3, r5
 8007f7e:	db32      	blt.n	8007fe6 <__lshift+0x86>
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff fe2b 	bl	8007bdc <_Balloc>
 8007f86:	2300      	movs	r3, #0
 8007f88:	4680      	mov	r8, r0
 8007f8a:	f100 0114 	add.w	r1, r0, #20
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4553      	cmp	r3, sl
 8007f92:	db2b      	blt.n	8007fec <__lshift+0x8c>
 8007f94:	6920      	ldr	r0, [r4, #16]
 8007f96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f9a:	f104 0314 	add.w	r3, r4, #20
 8007f9e:	f016 021f 	ands.w	r2, r6, #31
 8007fa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fa6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007faa:	d025      	beq.n	8007ff8 <__lshift+0x98>
 8007fac:	f1c2 0e20 	rsb	lr, r2, #32
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	681e      	ldr	r6, [r3, #0]
 8007fb4:	468a      	mov	sl, r1
 8007fb6:	4096      	lsls	r6, r2
 8007fb8:	4330      	orrs	r0, r6
 8007fba:	f84a 0b04 	str.w	r0, [sl], #4
 8007fbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8007fc2:	459c      	cmp	ip, r3
 8007fc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8007fc8:	d814      	bhi.n	8007ff4 <__lshift+0x94>
 8007fca:	6048      	str	r0, [r1, #4]
 8007fcc:	b108      	cbz	r0, 8007fd2 <__lshift+0x72>
 8007fce:	f109 0502 	add.w	r5, r9, #2
 8007fd2:	3d01      	subs	r5, #1
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	f7ff fe32 	bl	8007c44 <_Bfree>
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe6:	3101      	adds	r1, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	e7c7      	b.n	8007f7c <__lshift+0x1c>
 8007fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	e7cd      	b.n	8007f90 <__lshift+0x30>
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	e7dc      	b.n	8007fb2 <__lshift+0x52>
 8007ff8:	3904      	subs	r1, #4
 8007ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008002:	459c      	cmp	ip, r3
 8008004:	d8f9      	bhi.n	8007ffa <__lshift+0x9a>
 8008006:	e7e4      	b.n	8007fd2 <__lshift+0x72>

08008008 <__mcmp>:
 8008008:	6903      	ldr	r3, [r0, #16]
 800800a:	690a      	ldr	r2, [r1, #16]
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	b530      	push	{r4, r5, lr}
 8008010:	d10c      	bne.n	800802c <__mcmp+0x24>
 8008012:	0092      	lsls	r2, r2, #2
 8008014:	3014      	adds	r0, #20
 8008016:	3114      	adds	r1, #20
 8008018:	1884      	adds	r4, r0, r2
 800801a:	4411      	add	r1, r2
 800801c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008024:	4295      	cmp	r5, r2
 8008026:	d003      	beq.n	8008030 <__mcmp+0x28>
 8008028:	d305      	bcc.n	8008036 <__mcmp+0x2e>
 800802a:	2301      	movs	r3, #1
 800802c:	4618      	mov	r0, r3
 800802e:	bd30      	pop	{r4, r5, pc}
 8008030:	42a0      	cmp	r0, r4
 8008032:	d3f3      	bcc.n	800801c <__mcmp+0x14>
 8008034:	e7fa      	b.n	800802c <__mcmp+0x24>
 8008036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800803a:	e7f7      	b.n	800802c <__mcmp+0x24>

0800803c <__mdiff>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	460d      	mov	r5, r1
 8008042:	4607      	mov	r7, r0
 8008044:	4611      	mov	r1, r2
 8008046:	4628      	mov	r0, r5
 8008048:	4614      	mov	r4, r2
 800804a:	f7ff ffdd 	bl	8008008 <__mcmp>
 800804e:	1e06      	subs	r6, r0, #0
 8008050:	d108      	bne.n	8008064 <__mdiff+0x28>
 8008052:	4631      	mov	r1, r6
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff fdc1 	bl	8007bdc <_Balloc>
 800805a:	2301      	movs	r3, #1
 800805c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008064:	bfa4      	itt	ge
 8008066:	4623      	movge	r3, r4
 8008068:	462c      	movge	r4, r5
 800806a:	4638      	mov	r0, r7
 800806c:	6861      	ldr	r1, [r4, #4]
 800806e:	bfa6      	itte	ge
 8008070:	461d      	movge	r5, r3
 8008072:	2600      	movge	r6, #0
 8008074:	2601      	movlt	r6, #1
 8008076:	f7ff fdb1 	bl	8007bdc <_Balloc>
 800807a:	692b      	ldr	r3, [r5, #16]
 800807c:	60c6      	str	r6, [r0, #12]
 800807e:	6926      	ldr	r6, [r4, #16]
 8008080:	f105 0914 	add.w	r9, r5, #20
 8008084:	f104 0214 	add.w	r2, r4, #20
 8008088:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800808c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008090:	f100 0514 	add.w	r5, r0, #20
 8008094:	f04f 0e00 	mov.w	lr, #0
 8008098:	f852 ab04 	ldr.w	sl, [r2], #4
 800809c:	f859 4b04 	ldr.w	r4, [r9], #4
 80080a0:	fa1e f18a 	uxtah	r1, lr, sl
 80080a4:	b2a3      	uxth	r3, r4
 80080a6:	1ac9      	subs	r1, r1, r3
 80080a8:	0c23      	lsrs	r3, r4, #16
 80080aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80080ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080b2:	b289      	uxth	r1, r1
 80080b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80080b8:	45c8      	cmp	r8, r9
 80080ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80080be:	4694      	mov	ip, r2
 80080c0:	f845 3b04 	str.w	r3, [r5], #4
 80080c4:	d8e8      	bhi.n	8008098 <__mdiff+0x5c>
 80080c6:	45bc      	cmp	ip, r7
 80080c8:	d304      	bcc.n	80080d4 <__mdiff+0x98>
 80080ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80080ce:	b183      	cbz	r3, 80080f2 <__mdiff+0xb6>
 80080d0:	6106      	str	r6, [r0, #16]
 80080d2:	e7c5      	b.n	8008060 <__mdiff+0x24>
 80080d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80080d8:	fa1e f381 	uxtah	r3, lr, r1
 80080dc:	141a      	asrs	r2, r3, #16
 80080de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80080ec:	f845 3b04 	str.w	r3, [r5], #4
 80080f0:	e7e9      	b.n	80080c6 <__mdiff+0x8a>
 80080f2:	3e01      	subs	r6, #1
 80080f4:	e7e9      	b.n	80080ca <__mdiff+0x8e>

080080f6 <__d2b>:
 80080f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080fa:	2101      	movs	r1, #1
 80080fc:	4699      	mov	r9, r3
 80080fe:	4690      	mov	r8, r2
 8008100:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 8008104:	f7ff fd6a 	bl	8007bdc <_Balloc>
 8008108:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800810c:	4607      	mov	r7, r0
 800810e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008112:	bb34      	cbnz	r4, 8008162 <__d2b+0x6c>
 8008114:	f1b8 0200 	subs.w	r2, r8, #0
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	d027      	beq.n	800816c <__d2b+0x76>
 800811c:	a802      	add	r0, sp, #8
 800811e:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008122:	f7ff fe00 	bl	8007d26 <__lo0bits>
 8008126:	9900      	ldr	r1, [sp, #0]
 8008128:	b1f0      	cbz	r0, 8008168 <__d2b+0x72>
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	f1c0 0320 	rsb	r3, r0, #32
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	430b      	orrs	r3, r1
 8008136:	40c2      	lsrs	r2, r0
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf14      	ite	ne
 8008144:	2102      	movne	r1, #2
 8008146:	2101      	moveq	r1, #1
 8008148:	6139      	str	r1, [r7, #16]
 800814a:	b1c4      	cbz	r4, 800817e <__d2b+0x88>
 800814c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008150:	4404      	add	r4, r0
 8008152:	6034      	str	r4, [r6, #0]
 8008154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008158:	6028      	str	r0, [r5, #0]
 800815a:	4638      	mov	r0, r7
 800815c:	b003      	add	sp, #12
 800815e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008166:	e7d5      	b.n	8008114 <__d2b+0x1e>
 8008168:	6179      	str	r1, [r7, #20]
 800816a:	e7e7      	b.n	800813c <__d2b+0x46>
 800816c:	a801      	add	r0, sp, #4
 800816e:	f7ff fdda 	bl	8007d26 <__lo0bits>
 8008172:	9b01      	ldr	r3, [sp, #4]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	2101      	movs	r1, #1
 8008178:	6139      	str	r1, [r7, #16]
 800817a:	3020      	adds	r0, #32
 800817c:	e7e5      	b.n	800814a <__d2b+0x54>
 800817e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008182:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008186:	6030      	str	r0, [r6, #0]
 8008188:	6918      	ldr	r0, [r3, #16]
 800818a:	f7ff fdad 	bl	8007ce8 <__hi0bits>
 800818e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008192:	e7e1      	b.n	8008158 <__d2b+0x62>

08008194 <_calloc_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	fb02 f401 	mul.w	r4, r2, r1
 800819a:	4621      	mov	r1, r4
 800819c:	f000 f856 	bl	800824c <_malloc_r>
 80081a0:	4605      	mov	r5, r0
 80081a2:	b118      	cbz	r0, 80081ac <_calloc_r+0x18>
 80081a4:	4622      	mov	r2, r4
 80081a6:	2100      	movs	r1, #0
 80081a8:	f7fe f96f 	bl	800648a <memset>
 80081ac:	4628      	mov	r0, r5
 80081ae:	bd38      	pop	{r3, r4, r5, pc}

080081b0 <_free_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4605      	mov	r5, r0
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d045      	beq.n	8008244 <_free_r+0x94>
 80081b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081bc:	1f0c      	subs	r4, r1, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfb8      	it	lt
 80081c2:	18e4      	addlt	r4, r4, r3
 80081c4:	f000 fc4a 	bl	8008a5c <__malloc_lock>
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <_free_r+0x98>)
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	4610      	mov	r0, r2
 80081ce:	b933      	cbnz	r3, 80081de <_free_r+0x2e>
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6014      	str	r4, [r2, #0]
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 bc40 	b.w	8008a5e <__malloc_unlock>
 80081de:	42a3      	cmp	r3, r4
 80081e0:	d90c      	bls.n	80081fc <_free_r+0x4c>
 80081e2:	6821      	ldr	r1, [r4, #0]
 80081e4:	1862      	adds	r2, r4, r1
 80081e6:	4293      	cmp	r3, r2
 80081e8:	bf04      	itt	eq
 80081ea:	681a      	ldreq	r2, [r3, #0]
 80081ec:	685b      	ldreq	r3, [r3, #4]
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	bf04      	itt	eq
 80081f2:	1852      	addeq	r2, r2, r1
 80081f4:	6022      	streq	r2, [r4, #0]
 80081f6:	6004      	str	r4, [r0, #0]
 80081f8:	e7ec      	b.n	80081d4 <_free_r+0x24>
 80081fa:	4613      	mov	r3, r2
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	b10a      	cbz	r2, 8008204 <_free_r+0x54>
 8008200:	42a2      	cmp	r2, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x4a>
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	1858      	adds	r0, r3, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x74>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1858      	adds	r0, r3, r1
 8008212:	4282      	cmp	r2, r0
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	d1dd      	bne.n	80081d4 <_free_r+0x24>
 8008218:	6810      	ldr	r0, [r2, #0]
 800821a:	6852      	ldr	r2, [r2, #4]
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	4401      	add	r1, r0
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	e7d7      	b.n	80081d4 <_free_r+0x24>
 8008224:	d902      	bls.n	800822c <_free_r+0x7c>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d3      	b.n	80081d4 <_free_r+0x24>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428a      	cmp	r2, r1
 8008232:	bf04      	itt	eq
 8008234:	6811      	ldreq	r1, [r2, #0]
 8008236:	6852      	ldreq	r2, [r2, #4]
 8008238:	6062      	str	r2, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	605c      	str	r4, [r3, #4]
 8008242:	e7c7      	b.n	80081d4 <_free_r+0x24>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	20000210 	.word	0x20000210

0800824c <_malloc_r>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	1ccd      	adds	r5, r1, #3
 8008250:	f025 0503 	bic.w	r5, r5, #3
 8008254:	3508      	adds	r5, #8
 8008256:	2d0c      	cmp	r5, #12
 8008258:	bf38      	it	cc
 800825a:	250c      	movcc	r5, #12
 800825c:	2d00      	cmp	r5, #0
 800825e:	4606      	mov	r6, r0
 8008260:	db01      	blt.n	8008266 <_malloc_r+0x1a>
 8008262:	42a9      	cmp	r1, r5
 8008264:	d903      	bls.n	800826e <_malloc_r+0x22>
 8008266:	230c      	movs	r3, #12
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	2000      	movs	r0, #0
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	f000 fbf5 	bl	8008a5c <__malloc_lock>
 8008272:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <_malloc_r+0xac>)
 8008274:	6814      	ldr	r4, [r2, #0]
 8008276:	4621      	mov	r1, r4
 8008278:	b991      	cbnz	r1, 80082a0 <_malloc_r+0x54>
 800827a:	4c20      	ldr	r4, [pc, #128]	; (80082fc <_malloc_r+0xb0>)
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	b91b      	cbnz	r3, 8008288 <_malloc_r+0x3c>
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f97d 	bl	8008580 <_sbrk_r>
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	4629      	mov	r1, r5
 800828a:	4630      	mov	r0, r6
 800828c:	f000 f978 	bl	8008580 <_sbrk_r>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d124      	bne.n	80082de <_malloc_r+0x92>
 8008294:	230c      	movs	r3, #12
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	4630      	mov	r0, r6
 800829a:	f000 fbe0 	bl	8008a5e <__malloc_unlock>
 800829e:	e7e4      	b.n	800826a <_malloc_r+0x1e>
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	1b5b      	subs	r3, r3, r5
 80082a4:	d418      	bmi.n	80082d8 <_malloc_r+0x8c>
 80082a6:	2b0b      	cmp	r3, #11
 80082a8:	d90f      	bls.n	80082ca <_malloc_r+0x7e>
 80082aa:	600b      	str	r3, [r1, #0]
 80082ac:	50cd      	str	r5, [r1, r3]
 80082ae:	18cc      	adds	r4, r1, r3
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 fbd4 	bl	8008a5e <__malloc_unlock>
 80082b6:	f104 000b 	add.w	r0, r4, #11
 80082ba:	1d23      	adds	r3, r4, #4
 80082bc:	f020 0007 	bic.w	r0, r0, #7
 80082c0:	1ac3      	subs	r3, r0, r3
 80082c2:	d0d3      	beq.n	800826c <_malloc_r+0x20>
 80082c4:	425a      	negs	r2, r3
 80082c6:	50e2      	str	r2, [r4, r3]
 80082c8:	e7d0      	b.n	800826c <_malloc_r+0x20>
 80082ca:	428c      	cmp	r4, r1
 80082cc:	684b      	ldr	r3, [r1, #4]
 80082ce:	bf16      	itet	ne
 80082d0:	6063      	strne	r3, [r4, #4]
 80082d2:	6013      	streq	r3, [r2, #0]
 80082d4:	460c      	movne	r4, r1
 80082d6:	e7eb      	b.n	80082b0 <_malloc_r+0x64>
 80082d8:	460c      	mov	r4, r1
 80082da:	6849      	ldr	r1, [r1, #4]
 80082dc:	e7cc      	b.n	8008278 <_malloc_r+0x2c>
 80082de:	1cc4      	adds	r4, r0, #3
 80082e0:	f024 0403 	bic.w	r4, r4, #3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d005      	beq.n	80082f4 <_malloc_r+0xa8>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	4630      	mov	r0, r6
 80082ec:	f000 f948 	bl	8008580 <_sbrk_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d0cf      	beq.n	8008294 <_malloc_r+0x48>
 80082f4:	6025      	str	r5, [r4, #0]
 80082f6:	e7db      	b.n	80082b0 <_malloc_r+0x64>
 80082f8:	20000210 	.word	0x20000210
 80082fc:	20000214 	.word	0x20000214

08008300 <__sfputc_r>:
 8008300:	6893      	ldr	r3, [r2, #8]
 8008302:	3b01      	subs	r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	b410      	push	{r4}
 8008308:	6093      	str	r3, [r2, #8]
 800830a:	da08      	bge.n	800831e <__sfputc_r+0x1e>
 800830c:	6994      	ldr	r4, [r2, #24]
 800830e:	42a3      	cmp	r3, r4
 8008310:	db01      	blt.n	8008316 <__sfputc_r+0x16>
 8008312:	290a      	cmp	r1, #10
 8008314:	d103      	bne.n	800831e <__sfputc_r+0x1e>
 8008316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800831a:	f000 b985 	b.w	8008628 <__swbuf_r>
 800831e:	6813      	ldr	r3, [r2, #0]
 8008320:	1c58      	adds	r0, r3, #1
 8008322:	6010      	str	r0, [r2, #0]
 8008324:	7019      	strb	r1, [r3, #0]
 8008326:	4608      	mov	r0, r1
 8008328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800832c:	4770      	bx	lr

0800832e <__sfputs_r>:
 800832e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008330:	4606      	mov	r6, r0
 8008332:	460f      	mov	r7, r1
 8008334:	4614      	mov	r4, r2
 8008336:	18d5      	adds	r5, r2, r3
 8008338:	42ac      	cmp	r4, r5
 800833a:	d101      	bne.n	8008340 <__sfputs_r+0x12>
 800833c:	2000      	movs	r0, #0
 800833e:	e007      	b.n	8008350 <__sfputs_r+0x22>
 8008340:	463a      	mov	r2, r7
 8008342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ffda 	bl	8008300 <__sfputc_r>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d1f3      	bne.n	8008338 <__sfputs_r+0xa>
 8008350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008354 <_vfiprintf_r>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	460c      	mov	r4, r1
 800835a:	b09d      	sub	sp, #116	; 0x74
 800835c:	4617      	mov	r7, r2
 800835e:	461d      	mov	r5, r3
 8008360:	4606      	mov	r6, r0
 8008362:	b118      	cbz	r0, 800836c <_vfiprintf_r+0x18>
 8008364:	6983      	ldr	r3, [r0, #24]
 8008366:	b90b      	cbnz	r3, 800836c <_vfiprintf_r+0x18>
 8008368:	f7ff fb98 	bl	8007a9c <__sinit>
 800836c:	4b7c      	ldr	r3, [pc, #496]	; (8008560 <_vfiprintf_r+0x20c>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d158      	bne.n	8008424 <_vfiprintf_r+0xd0>
 8008372:	6874      	ldr	r4, [r6, #4]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	0718      	lsls	r0, r3, #28
 8008378:	d55e      	bpl.n	8008438 <_vfiprintf_r+0xe4>
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d05b      	beq.n	8008438 <_vfiprintf_r+0xe4>
 8008380:	2300      	movs	r3, #0
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	2320      	movs	r3, #32
 8008386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800838a:	2330      	movs	r3, #48	; 0x30
 800838c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008390:	9503      	str	r5, [sp, #12]
 8008392:	f04f 0b01 	mov.w	fp, #1
 8008396:	46b8      	mov	r8, r7
 8008398:	4645      	mov	r5, r8
 800839a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800839e:	b10b      	cbz	r3, 80083a4 <_vfiprintf_r+0x50>
 80083a0:	2b25      	cmp	r3, #37	; 0x25
 80083a2:	d154      	bne.n	800844e <_vfiprintf_r+0xfa>
 80083a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80083a8:	d00b      	beq.n	80083c2 <_vfiprintf_r+0x6e>
 80083aa:	4653      	mov	r3, sl
 80083ac:	463a      	mov	r2, r7
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7ff ffbc 	bl	800832e <__sfputs_r>
 80083b6:	3001      	adds	r0, #1
 80083b8:	f000 80c2 	beq.w	8008540 <_vfiprintf_r+0x1ec>
 80083bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083be:	4453      	add	r3, sl
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	f898 3000 	ldrb.w	r3, [r8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80ba 	beq.w	8008540 <_vfiprintf_r+0x1ec>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083de:	931a      	str	r3, [sp, #104]	; 0x68
 80083e0:	46a8      	mov	r8, r5
 80083e2:	2205      	movs	r2, #5
 80083e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80083e8:	485e      	ldr	r0, [pc, #376]	; (8008564 <_vfiprintf_r+0x210>)
 80083ea:	f7f7 fef9 	bl	80001e0 <memchr>
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	bb78      	cbnz	r0, 8008452 <_vfiprintf_r+0xfe>
 80083f2:	06d9      	lsls	r1, r3, #27
 80083f4:	bf44      	itt	mi
 80083f6:	2220      	movmi	r2, #32
 80083f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083fc:	071a      	lsls	r2, r3, #28
 80083fe:	bf44      	itt	mi
 8008400:	222b      	movmi	r2, #43	; 0x2b
 8008402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008406:	782a      	ldrb	r2, [r5, #0]
 8008408:	2a2a      	cmp	r2, #42	; 0x2a
 800840a:	d02a      	beq.n	8008462 <_vfiprintf_r+0x10e>
 800840c:	9a07      	ldr	r2, [sp, #28]
 800840e:	46a8      	mov	r8, r5
 8008410:	2000      	movs	r0, #0
 8008412:	250a      	movs	r5, #10
 8008414:	4641      	mov	r1, r8
 8008416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800841a:	3b30      	subs	r3, #48	; 0x30
 800841c:	2b09      	cmp	r3, #9
 800841e:	d969      	bls.n	80084f4 <_vfiprintf_r+0x1a0>
 8008420:	b360      	cbz	r0, 800847c <_vfiprintf_r+0x128>
 8008422:	e024      	b.n	800846e <_vfiprintf_r+0x11a>
 8008424:	4b50      	ldr	r3, [pc, #320]	; (8008568 <_vfiprintf_r+0x214>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d101      	bne.n	800842e <_vfiprintf_r+0xda>
 800842a:	68b4      	ldr	r4, [r6, #8]
 800842c:	e7a2      	b.n	8008374 <_vfiprintf_r+0x20>
 800842e:	4b4f      	ldr	r3, [pc, #316]	; (800856c <_vfiprintf_r+0x218>)
 8008430:	429c      	cmp	r4, r3
 8008432:	bf08      	it	eq
 8008434:	68f4      	ldreq	r4, [r6, #12]
 8008436:	e79d      	b.n	8008374 <_vfiprintf_r+0x20>
 8008438:	4621      	mov	r1, r4
 800843a:	4630      	mov	r0, r6
 800843c:	f000 f958 	bl	80086f0 <__swsetup_r>
 8008440:	2800      	cmp	r0, #0
 8008442:	d09d      	beq.n	8008380 <_vfiprintf_r+0x2c>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008448:	b01d      	add	sp, #116	; 0x74
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	46a8      	mov	r8, r5
 8008450:	e7a2      	b.n	8008398 <_vfiprintf_r+0x44>
 8008452:	4a44      	ldr	r2, [pc, #272]	; (8008564 <_vfiprintf_r+0x210>)
 8008454:	1a80      	subs	r0, r0, r2
 8008456:	fa0b f000 	lsl.w	r0, fp, r0
 800845a:	4318      	orrs	r0, r3
 800845c:	9004      	str	r0, [sp, #16]
 800845e:	4645      	mov	r5, r8
 8008460:	e7be      	b.n	80083e0 <_vfiprintf_r+0x8c>
 8008462:	9a03      	ldr	r2, [sp, #12]
 8008464:	1d11      	adds	r1, r2, #4
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	9103      	str	r1, [sp, #12]
 800846a:	2a00      	cmp	r2, #0
 800846c:	db01      	blt.n	8008472 <_vfiprintf_r+0x11e>
 800846e:	9207      	str	r2, [sp, #28]
 8008470:	e004      	b.n	800847c <_vfiprintf_r+0x128>
 8008472:	4252      	negs	r2, r2
 8008474:	f043 0302 	orr.w	r3, r3, #2
 8008478:	9207      	str	r2, [sp, #28]
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	f898 3000 	ldrb.w	r3, [r8]
 8008480:	2b2e      	cmp	r3, #46	; 0x2e
 8008482:	d10e      	bne.n	80084a2 <_vfiprintf_r+0x14e>
 8008484:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008488:	2b2a      	cmp	r3, #42	; 0x2a
 800848a:	d138      	bne.n	80084fe <_vfiprintf_r+0x1aa>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9203      	str	r2, [sp, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfb8      	it	lt
 8008498:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800849c:	f108 0802 	add.w	r8, r8, #2
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	4d33      	ldr	r5, [pc, #204]	; (8008570 <_vfiprintf_r+0x21c>)
 80084a4:	f898 1000 	ldrb.w	r1, [r8]
 80084a8:	2203      	movs	r2, #3
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7f7 fe98 	bl	80001e0 <memchr>
 80084b0:	b140      	cbz	r0, 80084c4 <_vfiprintf_r+0x170>
 80084b2:	2340      	movs	r3, #64	; 0x40
 80084b4:	1b40      	subs	r0, r0, r5
 80084b6:	fa03 f000 	lsl.w	r0, r3, r0
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	4303      	orrs	r3, r0
 80084be:	f108 0801 	add.w	r8, r8, #1
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	f898 1000 	ldrb.w	r1, [r8]
 80084c8:	482a      	ldr	r0, [pc, #168]	; (8008574 <_vfiprintf_r+0x220>)
 80084ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ce:	2206      	movs	r2, #6
 80084d0:	f108 0701 	add.w	r7, r8, #1
 80084d4:	f7f7 fe84 	bl	80001e0 <memchr>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d037      	beq.n	800854c <_vfiprintf_r+0x1f8>
 80084dc:	4b26      	ldr	r3, [pc, #152]	; (8008578 <_vfiprintf_r+0x224>)
 80084de:	bb1b      	cbnz	r3, 8008528 <_vfiprintf_r+0x1d4>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	3307      	adds	r3, #7
 80084e4:	f023 0307 	bic.w	r3, r3, #7
 80084e8:	3308      	adds	r3, #8
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ee:	444b      	add	r3, r9
 80084f0:	9309      	str	r3, [sp, #36]	; 0x24
 80084f2:	e750      	b.n	8008396 <_vfiprintf_r+0x42>
 80084f4:	fb05 3202 	mla	r2, r5, r2, r3
 80084f8:	2001      	movs	r0, #1
 80084fa:	4688      	mov	r8, r1
 80084fc:	e78a      	b.n	8008414 <_vfiprintf_r+0xc0>
 80084fe:	2300      	movs	r3, #0
 8008500:	f108 0801 	add.w	r8, r8, #1
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	4619      	mov	r1, r3
 8008508:	250a      	movs	r5, #10
 800850a:	4640      	mov	r0, r8
 800850c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008510:	3a30      	subs	r2, #48	; 0x30
 8008512:	2a09      	cmp	r2, #9
 8008514:	d903      	bls.n	800851e <_vfiprintf_r+0x1ca>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0c3      	beq.n	80084a2 <_vfiprintf_r+0x14e>
 800851a:	9105      	str	r1, [sp, #20]
 800851c:	e7c1      	b.n	80084a2 <_vfiprintf_r+0x14e>
 800851e:	fb05 2101 	mla	r1, r5, r1, r2
 8008522:	2301      	movs	r3, #1
 8008524:	4680      	mov	r8, r0
 8008526:	e7f0      	b.n	800850a <_vfiprintf_r+0x1b6>
 8008528:	ab03      	add	r3, sp, #12
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4622      	mov	r2, r4
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <_vfiprintf_r+0x228>)
 8008530:	a904      	add	r1, sp, #16
 8008532:	4630      	mov	r0, r6
 8008534:	f7fe f842 	bl	80065bc <_printf_float>
 8008538:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800853c:	4681      	mov	r9, r0
 800853e:	d1d5      	bne.n	80084ec <_vfiprintf_r+0x198>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	065b      	lsls	r3, r3, #25
 8008544:	f53f af7e 	bmi.w	8008444 <_vfiprintf_r+0xf0>
 8008548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800854a:	e77d      	b.n	8008448 <_vfiprintf_r+0xf4>
 800854c:	ab03      	add	r3, sp, #12
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4622      	mov	r2, r4
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <_vfiprintf_r+0x228>)
 8008554:	a904      	add	r1, sp, #16
 8008556:	4630      	mov	r0, r6
 8008558:	f7fe faec 	bl	8006b34 <_printf_i>
 800855c:	e7ec      	b.n	8008538 <_vfiprintf_r+0x1e4>
 800855e:	bf00      	nop
 8008560:	0800943c 	.word	0x0800943c
 8008564:	0800957c 	.word	0x0800957c
 8008568:	0800945c 	.word	0x0800945c
 800856c:	0800941c 	.word	0x0800941c
 8008570:	08009582 	.word	0x08009582
 8008574:	08009586 	.word	0x08009586
 8008578:	080065bd 	.word	0x080065bd
 800857c:	0800832f 	.word	0x0800832f

08008580 <_sbrk_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4c06      	ldr	r4, [pc, #24]	; (800859c <_sbrk_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4605      	mov	r5, r0
 8008588:	4608      	mov	r0, r1
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	f7fb fe8c 	bl	80042a8 <_sbrk>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_sbrk_r+0x1a>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	b103      	cbz	r3, 800859a <_sbrk_r+0x1a>
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000228 	.word	0x20000228

080085a0 <__sread>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	f000 fa5a 	bl	8008a60 <_read_r>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	bfab      	itete	ge
 80085b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085b2:	89a3      	ldrhlt	r3, [r4, #12]
 80085b4:	181b      	addge	r3, r3, r0
 80085b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085ba:	bfac      	ite	ge
 80085bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085be:	81a3      	strhlt	r3, [r4, #12]
 80085c0:	bd10      	pop	{r4, pc}

080085c2 <__swrite>:
 80085c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	461f      	mov	r7, r3
 80085c8:	898b      	ldrh	r3, [r1, #12]
 80085ca:	05db      	lsls	r3, r3, #23
 80085cc:	4605      	mov	r5, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	4616      	mov	r6, r2
 80085d2:	d505      	bpl.n	80085e0 <__swrite+0x1e>
 80085d4:	2302      	movs	r3, #2
 80085d6:	2200      	movs	r2, #0
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	f000 f9b6 	bl	800894c <_lseek_r>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	4632      	mov	r2, r6
 80085ee:	463b      	mov	r3, r7
 80085f0:	4628      	mov	r0, r5
 80085f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	f000 b869 	b.w	80086cc <_write_r>

080085fa <__sseek>:
 80085fa:	b510      	push	{r4, lr}
 80085fc:	460c      	mov	r4, r1
 80085fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008602:	f000 f9a3 	bl	800894c <_lseek_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	bf15      	itete	ne
 800860c:	6560      	strne	r0, [r4, #84]	; 0x54
 800860e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008616:	81a3      	strheq	r3, [r4, #12]
 8008618:	bf18      	it	ne
 800861a:	81a3      	strhne	r3, [r4, #12]
 800861c:	bd10      	pop	{r4, pc}

0800861e <__sclose>:
 800861e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008622:	f000 b8d3 	b.w	80087cc <_close_r>
	...

08008628 <__swbuf_r>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4614      	mov	r4, r2
 800862e:	4605      	mov	r5, r0
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x12>
 8008632:	6983      	ldr	r3, [r0, #24]
 8008634:	b90b      	cbnz	r3, 800863a <__swbuf_r+0x12>
 8008636:	f7ff fa31 	bl	8007a9c <__sinit>
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <__swbuf_r+0x98>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d12a      	bne.n	8008696 <__swbuf_r+0x6e>
 8008640:	686c      	ldr	r4, [r5, #4]
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	071a      	lsls	r2, r3, #28
 800864a:	d52e      	bpl.n	80086aa <__swbuf_r+0x82>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b363      	cbz	r3, 80086aa <__swbuf_r+0x82>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	1ac0      	subs	r0, r0, r3
 8008656:	6963      	ldr	r3, [r4, #20]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	4283      	cmp	r3, r0
 800865c:	4637      	mov	r7, r6
 800865e:	dc04      	bgt.n	800866a <__swbuf_r+0x42>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 f948 	bl	80088f8 <_fflush_r>
 8008668:	bb28      	cbnz	r0, 80086b6 <__swbuf_r+0x8e>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	701e      	strb	r6, [r3, #0]
 8008678:	6963      	ldr	r3, [r4, #20]
 800867a:	3001      	adds	r0, #1
 800867c:	4283      	cmp	r3, r0
 800867e:	d004      	beq.n	800868a <__swbuf_r+0x62>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d519      	bpl.n	80086ba <__swbuf_r+0x92>
 8008686:	2e0a      	cmp	r6, #10
 8008688:	d117      	bne.n	80086ba <__swbuf_r+0x92>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 f933 	bl	80088f8 <_fflush_r>
 8008692:	b190      	cbz	r0, 80086ba <__swbuf_r+0x92>
 8008694:	e00f      	b.n	80086b6 <__swbuf_r+0x8e>
 8008696:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <__swbuf_r+0x9c>)
 8008698:	429c      	cmp	r4, r3
 800869a:	d101      	bne.n	80086a0 <__swbuf_r+0x78>
 800869c:	68ac      	ldr	r4, [r5, #8]
 800869e:	e7d0      	b.n	8008642 <__swbuf_r+0x1a>
 80086a0:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <__swbuf_r+0xa0>)
 80086a2:	429c      	cmp	r4, r3
 80086a4:	bf08      	it	eq
 80086a6:	68ec      	ldreq	r4, [r5, #12]
 80086a8:	e7cb      	b.n	8008642 <__swbuf_r+0x1a>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 f81f 	bl	80086f0 <__swsetup_r>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0cc      	beq.n	8008650 <__swbuf_r+0x28>
 80086b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086ba:	4638      	mov	r0, r7
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	bf00      	nop
 80086c0:	0800943c 	.word	0x0800943c
 80086c4:	0800945c 	.word	0x0800945c
 80086c8:	0800941c 	.word	0x0800941c

080086cc <_write_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4c07      	ldr	r4, [pc, #28]	; (80086ec <_write_r+0x20>)
 80086d0:	4605      	mov	r5, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	4611      	mov	r1, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	6022      	str	r2, [r4, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7fb fd93 	bl	8004206 <_write>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_write_r+0x1e>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_write_r+0x1e>
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000228 	.word	0x20000228

080086f0 <__swsetup_r>:
 80086f0:	4b32      	ldr	r3, [pc, #200]	; (80087bc <__swsetup_r+0xcc>)
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	681d      	ldr	r5, [r3, #0]
 80086f6:	4606      	mov	r6, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	b125      	cbz	r5, 8008706 <__swsetup_r+0x16>
 80086fc:	69ab      	ldr	r3, [r5, #24]
 80086fe:	b913      	cbnz	r3, 8008706 <__swsetup_r+0x16>
 8008700:	4628      	mov	r0, r5
 8008702:	f7ff f9cb 	bl	8007a9c <__sinit>
 8008706:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <__swsetup_r+0xd0>)
 8008708:	429c      	cmp	r4, r3
 800870a:	d10f      	bne.n	800872c <__swsetup_r+0x3c>
 800870c:	686c      	ldr	r4, [r5, #4]
 800870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008712:	b29a      	uxth	r2, r3
 8008714:	0715      	lsls	r5, r2, #28
 8008716:	d42c      	bmi.n	8008772 <__swsetup_r+0x82>
 8008718:	06d0      	lsls	r0, r2, #27
 800871a:	d411      	bmi.n	8008740 <__swsetup_r+0x50>
 800871c:	2209      	movs	r2, #9
 800871e:	6032      	str	r2, [r6, #0]
 8008720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800872a:	e03e      	b.n	80087aa <__swsetup_r+0xba>
 800872c:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <__swsetup_r+0xd4>)
 800872e:	429c      	cmp	r4, r3
 8008730:	d101      	bne.n	8008736 <__swsetup_r+0x46>
 8008732:	68ac      	ldr	r4, [r5, #8]
 8008734:	e7eb      	b.n	800870e <__swsetup_r+0x1e>
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <__swsetup_r+0xd8>)
 8008738:	429c      	cmp	r4, r3
 800873a:	bf08      	it	eq
 800873c:	68ec      	ldreq	r4, [r5, #12]
 800873e:	e7e6      	b.n	800870e <__swsetup_r+0x1e>
 8008740:	0751      	lsls	r1, r2, #29
 8008742:	d512      	bpl.n	800876a <__swsetup_r+0x7a>
 8008744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008746:	b141      	cbz	r1, 800875a <__swsetup_r+0x6a>
 8008748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800874c:	4299      	cmp	r1, r3
 800874e:	d002      	beq.n	8008756 <__swsetup_r+0x66>
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff fd2d 	bl	80081b0 <_free_r>
 8008756:	2300      	movs	r3, #0
 8008758:	6363      	str	r3, [r4, #52]	; 0x34
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	2300      	movs	r3, #0
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f043 0308 	orr.w	r3, r3, #8
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	b94b      	cbnz	r3, 800878a <__swsetup_r+0x9a>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800877c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008780:	d003      	beq.n	800878a <__swsetup_r+0x9a>
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f917 	bl	80089b8 <__smakebuf_r>
 800878a:	89a2      	ldrh	r2, [r4, #12]
 800878c:	f012 0301 	ands.w	r3, r2, #1
 8008790:	d00c      	beq.n	80087ac <__swsetup_r+0xbc>
 8008792:	2300      	movs	r3, #0
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6963      	ldr	r3, [r4, #20]
 8008798:	425b      	negs	r3, r3
 800879a:	61a3      	str	r3, [r4, #24]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b953      	cbnz	r3, 80087b6 <__swsetup_r+0xc6>
 80087a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087a8:	d1ba      	bne.n	8008720 <__swsetup_r+0x30>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	0792      	lsls	r2, r2, #30
 80087ae:	bf58      	it	pl
 80087b0:	6963      	ldrpl	r3, [r4, #20]
 80087b2:	60a3      	str	r3, [r4, #8]
 80087b4:	e7f2      	b.n	800879c <__swsetup_r+0xac>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e7f7      	b.n	80087aa <__swsetup_r+0xba>
 80087ba:	bf00      	nop
 80087bc:	20000008 	.word	0x20000008
 80087c0:	0800943c 	.word	0x0800943c
 80087c4:	0800945c 	.word	0x0800945c
 80087c8:	0800941c 	.word	0x0800941c

080087cc <_close_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4c06      	ldr	r4, [pc, #24]	; (80087e8 <_close_r+0x1c>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4605      	mov	r5, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	f7fb fd31 	bl	800423e <_close>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_close_r+0x1a>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_close_r+0x1a>
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20000228 	.word	0x20000228

080087ec <__sflush_r>:
 80087ec:	898a      	ldrh	r2, [r1, #12]
 80087ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	4605      	mov	r5, r0
 80087f4:	0710      	lsls	r0, r2, #28
 80087f6:	460c      	mov	r4, r1
 80087f8:	d458      	bmi.n	80088ac <__sflush_r+0xc0>
 80087fa:	684b      	ldr	r3, [r1, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dc05      	bgt.n	800880c <__sflush_r+0x20>
 8008800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc02      	bgt.n	800880c <__sflush_r+0x20>
 8008806:	2000      	movs	r0, #0
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800880e:	2e00      	cmp	r6, #0
 8008810:	d0f9      	beq.n	8008806 <__sflush_r+0x1a>
 8008812:	2300      	movs	r3, #0
 8008814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008818:	682f      	ldr	r7, [r5, #0]
 800881a:	6a21      	ldr	r1, [r4, #32]
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	d032      	beq.n	8008886 <__sflush_r+0x9a>
 8008820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	075a      	lsls	r2, r3, #29
 8008826:	d505      	bpl.n	8008834 <__sflush_r+0x48>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	1ac0      	subs	r0, r0, r3
 800882c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800882e:	b10b      	cbz	r3, 8008834 <__sflush_r+0x48>
 8008830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008832:	1ac0      	subs	r0, r0, r3
 8008834:	2300      	movs	r3, #0
 8008836:	4602      	mov	r2, r0
 8008838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800883a:	6a21      	ldr	r1, [r4, #32]
 800883c:	4628      	mov	r0, r5
 800883e:	47b0      	blx	r6
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	d106      	bne.n	8008854 <__sflush_r+0x68>
 8008846:	6829      	ldr	r1, [r5, #0]
 8008848:	291d      	cmp	r1, #29
 800884a:	d848      	bhi.n	80088de <__sflush_r+0xf2>
 800884c:	4a29      	ldr	r2, [pc, #164]	; (80088f4 <__sflush_r+0x108>)
 800884e:	40ca      	lsrs	r2, r1
 8008850:	07d6      	lsls	r6, r2, #31
 8008852:	d544      	bpl.n	80088de <__sflush_r+0xf2>
 8008854:	2200      	movs	r2, #0
 8008856:	6062      	str	r2, [r4, #4]
 8008858:	04d9      	lsls	r1, r3, #19
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	d504      	bpl.n	800886a <__sflush_r+0x7e>
 8008860:	1c42      	adds	r2, r0, #1
 8008862:	d101      	bne.n	8008868 <__sflush_r+0x7c>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b903      	cbnz	r3, 800886a <__sflush_r+0x7e>
 8008868:	6560      	str	r0, [r4, #84]	; 0x54
 800886a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800886c:	602f      	str	r7, [r5, #0]
 800886e:	2900      	cmp	r1, #0
 8008870:	d0c9      	beq.n	8008806 <__sflush_r+0x1a>
 8008872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008876:	4299      	cmp	r1, r3
 8008878:	d002      	beq.n	8008880 <__sflush_r+0x94>
 800887a:	4628      	mov	r0, r5
 800887c:	f7ff fc98 	bl	80081b0 <_free_r>
 8008880:	2000      	movs	r0, #0
 8008882:	6360      	str	r0, [r4, #52]	; 0x34
 8008884:	e7c0      	b.n	8008808 <__sflush_r+0x1c>
 8008886:	2301      	movs	r3, #1
 8008888:	4628      	mov	r0, r5
 800888a:	47b0      	blx	r6
 800888c:	1c41      	adds	r1, r0, #1
 800888e:	d1c8      	bne.n	8008822 <__sflush_r+0x36>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0c5      	beq.n	8008822 <__sflush_r+0x36>
 8008896:	2b1d      	cmp	r3, #29
 8008898:	d001      	beq.n	800889e <__sflush_r+0xb2>
 800889a:	2b16      	cmp	r3, #22
 800889c:	d101      	bne.n	80088a2 <__sflush_r+0xb6>
 800889e:	602f      	str	r7, [r5, #0]
 80088a0:	e7b1      	b.n	8008806 <__sflush_r+0x1a>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a8:	81a3      	strh	r3, [r4, #12]
 80088aa:	e7ad      	b.n	8008808 <__sflush_r+0x1c>
 80088ac:	690f      	ldr	r7, [r1, #16]
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	d0a9      	beq.n	8008806 <__sflush_r+0x1a>
 80088b2:	0793      	lsls	r3, r2, #30
 80088b4:	680e      	ldr	r6, [r1, #0]
 80088b6:	bf08      	it	eq
 80088b8:	694b      	ldreq	r3, [r1, #20]
 80088ba:	600f      	str	r7, [r1, #0]
 80088bc:	bf18      	it	ne
 80088be:	2300      	movne	r3, #0
 80088c0:	eba6 0807 	sub.w	r8, r6, r7
 80088c4:	608b      	str	r3, [r1, #8]
 80088c6:	f1b8 0f00 	cmp.w	r8, #0
 80088ca:	dd9c      	ble.n	8008806 <__sflush_r+0x1a>
 80088cc:	4643      	mov	r3, r8
 80088ce:	463a      	mov	r2, r7
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b0      	blx	r6
 80088d8:	2800      	cmp	r0, #0
 80088da:	dc06      	bgt.n	80088ea <__sflush_r+0xfe>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e8:	e78e      	b.n	8008808 <__sflush_r+0x1c>
 80088ea:	4407      	add	r7, r0
 80088ec:	eba8 0800 	sub.w	r8, r8, r0
 80088f0:	e7e9      	b.n	80088c6 <__sflush_r+0xda>
 80088f2:	bf00      	nop
 80088f4:	20400001 	.word	0x20400001

080088f8 <_fflush_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	690b      	ldr	r3, [r1, #16]
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b1db      	cbz	r3, 800893a <_fflush_r+0x42>
 8008902:	b118      	cbz	r0, 800890c <_fflush_r+0x14>
 8008904:	6983      	ldr	r3, [r0, #24]
 8008906:	b90b      	cbnz	r3, 800890c <_fflush_r+0x14>
 8008908:	f7ff f8c8 	bl	8007a9c <__sinit>
 800890c:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <_fflush_r+0x48>)
 800890e:	429c      	cmp	r4, r3
 8008910:	d109      	bne.n	8008926 <_fflush_r+0x2e>
 8008912:	686c      	ldr	r4, [r5, #4]
 8008914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008918:	b17b      	cbz	r3, 800893a <_fflush_r+0x42>
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008922:	f7ff bf63 	b.w	80087ec <__sflush_r>
 8008926:	4b07      	ldr	r3, [pc, #28]	; (8008944 <_fflush_r+0x4c>)
 8008928:	429c      	cmp	r4, r3
 800892a:	d101      	bne.n	8008930 <_fflush_r+0x38>
 800892c:	68ac      	ldr	r4, [r5, #8]
 800892e:	e7f1      	b.n	8008914 <_fflush_r+0x1c>
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <_fflush_r+0x50>)
 8008932:	429c      	cmp	r4, r3
 8008934:	bf08      	it	eq
 8008936:	68ec      	ldreq	r4, [r5, #12]
 8008938:	e7ec      	b.n	8008914 <_fflush_r+0x1c>
 800893a:	2000      	movs	r0, #0
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	0800943c 	.word	0x0800943c
 8008944:	0800945c 	.word	0x0800945c
 8008948:	0800941c 	.word	0x0800941c

0800894c <_lseek_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4c07      	ldr	r4, [pc, #28]	; (800896c <_lseek_r+0x20>)
 8008950:	4605      	mov	r5, r0
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	2200      	movs	r2, #0
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	f7fb fc96 	bl	800428c <_lseek>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_lseek_r+0x1e>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	b103      	cbz	r3, 800896a <_lseek_r+0x1e>
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	20000228 	.word	0x20000228

08008970 <__swhatbuf_r>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	460e      	mov	r6, r1
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2900      	cmp	r1, #0
 800897a:	b096      	sub	sp, #88	; 0x58
 800897c:	4614      	mov	r4, r2
 800897e:	461d      	mov	r5, r3
 8008980:	da07      	bge.n	8008992 <__swhatbuf_r+0x22>
 8008982:	2300      	movs	r3, #0
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	89b3      	ldrh	r3, [r6, #12]
 8008988:	061a      	lsls	r2, r3, #24
 800898a:	d410      	bmi.n	80089ae <__swhatbuf_r+0x3e>
 800898c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008990:	e00e      	b.n	80089b0 <__swhatbuf_r+0x40>
 8008992:	466a      	mov	r2, sp
 8008994:	f000 f884 	bl	8008aa0 <_fstat_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	dbf2      	blt.n	8008982 <__swhatbuf_r+0x12>
 800899c:	9a01      	ldr	r2, [sp, #4]
 800899e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089a6:	425a      	negs	r2, r3
 80089a8:	415a      	adcs	r2, r3
 80089aa:	602a      	str	r2, [r5, #0]
 80089ac:	e7ee      	b.n	800898c <__swhatbuf_r+0x1c>
 80089ae:	2340      	movs	r3, #64	; 0x40
 80089b0:	2000      	movs	r0, #0
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	b016      	add	sp, #88	; 0x58
 80089b6:	bd70      	pop	{r4, r5, r6, pc}

080089b8 <__smakebuf_r>:
 80089b8:	898b      	ldrh	r3, [r1, #12]
 80089ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089bc:	079d      	lsls	r5, r3, #30
 80089be:	4606      	mov	r6, r0
 80089c0:	460c      	mov	r4, r1
 80089c2:	d507      	bpl.n	80089d4 <__smakebuf_r+0x1c>
 80089c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	2301      	movs	r3, #1
 80089ce:	6163      	str	r3, [r4, #20]
 80089d0:	b002      	add	sp, #8
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	ab01      	add	r3, sp, #4
 80089d6:	466a      	mov	r2, sp
 80089d8:	f7ff ffca 	bl	8008970 <__swhatbuf_r>
 80089dc:	9900      	ldr	r1, [sp, #0]
 80089de:	4605      	mov	r5, r0
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fc33 	bl	800824c <_malloc_r>
 80089e6:	b948      	cbnz	r0, 80089fc <__smakebuf_r+0x44>
 80089e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ec:	059a      	lsls	r2, r3, #22
 80089ee:	d4ef      	bmi.n	80089d0 <__smakebuf_r+0x18>
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	f043 0302 	orr.w	r3, r3, #2
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	e7e3      	b.n	80089c4 <__smakebuf_r+0xc>
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <__smakebuf_r+0x7c>)
 80089fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	6020      	str	r0, [r4, #0]
 8008a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	6163      	str	r3, [r4, #20]
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	6120      	str	r0, [r4, #16]
 8008a12:	b15b      	cbz	r3, 8008a2c <__smakebuf_r+0x74>
 8008a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f853 	bl	8008ac4 <_isatty_r>
 8008a1e:	b128      	cbz	r0, 8008a2c <__smakebuf_r+0x74>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	431d      	orrs	r5, r3
 8008a30:	81a5      	strh	r5, [r4, #12]
 8008a32:	e7cd      	b.n	80089d0 <__smakebuf_r+0x18>
 8008a34:	08007a65 	.word	0x08007a65

08008a38 <__ascii_mbtowc>:
 8008a38:	b082      	sub	sp, #8
 8008a3a:	b901      	cbnz	r1, 8008a3e <__ascii_mbtowc+0x6>
 8008a3c:	a901      	add	r1, sp, #4
 8008a3e:	b142      	cbz	r2, 8008a52 <__ascii_mbtowc+0x1a>
 8008a40:	b14b      	cbz	r3, 8008a56 <__ascii_mbtowc+0x1e>
 8008a42:	7813      	ldrb	r3, [r2, #0]
 8008a44:	600b      	str	r3, [r1, #0]
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	1c10      	adds	r0, r2, #0
 8008a4a:	bf18      	it	ne
 8008a4c:	2001      	movne	r0, #1
 8008a4e:	b002      	add	sp, #8
 8008a50:	4770      	bx	lr
 8008a52:	4610      	mov	r0, r2
 8008a54:	e7fb      	b.n	8008a4e <__ascii_mbtowc+0x16>
 8008a56:	f06f 0001 	mvn.w	r0, #1
 8008a5a:	e7f8      	b.n	8008a4e <__ascii_mbtowc+0x16>

08008a5c <__malloc_lock>:
 8008a5c:	4770      	bx	lr

08008a5e <__malloc_unlock>:
 8008a5e:	4770      	bx	lr

08008a60 <_read_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4c07      	ldr	r4, [pc, #28]	; (8008a80 <_read_r+0x20>)
 8008a64:	4605      	mov	r5, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7fb fbac 	bl	80041cc <_read>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_read_r+0x1e>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_read_r+0x1e>
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	20000228 	.word	0x20000228

08008a84 <__ascii_wctomb>:
 8008a84:	b149      	cbz	r1, 8008a9a <__ascii_wctomb+0x16>
 8008a86:	2aff      	cmp	r2, #255	; 0xff
 8008a88:	bf85      	ittet	hi
 8008a8a:	238a      	movhi	r3, #138	; 0x8a
 8008a8c:	6003      	strhi	r3, [r0, #0]
 8008a8e:	700a      	strbls	r2, [r1, #0]
 8008a90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a94:	bf98      	it	ls
 8008a96:	2001      	movls	r0, #1
 8008a98:	4770      	bx	lr
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	4770      	bx	lr
	...

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4c07      	ldr	r4, [pc, #28]	; (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	f7fb fbd2 	bl	8004256 <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000228 	.word	0x20000228

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4c06      	ldr	r4, [pc, #24]	; (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4605      	mov	r5, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	f7fb fbd1 	bl	8004276 <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20000228 	.word	0x20000228

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
